[
  {
    "sha": "b28e8c074cdb6a692fd697b082e897ce5e6c83da",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/AcceptanceTests.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/AcceptanceTests.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/AcceptanceTests.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/AcceptanceTests.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -7,17 +7,16 @@\n  */\n package org.opensmartgridplatform.cucumber.platform.smartmetering;\n \n-import org.junit.runner.RunWith;\n-\n import io.cucumber.junit.Cucumber;\n import io.cucumber.junit.CucumberOptions;\n import io.cucumber.junit.CucumberOptions.SnippetType;\n+import org.junit.runner.RunWith;\n \n @RunWith(Cucumber.class)\n @CucumberOptions(\n         features = { \"classpath:features/functional-exceptions\", \"classpath:features/osgp-adapter-ws-core\",\n                 \"classpath:features/osgp-adapter-ws-smartmetering\" },\n-        tags = { \"not @Skip\", \"not @NightlyBuildOnly\" },\n+        tags = { \"@RecoverKeys\" },\n         glue = { \"classpath:org.opensmartgridplatform.cucumber.platform.glue\",\n                 \"classpath:org.opensmartgridplatform.cucumber.platform.common.glue\",\n                 \"classpath:org.opensmartgridplatform.cucumber.platform.smartmetering.glue\" },"
  },
  {
    "sha": "83416819bb345066967105ebd6df65691d6300e9",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/builders/entities/SecretBuilder.java",
    "status": "modified",
    "additions": 69,
    "deletions": 32,
    "changes": 101,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/builders/entities/SecretBuilder.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/builders/entities/SecretBuilder.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/builders/entities/SecretBuilder.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -1,14 +1,16 @@\n /**\n  * Copyright 2016 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.cucumber.platform.smartmetering.builders.entities;\n \n import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n \n+import java.util.Date;\n import java.util.Map;\n \n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n@@ -17,66 +19,100 @@\n import org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringDefaults;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretStatus;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n \n public class SecretBuilder implements CucumberBuilder<DbEncryptedSecret> {\n \n     private boolean builderEnabled = false;\n \n-    private SecurityKeyType securityKeyType = null;\n+    private SecretType secretType;\n     private String key = PlatformSmartmeteringDefaults.SECURITY_KEY_A_DB;\n+    private SecretStatus status;\n+    private String deviceIdentification;\n+    private Date creationTime;\n+    private DbEncryptionKeyReference encryptionKeyReference;\n \n-    private DlmsDevice dlmsDevice;\n+    public SecretBuilder withSecretType(final SecretType secretType) {\n+        this.secretType = secretType;\n+        return this;\n+    }\n \n-    public SecretBuilder setSecurityKeyType(final SecurityKeyType securityKeyType) {\n-        this.securityKeyType = securityKeyType;\n+    public SecretType getSecretType() {\n+        return this.secretType;\n+    }\n+\n+    public SecretBuilder withSecurityKeyType(final SecurityKeyType securityKeyType) {\n+        this.secretType = SecretType.valueOf(securityKeyType.toSecretType().value());\n         return this;\n     }\n \n     public SecurityKeyType getSecurityKeyType() {\n-        return this.securityKeyType;\n+        return SecurityKeyType.fromSecretType(\n+                org.opensmartgridplatform.ws.schema.core.secret.management.SecretType.valueOf(this.secretType.name()));\n     }\n \n-    public SecretBuilder setKey(final String key) {\n+    public SecretBuilder withKey(final String key) {\n         this.key = key;\n         return this;\n     }\n \n-    public SecretBuilder setDlmsDevice(final DlmsDevice dlmsDevice) {\n-        this.dlmsDevice = dlmsDevice;\n+    public SecretBuilder withDlmsDevice(final DlmsDevice dlmsDevice) {\n+        this.deviceIdentification = dlmsDevice.getDeviceIdentification();\n+        return this;\n+    }\n+\n+    public SecretBuilder withDeviceIdentification(final String deviceIdentification) {\n+        this.deviceIdentification = deviceIdentification;\n+        return this;\n+    }\n+\n+    public SecretBuilder withSecretStatus(final SecretStatus status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    public SecretBuilder withCreationTime(final Date creationTime) {\n+        this.creationTime = creationTime;\n+        return this;\n+    }\n+\n+    public SecretBuilder withEncryptionKeyReference(final DbEncryptionKeyReference encryptionKeyReference) {\n+        this.encryptionKeyReference = encryptionKeyReference;\n         return this;\n     }\n \n     @Override\n     public SecretBuilder withSettings(final Map<String, String> inputSettings) {\n-        if (SecurityKeyType.E_METER_AUTHENTICATION == this.securityKeyType\n-                && inputSettings.containsKey(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY)) {\n-            this.setKey(getString(inputSettings, PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY));\n+        if (SecurityKeyType.E_METER_AUTHENTICATION == this.getSecurityKeyType() && inputSettings\n+                .containsKey(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY)) {\n+            this.withKey(getString(inputSettings, PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY));\n         }\n \n-        if (SecurityKeyType.E_METER_MASTER == this.securityKeyType\n-                && inputSettings.containsKey(PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY)) {\n-            this.setKey(getString(inputSettings, PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY));\n+        if (SecurityKeyType.E_METER_MASTER == this.getSecurityKeyType() && inputSettings\n+                .containsKey(PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY)) {\n+            this.withKey(getString(inputSettings, PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY));\n         }\n \n-        if (SecurityKeyType.E_METER_ENCRYPTION == this.securityKeyType\n-                && inputSettings.containsKey(PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY)) {\n-            this.setKey(getString(inputSettings, PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY));\n+        if (SecurityKeyType.E_METER_ENCRYPTION == this.getSecurityKeyType() && inputSettings\n+                .containsKey(PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY)) {\n+            this.withKey(getString(inputSettings, PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY));\n         }\n \n-        if (SecurityKeyType.G_METER_MASTER == this.securityKeyType\n-                && inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_DEFAULT_KEY)) {\n-            this.setKey(getString(inputSettings, PlatformSmartmeteringKeys.MBUS_DEFAULT_KEY));\n+        if (SecurityKeyType.G_METER_MASTER == this.getSecurityKeyType() && inputSettings\n+                .containsKey(PlatformSmartmeteringKeys.MBUS_DEFAULT_KEY)) {\n+            this.withKey(getString(inputSettings, PlatformSmartmeteringKeys.MBUS_DEFAULT_KEY));\n         }\n \n-        if (SecurityKeyType.G_METER_ENCRYPTION == this.securityKeyType\n-                && inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n-            this.setKey(getString(inputSettings, PlatformSmartmeteringKeys.MBUS_USER_KEY));\n+        if (SecurityKeyType.G_METER_ENCRYPTION == this.getSecurityKeyType() && inputSettings\n+                .containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n+            this.withKey(getString(inputSettings, PlatformSmartmeteringKeys.MBUS_USER_KEY));\n         }\n \n-        if (SecurityKeyType.PASSWORD == this.securityKeyType\n-                && inputSettings.containsKey(PlatformSmartmeteringKeys.PASSWORD)) {\n-            this.setKey(getString(inputSettings, PlatformSmartmeteringKeys.PASSWORD));\n+        if (SecurityKeyType.PASSWORD == this.getSecurityKeyType() && inputSettings\n+                .containsKey(PlatformSmartmeteringKeys.PASSWORD)) {\n+            this.withKey(getString(inputSettings, PlatformSmartmeteringKeys.PASSWORD));\n         }\n \n         return this;\n@@ -85,11 +121,12 @@ public SecretBuilder withSettings(final Map<String, String> inputSettings) {\n     @Override\n     public DbEncryptedSecret build() {\n         final DbEncryptedSecret securityKey = new DbEncryptedSecret();\n-        if(this.dlmsDevice!=null) {\n-            securityKey.setDeviceIdentification(this.dlmsDevice.getDeviceIdentification());\n-        }\n-        securityKey.setSecretType(SecretType.valueOf(this.securityKeyType.toSecretType().value()));\n+        securityKey.setDeviceIdentification(this.deviceIdentification);\n+        securityKey.setSecretType(this.secretType);\n         securityKey.setEncodedSecret(this.key);\n+        securityKey.setSecretStatus(this.status == null ? SecretStatus.ACTIVE : this.status);\n+        securityKey.setCreationTime(this.creationTime == null ? new Date() : this.creationTime);\n+        securityKey.setEncryptionKeyReference(this.encryptionKeyReference);\n         return securityKey;\n     }\n "
  },
  {
    "sha": "b2e6f4b2117c3f7dbe6e6fb6abe69b1b6570b378",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java",
    "status": "modified",
    "additions": 97,
    "deletions": 29,
    "changes": 126,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -19,6 +19,8 @@\n import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getShort;\n import static org.opensmartgridplatform.cucumber.platform.PlatformDefaults.SMART_METER_E;\n import static org.opensmartgridplatform.cucumber.platform.PlatformDefaults.SMART_METER_G;\n+import static org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY;\n+import static org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY;\n import static org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys.MBUS_DEFAULT_KEY;\n import static org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys.MBUS_USER_KEY;\n import static org.opensmartgridplatform.secretmanagement.application.domain.SecretType.E_METER_AUTHENTICATION_KEY;\n@@ -28,14 +30,17 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.stream.Collectors;\n \n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.repositories.DlmsDeviceRepository;\n@@ -121,17 +126,17 @@\n     private final Map<String, SecurityKeyType> securityKeyTypesByInputName = new HashMap<>();\n \n     private final List<SecretBuilder> defaultSecretBuilders = Arrays\n-            .asList(new SecretBuilder().setSecurityKeyType(E_METER_AUTHENTICATION)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_A_DB),\n-                    new SecretBuilder().setSecurityKeyType(E_METER_ENCRYPTION)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_E_DB),\n-                    new SecretBuilder().setSecurityKeyType(E_METER_MASTER)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_M_DB),\n-                    new SecretBuilder().setSecurityKeyType(PASSWORD).setKey(PlatformSmartmeteringDefaults.PASSWORD),\n-                    new SecretBuilder().setSecurityKeyType(G_METER_ENCRYPTION)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_ENCRYPTION),\n-                    new SecretBuilder().setSecurityKeyType(G_METER_MASTER)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_MASTER));\n+            .asList(new SecretBuilder().withSecurityKeyType(E_METER_AUTHENTICATION)\n+                                       .withKey(PlatformSmartmeteringDefaults.SECURITY_KEY_A_DB),\n+                    new SecretBuilder().withSecurityKeyType(E_METER_ENCRYPTION)\n+                                       .withKey(PlatformSmartmeteringDefaults.SECURITY_KEY_E_DB),\n+                    new SecretBuilder().withSecurityKeyType(E_METER_MASTER)\n+                                       .withKey(PlatformSmartmeteringDefaults.SECURITY_KEY_M_DB),\n+                    new SecretBuilder().withSecurityKeyType(PASSWORD).withKey(PlatformSmartmeteringDefaults.PASSWORD),\n+                    new SecretBuilder().withSecurityKeyType(G_METER_ENCRYPTION)\n+                                       .withKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_ENCRYPTION),\n+                    new SecretBuilder().withSecurityKeyType(G_METER_MASTER)\n+                                       .withKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_MASTER));\n \n     public DlmsDeviceSteps() {\n         this.securityKeyTypesByInputName\n@@ -223,8 +228,8 @@ public void theDlmsDeviceWithIdentificationDoesNotExist(final String deviceIdent\n         assertThat(device).as(\"DLMS device with identification \" + deviceIdentification + \" in core database\").isNull();\n     }\n \n-    @Then(\"^the new keys are stored in the osgp_adapter_protocol_dlms database security_key table$\")\n-    public void theNewKeysAreStoredInTheOsgpAdapterProtocolDlmsDatabaseSecurityKeyTable() {\n+    @Then(\"^the new keys are stored in the secret management database encrypted_secret table$\")\n+    public void theNewKeysAreStoredInTheSecretManagementDatabaseEncryptedSecretTable() {\n         final String keyDeviceIdentification = PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION;\n         final String deviceIdentification = (String) ScenarioContext.current().get(keyDeviceIdentification);\n         assertThat(deviceIdentification)\n@@ -264,7 +269,7 @@ public void theNewKeysAreStoredInTheOsgpAdapterProtocolDlmsDatabaseSecurityKeyTa\n     }\n \n     @Then(\"^the keys are not changed in the secret_management database encrypted_secret table$\")\n-    public void theKeysAreNotChangedInTheOsgpAdapterProtocolDlmsDatabaseSecurityKeyTable() {\n+    public void theKeysAreNotChangedInTheSecretManagementDatabaseEncryptedSecretTable() {\n         final String keyDeviceIdentification = PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION;\n         final String deviceIdentification = (String) ScenarioContext.current().get(keyDeviceIdentification);\n         assertThat(deviceIdentification)\n@@ -304,7 +309,7 @@ public void theKeysAreNotChangedInTheOsgpAdapterProtocolDlmsDatabaseSecurityKeyT\n         assertThat(numberOfEncryptionKeys).as(\"Number of encryption keys\").isEqualTo(1);\n     }\n \n-    private List<DbEncryptedSecret> findAllSecretsForDevice(String deviceIdentification) {\n+    private List<DbEncryptedSecret> findAllSecretsForDevice(final String deviceIdentification) {\n         final DbEncryptedSecret searchByIdExample = new DbEncryptedSecret();\n         searchByIdExample.setDeviceIdentification(deviceIdentification);\n         return this.encryptedSecretRepository.findAll(Example.of(searchByIdExample));\n@@ -535,14 +540,14 @@ private void createDlmsDeviceInSecretManagementDatabase(final DlmsDevice dlmsDev\n         }\n         final DbEncryptionKeyReference encryptionKeyRef = this.encryptionKeyRepository\n                 .findByTypeAndValid(EncryptionProviderType.JRE, new Date()).iterator().next();\n-        secretBuilders.stream()\n-                      .filter(Objects::nonNull)\n+        secretBuilders.stream().filter(Objects::nonNull)\n+                      .map(builder -> builder.withDeviceIdentification(dlmsDevice.getDeviceIdentification())\n+                                             .withEncryptionKeyReference(encryptionKeyRef))\n                       .map(SecretBuilder::build)\n-                      .map(key -> this.setSecretDefaultProperties(dlmsDevice.getDeviceIdentification(), encryptionKeyRef, key))\n                       .forEach(this.encryptedSecretRepository::save);\n     }\n \n-    private SecretBuilder getDefaultSecretBuilder(SecurityKeyType keyType) {\n+    private SecretBuilder getDefaultSecretBuilder(final SecurityKeyType keyType) {\n         return this.defaultSecretBuilders.stream().filter(sb -> sb.getSecurityKeyType().equals(keyType)).findFirst()\n                                          .orElseThrow(() -> new IllegalArgumentException(\n                                                  String.format(\"Unknown secret builder requested for type %s\",\n@@ -560,7 +565,7 @@ private SecretBuilder getAppropriateSecretBuilder(final String keyTypeInputName,\n         if (inputSettings.containsKey(keyTypeInputName)) {\n             final String inputKey = inputSettings.get(keyTypeInputName);\n             if (inputKey != null && !inputKey.trim().isEmpty()) {\n-                return new SecretBuilder().setSecurityKeyType(E_METER_ENCRYPTION).setKey(inputKey);\n+                return new SecretBuilder().withSecurityKeyType(keyType).withKey(inputKey);\n             } else {    //secret explicitly set to empty; return null to prevent secret storing\n                 return null;\n             }\n@@ -569,15 +574,6 @@ private SecretBuilder getAppropriateSecretBuilder(final String keyTypeInputName,\n         }\n     }\n \n-    private DbEncryptedSecret setSecretDefaultProperties(final String deviceIdentification,\n-            final DbEncryptionKeyReference encryptionKeyRef, final DbEncryptedSecret secret) {\n-        secret.setDeviceIdentification(deviceIdentification);\n-        secret.setCreationTime(new Date());\n-        secret.setSecretStatus(SecretStatus.ACTIVE);\n-        secret.setEncryptionKeyReference(encryptionKeyRef);\n-        return secret;\n-    }\n-\n     private boolean isSmartMeter(final Map<String, String> settings) {\n         final String deviceType = settings.get(PlatformSmartmeteringKeys.DEVICE_TYPE);\n         return this.isGasSmartMeter(deviceType) || this.isESmartMeter(deviceType);\n@@ -616,4 +612,76 @@ private DeviceModel getDeviceModel(final Map<String, String> inputSettings) {\n         return null;\n     }\n \n+    @When(\"^new keys are registered in the secret management database\")\n+    public void registerNewKeys(final Map<String, String> inputSettings) {\n+        if (!inputSettings.containsKey(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION)) {\n+            throw new IllegalArgumentException(\"No device identification provided\");\n+        }\n+        final String deviceIdentification = inputSettings.get(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION);\n+        final List<SecretType> secretTypesToCreate = Arrays\n+                .asList(E_METER_AUTHENTICATION_KEY, E_METER_ENCRYPTION_KEY_UNICAST);\n+        final List<String> keyTypeInputNames = secretTypesToCreate.stream().map(this::getKeyTypeInputName)\n+                                                                  .collect(Collectors.toList());\n+        if (Collections.disjoint(inputSettings.keySet(), keyTypeInputNames)) {\n+            throw new IllegalArgumentException(\"None of the following keys provided: \" + keyTypeInputNames.toString());\n+        }\n+        final DbEncryptionKeyReference encryptionKeyRef = this.encryptionKeyRepository\n+                .findByTypeAndValid(EncryptionProviderType.JRE, new Date()).iterator().next();\n+        for (int i = 0; i < secretTypesToCreate.size(); i++) {\n+            if (inputSettings.containsKey(keyTypeInputNames.get(i))) {\n+                final DbEncryptedSecret secret = new SecretBuilder()\n+                        .withDlmsDevice(new DlmsDevice(deviceIdentification)).withSecretType(secretTypesToCreate.get(i))\n+                        .withKey(inputSettings.get(keyTypeInputNames.get(i))).withSecretStatus(SecretStatus.NEW)\n+                        .build();\n+                secret.setEncryptionKeyReference(encryptionKeyRef);\n+                this.encryptedSecretRepository.save(secret);\n+            }\n+        }\n+    }\n+\n+    @Then(\"after 15 seconds, the new keys are recovered\")\n+    public void newKeysAreRecovered(final Map<String, String> inputSettings) throws InterruptedException {\n+        final long waitTimeInMillis = 15 * 1000;\n+        if (!inputSettings.containsKey(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION)) {\n+            throw new IllegalArgumentException(\"No device identification provided\");\n+        }\n+        final String deviceIdentification = inputSettings.get(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION);\n+        if (!inputSettings.containsKey(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY) && !inputSettings\n+                .containsKey(PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY)) {\n+            throw new IllegalArgumentException(\"No authentication or encryption key provided\");\n+        }\n+        Thread.sleep(waitTimeInMillis);\n+        //final DbEncryptionKeyReference encryptionKeyRef = this.encryptionKeyRepository\n+        //        .findByTypeAndValid(EncryptionProviderType.JRE, new Date()).iterator().next();\n+        final List<SecretType> keyTypesToCheck = Arrays\n+                .asList(E_METER_AUTHENTICATION_KEY, E_METER_ENCRYPTION_KEY_UNICAST);\n+        for (final SecretType secretType : keyTypesToCheck) {\n+            final String keyInputName = this.getKeyTypeInputName(secretType);\n+            if (inputSettings.containsKey(keyInputName)) {\n+                final Map<SecretStatus, Integer> expectedNrOfKeysByStatus = new HashMap<>();\n+                expectedNrOfKeysByStatus.put(SecretStatus.NEW, 0);\n+                expectedNrOfKeysByStatus.put(SecretStatus.ACTIVE, 1);\n+                expectedNrOfKeysByStatus.put(SecretStatus.EXPIRED, 1);\n+                for (final SecretStatus secretStatus : expectedNrOfKeysByStatus.keySet()) {\n+                    final int nrOfKeys = this.encryptedSecretRepository\n+                            .getSecretCount(deviceIdentification, secretType, secretStatus);\n+                    assertThat(nrOfKeys).isEqualTo(expectedNrOfKeysByStatus.get(secretStatus));\n+                }\n+                final List<DbEncryptedSecret> activeSecretList = this.encryptedSecretRepository\n+                        .findSecrets(deviceIdentification, secretType, SecretStatus.ACTIVE);\n+                assertThat(activeSecretList.get(0).getEncodedSecret()).isEqualTo(inputSettings.get(keyInputName));\n+            }\n+        }\n+    }\n+\n+    public String getKeyTypeInputName(final SecretType secretType) {\n+        switch (secretType) {\n+        case E_METER_AUTHENTICATION_KEY:\n+            return KEY_DEVICE_AUTHENTICATIONKEY;\n+        case E_METER_ENCRYPTION_KEY_UNICAST:\n+            return KEY_DEVICE_ENCRYPTIONKEY;\n+        default:\n+            throw new IllegalArgumentException(\"Unsupported secret type: \" + secretType.toString());\n+        }\n+    }\n }"
  },
  {
    "sha": "a38de7005b9a93c36a1f701591219f729e53d687",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/configuration/ReplaceKeys.feature",
    "status": "modified",
    "additions": 26,
    "deletions": 5,
    "changes": 31,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/configuration/ReplaceKeys.feature",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/configuration/ReplaceKeys.feature",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/configuration/ReplaceKeys.feature?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -1,14 +1,13 @@\n-@SmartMetering @Platform @SmartMeteringConfiguration @NightlyBuildOnly\n+@SmartMetering @Platform @SmartMeteringConfiguration @NightlyBuildOnly @ReplaceKeys\n Feature: SmartMetering Configuration - Replace Keys\n   As a grid operator\n   I want to be able to replace the keys on a device\n   So I can ensure secure device communication according to requirements\n \n-  Background: \n+  Scenario: Replace keys on a device\n     Given a dlms device\n       | DeviceIdentification | TEST1024000000001 |\n       | DeviceType           | SMART_METER_E     |\n-  Scenario: Replace keys on a device\n     When the replace keys request is received\n       | DeviceIdentification ||\n       | Master_key           | 6fa7f5f19812391b2803a142f17c67aa0e3fc23b537ae6f9cd34a850d4fd5f4d60a3b2bdd6f8cb356e00e6c4e104fb5ea521eeabd8cb69d8f7a5cbe2b20e010c089ee346aaa13c9abdc5e0c9ba0fcafff53d2dcd3c1b7a8ee3c3f76e0d00fcd043940586f055c5e19a0fa7eeff6a7894e128029eaf11c1734565f3f5b614bfab9ea5ce24bf34d2e59878dc2401bd175333315ce197d4243dced9c4e28a23bc91dca432985debe81cf5912df7e99b28f596f335e80678d7b5d1edc93be8bf22d77b2e172ccd7c6907454a983999840bf540343d281e8f9871386f005fe40065fcbe218bdc605be4e759cb1b8d5760eab7b8ceb95cfae2224c15045834962f9b6b |\n@@ -17,14 +16,36 @@ Feature: SmartMetering Configuration - Replace Keys\n     Then the replace keys response should be returned\n       | DeviceIdentification | TEST1024000000001 |\n       | Result               | OK                |\n-    And the new keys are stored in the osgp_adapter_protocol_dlms database security_key table\n+    And the new keys are stored in the secret management database encrypted_secret table\n     And the stored keys are not equal to the received keys\n \n   @ResetKeysOnDevice\n   Scenario: Replace keys with generated ones on a device\n+    Given a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n     When the generate and replace keys request is received\n       | DeviceIdentification | TEST1024000000001 |\n     Then the generate and replace keys response should be returned\n       | DeviceIdentification | TEST1024000000001 |\n       | Result               | OK                |\n-    And the new keys are stored in the osgp_adapter_protocol_dlms database security_key table\n+    And the new keys are stored in the secret management database encrypted_secret table\n+\n+  @RecoverKeys\n+  Scenario: Recover keys after a (simulated) failed key change\n+    #Try to connect using incorrect (swapped) keys and then try to recover the correct new keys\n+    Given a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+      | Authentication_key   | 867424ac75b6d53c89276d304608321f0a1f6e401f453f84adf3477c7ee1623c |\n+      | Encryption_key       | c19fe80a22a0f6c5cdaad0826c4d204f23694ded08d811b66e9b845d9f2157d2 |\n+    And new keys are registered in the secret management database\n+      | DeviceIdentification | TEST1024000000001 |\n+      | Authentication_key   | c19fe80a22a0f6c5cdaad0826c4d204f23694ded08d811b66e9b845d9f2157d2 |\n+      | Encryption_key       | 867424ac75b6d53c89276d304608321f0a1f6e401f453f84adf3477c7ee1623c |\n+    When the get actual meter reads request is received\n+      | DeviceIdentification | TEST1024000000001 |\n+    Then after 15 seconds, the new keys are recovered\n+      | DeviceIdentification | TEST1024000000001 |\n+      | Authentication_key   | c19fe80a22a0f6c5cdaad0826c4d204f23694ded08d811b66e9b845d9f2157d2 |\n+      | Encryption_key       | 867424ac75b6d53c89276d304608321f0a1f6e401f453f84adf3477c7ee1623c |"
  },
  {
    "sha": "592bef4695563bd3d21124be6643e52a91badfd9",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/DlmsConfig.java",
    "status": "modified",
    "additions": 18,
    "deletions": 16,
    "changes": 34,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/DlmsConfig.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/DlmsConfig.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/DlmsConfig.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -14,7 +14,17 @@\n \n import javax.inject.Provider;\n \n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.handler.logging.LoggingHandler;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.DomainHelperService;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.services.SecretManagementService;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.threads.RecoverKeyProcess;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.threads.RecoverKeyProcessInitiator;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsDeviceAssociation;\n@@ -35,16 +45,6 @@\n import org.springframework.context.annotation.Scope;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n \n-import io.netty.bootstrap.ServerBootstrap;\n-import io.netty.channel.ChannelHandler;\n-import io.netty.channel.ChannelInitializer;\n-import io.netty.channel.ChannelOption;\n-import io.netty.channel.ChannelPipeline;\n-import io.netty.channel.socket.SocketChannel;\n-import io.netty.channel.socket.nio.NioServerSocketChannel;\n-import io.netty.handler.logging.LogLevel;\n-import io.netty.handler.logging.LoggingHandler;\n-\n @Configuration\n @EnableTransactionManagement()\n @PropertySource(\"classpath:osgp-adapter-protocol-dlms.properties\")\n@@ -126,9 +126,10 @@ public DlmsChannelHandlerServer dlmsChannelHandlerServer() {\n     @Bean\n     public Hls5Connector hls5Connector(final RecoverKeyProcessInitiator recoverKeyProcessInitiator,\n             @Value(\"${jdlms.response_timeout}\") final int responseTimeout,\n-            @Value(\"${jdlms.logical_device_address}\") final int logicalDeviceAddress) {\n+            @Value(\"${jdlms.logical_device_address}\") final int logicalDeviceAddress,\n+            final SecretManagementService secretManagementService) {\n         return new Hls5Connector(recoverKeyProcessInitiator, responseTimeout, logicalDeviceAddress,\n-                DlmsDeviceAssociation.MANAGEMENT_CLIENT);\n+                DlmsDeviceAssociation.MANAGEMENT_CLIENT, secretManagementService);\n     }\n \n     @Bean\n@@ -147,9 +148,10 @@ public Lls0Connector lls0Connector(@Value(\"${jdlms.response_timeout}\") final int\n     @Scope(\"prototype\")\n     public RecoverKeyProcess recoverKeyProcess(final DomainHelperService domainHelperService,\n             @Value(\"${jdlms.response_timeout}\") final int responseTimeout,\n-            @Value(\"${jdlms.logical_device_address}\") final int logicalDeviceAddress) {\n+            @Value(\"${jdlms.logical_device_address}\") final int logicalDeviceAddress, final Hls5Connector hls5Connector,\n+            final SecretManagementService secretManagementService) {\n         return new RecoverKeyProcess(domainHelperService, responseTimeout, logicalDeviceAddress,\n-                DlmsDeviceAssociation.MANAGEMENT_CLIENT);\n+                DlmsDeviceAssociation.MANAGEMENT_CLIENT, hls5Connector, secretManagementService);\n     }\n \n     @Bean\n@@ -161,8 +163,8 @@ public RecoverKeyProcessInitiator recoverKeyProcesInitiator(\n     }\n \n     @Bean(name = \"protocolAdapterDlmsScheduleExecutorService\")\n-    public ScheduledExecutorService\n-            scheduledExecutorService(@Value(\"${executor.scheduled.poolsize}\") final int poolsize) {\n+    public ScheduledExecutorService scheduledExecutorService(\n+            @Value(\"${executor.scheduled.poolsize}\") final int poolsize) {\n         return Executors.newScheduledThreadPool(poolsize);\n     }\n }"
  },
  {
    "sha": "0ff1d07fb1aa60cbc706598fa8f484bc5c2c9a64",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java",
    "status": "modified",
    "additions": 32,
    "deletions": 97,
    "changes": 129,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -12,36 +12,20 @@\n import static org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType.E_METER_ENCRYPTION;\n \n import java.io.IOException;\n-import java.net.InetAddress;\n import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n \n-import org.bouncycastle.util.encoders.Hex;\n-import org.openmuc.jdlms.AuthenticationMechanism;\n+import lombok.extern.slf4j.Slf4j;\n import org.openmuc.jdlms.DlmsConnection;\n-import org.openmuc.jdlms.SecuritySuite;\n-import org.openmuc.jdlms.SecuritySuite.EncryptionMechanism;\n-import org.openmuc.jdlms.TcpConnectionBuilder;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.DomainHelperService;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.SecretManagementService;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n-import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsDeviceAssociation;\n-import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.Hls5Connector;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.RecoverKeyException;\n-import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n-import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n+@Slf4j\n public class RecoverKeyProcess implements Runnable {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(RecoverKeyProcess.class);\n-\n     private final DomainHelperService domainHelperService;\n \n     private final int responseTimeout;\n@@ -52,19 +36,21 @@\n \n     private String deviceIdentification;\n \n-    private DlmsDevice device;\n-\n     private String ipAddress;\n \n-    @Autowired\n-    private SecretManagementService secretManagementService;\n+    private final Hls5Connector hls5Connector;\n+\n+    private final SecretManagementService secretManagementService;\n \n     public RecoverKeyProcess(final DomainHelperService domainHelperService, final int responseTimeout,\n-            final int logicalDeviceAddress, final DlmsDeviceAssociation deviceAssociation) {\n+            final int logicalDeviceAddress, final DlmsDeviceAssociation deviceAssociation,\n+            final Hls5Connector hls5Connector, final SecretManagementService secretManagementService) {\n         this.domainHelperService = domainHelperService;\n         this.responseTimeout = responseTimeout;\n         this.logicalDeviceAddress = logicalDeviceAddress;\n         this.clientId = deviceAssociation.getClientId();\n+        this.hls5Connector = hls5Connector;\n+        this.secretManagementService = secretManagementService;\n     }\n \n     public void setDeviceIdentification(final String deviceIdentification) {\n@@ -78,39 +64,31 @@ public void setIpAddress(final String ipAddress) {\n     @Override\n     public void run() {\n         this.checkState();\n+        log.info(\"Attempting key recovery for device {}\", this.deviceIdentification);\n \n-        LOGGER.info(\"Attempting key recovery for device {}\", this.deviceIdentification);\n-\n-        try {\n-            this.findDevice();\n-        } catch (final Exception e) {\n-            LOGGER.error(\"Could not find device\", e);\n-            //why try to find device if you don't do anything with the result?!?\n-            //shouldn't we throw an exception here?\n-        }\n-\n+        final DlmsDevice device = this.findDevice();\n         if (!this.secretManagementService.hasNewSecretOfType(this.deviceIdentification, E_METER_AUTHENTICATION)) {\n-            LOGGER.warn(\"Could not recover keys: device has no new authorisation key registered in secret-mgmt module\");\n+            log.error(\n+                    \"Could not recover keys: device has no new authorisation key registered in secret-mgmt module\");\n+            return;\n+        }\n+        if (!this.canConnectUsingNewKeys(device)) {\n+            log.error(\"Could not recover keys: could not connect to device using new keys\");\n             return;\n         }\n \n-        if (this.canConnectUsingNewKeys()) {\n-            List<SecurityKeyType> keyTypesToActivate=Arrays.asList(E_METER_ENCRYPTION,E_METER_AUTHENTICATION);\n-            try {\n-                this.secretManagementService.activateNewKeys(this.deviceIdentification, keyTypesToActivate);\n-            } catch (Exception e) {\n-                throw new RecoverKeyException(e);\n-            }\n-        } else {\n-            LOGGER.warn(\"Could not recover keys: could not connect to device using new keys\");\n-            //shouldn't we try to connect using 'old' keys? or send key change to device again?\n+        try {\n+            this.secretManagementService.activateNewKeys(this.deviceIdentification,\n+                    Arrays.asList(E_METER_ENCRYPTION, E_METER_AUTHENTICATION));\n+        } catch (Exception e) {\n+            throw new RecoverKeyException(e);\n         }\n     }\n \n-    private void findDevice() throws OsgpException {\n+    private DlmsDevice findDevice() {\n         try {\n-            this.device = this.domainHelperService.findDlmsDevice(this.deviceIdentification, this.ipAddress);\n-        } catch (final ProtocolAdapterException e) { // Thread can not recover from these exceptions.\n+            return this.domainHelperService.findDlmsDevice(this.deviceIdentification, this.ipAddress);\n+        } catch (final Exception e) {\n             throw new RecoverKeyException(e);\n         }\n     }\n@@ -124,65 +102,22 @@ private void checkState() {\n         }\n     }\n \n-    private boolean canConnectUsingNewKeys() {\n+    private boolean canConnectUsingNewKeys(DlmsDevice device) {\n         DlmsConnection connection = null;\n         try {\n-            connection = this.createConnectionUsingNewKeys();\n-            return true;\n-        } catch (final Exception e) {\n-            LOGGER.warn(\"Connection exception: {}\", e.getMessage(), e);\n+            connection = this.hls5Connector.connectUnchecked(device, null, this.secretManagementService::getNewKey);\n+            return connection != null;\n+        } catch (Exception exc) {\n+            log.error(\"Connection exception: {}\", exc.getMessage(), exc);\n             return false;\n         } finally {\n             if (connection != null) {\n                 try {\n                     connection.close();\n                 } catch (final IOException e) {\n-                    LOGGER.warn(\"Connection exception: {}\", e.getMessage(), e);\n+                    log.warn(\"Connection exception: {}\", e.getMessage(), e);\n                 }\n             }\n         }\n     }\n-\n-    /**\n-     * Create a connection with the device.\n-     *\n-     * @return The connection.\n-     *\n-     * @throws IOException\n-     *         When there are problems in connecting to or communicating\n-     *         with the device.\n-     */\n-    private DlmsConnection createConnectionUsingNewKeys() throws IOException, FunctionalException {\n-        Map<SecurityKeyType, byte[]> keys = this.secretManagementService\n-                .getNewKeys(this.deviceIdentification, Arrays.asList(E_METER_AUTHENTICATION, E_METER_ENCRYPTION));\n-        final byte[] authenticationKey = Hex.decode(keys.get(E_METER_AUTHENTICATION));\n-        final byte[] encryptionKey = Hex.decode(keys.get(E_METER_ENCRYPTION));\n-\n-        final SecuritySuite securitySuite = SecuritySuite.builder().setAuthenticationKey(authenticationKey)\n-                                                         .setAuthenticationMechanism(AuthenticationMechanism.HLS5_GMAC)\n-                                                         .setGlobalUnicastEncryptionKey(encryptionKey)\n-                                                         .setEncryptionMechanism(EncryptionMechanism.AES_GCM_128)\n-                                                         .build();\n-\n-        final TcpConnectionBuilder tcpConnectionBuilder = new TcpConnectionBuilder(\n-                InetAddress.getByName(this.device.getIpAddress())).setSecuritySuite(securitySuite)\n-                                                                  .setResponseTimeout(this.responseTimeout)\n-                                                                  .setLogicalDeviceId(this.logicalDeviceAddress)\n-                                                                  .setClientId(this.clientId);\n-\n-        final Integer challengeLength = this.device.getChallengeLength();\n-\n-        try {\n-            if (challengeLength != null) {\n-                tcpConnectionBuilder.setChallengeLength(challengeLength);\n-            }\n-        } catch (final IllegalArgumentException e) {\n-            LOGGER.error(\"Exception occurred: Invalid key format\");\n-            throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_FORMAT, ComponentType.PROTOCOL_DLMS,\n-                    e);\n-        }\n-\n-        return tcpConnectionBuilder.build();\n-    }\n-\n }"
  },
  {
    "sha": "8968540c957e8c05fbcb69689fd9be6cb4fe1b62",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java",
    "status": "modified",
    "additions": 28,
    "deletions": 27,
    "changes": 55,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -13,8 +13,6 @@\n \n import java.io.IOException;\n import java.net.UnknownHostException;\n-import java.util.Arrays;\n-import java.util.Map;\n \n import org.apache.commons.lang3.StringUtils;\n import org.openmuc.jdlms.AuthenticationMechanism;\n@@ -25,7 +23,6 @@\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.SecretManagementService;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.threads.RecoverKeyProcessInitiator;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n-import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ConnectionException;\n import org.opensmartgridplatform.adapter.protocol.dlms.infra.messaging.DlmsMessageListener;\n import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n@@ -36,7 +33,6 @@\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -48,13 +44,14 @@\n \n     private final RecoverKeyProcessInitiator recoverKeyProcessInitiator;\n \n-    @Autowired\n-    private SecretManagementService secretManagementService;\n+    private final SecretManagementService secretManagementService;\n \n     public Hls5Connector(final RecoverKeyProcessInitiator recoverKeyProcessInitiator, final int responseTimeout,\n-            final int logicalDeviceAddress, final DlmsDeviceAssociation deviceAssociation) {\n+            final int logicalDeviceAddress, final DlmsDeviceAssociation deviceAssociation,\n+            final SecretManagementService secretManagementService) {\n         super(responseTimeout, logicalDeviceAddress, deviceAssociation);\n         this.recoverKeyProcessInitiator = recoverKeyProcessInitiator;\n+        this.secretManagementService = secretManagementService;\n     }\n \n     @Override\n@@ -66,7 +63,7 @@ public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener\n         this.checkIpAddress(device);\n \n         try {\n-            return this.createConnection(device, dlmsMessageListener);\n+            return this.createConnection(device, dlmsMessageListener, this.secretManagementService::getKey);\n         } catch (final UnknownHostException e) { // Unknown IP, unrecoverable.\n             LOGGER.error(\"The IP address is not found: {}\", device.getIpAddress(), e);\n             throw new TechnicalException(ComponentType.PROTOCOL_DLMS,\n@@ -89,22 +86,28 @@ public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener\n         }\n     }\n \n-    @Override\n-    protected void setSecurity(final DlmsDevice device, final TcpConnectionBuilder tcpConnectionBuilder)\n-            throws OsgpException {\n+    /**\n+     * Connect method without any error handling. Used by key recovery process to try to connect to a device with\n+     * newly registered keys, without triggering a new key recovery process when the connection fails.\n+     * @param device the device to connect to\n+     * @param dlmsMessageListener a message listener (for tracing or debugging)\n+     * @param keyProvider the method to use to get the required keys\n+     * @return the created connection\n+     * @throws IOException\n+     * @throws OsgpException\n+     * @see org.opensmartgridplatform.adapter.protocol.dlms.application.threads.RecoverKeyProcess\n+     */\n+    public DlmsConnection connectUnchecked(final DlmsDevice device,\n+            final DlmsMessageListener dlmsMessageListener,\n+            SecurityKeyProvider keyProvider) throws IOException, OsgpException {\n+        return this.createConnection(device, dlmsMessageListener, keyProvider);\n+    }\n \n-        final String deviceIdentification = device.getDeviceIdentification();\n-        final byte[] dlmsAuthenticationKey;\n-        final byte[] dlmsEncryptionKey;\n-        try {\n-            Map<SecurityKeyType, byte[]> encryptedKeys = this.secretManagementService\n-                    .getKeys(deviceIdentification, Arrays.asList(E_METER_AUTHENTICATION, E_METER_ENCRYPTION));\n-            dlmsAuthenticationKey = encryptedKeys.get(E_METER_AUTHENTICATION);\n-            dlmsEncryptionKey = encryptedKeys.get(E_METER_ENCRYPTION);\n-        } catch (final EncrypterException e) {\n-            throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_ENCRYPTION,\n-                    ComponentType.PROTOCOL_DLMS, e);\n-        }\n+    @Override\n+    public void setSecurity(DlmsDevice device, SecurityKeyProvider provider,\n+            final TcpConnectionBuilder tcpConnectionBuilder) throws FunctionalException {\n+        final byte[] dlmsAuthenticationKey = provider.getKey(device.getDeviceIdentification(), E_METER_AUTHENTICATION);\n+        final byte[] dlmsEncryptionKey = provider.getKey(device.getDeviceIdentification(), E_METER_ENCRYPTION);\n \n         // Validate keys before JDLMS does and throw a FunctionalException if\n         // necessary\n@@ -156,13 +159,11 @@ private void configureIvData(final TcpConnectionBuilder tcpConnectionBuilder, fi\n \n     private void validateKeys(final byte[] encryptionKey, final byte[] authenticationKey) throws FunctionalException {\n         if (this.checkEmptyKey(encryptionKey)) {\n-            this.throwFunctionalException(\"The encryption key is empty\",\n-                    FunctionalExceptionType.KEY_NOT_PRESENT);\n+            this.throwFunctionalException(\"The encryption key is empty\", FunctionalExceptionType.KEY_NOT_PRESENT);\n         }\n \n         if (this.checkEmptyKey(authenticationKey)) {\n-            this.throwFunctionalException(\"The authentication key is empty\",\n-                    FunctionalExceptionType.KEY_NOT_PRESENT);\n+            this.throwFunctionalException(\"The authentication key is empty\", FunctionalExceptionType.KEY_NOT_PRESENT);\n         }\n \n         if (this.checkLenghtKey(encryptionKey)) {"
  },
  {
    "sha": "9e7086ba6141a5ebd504b2c6259a8311739af1a7",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -51,7 +51,7 @@ public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener\n         this.checkIpAddress(device);\n \n         try {\n-            return this.createConnection(device, dlmsMessageListener);\n+            return this.createConnection(device, dlmsMessageListener, this.secretManagementService::getKey);\n         } catch (final UnknownHostException e) {\n             LOGGER.warn(\"The IP address is not found: {}\", device.getIpAddress(), e);\n             // Unknown IP, unrecoverable.\n@@ -67,12 +67,12 @@ public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener\n     }\n \n     @Override\n-    protected void setSecurity(final DlmsDevice device, final TcpConnectionBuilder tcpConnectionBuilder)\n-            throws OsgpException {\n+    protected void setSecurity(final DlmsDevice device, final SecurityKeyProvider keyProvider,\n+            final TcpConnectionBuilder tcpConnectionBuilder) throws OsgpException {\n \n         final byte[] password;\n         try {\n-            password = this.secretManagementService.getKey(device.getDeviceIdentification(), SecurityKeyType.PASSWORD);\n+            password = keyProvider.getKey(device.getDeviceIdentification(), SecurityKeyType.PASSWORD);\n         } catch (final EncrypterException e) {\n             LOGGER.error(\"Error determining DLMS password setting up LLS1 connection\", e);\n             throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_ENCRYPTION,"
  },
  {
    "sha": "65439ddf25758a7ed257f907815879b664393d30",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecureDlmsConnector.java",
    "status": "modified",
    "additions": 7,
    "deletions": 8,
    "changes": 15,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecureDlmsConnector.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecureDlmsConnector.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecureDlmsConnector.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -34,8 +34,8 @@ public SecureDlmsConnector(final int responseTimeout, final int logicalDeviceAdd\n      * @param tcpConnectionBuilder\n      *         The connection builder instance.\n      */\n-    protected abstract void setSecurity(final DlmsDevice device, final TcpConnectionBuilder tcpConnectionBuilder)\n-            throws OsgpException;\n+    protected abstract void setSecurity(final DlmsDevice device, final SecurityKeyProvider keyProvider,\n+            final TcpConnectionBuilder tcpConnectionBuilder) throws OsgpException;\n \n     /**\n      * Create a connection with the device.\n@@ -54,21 +54,20 @@ protected abstract void setSecurity(final DlmsDevice device, final TcpConnection\n      *         When there are problems reading the security and\n      *         authorization keys.\n      */\n-    DlmsConnection createConnection(final DlmsDevice device, final DlmsMessageListener dlmsMessageListener)\n-            throws IOException, OsgpException {\n-\n+    DlmsConnection createConnection(DlmsDevice device, DlmsMessageListener dlmsMessageListener,\n+            SecurityKeyProvider keyProvider) throws OsgpException, IOException {\n         // Setup connection to device\n         final TcpConnectionBuilder tcpConnectionBuilder = new TcpConnectionBuilder(\n-                InetAddress.getByName(device.getIpAddress())).setResponseTimeout(\n-                this.responseTimeout).setLogicalDeviceId(this.logicalDeviceAddress);\n+                InetAddress.getByName(device.getIpAddress())).setResponseTimeout(this.responseTimeout)\n+                                                             .setLogicalDeviceId(this.logicalDeviceAddress);\n         tcpConnectionBuilder.setClientId(this.clientId).setReferencingMethod(\n                 device.isUseSn() ? ReferencingMethod.SHORT : ReferencingMethod.LOGICAL);\n \n         if (device.isUseHdlc()) {\n             tcpConnectionBuilder.useHdlc();\n         }\n \n-        this.setSecurity(device, tcpConnectionBuilder);\n+        this.setSecurity(device, keyProvider, tcpConnectionBuilder);\n         this.setOptionalValues(device, tcpConnectionBuilder);\n \n         if (device.isInDebugMode() || dlmsMessageListener instanceof InvocationCountingDlmsMessageListener) {"
  },
  {
    "sha": "981135c7cf9c1c1dccf1d68231ae1eeed4dba2ed",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecurityKeyProvider.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecurityKeyProvider.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecurityKeyProvider.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecurityKeyProvider.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.dlms.domain.factories;\n+\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+\n+/**\n+ * Functional interface used in connectors to obtain keys.\n+ * @see SecureDlmsConnector\n+ */\n+@FunctionalInterface\n+public interface SecurityKeyProvider {\n+    byte[] getKey(String deviceIdentification, SecurityKeyType type);\n+}"
  },
  {
    "sha": "da9993a1d1998569e82964c0cba3ea32c3aac35d",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/stub/Hls5ConnectorStub.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/stub/Hls5ConnectorStub.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/63e99fc25d1383682a34747dc4c00cb06cf9448c/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/stub/Hls5ConnectorStub.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/stub/Hls5ConnectorStub.java?ref=63e99fc25d1383682a34747dc4c00cb06cf9448c",
    "patch": "@@ -14,16 +14,18 @@\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsDeviceAssociation;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.Hls5Connector;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.SecurityKeyProvider;\n import org.opensmartgridplatform.adapter.protocol.dlms.infra.messaging.DlmsMessageListener;\n \n public class Hls5ConnectorStub extends Hls5Connector {\n \n     public Hls5ConnectorStub() {\n-        super(null, 0, 0, DlmsDeviceAssociation.PUBLIC_CLIENT);\n+        super(null, 0, 0, DlmsDeviceAssociation.PUBLIC_CLIENT, null);\n     }\n \n     @Override\n-    protected void setSecurity(final DlmsDevice device, final TcpConnectionBuilder tcpConnectionBuilder) {\n+    public void setSecurity(final DlmsDevice device, final SecurityKeyProvider keyProvider,\n+            final TcpConnectionBuilder tcpConnectionBuilder) {\n         //\n     }\n "
  }
]
