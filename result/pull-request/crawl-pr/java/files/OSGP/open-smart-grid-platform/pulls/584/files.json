[
  {
    "sha": "b319bb0816a766c2401d270de09754e9f374f7e5",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/pom.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/pom.xml",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/pom.xml",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/pom.xml?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -24,6 +24,10 @@\n   <name>cucumber-tests-platform-smartmetering</name>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.projectlombok</groupId>\n+      <artifactId>lombok</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>"
  },
  {
    "sha": "eb0d7563f2238dcd7e8409e13c94d7abc08e6e01",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/AcceptanceTests.java",
    "status": "modified",
    "additions": 8,
    "deletions": 14,
    "changes": 22,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/AcceptanceTests.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/AcceptanceTests.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/AcceptanceTests.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -7,25 +7,19 @@\n  */\n package org.opensmartgridplatform.cucumber.platform.smartmetering;\n \n-import org.junit.runner.RunWith;\n-\n import io.cucumber.junit.Cucumber;\n import io.cucumber.junit.CucumberOptions;\n import io.cucumber.junit.CucumberOptions.SnippetType;\n+import org.junit.runner.RunWith;\n \n @RunWith(Cucumber.class)\n-@CucumberOptions(\n-        features = { \"classpath:features/functional-exceptions\", \"classpath:features/osgp-adapter-ws-core\",\n-                \"classpath:features/osgp-adapter-ws-smartmetering\" },\n-        tags = { \"not @Skip\", \"not @NightlyBuildOnly\" },\n-        glue = { \"classpath:org.opensmartgridplatform.cucumber.platform.glue\",\n-                \"classpath:org.opensmartgridplatform.cucumber.platform.common.glue\",\n-                \"classpath:org.opensmartgridplatform.cucumber.platform.smartmetering.glue\" },\n-        plugin = { \"pretty\", \"html:target/output/Cucumber-report\", \"html:target/output/Cucumber-html-report.html\",\n-                \"json:target/output/cucumber.json\" },\n-        snippets = SnippetType.CAMELCASE,\n-        strict = true,\n-        dryRun = false)\n+@CucumberOptions(features = { \"classpath:features/functional-exceptions\", \"classpath:features/osgp-adapter-ws-core\",\n+        \"classpath:features/osgp-adapter-ws-smartmetering\" }, tags = { \"not @Skip\", \"not @NightlyBuildOnly\" }, glue = {\n+        \"classpath:org.opensmartgridplatform.cucumber.platform.glue\",\n+        \"classpath:org.opensmartgridplatform.cucumber.platform.common.glue\",\n+        \"classpath:org.opensmartgridplatform.cucumber.platform.smartmetering.glue\" }, plugin = { \"pretty\",\n+        \"html:target/output/Cucumber-report\", \"html:target/output/Cucumber-html-report.html\",\n+        \"json:target/output/cucumber.json\" }, snippets = SnippetType.CAMELCASE, strict = true, dryRun = false)\n public class AcceptanceTests {\n \n }"
  },
  {
    "sha": "9cd1bff6470bad0602fce499c098cadf30c27ecb",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringbundle/BundledGetFirmwareVersionSteps.java",
    "status": "modified",
    "additions": 39,
    "deletions": 7,
    "changes": 46,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringbundle/BundledGetFirmwareVersionSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringbundle/BundledGetFirmwareVersionSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringbundle/BundledGetFirmwareVersionSteps.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -1,27 +1,33 @@\n /**\n  * Copyright 2018 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.cucumber.platform.smartmetering.glue.steps.ws.smartmetering.smartmeteringbundle;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n \n import java.util.List;\n import java.util.Map;\n \n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetFirmwareVersionGasRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetFirmwareVersionGasResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetFirmwareVersionRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetFirmwareVersionResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.common.Response;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersion;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersionGas;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringDefaults;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.glue.steps.ws.smartmetering.smartmeteringconfiguration.GetFirmwareVersion;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import io.cucumber.java.en.Given;\n-import io.cucumber.java.en.Then;\n-\n public class BundledGetFirmwareVersionSteps extends BaseBundleSteps {\n \n     @Autowired\n@@ -35,14 +41,25 @@ public void theBundleRequestContainsAGetFirmwareVersionAction() throws Throwable\n         this.addActionToBundleRequest(action);\n     }\n \n+    @Given(\"^the bundle request contains a get firmware version gas action$\")\n+    public void theBundleRequestContainsAGetFirmwareVersionGasAction(final Map<String, String> settings)\n+            throws Throwable {\n+\n+        final GetFirmwareVersionGasRequest action = new GetFirmwareVersionGasRequest();\n+        action.setDeviceIdentification(getString(settings, PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION,\n+                PlatformSmartmeteringDefaults.DEVICE_IDENTIFICATION));\n+\n+        this.addActionToBundleRequest(action);\n+    }\n+\n     @Then(\"^the bundle response should contain a get firmware version response$\")\n     public void theBundleResponseShouldContainAGetFirmwareVersionResponse(final Map<String, String> settings)\n             throws Throwable {\n \n         final Response response = this.getNextBundleResponse();\n \n-        assertThat(response instanceof GetFirmwareVersionResponse)\n-                .as(\"response should be a GetFirmwareVersionResponse object\").isTrue();\n+        assertThat(response).as(\"response should be a GetFirmwareVersionResponse object\").isInstanceOf(\n+                GetFirmwareVersionResponse.class);\n \n         final GetFirmwareVersionResponse getFirmwareVersionResponse = (GetFirmwareVersionResponse) response;\n \n@@ -51,4 +68,19 @@ public void theBundleResponseShouldContainAGetFirmwareVersionResponse(final Map<\n         this.getFirmwareVersionSteps.checkFirmwareVersionResult(settings, firmwareVersions);\n     }\n \n+    @Then(\"^the bundle response should contain a get firmware version gas response$\")\n+    public void theBundleResponseShouldContainAGetFirmwareVersionGasResponse(final Map<String, String> settings)\n+            throws Throwable {\n+\n+        final Response response = this.getNextBundleResponse();\n+\n+        assertThat(response).as(\"response should be a GetFirmwareVersionGasResponse object\").isInstanceOf(\n+                GetFirmwareVersionGasResponse.class);\n+\n+        final GetFirmwareVersionGasResponse getFirmwareVersionGasResponse = (GetFirmwareVersionGasResponse) response;\n+\n+        final FirmwareVersionGas firmwareVersionGas = getFirmwareVersionGasResponse.getFirmwareVersion();\n+\n+        this.getFirmwareVersionSteps.checkFirmwareVersionGasResult(settings, firmwareVersionGas);\n+    }\n }"
  },
  {
    "sha": "fa091208298297343f7fef800e7ac406cfd9135e",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringconfiguration/GetFirmwareVersion.java",
    "status": "modified",
    "additions": 112,
    "deletions": 32,
    "changes": 144,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringconfiguration/GetFirmwareVersion.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringconfiguration/GetFirmwareVersion.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringconfiguration/GetFirmwareVersion.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -1,27 +1,41 @@\n /**\n  * Copyright 2016 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.cucumber.platform.smartmetering.glue.steps.ws.smartmetering.smartmeteringconfiguration;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getNullOrNonEmptyString;\n \n import java.util.List;\n import java.util.Map;\n \n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import lombok.extern.slf4j.Slf4j;\n+import org.checkerframework.checker.index.qual.SameLen;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.common.OsgpResultType;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersion;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersionGas;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionAsyncRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionResponse;\n import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n import org.opensmartgridplatform.cucumber.platform.glue.steps.database.core.DeviceFirmwareModuleSteps;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.RequestFactoryHelper;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.configuration.FirmwareVersionRequestFactory;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.configuration.GetFirmwareVersionGasRequestFactory;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.configuration.GetFirmwareVersionRequestFactory;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.configuration.SmartMeteringConfigurationClient;\n import org.opensmartgridplatform.domain.core.entities.FirmwareModule;\n@@ -30,12 +44,8 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import io.cucumber.java.en.Then;\n-import io.cucumber.java.en.When;\n-\n+@Slf4j\n public class GetFirmwareVersion {\n-    protected static final Logger LOGGER = LoggerFactory.getLogger(GetFirmwareVersion.class);\n-\n     @Autowired\n     private SmartMeteringConfigurationClient smartMeteringConfigurationClient;\n \n@@ -47,63 +57,133 @@\n \n     @When(\"^the get firmware version request is received$\")\n     public void theGetFirmwareVersionRequestIsReceived(final Map<String, String> requestData) throws Throwable {\n-        final GetFirmwareVersionRequest getFirmwareVersionRequest = GetFirmwareVersionRequestFactory\n-                .fromParameterMap(requestData);\n+        final GetFirmwareVersionRequest getFirmwareVersionRequest = GetFirmwareVersionRequestFactory.fromParameterMap(\n+                requestData);\n \n-        final GetFirmwareVersionAsyncResponse getFirmwareVersionAsyncResponse = this.smartMeteringConfigurationClient\n-                .getFirmwareVersion(getFirmwareVersionRequest);\n+        final GetFirmwareVersionAsyncResponse getFirmwareVersionAsyncResponse =\n+                this.smartMeteringConfigurationClient.getFirmwareVersion(\n+                getFirmwareVersionRequest);\n \n-        assertThat(getFirmwareVersionAsyncResponse).as(\"Get firmware version asyncResponse should not be null\")\n-                .isNotNull();\n-        LOGGER.info(\"Get firmware version asyncResponse is received {}\", getFirmwareVersionAsyncResponse);\n+        assertThat(getFirmwareVersionAsyncResponse).as(\n+                \"Get firmware version asyncResponse should not be null\").isNotNull();\n+        log.info(\"Get firmware version asyncResponse is received {}\", getFirmwareVersionAsyncResponse);\n \n         ScenarioContext.current().put(PlatformSmartmeteringKeys.KEY_CORRELATION_UID,\n                 getFirmwareVersionAsyncResponse.getCorrelationUid());\n     }\n \n+    @When(\"^the get firmware version gas request is received$\")\n+    public void theGetFirmwareVersionGasRequestIsReceived(final Map<String, String> requestData) throws Throwable {\n+        final GetFirmwareVersionGasRequest gasRequest = GetFirmwareVersionGasRequestFactory.fromParameterMap(\n+                requestData);\n+\n+        final GetFirmwareVersionGasAsyncResponse gasAsyncResponse =\n+                this.smartMeteringConfigurationClient.getFirmwareVersionGas(\n+                gasRequest);\n+\n+        assertThat(gasAsyncResponse).as(\"Get firmware version gas asyncResponse should not be null\").isNotNull();\n+        log.info(\"Get firmware version gas asyncResponse is received {}\", gasAsyncResponse);\n+\n+        ScenarioContext.current().put(PlatformSmartmeteringKeys.KEY_CORRELATION_UID,\n+                gasAsyncResponse.getCorrelationUid());\n+    }\n+\n     @Then(\"^the firmware version result should be returned$\")\n     public void theFirmwareVersionResultShouldBeReturned(final Map<String, String> settings) throws Throwable {\n-        final GetFirmwareVersionAsyncRequest getFirmwareVersionAsyncRequest = FirmwareVersionRequestFactory\n-                .fromScenarioContext();\n-        final GetFirmwareVersionResponse getFirmwareVersionResponse = this.smartMeteringConfigurationClient\n-                .retrieveGetFirmwareVersionResponse(getFirmwareVersionAsyncRequest);\n+        final GetFirmwareVersionAsyncRequest getFirmwareVersionAsyncRequest =\n+                FirmwareVersionRequestFactory.fromScenarioContext();\n+\n+        final GetFirmwareVersionResponse getFirmwareVersionResponse =\n+                this.smartMeteringConfigurationClient.retrieveGetFirmwareVersionResponse(\n+                getFirmwareVersionAsyncRequest);\n \n-        assertThat(getFirmwareVersionResponse.getResult()).as(\"Get firmware version response has result null\")\n-                .isNotNull();\n+        assertThat(getFirmwareVersionResponse.getResult()).as(\n+                \"Get firmware version response has result null\").isNotNull();\n         assertThat(getFirmwareVersionResponse.getResult()).as(\"Response should be OK\").isEqualTo(OsgpResultType.OK);\n \n         final List<FirmwareVersion> firmwareVersions = getFirmwareVersionResponse.getFirmwareVersion();\n \n         this.checkFirmwareVersionResult(settings, firmwareVersions);\n     }\n \n+    @Then(\"^the firmware version gas result should be returned$\")\n+    public void theFirmwareVersionGasResultShouldBeReturned(final Map<String, String> settings) throws Throwable {\n+        final GetFirmwareVersionGasAsyncRequest gasAsyncRequest =\n+                new GetFirmwareVersionGasAsyncRequest();\n+        gasAsyncRequest.setCorrelationUid(RequestFactoryHelper.getCorrelationUidFromScenarioContext());\n+        gasAsyncRequest.setDeviceIdentification(\n+                settings.get(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION));\n+\n+        final GetFirmwareVersionGasResponse gasResponse =\n+                this.smartMeteringConfigurationClient.retrieveGetFirmwareVersionGasResponse(\n+                gasAsyncRequest);\n+\n+        assertThat(gasResponse.getResult()).as(\n+                \"Get firmware version response has result null\").isNotNull();\n+        assertThat(gasResponse.getResult()).as(\"Response should be OK\").isEqualTo(OsgpResultType.OK);\n+\n+        final FirmwareVersionGas firmwareVersion = gasResponse.getFirmwareVersion();\n+\n+        this.checkFirmwareVersionGasResult(settings, firmwareVersion);\n+    }\n+\n     public void checkFirmwareVersionResult(final Map<String, String> settings,\n             final List<FirmwareVersion> firmwareVersions) {\n \n-        final Map<FirmwareModule, String> expectedVersionsByModule = this.deviceFirmwareModuleSteps\n-                .getFirmwareModuleVersions(settings, true);\n+        final Map<FirmwareModule, String> expectedVersionsByModule =\n+                this.deviceFirmwareModuleSteps.getFirmwareModuleVersions(\n+                settings, true);\n \n         assertThat(firmwareVersions.size()).as(\"Number of firmware modules\").isEqualTo(expectedVersionsByModule.size());\n \n         for (final FirmwareVersion receivedFirmwareVersion : firmwareVersions) {\n-            assertThat(receivedFirmwareVersion.getFirmwareModuleType()).as(\"The received firmware module type is null\")\n-                    .isNotNull();\n+            assertThat(receivedFirmwareVersion.getFirmwareModuleType()).as(\n+                    \"The received firmware module type is null\").isNotNull();\n \n             assertThat(receivedFirmwareVersion.getVersion()).as(\"The received firmware version is null\").isNotNull();\n             final String moduleDescription = receivedFirmwareVersion.getFirmwareModuleType().name();\n             final String moduleVersion = receivedFirmwareVersion.getVersion();\n \n-            final FirmwareModule firmwareModule = this.firmwareModuleRepository\n-                    .findByDescriptionIgnoreCase(moduleDescription);\n-            assertThat(firmwareModule).as(\"Received version \\\"\" + moduleVersion + \"\\\" for unknown firmware module \\\"\"\n-                    + moduleDescription + \"\\\"\").isNotNull();\n+            final FirmwareModule firmwareModule = this.firmwareModuleRepository.findByDescriptionIgnoreCase(\n+                    moduleDescription);\n+            assertThat(firmwareModule).as(\n+                    \"Received version \\\"\" + moduleVersion + \"\\\" for unknown firmware module \\\"\" + moduleDescription\n+                            + \"\\\"\").isNotNull();\n \n             final String expectedVersion = expectedVersionsByModule.get(firmwareModule);\n-            assertThat(expectedVersion).as(\"Received version \\\"\" + moduleVersion + \"\\\" for firmware module \\\"\"\n-                    + moduleDescription + \"\\\" which was not expected\").isNotNull();\n-            assertThat(moduleVersion).as(\"Version for firmware module \\\"\" + moduleDescription + \"\\\"\")\n-                    .isEqualTo(expectedVersion);\n+            assertThat(expectedVersion).as(\n+                    \"Received version \\\"\" + moduleVersion + \"\\\" for firmware module \\\"\" + moduleDescription\n+                            + \"\\\" which was not expected\").isNotNull();\n+            assertThat(moduleVersion).as(\"Version for firmware module \\\"\" + moduleDescription + \"\\\"\").isEqualTo(\n+                    expectedVersion);\n         }\n     }\n \n+    public void checkFirmwareVersionGasResult(final Map<String, String> settings,\n+            final FirmwareVersionGas firmwareVersionGas) {\n+\n+        assertThat(firmwareVersionGas.getFirmwareModuleType()).as(\n+                \"The received firmware module type is null\").isNotNull();\n+\n+        assertThat(firmwareVersionGas.getVersion()).as(\"The received firmware version is null\").isNotNull();\n+\n+        final String moduleDescription = firmwareVersionGas.getFirmwareModuleType().name();\n+        final String moduleVersion = new String(firmwareVersionGas.getVersion());\n+\n+        final FirmwareModule firmwareModule = this.firmwareModuleRepository.findByDescriptionIgnoreCase(\n+                moduleDescription);\n+\n+        assertThat(firmwareModule).as(\n+                String.format(\"Received version \\\"%s\\\" for unknown firmware module \\\"%s\\\"\", moduleVersion,\n+                        moduleDescription)).isNotNull();\n+\n+        final String expectedVersion = getNullOrNonEmptyString(settings, PlatformKeys.SIMPLE_VERSION_INFO, null);\n+\n+        assertThat(expectedVersion).as(\n+                String.format(\"Received version \\\"%s\\\" for unknown firmware module \\\"%s\\\"\", moduleVersion,\n+                        moduleDescription)).isNotNull();\n+\n+        assertThat(moduleVersion).as(String.format(\"Version for firmware module \\\"%s\\\"\", moduleDescription)).isEqualTo(\n+                expectedVersion);\n+    }\n }"
  },
  {
    "sha": "cc7ca65c17c892183aab90a71f4393b6bd8ade42",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/bundle/SmartMeteringBundleClient.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/bundle/SmartMeteringBundleClient.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/bundle/SmartMeteringBundleClient.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/bundle/SmartMeteringBundleClient.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -1,9 +1,10 @@\n /**\n  * Copyright 2017 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.bundle;\n "
  },
  {
    "sha": "3330a7ae54a9fcacef0e2a236f3dbcb00141f9a5",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/configuration/GetFirmwareVersionGasRequestFactory.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/configuration/GetFirmwareVersionGasRequestFactory.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/configuration/GetFirmwareVersionGasRequestFactory.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/configuration/GetFirmwareVersionGasRequestFactory.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.configuration;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasRequest;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.RequestFactoryHelper;\n+\n+public final class GetFirmwareVersionGasRequestFactory {\n+    private GetFirmwareVersionGasRequestFactory() {\n+        // Private constructor for utility class\n+    }\n+\n+    public static GetFirmwareVersionGasRequest fromParameterMap(final Map<String, String> requestParameters) {\n+        final GetFirmwareVersionGasRequest gasRequest = new GetFirmwareVersionGasRequest();\n+        gasRequest.setDeviceIdentification(requestParameters.get(PlatformSmartmeteringKeys.KEY_DEVICE_IDENTIFICATION));\n+        return gasRequest;\n+    }\n+\n+    public static GetFirmwareVersionGasAsyncRequest fromScenarioContext() {\n+        final GetFirmwareVersionGasAsyncRequest gasAsyncRequest = new GetFirmwareVersionGasAsyncRequest();\n+        gasAsyncRequest.setCorrelationUid(RequestFactoryHelper.getCorrelationUidFromScenarioContext());\n+        gasAsyncRequest.setDeviceIdentification(RequestFactoryHelper.getDeviceIdentificationFromScenarioContext());\n+        return gasAsyncRequest;\n+    }\n+}"
  },
  {
    "sha": "3a40310f35a4e1a3beafee3dd183ff54b16a3521",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/configuration/SmartMeteringConfigurationClient.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/configuration/SmartMeteringConfigurationClient.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/configuration/SmartMeteringConfigurationClient.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/configuration/SmartMeteringConfigurationClient.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -21,6 +21,10 @@\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetAdministrativeStatusResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionAsyncRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetMbusEncryptionKeyStatusAsyncRequest;\n@@ -108,6 +112,11 @@ public GetFirmwareVersionAsyncResponse getFirmwareVersion(final GetFirmwareVersi\n         return (GetFirmwareVersionAsyncResponse) this.getTemplate().marshalSendAndReceive(getFirmwareVersionRequest);\n     }\n \n+    public GetFirmwareVersionGasAsyncResponse getFirmwareVersionGas(\n+            final GetFirmwareVersionGasRequest getFirmwareVersionRequest) throws WebServiceSecurityException {\n+        return (GetFirmwareVersionGasAsyncResponse) this.getTemplate().marshalSendAndReceive(getFirmwareVersionRequest);\n+    }\n+\n     public GetFirmwareVersionResponse retrieveGetFirmwareVersionResponse(\n             final GetFirmwareVersionAsyncRequest getFirmwareVersionAsyncRequest) throws WebServiceSecurityException {\n \n@@ -117,6 +126,15 @@ public GetFirmwareVersionResponse retrieveGetFirmwareVersionResponse(\n         return (GetFirmwareVersionResponse) this.getTemplate().marshalSendAndReceive(getFirmwareVersionAsyncRequest);\n     }\n \n+    public GetFirmwareVersionGasResponse retrieveGetFirmwareVersionGasResponse(\n+            final GetFirmwareVersionGasAsyncRequest gasAsyncRequest) throws WebServiceSecurityException {\n+\n+        final String correlationUid = gasAsyncRequest.getCorrelationUid();\n+        this.waitForNotification(correlationUid);\n+\n+        return (GetFirmwareVersionGasResponse) this.getTemplate().marshalSendAndReceive(gasAsyncRequest);\n+    }\n+\n     public SetActivityCalendarAsyncResponse setActivityCalendar(\n             final SetActivityCalendarRequest setActivityCalendarRequest) throws WebServiceSecurityException {\n         return (SetActivityCalendarAsyncResponse) this.getTemplate().marshalSendAndReceive(setActivityCalendarRequest);"
  },
  {
    "sha": "828ffce53c5cb550edef3f5dcbb6c649cb113c67",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/bundle/BundledGetFirmwareVersion.feature",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/bundle/BundledGetFirmwareVersion.feature",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/bundle/BundledGetFirmwareVersion.feature",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/bundle/BundledGetFirmwareVersion.feature?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -21,3 +21,27 @@ Feature: SmartMetering Bundle - GetFirmwareVersion\n       | FirmwareModuleVersionMa   | BL_012 XMX_N42_GprsV09 |\n       | FirmwareModuleVersionFunc | M57 4836               |\n       | FirmwareIsForSmartMeters  | true                   |\n+\n+  Scenario: Retrieve the firmware version of a mbus device in a bundle request\n+    Given a dlms device\n+      | DeviceIdentification | TEST1027000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+      | Protocol             | SMR               |\n+      | ProtocolVersion      | 5.1               |\n+      | Port                 | 1027              |\n+    And a dlms device\n+      | DeviceIdentification        | TEST1027000000002 |\n+      | DeviceType                  | SMART_METER_G     |\n+      | GatewayDeviceIdentification | TEST1027000000001 |\n+      | Channel                     | 2                 |\n+      | MbusPrimaryAddress          | 2                 |\n+    And a bundle request\n+      | DeviceIdentification | TEST1027000000001 |\n+    And the bundle request contains a get firmware version gas action\n+      | DeviceIdentification | TEST1027000000002 |\n+    When the bundle request is received\n+    Then the bundle response should contain a get firmware version gas response\n+      | SimpleVersionInfo | 19180706 |\n+    And the database should be updated with the device firmware version\n+      | DeviceIdentification | TEST1027000000002 |\n+      | SimpleVersionInfo    | 19180706          |"
  },
  {
    "sha": "bc85a5592b94b0a6af9044746a3dc9560e35c602",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/configuration/Firmware.feature",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/configuration/Firmware.feature",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/configuration/Firmware.feature",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/configuration/Firmware.feature?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -67,6 +67,28 @@ Feature: SmartMetering Configuration - Firmware\n       | FirmwareModuleVersionMbda | M00 0000               |\n       | FirmwareIsForSmartMeters  | true                   |\n \n+  Scenario: Get the firmware version from SMR 5.1 gas meter\n+    Given a dlms device\n+      | DeviceIdentification | TEST1027000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+      | Protocol             | SMR               |\n+      | ProtocolVersion      | 5.1               |\n+      | Port                 | 1027              |\n+    And a dlms device\n+      | DeviceIdentification        | TEST1027000000002 |\n+      | DeviceType                  | SMART_METER_G     |\n+      | GatewayDeviceIdentification | TEST1027000000001 |\n+      | Channel                     | 3                 |\n+      | FirmwareModuleVersionSimple | V 1.1             |\n+    When the get firmware version gas request is received\n+      | DeviceIdentification | TEST1027000000002 |\n+    Then the firmware version gas result should be returned\n+      | DeviceIdentification | TEST1027000000002 |\n+      | SimpleVersionInfo    | 00400011          |\n+    And the database should be updated with the device firmware version\n+      | DeviceIdentification | TEST1027000000002 |\n+      | SimpleVersionInfo    | 00400011          |\n+\n   @NightlyBuildOnly\n   Scenario: successful upgrade of firmware\n     Given a manufacturer"
  },
  {
    "sha": "2c64e80f74f7b8692603f31b88ed5b6374d6a93b",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformDefaults.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformDefaults.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformDefaults.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformDefaults.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -167,6 +167,7 @@\n     public static final String FIRMWARE_MODULE_VERSION_MBUS = \"4\";\n     public static final String FIRMWARE_MODULE_VERSION_SEC = \"5\";\n     public static final String FIRMWARE_MODULE_VERSION_M_BUS_DRIVER_ACTIVE = \"6\";\n+    public static final String FIRMWARE_MODULE_VERSION_SIMPLE = \"7\";\n     public static final String FIRMWARE_INSTALLED_BY = \"Test User\";\n     public static final String FIRMWARE_INSTALLATION_DATE = \"now\";\n     public static final Boolean FIRMWARE_FILE_EXISTS = true;"
  },
  {
    "sha": "ae5568f25a74e04073f1d6f2ab4a7ee851ff76f9",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformKeys.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformKeys.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformKeys.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformKeys.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -50,6 +50,7 @@\n     public static final String FIRMWARE_MODULE_VERSION_MBUS = \"FirmwareModuleVersionMbus\";\n     public static final String FIRMWARE_MODULE_VERSION_SEC = \"FirmwareModuleVersionSec\";\n     public static final String FIRMWARE_MODULE_VERSION_M_BUS_DRIVER_ACTIVE = \"FirmwareModuleVersionMbda\";\n+    public static final String SIMPLE_VERSION_INFO = \"SimpleVersionInfo\";\n     public static final String FIRMWARE_PUSH_TO_NEW_DEVICES = \"FirmwarePushToNewDevices\";\n     public static final String FIRMWARE_VERSION = \"FirmwareVersion\";\n     public static final String FROM_DATE = \"FromDate\";"
  },
  {
    "sha": "b4e65293915adf8621afec81027c465d3ede53f5",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/core/builders/FirmwareFileBuilder.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/core/builders/FirmwareFileBuilder.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/core/builders/FirmwareFileBuilder.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/core/builders/FirmwareFileBuilder.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -27,7 +27,8 @@\n     private String moduleVersionMa = PlatformDefaults.FIRMWARE_MODULE_VERSION_MA;\n     private String moduleVersionMbus = PlatformDefaults.FIRMWARE_MODULE_VERSION_MBUS;\n     private String moduleVersionSec = PlatformDefaults.FIRMWARE_MODULE_VERSION_SEC;\n-    private String moduleVersionMBusDriverActive = PlatformDefaults.FIRMWARE_MODULE_VERSION_M_BUS_DRIVER_ACTIVE;\n+    private final String moduleVersionMBusDriverActive = PlatformDefaults.FIRMWARE_MODULE_VERSION_M_BUS_DRIVER_ACTIVE;\n+    private final String moduleVersionSimple = PlatformDefaults.FIRMWARE_MODULE_VERSION_SIMPLE;\n     private byte file[];\n     private String hash;\n \n@@ -104,7 +105,8 @@ public FirmwareFile build(final FirmwareModuleRepository firmwareModuleRepositor\n             firmwareFile.addDeviceModel(this.deviceModel);\n         }\n         firmwareFile.updateFirmwareModuleData(new FirmwareModuleData(this.moduleVersionComm, this.moduleVersionFunc,\n-                this.moduleVersionMa, this.moduleVersionMbus, this.moduleVersionSec, this.moduleVersionMBusDriverActive)\n+                this.moduleVersionMa, this.moduleVersionMbus, this.moduleVersionSec, this.moduleVersionMBusDriverActive,\n+                this.moduleVersionSimple)\n                         .getVersionsByModule(firmwareModuleRepository, isForSmartMeters));\n         return firmwareFile;\n     }"
  },
  {
    "sha": "2dc6c9cf36ef2855f9afb3d528f0df8c628cebb6",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/DeviceFirmwareModuleSteps.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/DeviceFirmwareModuleSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/DeviceFirmwareModuleSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/DeviceFirmwareModuleSteps.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -14,6 +14,7 @@\n \n import java.util.Map;\n \n+import io.cucumber.java.en.Then;\n import org.opensmartgridplatform.cucumber.platform.PlatformDefaults;\n import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n import org.opensmartgridplatform.domain.core.entities.Device;\n@@ -23,8 +24,6 @@\n import org.opensmartgridplatform.domain.core.valueobjects.FirmwareModuleData;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import io.cucumber.java.en.Then;\n-\n public class DeviceFirmwareModuleSteps {\n \n     @Autowired\n@@ -94,9 +93,10 @@ public void theDatabaseShouldBeUpdatedWithTheDeviceFirmwareVersion(final Map<Str\n         final String sec = getNullOrNonEmptyString(settings, PlatformKeys.FIRMWARE_MODULE_VERSION_SEC, null);\n         final String mBusDriverActive = getNullOrNonEmptyString(settings,\n                 PlatformKeys.FIRMWARE_MODULE_VERSION_M_BUS_DRIVER_ACTIVE, null);\n+        final String simpleVersionInfo = getNullOrNonEmptyString(settings, PlatformKeys.SIMPLE_VERSION_INFO, null);\n \n         final FirmwareModuleData firmwareModuleData = new FirmwareModuleData(comm, func, ma, mbus, sec,\n-                mBusDriverActive);\n+                mBusDriverActive, simpleVersionInfo);\n         return firmwareModuleData.getVersionsByModule(this.firmwareModuleRepository, isForSmartMeters);\n     }\n }"
  },
  {
    "sha": "e1828fb925361b4059db22443db94b2c82e328af",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/ScheduledTaskSteps.java",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/ScheduledTaskSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/ScheduledTaskSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/ScheduledTaskSteps.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -22,6 +22,7 @@\n import java.util.Map;\n import java.util.function.Function;\n \n+import io.cucumber.java.en.Given;\n import org.opensmartgridplatform.cucumber.core.DateTimeHelper;\n import org.opensmartgridplatform.cucumber.core.ReadSettingsHelper;\n import org.opensmartgridplatform.domain.core.entities.ScheduledTask;\n@@ -32,8 +33,6 @@\n import org.opensmartgridplatform.shared.infra.jms.MessageType;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import io.cucumber.java.en.Given;\n-\n public class ScheduledTaskSteps extends BaseDeviceSteps {\n \n     private static final Map<String, Function<Map<String, String>, ScheduledTask>> SCHEDULED_TASK_CREATOR_MAP = new HashMap<>();\n@@ -59,12 +58,12 @@ private static ScheduledTask createUpdateFirmwareScheduledTask(final Map<String,\n                 DEFAULT_CORRELATION_UID);\n         final String messageType = MessageType.UPDATE_FIRMWARE.toString();\n         final int messagePriority = 4;\n-        final Long scheduleTime = DateTimeHelper\n-                .getDateTime(ReadSettingsHelper.getString(settings, KEY_SCHEDULED_TIME, DEFAULT_SCHEDULED_TIME))\n-                .getMillis();\n+        final Long scheduleTime = DateTimeHelper.getDateTime(\n+                ReadSettingsHelper.getString(settings, KEY_SCHEDULED_TIME, DEFAULT_SCHEDULED_TIME)).getMillis();\n         final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n                 organisationIdentification, correlationUid, messageType, messagePriority, scheduleTime);\n-        final FirmwareModuleData firmwareModuleData = new FirmwareModuleData(null, \"FW-01\", null, null, null, null);\n+        final FirmwareModuleData firmwareModuleData = new FirmwareModuleData(null, \"FW-01\", null, null, null, null,\n+                null);\n         final String firmwareUrl = \"firmware-url\";\n         final Serializable messageData = new FirmwareUpdateMessageDataContainer(firmwareModuleData, firmwareUrl);\n         return new ScheduledTask(deviceMessageMetadata, \"CORE\", \"1.0\", messageData, new Timestamp(scheduleTime));"
  },
  {
    "sha": "ac2611fd25d2348c6382b1526a3b2841a3333fb1",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/ConfigurationMapper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/ConfigurationMapper.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/ConfigurationMapper.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/ConfigurationMapper.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -13,6 +13,7 @@\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.CosemDateTimeConverter;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.CosemObisCodeConverter;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.FirmwareVersionConverter;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.FirmwareVersionGasConverter;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.GetAllAttributeValuesResponseConverter;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.PushSetupAlarmDtoConverter;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.PushSetupSmsDtoConverter;\n@@ -30,6 +31,7 @@ public void configure(final MapperFactory mapperFactory) {\n         mapperFactory.getConverterFactory().registerConverter(new CosemDateTimeConverter(this));\n         mapperFactory.getConverterFactory().registerConverter(new AdministrativeStatusResponseConverter());\n         mapperFactory.getConverterFactory().registerConverter(new FirmwareVersionConverter());\n+        mapperFactory.getConverterFactory().registerConverter(new FirmwareVersionGasConverter());\n         mapperFactory.getConverterFactory().registerConverter(new GetAllAttributeValuesResponseConverter());\n         mapperFactory.getConverterFactory().registerConverter(new WeekProfileConverter(this));\n         mapperFactory.getConverterFactory().registerConverter(new PushSetupSmsDtoConverter(this));"
  },
  {
    "sha": "29b41346dbb0195cae8eae85eab9e87e27b2315a",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/FirmwareVersionConverter.java",
    "status": "modified",
    "additions": 9,
    "deletions": 10,
    "changes": 19,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/FirmwareVersionConverter.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/FirmwareVersionConverter.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/FirmwareVersionConverter.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -1,31 +1,30 @@\n /**\n  * Copyright 2016 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n \n-import org.opensmartgridplatform.domain.core.valueobjects.FirmwareVersion;\n-import org.opensmartgridplatform.dto.valueobjects.FirmwareVersionDto;\n-\n import ma.glasnost.orika.CustomConverter;\n import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n+import org.opensmartgridplatform.domain.core.valueobjects.FirmwareVersion;\n+import org.opensmartgridplatform.dto.valueobjects.FirmwareVersionDto;\n \n public class FirmwareVersionConverter extends CustomConverter<FirmwareVersionDto, FirmwareVersion> {\n \n     @Override\n     public FirmwareVersion convert(final FirmwareVersionDto source,\n             final Type<? extends FirmwareVersion> destinationType, final MappingContext context) {\n \n-        if (source != null) {\n-\n-            return new FirmwareVersion(org.opensmartgridplatform.domain.core.valueobjects.FirmwareModuleType\n-                    .valueOf(source.getFirmwareModuleType().name()), source.getVersion());\n+        if (source == null) {\n+            return null;\n         }\n \n-        return null;\n+        return new FirmwareVersion(org.opensmartgridplatform.domain.core.valueobjects.FirmwareModuleType.valueOf(\n+                source.getFirmwareModuleType().name()), source.getVersion());\n     }\n }"
  },
  {
    "sha": "12dc324c145e017cac7cb05ec1e8312bb2185e08",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/FirmwareVersionGasConverter.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/FirmwareVersionGasConverter.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/FirmwareVersionGasConverter.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/FirmwareVersionGasConverter.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+import org.opensmartgridplatform.domain.core.valueobjects.FirmwareVersion;\n+import org.opensmartgridplatform.dto.valueobjects.FirmwareVersionGasDto;\n+\n+public class FirmwareVersionGasConverter extends CustomConverter<FirmwareVersionGasDto, FirmwareVersion> {\n+\n+    @Override\n+    public FirmwareVersion convert(final FirmwareVersionGasDto source,\n+            final Type<? extends FirmwareVersion> destinationType, final MappingContext context) {\n+\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        return new FirmwareVersion(org.opensmartgridplatform.domain.core.valueobjects.FirmwareModuleType.valueOf(\n+                source.getFirmwareModuleType().name()), source.getVersion());\n+    }\n+}"
  },
  {
    "sha": "b90eaf2a642285c7db1acd39ce5da737abbcfab9",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/GetFirmwareVersionGasRequestDataConverter.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/GetFirmwareVersionGasRequestDataConverter.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/GetFirmwareVersionGasRequestDataConverter.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/GetFirmwareVersionGasRequestDataConverter.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n+\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.services.DomainHelperService;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.SmartMeter;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetFirmwareVersionGasRequestData;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.ChannelDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetFirmwareVersionGasRequestDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class GetFirmwareVersionGasRequestDataConverter\n+        implements CustomValueToDtoConverter<GetFirmwareVersionGasRequestData, GetFirmwareVersionGasRequestDto> {\n+\n+    @Autowired\n+    private DomainHelperService domainHelperService;\n+\n+    /**\n+     * This overridden convert is used from the bundle flow where the deviceIdentification from the bundle is used to\n+     * fetch and supply the SmartMeter, which is an E meter. Since the channel is needed to enrich the DTO, the G\n+     * meter is fetched with the deviceIdentification supplied as field of the request.\n+     *\n+     * @param gasRequestData request containing the deviceIdentification of the G meter\n+     * @param eMeter E meter supplied by the bundle process, not used for G meter requests\n+     *\n+     * @return DTO containing the channel of the G meter\n+     *\n+     * @throws FunctionalException\n+     */\n+    @Override\n+    public GetFirmwareVersionGasRequestDto convert(final GetFirmwareVersionGasRequestData gasRequestData,\n+            final SmartMeter eMeter) throws FunctionalException {\n+\n+        final SmartMeter gasMeter = this.domainHelperService.findSmartMeter(gasRequestData.getDeviceIdentification());\n+\n+        if (gasMeter.getChannel() == null) {\n+            /*\n+             * For now, throw a FunctionalException. As soon as we can\n+             * communicate with some types of gas meters directly, and not\n+             * through an M-Bus port of an energy meter, this will have to be\n+             * changed.\n+             */\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.DOMAIN_SMART_METERING,\n+                    new AssertionError(\"Retrieving firmware version for gas meter. No channel configured.\"));\n+        }\n+\n+        final Device gatewayDevice = gasMeter.getGatewayDevice();\n+\n+        if (gatewayDevice == null) {\n+            /*\n+             * For now throw a FunctionalException, based on the same reasoning\n+             * as with the channel a couple of lines up. As soon as we have\n+             * scenario's with direct communication with gas meters this will\n+             * have to be changed.\n+             */\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.DOMAIN_SMART_METERING,\n+                    new AssertionError(\"Retrieving firmware version for gas meter. No gateway device found.\"));\n+        }\n+\n+        return new GetFirmwareVersionGasRequestDto(ChannelDto.fromNumber(gasMeter.getChannel()),\n+                gasRequestData.getDeviceIdentification());\n+    }\n+}"
  },
  {
    "sha": "686d421befb5fdd880d778b634cfeb8e815e1567",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperResponseService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperResponseService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperResponseService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperResponseService.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -15,6 +15,7 @@\n \n import javax.annotation.PostConstruct;\n \n+import ma.glasnost.orika.impl.ConfigurableMapper;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.CommonMapper;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ConfigurationMapper;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ManagementMapper;\n@@ -28,6 +29,7 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EventMessagesResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FaultResponse;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FirmwareVersionGasResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FirmwareVersionResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetAllAttributeValuesResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetConfigurationObjectResponse;\n@@ -51,6 +53,7 @@\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.EventMessageDataResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.FaultResponseDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.FirmwareVersionGasResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.FirmwareVersionResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetAllAttributeValuesResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetConfigurationObjectResponseDto;\n@@ -72,8 +75,6 @@\n import org.springframework.stereotype.Service;\n import org.springframework.validation.annotation.Validated;\n \n-import ma.glasnost.orika.impl.ConfigurableMapper;\n-\n @Service(value = \"domainSmartMeteringActionMapperResponseService\")\n @Validated\n public class ActionMapperResponseService {\n@@ -108,6 +109,7 @@\n         classMap.put(PeriodicMeterReadGasResponseDto.class, PeriodicMeterReadsContainerGas.class);\n         classMap.put(GetAllAttributeValuesResponseDto.class, GetAllAttributeValuesResponse.class);\n         classMap.put(FirmwareVersionResponseDto.class, FirmwareVersionResponse.class);\n+        classMap.put(FirmwareVersionGasResponseDto.class, FirmwareVersionGasResponse.class);\n         classMap.put(UpdateFirmwareResponseDto.class, UpdateFirmwareResponse.class);\n         classMap.put(AssociationLnObjectsResponseDto.class, AssociationLnObjectsResponseData.class);\n         classMap.put(GetConfigurationObjectResponseDto.class, GetConfigurationObjectResponse.class);\n@@ -139,6 +141,7 @@ private void postConstruct() {\n         classToMapperMap.put(PeriodicMeterReadGasResponseDto.class, this.monitoringMapper);\n         classToMapperMap.put(GetAllAttributeValuesResponseDto.class, this.configurationMapper);\n         classToMapperMap.put(FirmwareVersionResponseDto.class, this.configurationMapper);\n+        classToMapperMap.put(FirmwareVersionGasResponseDto.class, this.configurationMapper);\n         classToMapperMap.put(UpdateFirmwareResponseDto.class, this.configurationMapper);\n         classToMapperMap.put(AssociationLnObjectsResponseDto.class, this.commonMapper);\n         classToMapperMap.put(GetConfigurationObjectResponseDto.class, this.configurationMapper);"
  },
  {
    "sha": "52d444326e248323827f8a5aec277eca24e5f261",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperService.java",
    "status": "modified",
    "additions": 27,
    "deletions": 27,
    "changes": 54,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperService.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -21,6 +21,7 @@\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.MonitoringMapper;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.ActualMeterReadsRequestGasRequestDataConverter;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.CustomValueToDtoConverter;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.GetFirmwareVersionGasRequestDataConverter;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.PeriodicReadsRequestGasDataConverter;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.SetEncryptionKeyExchangeOnGMeterDataConverter;\n import org.opensmartgridplatform.domain.core.entities.SmartMeter;\n@@ -41,6 +42,7 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetAllAttributeValuesRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetAssociationLnObjectsRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetConfigurationObjectRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetFirmwareVersionGasRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetFirmwareVersionRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetMbusEncryptionKeyStatusByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetMbusEncryptionKeyStatusRequestData;\n@@ -117,31 +119,6 @@\n @Validated\n public class ActionMapperService {\n \n-    @Autowired\n-    @Qualifier(\"configurationMapper\")\n-    private ConfigurationMapper configurationMapper;\n-\n-    @Autowired\n-    private ManagementMapper managementMapper;\n-\n-    @Autowired\n-    private MonitoringMapper monitoringMapper;\n-\n-    @Autowired\n-    private CommonMapper commonMapper;\n-\n-    @Autowired\n-    private PeriodicReadsRequestGasDataConverter periodicReadsRequestGasDataConverter;\n-\n-    @Autowired\n-    private ActualMeterReadsRequestGasRequestDataConverter actualReadsRequestGasDataConverter;\n-\n-    @Autowired\n-    private SetEncryptionKeyExchangeOnGMeterDataConverter setEncryptionKeyExchangeOnGMeterDataConverter;\n-\n-    @Autowired\n-    private DomainHelperService domainHelperService;\n-\n     private static final Map<Class<? extends ActionRequest>, ConfigurableMapper> CLASS_TO_MAPPER_MAP = new HashMap<>();\n     private static final Map<Class<? extends ActionRequest>, CustomValueToDtoConverter<? extends ActionRequest, ? extends ActionRequestDto>> CUSTOM_CONVERTER_FOR_CLASS = new HashMap<>();\n     private static final Map<Class<? extends ActionRequest>, Class<? extends ActionRequestDto>> CLASS_MAP = new HashMap<>();\n@@ -188,6 +165,26 @@\n         CLASS_MAP.put(ActualPowerQualityRequest.class, ActualPowerQualityRequestDto.class);\n     }\n \n+    @Autowired\n+    @Qualifier(\"configurationMapper\")\n+    private ConfigurationMapper configurationMapper;\n+    @Autowired\n+    private ManagementMapper managementMapper;\n+    @Autowired\n+    private MonitoringMapper monitoringMapper;\n+    @Autowired\n+    private CommonMapper commonMapper;\n+    @Autowired\n+    private PeriodicReadsRequestGasDataConverter periodicReadsRequestGasDataConverter;\n+    @Autowired\n+    private ActualMeterReadsRequestGasRequestDataConverter actualReadsRequestGasDataConverter;\n+    @Autowired\n+    private SetEncryptionKeyExchangeOnGMeterDataConverter setEncryptionKeyExchangeOnGMeterDataConverter;\n+    @Autowired\n+    private GetFirmwareVersionGasRequestDataConverter getFirmwareVersionGasRequestDataConverter;\n+    @Autowired\n+    private DomainHelperService domainHelperService;\n+\n     /**\n      * Specifies which mapper to use for the core class received.\n      */\n@@ -199,6 +196,8 @@ private void postConstruct() {\n         CUSTOM_CONVERTER_FOR_CLASS.put(ActualMeterReadsGasRequestData.class, this.actualReadsRequestGasDataConverter);\n         CUSTOM_CONVERTER_FOR_CLASS.put(SetEncryptionKeyExchangeOnGMeterRequestData.class,\n                 this.setEncryptionKeyExchangeOnGMeterDataConverter);\n+        CUSTOM_CONVERTER_FOR_CLASS.put(GetFirmwareVersionGasRequestData.class,\n+                this.getFirmwareVersionGasRequestDataConverter);\n \n         CLASS_TO_MAPPER_MAP.put(PeriodicMeterReadsRequestData.class, this.monitoringMapper);\n         CLASS_TO_MAPPER_MAP.put(ActualMeterReadsRequestData.class, this.commonMapper);\n@@ -250,8 +249,9 @@ private ActionDto mapActionWithMapper(final SmartMeter smartMeter, final ActionR\n             throws FunctionalException {\n         @SuppressWarnings(\"unchecked\")\n         // TODO: fix this\n-        final CustomValueToDtoConverter<ActionRequest, ActionRequestDto> customValueToDtoConverter = (CustomValueToDtoConverter<ActionRequest, ActionRequestDto>) CUSTOM_CONVERTER_FOR_CLASS\n-                .get(action.getClass());\n+        final CustomValueToDtoConverter<ActionRequest, ActionRequestDto> customValueToDtoConverter =\n+                (CustomValueToDtoConverter<ActionRequest, ActionRequestDto>) CUSTOM_CONVERTER_FOR_CLASS.get(\n+                action.getClass());\n \n         if (customValueToDtoConverter != null) {\n             return new ActionDto(customValueToDtoConverter.convert(action, smartMeter));"
  },
  {
    "sha": "1578522a434b16d0d92df2183f868be07c9438a9",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/BundleService.java",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/BundleService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/BundleService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/BundleService.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -7,6 +7,7 @@\n  */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.services;\n \n+import java.util.Arrays;\n import java.util.List;\n \n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ConfigurationMapper;\n@@ -20,6 +21,7 @@\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.BundleMessagesRequestDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.EventMessageDataResponseDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.FirmwareVersionGasResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.FirmwareVersionResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.SetDeviceLifecycleStatusByChannelResponseDto;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n@@ -140,10 +142,18 @@ private void checkIfAdditionalActionIsNeeded(final DeviceMessageMetadata deviceM\n             } else if (action instanceof EventMessageDataResponseDto) {\n                 this.eventService.addEventTypeToEvents(deviceMessageMetadata, (EventMessageDataResponseDto)action);\n             } else if (action instanceof FirmwareVersionResponseDto) {\n-                final List<FirmwareVersion> firmwareVersions = this.configurationMapper\n-                        .mapAsList(((FirmwareVersionResponseDto) action).getFirmwareVersions(), FirmwareVersion.class);\n+                final List<FirmwareVersion> firmwareVersions = this.configurationMapper.mapAsList(\n+                        ((FirmwareVersionResponseDto) action).getFirmwareVersions(), FirmwareVersion.class);\n                 this.firmwareService.saveFirmwareVersionsReturnedFromDevice(\n                         deviceMessageMetadata.getDeviceIdentification(), firmwareVersions);\n+            } else if (action instanceof FirmwareVersionGasResponseDto) {\n+                final FirmwareVersionGasResponseDto firmwareVersionGasResponseDto =\n+                        (FirmwareVersionGasResponseDto) action;\n+                final FirmwareVersion firmwareVersion = this.configurationMapper.map(\n+                        firmwareVersionGasResponseDto.getFirmwareVersion(), FirmwareVersion.class);\n+                this.firmwareService.saveFirmwareVersionsReturnedFromDevice(\n+                        firmwareVersionGasResponseDto.getFirmwareVersion().getMbusDeviceIdentification(),\n+                        Arrays.asList(firmwareVersion));\n             }\n         }\n     }"
  },
  {
    "sha": "f65aa71ed8c818a7ed70b21d72067a291ce31758",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ConfigurationService.java",
    "status": "modified",
    "additions": 313,
    "deletions": 297,
    "changes": 610,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ConfigurationService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ConfigurationService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ConfigurationService.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -9,6 +9,7 @@\n  */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.services;\n \n+import java.util.Arrays;\n import java.util.List;\n \n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ConfigurationMapper;\n@@ -22,9 +23,11 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.AlarmNotifications;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DefinableLoadProfileConfigurationData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EncryptionKeyStatusType;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FirmwareVersionGasResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FirmwareVersionResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetConfigurationObjectRequest;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetConfigurationObjectResponse;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetFirmwareVersionQuery;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetMbusEncryptionKeyStatusByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.SetClockConfigurationRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.SetKeysRequestData;\n@@ -34,14 +37,16 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.UpdateFirmwareResponse;\n import org.opensmartgridplatform.domain.smartmetering.exceptions.GatewayDeviceNotSetForMbusDeviceException;\n import org.opensmartgridplatform.dto.valueobjects.FirmwareVersionDto;\n+import org.opensmartgridplatform.dto.valueobjects.FirmwareVersionGasDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.ActivityCalendarDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.AdministrativeStatusTypeDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.AlarmNotificationsDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.ChannelDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.DefinableLoadProfileConfigurationDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GMeterInfoDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetConfigurationObjectRequestDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetConfigurationObjectResponseDto;\n-import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetFirmwareVersionRequestDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetFirmwareVersionQueryDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetMbusEncryptionKeyStatusByChannelRequestDataDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetMbusEncryptionKeyStatusByChannelResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GetMbusEncryptionKeyStatusRequestDto;\n@@ -106,15 +111,17 @@ public void setSpecialDays(final DeviceMessageMetadata deviceMessageMetadata,\n         LOGGER.info(\"setSpecialDays for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final SpecialDaysRequestDto specialDaysRequestDto = this.configurationMapper.map(specialDaysRequestValueObject,\n                 SpecialDaysRequestDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n-                        smartMeteringDevice.getIpAddress(), specialDaysRequestDto), deviceMessageMetadata.getMessageType(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n+                        smartMeteringDevice.getIpAddress(), specialDaysRequestDto),\n+                deviceMessageMetadata.getMessageType(),\n                 deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n \n@@ -125,14 +132,15 @@ public void setConfigurationObject(final DeviceMessageMetadata deviceMessageMeta\n         LOGGER.info(\"setConfigurationObject for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        final SetConfigurationObjectRequestDto setConfigurationObjectRequestDto = this.configurationMapper\n-                .map(setConfigurationObjectRequestValueObject, SetConfigurationObjectRequestDto.class);\n+        final SetConfigurationObjectRequestDto setConfigurationObjectRequestDto = this.configurationMapper.map(\n+                setConfigurationObjectRequestValueObject, SetConfigurationObjectRequestDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n                         smartMeteringDevice.getIpAddress(), setConfigurationObjectRequestDto),\n                 deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n                 deviceMessageMetadata.getScheduleTime());\n@@ -145,14 +153,15 @@ public void setPushSetupAlarm(final DeviceMessageMetadata deviceMessageMetadata,\n         LOGGER.info(\"setPushSetupAlarm for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final PushSetupAlarmDto pushSetupAlarmDto = this.configurationMapper.map(pushSetupAlarm,\n                 PushSetupAlarmDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n                         smartMeteringDevice.getIpAddress(), pushSetupAlarmDto), deviceMessageMetadata.getMessageType(),\n                 deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n@@ -164,13 +173,14 @@ public void setPushSetupSms(final DeviceMessageMetadata deviceMessageMetadata,\n         LOGGER.info(\"setPushSetupSms for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final PushSetupSmsDto pushSetupSmsDto = this.configurationMapper.map(pushSetupSms, PushSetupSmsDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n                         smartMeteringDevice.getIpAddress(), pushSetupSmsDto), deviceMessageMetadata.getMessageType(),\n                 deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n@@ -186,14 +196,11 @@ public void handleSpecialDaysResponse(final DeviceMessageMetadata deviceMessageM\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -203,15 +210,17 @@ public void setAlarmNotifications(final DeviceMessageMetadata deviceMessageMetad\n         LOGGER.info(\"setAlarmNotifications for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final AlarmNotificationsDto alarmNotificationsDto = this.configurationMapper.map(alarmNotifications,\n                 AlarmNotificationsDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n-                        smartMeteringDevice.getIpAddress(), alarmNotificationsDto), deviceMessageMetadata.getMessageType(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n+                        smartMeteringDevice.getIpAddress(), alarmNotificationsDto),\n+                deviceMessageMetadata.getMessageType(),\n                 deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n \n@@ -220,15 +229,14 @@ public void setAdministrativeStatus(final DeviceMessageMetadata deviceMessageMet\n \n         LOGGER.info(\n                 \"Set Administrative Status for organisationIdentification: {} for deviceIdentification: {} to status:\"\n-                        + \" {}\",\n-                deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n-                administrativeStatusType);\n+                        + \" {}\", deviceMessageMetadata.getOrganisationIdentification(),\n+                deviceMessageMetadata.getDeviceIdentification(), administrativeStatusType);\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        final AdministrativeStatusTypeDto administrativeStatusTypeDto = this.configurationMapper\n-                .map(administrativeStatusType, AdministrativeStatusTypeDto.class);\n+        final AdministrativeStatusTypeDto administrativeStatusTypeDto = this.configurationMapper.map(\n+                administrativeStatusType, AdministrativeStatusTypeDto.class);\n \n         final RequestMessage requestMessage = new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n@@ -249,14 +257,11 @@ public void handleSetAdministrativeStatusResponse(final DeviceMessageMetadata de\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -265,12 +270,11 @@ public void getAdministrativeStatus(final DeviceMessageMetadata deviceMessageMet\n \n         LOGGER.info(\n                 \"Get Administrative Status for organisationIdentification: {} for deviceIdentification: {} to status:\"\n-                        + \" {}\",\n-                deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n-                administrativeStatusType);\n+                        + \" {}\", deviceMessageMetadata.getOrganisationIdentification(),\n+                deviceMessageMetadata.getDeviceIdentification(), administrativeStatusType);\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final RequestMessage requestMessage = new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n@@ -294,18 +298,15 @@ public void handleGetAdministrativeStatusResponse(final DeviceMessageMetadata de\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final AdministrativeStatusType administrativeStatusType = this.configurationMapper\n-                .map(administrativeStatusTypeDto, AdministrativeStatusType.class);\n-\n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(osgpException)\n-                                                               .withDataObject(administrativeStatusType)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final AdministrativeStatusType administrativeStatusType = this.configurationMapper.map(\n+                administrativeStatusTypeDto, AdministrativeStatusType.class);\n+\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                osgpException).withDataObject(administrativeStatusType).withMessagePriority(\n+                deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -315,15 +316,17 @@ public void setActivityCalendar(final DeviceMessageMetadata deviceMessageMetadat\n         LOGGER.info(\"set Activity Calendar for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final ActivityCalendarDto activityCalendarDto = this.configurationMapper.map(activityCalendar,\n                 ActivityCalendarDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n-                        smartMeteringDevice.getIpAddress(), activityCalendarDto), deviceMessageMetadata.getMessageType(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n+                        smartMeteringDevice.getIpAddress(), activityCalendarDto),\n+                deviceMessageMetadata.getMessageType(),\n                 deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n \n@@ -338,14 +341,11 @@ public void handleSetAlarmNotificationsResponse(final DeviceMessageMetadata devi\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -361,14 +361,11 @@ public void handleSetConfigurationObjectResponse(final DeviceMessageMetadata dev\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -383,14 +380,11 @@ public void handleSetPushSetupAlarmResponse(final DeviceMessageMetadata deviceMe\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -405,14 +399,11 @@ public void handleSetPushSetupSmsResponse(final DeviceMessageMetadata deviceMess\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -427,15 +418,12 @@ public void handleSetActivityCalendarResponse(final DeviceMessageMetadata device\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withDataObject(resultString)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withDataObject(resultString).withMessagePriority(\n+                deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -444,11 +432,11 @@ public void setEncryptionKeyExchangeOnGMeter(final DeviceMessageMetadata deviceM\n \n         LOGGER.info(\n                 \"set Encryption Key Exchange On G-Meter for organisationIdentification: {} for deviceIdentification: \"\n-                        + \"{}\",\n-                deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n+                        + \"{}\", deviceMessageMetadata.getOrganisationIdentification(),\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter gasDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter gasDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final Device gatewayDevice = gasDevice.getGatewayDevice();\n         if (gatewayDevice == null) {\n@@ -462,8 +450,7 @@ public void setEncryptionKeyExchangeOnGMeter(final DeviceMessageMetadata deviceM\n                     ComponentType.DOMAIN_SMART_METERING, new GatewayDeviceNotSetForMbusDeviceException());\n         }\n \n-        this.osgpCoreRequestMessageSender.send(\n-                new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+        this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                         deviceMessageMetadata.getOrganisationIdentification(), gatewayDevice.getDeviceIdentification(),\n                         gatewayDevice.getIpAddress(),\n                         new GMeterInfoDto(gasDevice.getChannel(), gasDevice.getDeviceIdentification())),\n@@ -482,14 +469,11 @@ public void handleSetEncryptionKeyExchangeOnGMeterResponse(final DeviceMessageMe\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -499,13 +483,13 @@ public void setMbusUserKeyByChannel(final DeviceMessageMetadata deviceMessageMet\n         LOGGER.info(\"Set M-Bus User Key By Channel for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter gatewayDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter gatewayDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        this.osgpCoreRequestMessageSender.send(\n-                new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+        this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                         deviceMessageMetadata.getOrganisationIdentification(),\n-                        deviceMessageMetadata.getDeviceIdentification(), gatewayDevice.getIpAddress(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n+                        gatewayDevice.getIpAddress(),\n                         new SetMbusUserKeyByChannelRequestDataDto(setMbusUserKeyByChannelRequestData.getChannel())),\n                 deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n                 deviceMessageMetadata.getScheduleTime());\n@@ -522,14 +506,11 @@ public void handleSetMbusUserKeyByChannelResponse(final DeviceMessageMetadata de\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -539,17 +520,16 @@ public void replaceKeys(final DeviceMessageMetadata deviceMessageMetadata, final\n         LOGGER.info(\"replaceKeys for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final SetKeysRequestDto keySetDto = this.configurationMapper.map(keySet, SetKeysRequestDto.class);\n \n-        this.osgpCoreRequestMessageSender.send(\n-                new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+        this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                         deviceMessageMetadata.getOrganisationIdentification(),\n-                        deviceMessageMetadata.getDeviceIdentification(), smartMeteringDevice.getIpAddress(), keySetDto),\n-                deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n-                deviceMessageMetadata.getScheduleTime());\n+                        deviceMessageMetadata.getDeviceIdentification(),\n+                        smartMeteringDevice.getIpAddress(), keySetDto), deviceMessageMetadata.getMessageType(),\n+                deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n \n     public void handleReplaceKeysResponse(final DeviceMessageMetadata deviceMessageMetadata,\n@@ -563,30 +543,26 @@ public void handleReplaceKeysResponse(final DeviceMessageMetadata deviceMessageM\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n     public void generateAndReplaceKeys(final DeviceMessageMetadata deviceMessageMetadata) throws FunctionalException {\n         LOGGER.info(\"Generate and replace keys for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        this.osgpCoreRequestMessageSender.send(\n-                new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+        this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                         deviceMessageMetadata.getOrganisationIdentification(),\n-                        deviceMessageMetadata.getDeviceIdentification(), smartMeteringDevice.getIpAddress(), null),\n-                deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n-                deviceMessageMetadata.getScheduleTime());\n+                        deviceMessageMetadata.getDeviceIdentification(),\n+                        smartMeteringDevice.getIpAddress(), null), deviceMessageMetadata.getMessageType(),\n+                deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n \n     public void handleGenerateAndReplaceKeysResponse(final DeviceMessageMetadata deviceMessageMetadata,\n@@ -601,14 +577,11 @@ public void handleGenerateAndReplaceKeysResponse(final DeviceMessageMetadata dev\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -617,40 +590,78 @@ public void handleGenerateAndReplaceKeysResponse(final DeviceMessageMetadata dev\n      * the protocol adapter layer to the core layer\n      *\n      * @param deviceMessageMetadata\n-     *            contains the message meta data\n-     * @param getFirmwareVersion\n-     *            marker object to request the firmware version(s)\n+     *         contains the message meta data\n+     * @param getFirmwareVersionQuery\n      *\n      * @throws FunctionalException\n-     *             is thrown when the device cannot be found in the database\n+     *         is thrown when the device cannot be found in the database or when the device is a G meter and the\n+     *         channel and/or gateway is not configured\n      */\n-    public void requestFirmwareVersion(final DeviceMessageMetadata deviceMessageMetadata) throws FunctionalException {\n+    public void requestFirmwareVersion(final DeviceMessageMetadata deviceMessageMetadata,\n+            final GetFirmwareVersionQuery getFirmwareVersionQuery) throws FunctionalException {\n \n         LOGGER.info(\"requestFirmwareVersion for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n-\n-        this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n-                        smartMeteringDevice.getIpAddress(), new GetFirmwareVersionRequestDto()),\n-                deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n-                deviceMessageMetadata.getScheduleTime());\n+        final SmartMeter smartMeter = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n+\n+        if (getFirmwareVersionQuery.isMbusDevice()) {\n+            if (smartMeter.getChannel() == null) {\n+                /*\n+                 * For now, throw a FunctionalException. As soon as we can\n+                 * communicate with some types of gas meters directly, and not\n+                 * through an M-Bus port of an energy meter, this will have to be\n+                 * changed.\n+                 */\n+                throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR,\n+                        ComponentType.DOMAIN_SMART_METERING,\n+                        new AssertionError(\"Retrieving firmware version for gas meter. No channel configured.\"));\n+            }\n+\n+            final Device gatewayDevice = smartMeter.getGatewayDevice();\n+\n+            if (gatewayDevice == null) {\n+                /*\n+                 * For now throw a FunctionalException, based on the same reasoning\n+                 * as with the channel a couple of lines up. As soon as we have\n+                 * scenario's with direct communication with gas meters this will\n+                 * have to be changed.\n+                 */\n+                throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR,\n+                        ComponentType.DOMAIN_SMART_METERING,\n+                        new AssertionError(\"Retrieving firmware version for gas meter. No gateway device found.\"));\n+            }\n+\n+            this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+                            deviceMessageMetadata.getOrganisationIdentification(),\n+                            gatewayDevice.getDeviceIdentification(),\n+                            gatewayDevice.getIpAddress(),\n+                            new GetFirmwareVersionQueryDto(ChannelDto.fromNumber(smartMeter.getChannel()),\n+                                    deviceMessageMetadata.getDeviceIdentification())),\n+                    deviceMessageMetadata.getMessageType(),\n+                    deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n+        } else {\n+            this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+                            deviceMessageMetadata.getOrganisationIdentification(),\n+                            deviceMessageMetadata.getDeviceIdentification(), smartMeter.getIpAddress(),\n+                            new GetFirmwareVersionQueryDto()), deviceMessageMetadata.getMessageType(),\n+                    deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n+        }\n     }\n \n     /**\n      * Maps the firmware Dto's to value objects and sends it back to the\n      * ws-adapter layer\n      *\n      * @param deviceMessageMetadata\n-     *            contains the message meta data\n-     * @param result\n-     *            indicates whether the execution was successful\n+     *         contains the message meta data\n+     * @param deviceResult\n+     *         indicates whether the execution was successful\n      * @param exception\n-     *            contains the exception if one was thrown\n+     *         contains the exception if one was thrown\n      * @param firmwareVersionList\n-     *            contains the firmware result list\n+     *         contains the firmware result list\n      */\n     public void handleGetFirmwareVersionResponse(final DeviceMessageMetadata deviceMessageMetadata,\n             final ResponseMessageResultType deviceResult, final OsgpException exception,\n@@ -669,35 +680,60 @@ public void handleGetFirmwareVersionResponse(final DeviceMessageMetadata deviceM\n \n         final FirmwareVersionResponse firmwareVersionResponse = new FirmwareVersionResponse(firmwareVersions);\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withDataObject(firmwareVersionResponse)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withDataObject(firmwareVersionResponse).withMessagePriority(\n+                deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n \n         this.firmwareService.saveFirmwareVersionsReturnedFromDevice(deviceMessageMetadata.getDeviceIdentification(),\n                 firmwareVersions);\n     }\n \n+    public void handleGetFirmwareVersionGasResponse(final DeviceMessageMetadata deviceMessageMetadata,\n+            final ResponseMessageResultType deviceResult, final OsgpException exception,\n+            final FirmwareVersionGasDto firmwareVersionGas) throws FunctionalException {\n+        LOGGER.info(\"handleGetFirmwareVersionGasResponse for MessageType: {}\", deviceMessageMetadata.getMessageType());\n+\n+        ResponseMessageResultType result = deviceResult;\n+        if (exception != null) {\n+            LOGGER.error(\"Get firmware version response not ok. Unexpected Exception\", exception);\n+            result = ResponseMessageResultType.NOT_OK;\n+        }\n+\n+        final FirmwareVersion firmwareVersion = this.configurationMapper.map(firmwareVersionGas, FirmwareVersion.class);\n+\n+        final FirmwareVersionGasResponse firmwareVersionGasResponse = new FirmwareVersionGasResponse(firmwareVersion);\n+\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withDataObject(firmwareVersionGasResponse).withMessagePriority(\n+                deviceMessageMetadata.getMessagePriority()).build();\n+        this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n+\n+        this.firmwareService.saveFirmwareVersionsReturnedFromDevice(firmwareVersionGas.getMbusDeviceIdentification(),\n+                Arrays.asList(firmwareVersion));\n+    }\n+\n     public void requestUpdateFirmware(final DeviceMessageMetadata deviceMessageMetadata,\n             final UpdateFirmwareRequestData updateFirmwareRequestData) throws FunctionalException {\n \n         LOGGER.info(\"requestUpdateFirmware for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeter = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeter = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final String firmwareFileIdentifier = this.firmwareService.determineFirmwareFileIdentifier(smartMeter,\n                 updateFirmwareRequestData.getVersionByModuleType());\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n                         smartMeter.getIpAddress(), firmwareFileIdentifier), deviceMessageMetadata.getMessageType(),\n                 deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n@@ -714,25 +750,22 @@ public void handleUpdateFirmwareResponse(final DeviceMessageMetadata deviceMessa\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final List<FirmwareVersion> firmwareVersions = this.configurationMapper\n-                .mapAsList(updateFirmwareResponseDto.getFirmwareVersions(), FirmwareVersion.class);\n-        final SmartMeter smartMeter = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final List<FirmwareVersion> firmwareVersions = this.configurationMapper.mapAsList(\n+                updateFirmwareResponseDto.getFirmwareVersions(), FirmwareVersion.class);\n+        final SmartMeter smartMeter = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         this.firmwareService.storeFirmware(smartMeter, updateFirmwareResponseDto.getFirmwareIdentification(),\n                 firmwareVersions, deviceMessageMetadata.getOrganisationIdentification());\n \n         final UpdateFirmwareResponse updateFirmwareResponse = new UpdateFirmwareResponse(firmwareVersions);\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withDataObject(updateFirmwareResponse)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withDataObject(updateFirmwareResponse).withMessagePriority(\n+                deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -742,14 +775,15 @@ public void setClockConfiguration(final DeviceMessageMetadata deviceMessageMetad\n         LOGGER.info(\"setClockConfiguration for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        final SetClockConfigurationRequestDto setClockConfigurationRequestDto = this.configurationMapper\n-                .map(setClockConfigurationRequest, SetClockConfigurationRequestDto.class);\n+        final SetClockConfigurationRequestDto setClockConfigurationRequestDto = this.configurationMapper.map(\n+                setClockConfigurationRequest, SetClockConfigurationRequestDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n                         smartMeteringDevice.getIpAddress(), setClockConfigurationRequestDto),\n                 deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n                 deviceMessageMetadata.getScheduleTime());\n@@ -766,14 +800,11 @@ public void handleSetClockConfigurationResponse(final DeviceMessageMetadata devi\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -783,14 +814,15 @@ public void getConfigurationObject(final DeviceMessageMetadata deviceMessageMeta\n         LOGGER.info(\"getConfigurationObject for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        final GetConfigurationObjectRequestDto getConfigurationObjectRequestDto = this.configurationMapper\n-                .map(getConfigurationObjectRequest, GetConfigurationObjectRequestDto.class);\n+        final GetConfigurationObjectRequestDto getConfigurationObjectRequestDto = this.configurationMapper.map(\n+                getConfigurationObjectRequest, GetConfigurationObjectRequestDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n                         smartMeteringDevice.getIpAddress(), getConfigurationObjectRequestDto),\n                 deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n                 deviceMessageMetadata.getScheduleTime());\n@@ -812,15 +844,12 @@ public void handleGetConfigurationObjectResponse(final DeviceMessageMetadata dev\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withDataObject(response)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withDataObject(response).withMessagePriority(\n+                deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -831,14 +860,15 @@ public void configureDefinableLoadProfile(final DeviceMessageMetadata deviceMess\n         LOGGER.info(\"configureDefinableLoadProfile for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        final DefinableLoadProfileConfigurationDto definableLoadProfileConfigurationDto = this.configurationMapper\n-                .map(definableLoadProfileConfigurationData, DefinableLoadProfileConfigurationDto.class);\n+        final DefinableLoadProfileConfigurationDto definableLoadProfileConfigurationDto = this.configurationMapper.map(\n+                definableLoadProfileConfigurationData, DefinableLoadProfileConfigurationDto.class);\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n                         smartMeteringDevice.getIpAddress(), definableLoadProfileConfigurationDto),\n                 deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n                 deviceMessageMetadata.getScheduleTime());\n@@ -856,14 +886,11 @@ public void handleConfigureDefinableLoadProfileResponse(final DeviceMessageMetad\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -873,23 +900,21 @@ public void getMbusEncryptionKeyStatus(final DeviceMessageMetadata deviceMessage\n         LOGGER.info(\"getMbusEncryptionKeyStatus for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter mbusDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter mbusDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n         final Device gatewayDevice = mbusDevice.getGatewayDevice();\n         if (gatewayDevice == null) {\n             throw new FunctionalException(FunctionalExceptionType.GATEWAY_DEVICE_NOT_SET_FOR_MBUS_DEVICE,\n                     ComponentType.DOMAIN_SMART_METERING, new GatewayDeviceNotSetForMbusDeviceException());\n         }\n \n-        this.osgpCoreRequestMessageSender.send(\n-                new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+        this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                         deviceMessageMetadata.getOrganisationIdentification(), gatewayDevice.getDeviceIdentification(),\n                         gatewayDevice.getIpAddress(),\n                         new GetMbusEncryptionKeyStatusRequestDto(mbusDevice.getDeviceIdentification(),\n-                                mbusDevice.getChannel())),\n-                deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n-                deviceMessageMetadata.getScheduleTime());\n+                                mbusDevice.getChannel())), deviceMessageMetadata.getMessageType(),\n+                deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n \n     public void handleGetMbusEncryptionKeyStatusResponse(final DeviceMessageMetadata deviceMessageMetadata,\n@@ -900,18 +925,14 @@ public void handleGetMbusEncryptionKeyStatusResponse(final DeviceMessageMetadata\n                 deviceMessageMetadata.getMessageType());\n \n         final String mbusDeviceIdentification = getMbusEncryptionKeyStatusResponseDto.getMbusDeviceIdentification();\n-        final EncryptionKeyStatusType encryptionKeyStatusType = EncryptionKeyStatusType\n-                .valueOf(getMbusEncryptionKeyStatusResponseDto.getEncryptionKeyStatus().name());\n-\n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(mbusDeviceIdentification)\n-                                                               .withResult(resultType)\n-                                                               .withOsgpException(exception)\n-                                                               .withDataObject(encryptionKeyStatusType)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final EncryptionKeyStatusType encryptionKeyStatusType = EncryptionKeyStatusType.valueOf(\n+                getMbusEncryptionKeyStatusResponseDto.getEncryptionKeyStatus().name());\n+\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                mbusDeviceIdentification).withResult(resultType).withOsgpException(exception).withDataObject(\n+                encryptionKeyStatusType).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -923,17 +944,15 @@ public void getMbusEncryptionKeyStatusByChannel(final DeviceMessageMetadata devi\n                 \"getMbusEncryptionKeyStatusByChannel for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter gatewayDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter gatewayDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        this.osgpCoreRequestMessageSender.send(\n-                new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+        this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                         deviceMessageMetadata.getOrganisationIdentification(), gatewayDevice.getDeviceIdentification(),\n-                        gatewayDevice.getIpAddress(),\n-                        new GetMbusEncryptionKeyStatusByChannelRequestDataDto(\n-                                getMbusEncryptionKeyStatusByChannelRequestData.getChannel())),\n-                deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n-                deviceMessageMetadata.getScheduleTime());\n+                        gatewayDevice.getIpAddress(), new GetMbusEncryptionKeyStatusByChannelRequestDataDto(\n+                        getMbusEncryptionKeyStatusByChannelRequestData.getChannel())),\n+                deviceMessageMetadata.getMessageType(),\n+                deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n     }\n \n     public void handleGetMbusEncryptionKeyStatusByChannelResponse(final DeviceMessageMetadata deviceMessageMetadata,\n@@ -943,18 +962,15 @@ public void handleGetMbusEncryptionKeyStatusByChannelResponse(final DeviceMessag\n         LOGGER.info(\"handleGetMbusEncryptionKeyStatusByChannelResponse for MessageType: {}\",\n                 deviceMessageMetadata.getMessageType());\n \n-        final EncryptionKeyStatusType encryptionKeyStatusType = EncryptionKeyStatusType\n-                .valueOf(getMbusEncryptionKeyStatusByChannelResponseDto.getEncryptionKeyStatus().name());\n-\n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(resultType)\n-                                                               .withOsgpException(exception)\n-                                                               .withDataObject(encryptionKeyStatusType)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final EncryptionKeyStatusType encryptionKeyStatusType = EncryptionKeyStatusType.valueOf(\n+                getMbusEncryptionKeyStatusByChannelResponseDto.getEncryptionKeyStatus().name());\n+\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(resultType).withOsgpException(\n+                exception).withDataObject(encryptionKeyStatusType).withMessagePriority(\n+                deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n@@ -964,15 +980,17 @@ public void setRandomisationSettings(final DeviceMessageMetadata deviceMessageMe\n         LOGGER.info(\"setRandomisationSettings for organisationIdentification: {} for deviceIdentification: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification());\n \n-        final SmartMeter smartMeteringDevice = this.domainHelperService\n-                .findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final SmartMeter smartMeteringDevice = this.domainHelperService.findSmartMeter(\n+                deviceMessageMetadata.getDeviceIdentification());\n \n-        final SetRandomisationSettingsRequestDataDto setRandomisationSettingsRequestDataDto = new SetRandomisationSettingsRequestDataDto(\n+        final SetRandomisationSettingsRequestDataDto setRandomisationSettingsRequestDataDto =\n+                new SetRandomisationSettingsRequestDataDto(\n                 data.getDirectAttach(), data.getRandomisationStartWindow(), data.getMultiplicationFactor(),\n                 data.getNumberOfRetries());\n \n         this.osgpCoreRequestMessageSender.send(new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n-                        deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                        deviceMessageMetadata.getOrganisationIdentification(),\n+                        deviceMessageMetadata.getDeviceIdentification(),\n                         smartMeteringDevice.getIpAddress(), setRandomisationSettingsRequestDataDto),\n                 deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(),\n                 deviceMessageMetadata.getScheduleTime());\n@@ -991,14 +1009,12 @@ public void handleSetRandomisationSettingsResponse(final DeviceMessageMetadata d\n             result = ResponseMessageResultType.NOT_OK;\n         }\n \n-        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n-                                                               .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n-                                                               .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n-                                                               .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n-                                                               .withResult(result)\n-                                                               .withOsgpException(exception)\n-                                                               .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n-                                                               .build();\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder().withCorrelationUid(\n+                deviceMessageMetadata.getCorrelationUid()).withOrganisationIdentification(\n+                deviceMessageMetadata.getOrganisationIdentification()).withDeviceIdentification(\n+                deviceMessageMetadata.getDeviceIdentification()).withResult(result).withOsgpException(\n+                exception).withMessagePriority(deviceMessageMetadata.getMessagePriority()).build();\n         this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n+\n }"
  },
  {
    "sha": "607836f1c86202b9577fa37cc8d8ee021c6d309e",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/GetFirmwareVersionResponseMessageProcessor.java",
    "status": "modified",
    "additions": 12,
    "deletions": 9,
    "changes": 21,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/GetFirmwareVersionResponseMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/GetFirmwareVersionResponseMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/GetFirmwareVersionResponseMessageProcessor.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -14,6 +14,7 @@\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.core.OsgpCoreResponseMessageProcessor;\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.ws.WebServiceResponseMessageSender;\n import org.opensmartgridplatform.dto.valueobjects.FirmwareVersionDto;\n+import org.opensmartgridplatform.dto.valueobjects.FirmwareVersionGasDto;\n import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n@@ -33,33 +34,35 @@\n     private ConfigurationService configurationService;\n \n     @Autowired\n-    protected GetFirmwareVersionResponseMessageProcessor(\n-            WebServiceResponseMessageSender responseMessageSender,\n-            @Qualifier(\"domainSmartMeteringInboundOsgpCoreResponsesMessageProcessorMap\") MessageProcessorMap messageProcessorMap) {\n+    protected GetFirmwareVersionResponseMessageProcessor(final WebServiceResponseMessageSender responseMessageSender,\n+            @Qualifier(\"domainSmartMeteringInboundOsgpCoreResponsesMessageProcessorMap\") final MessageProcessorMap messageProcessorMap) {\n         super(responseMessageSender, messageProcessorMap, MessageType.GET_FIRMWARE_VERSION,\n                 ComponentType.DOMAIN_SMART_METERING);\n     }\n \n     @Override\n     protected boolean hasRegularResponseObject(final ResponseMessage responseMessage) {\n         final Object dataObject = responseMessage.getDataObject();\n-        return dataObject instanceof ArrayList;\n+        return dataObject instanceof ArrayList || dataObject instanceof FirmwareVersionGasDto;\n     }\n \n     @Override\n     protected void handleMessage(final DeviceMessageMetadata deviceMessageMetadata,\n             final ResponseMessage responseMessage, final OsgpException osgpException) throws FunctionalException {\n \n         if (responseMessage.getDataObject() instanceof ArrayList) {\n-            @SuppressWarnings(\"unchecked\")\n-            final List<FirmwareVersionDto> firmwareVersionList = (List<FirmwareVersionDto>) responseMessage\n-                    .getDataObject();\n+            @SuppressWarnings(\"unchecked\") final List<FirmwareVersionDto> firmwareVersionList =\n+                    (List<FirmwareVersionDto>) responseMessage.getDataObject();\n \n             this.configurationService.handleGetFirmwareVersionResponse(deviceMessageMetadata,\n                     responseMessage.getResult(), osgpException, firmwareVersionList);\n+        } else if (responseMessage.getDataObject() instanceof FirmwareVersionGasDto) {\n+            this.configurationService.handleGetFirmwareVersionGasResponse(deviceMessageMetadata,\n+                    responseMessage.getResult(), osgpException,\n+                    (FirmwareVersionGasDto) responseMessage.getDataObject());\n         } else {\n-            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR,\n-                    ComponentType.DOMAIN_SMART_METERING, new OsgpException(ComponentType.DOMAIN_SMART_METERING,\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.DOMAIN_SMART_METERING,\n+                    new OsgpException(ComponentType.DOMAIN_SMART_METERING,\n                             \"DataObject for response message should be of type ArrayList\"));\n         }\n     }"
  },
  {
    "sha": "d2f81e8089bb720994c8ee9ee00044e9a8b078fa",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/GetFirmwareRequestMessageProcessor.java",
    "status": "modified",
    "additions": 5,
    "deletions": 13,
    "changes": 18,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/GetFirmwareRequestMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/GetFirmwareRequestMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/GetFirmwareRequestMessageProcessor.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -9,7 +9,7 @@\n \n import org.opensmartgridplatform.adapter.domain.smartmetering.application.services.ConfigurationService;\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.BaseRequestMessageProcessor;\n-import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetFirmwareVersion;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetFirmwareVersionQuery;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n import org.opensmartgridplatform.shared.infra.jms.DeviceMessageMetadata;\n import org.opensmartgridplatform.shared.infra.jms.MessageProcessorMap;\n@@ -34,25 +34,17 @@\n \n     @Autowired\n     public GetFirmwareRequestMessageProcessor(\n-            @Qualifier(\"domainSmartMeteringInboundWebServiceRequestsMessageProcessorMap\") MessageProcessorMap messageProcessorMap) {\n+            @Qualifier(\"domainSmartMeteringInboundWebServiceRequestsMessageProcessorMap\") final MessageProcessorMap messageProcessorMap) {\n         super(messageProcessorMap, MessageType.GET_FIRMWARE_VERSION);\n     }\n \n     @Override\n     protected void handleMessage(final DeviceMessageMetadata deviceMessageMetadata, final Object dataObject)\n             throws FunctionalException {\n \n-        /*\n-         * Ignore the dataObject, which should be a GetFirmwareVersion, since it\n-         * contains nothing useful for the ConfigurationService to handle the\n-         * request.\n-         */\n-        if (dataObject != null && !(dataObject instanceof GetFirmwareVersion)) {\n-            LOGGER.warn(\"dataObject was ignored because GetFirmwareVersion does not hold interesting data\"\n-                    + \" for further processing, however dataObject was a \" + dataObject.getClass().getName());\n-        }\n-\n-        this.configurationService.requestFirmwareVersion(deviceMessageMetadata);\n+        final GetFirmwareVersionQuery getFirmwareVersionQuery = (GetFirmwareVersionQuery) dataObject;\n+\n+        this.configurationService.requestFirmwareVersion(deviceMessageMetadata, getFirmwareVersionQuery);\n     }\n \n }"
  },
  {
    "sha": "0f5fa2362eb5f07b9e7f65d5a885237351555e1f",
    "filename": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/FirmwareManagementEndpoint.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/FirmwareManagementEndpoint.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/FirmwareManagementEndpoint.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/FirmwareManagementEndpoint.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -176,6 +176,7 @@ private FirmwareUpdateMessageDataContainer mapFirmwareModuleTypes(final String f\n         String moduleVersionMbus = null;\n         String moduleVersionSec = null;\n         String moduleVersionMBusDriverActive = null;\n+        String moduleVersionSimple = null;\n \n         for (final FirmwareModuleType firmwareModuleType : firmwareModuleTypes) {\n             final String firmwareModuleTypeString = firmwareModuleType.toString();\n@@ -191,11 +192,14 @@ private FirmwareUpdateMessageDataContainer mapFirmwareModuleTypes(final String f\n                 moduleVersionSec = firmwareModuleTypeString;\n             } else if (FirmwareModuleType.M_BUS_DRIVER_ACTIVE.equals(firmwareModuleType)) {\n                 moduleVersionMBusDriverActive = firmwareModuleTypeString;\n+            } else if (FirmwareModuleType.SIMPLE_VERSION_INFO.equals(firmwareModuleType)) {\n+                moduleVersionSimple = firmwareModuleTypeString;\n             }\n         }\n \n         final FirmwareModuleData firmwareModuleData = new FirmwareModuleData(moduleVersionComm, moduleVersionFunc,\n-                moduleVersionMa, moduleVersionMbus, moduleVersionSec, moduleVersionMBusDriverActive);\n+                moduleVersionMa, moduleVersionMbus, moduleVersionSec, moduleVersionMBusDriverActive,\n+                moduleVersionSimple);\n \n         return new FirmwareUpdateMessageDataContainer(firmwareModuleData, firmwareIndentification);\n     }"
  },
  {
    "sha": "4f0c889069bd237044f325e262c13b9194be740d",
    "filename": "osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/mapping/FirmwareManagementMapperTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/mapping/FirmwareManagementMapperTest.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/mapping/FirmwareManagementMapperTest.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/mapping/FirmwareManagementMapperTest.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -21,7 +21,7 @@ private FirmwareModuleData map(\n             final org.opensmartgridplatform.adapter.ws.schema.core.firmwaremanagement.FirmwareModuleData source) {\n         return new FirmwareModuleData(source.getModuleVersionComm(), source.getModuleVersionFunc(),\n                 source.getModuleVersionMa(), source.getModuleVersionMbus(), source.getModuleVersionSec(),\n-                source.getModuleVersionMBusDriverActive());\n+                source.getModuleVersionMBusDriverActive(), source.getModuleVersionSimple());\n     }\n \n     @Test"
  },
  {
    "sha": "d04fcf35e99bc30b3838796e140a427dca7af0cd",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/ConfigurationMapper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/ConfigurationMapper.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/ConfigurationMapper.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/ConfigurationMapper.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -64,6 +64,8 @@ public void configure(final MapperFactory mapperFactory) {\n         mapperFactory.getConverterFactory().registerConverter(new CosemTimeConverter());\n         mapperFactory.getConverterFactory().registerConverter(new CosemDateConverter());\n         mapperFactory.getConverterFactory().registerConverter(new XsdDateTimeToLongConverter());\n+\n         mapperFactory.getConverterFactory().registerConverter(new FirmwareVersionConverter());\n+        mapperFactory.getConverterFactory().registerConverter(new FirmwareVersionGasConverter());\n     }\n }"
  },
  {
    "sha": "74dcbeceb633e34828121ea022d537c573f1ff5c",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/FirmwareVersionGasConverter.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/FirmwareVersionGasConverter.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/FirmwareVersionGasConverter.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/FirmwareVersionGasConverter.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.smartmetering.application.mapping;\n+\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.converter.BidirectionalConverter;\n+import ma.glasnost.orika.metadata.Type;\n+import org.opensmartgridplatform.domain.core.valueobjects.FirmwareModuleType;\n+import org.opensmartgridplatform.domain.core.valueobjects.FirmwareVersion;\n+\n+public class FirmwareVersionGasConverter extends\n+        BidirectionalConverter<FirmwareVersion,\n+                org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersionGas> {\n+\n+    @Override\n+    public org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersionGas convertTo(\n+            final FirmwareVersion source,\n+            final Type<org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersionGas> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersionGas firmwareVersion = new org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersionGas();\n+        firmwareVersion.setFirmwareModuleType(\n+                org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareModuleGasType.valueOf(\n+                        source.getFirmwareModuleType().getDescription()));\n+        firmwareVersion.setVersion(source.getVersion().getBytes());\n+\n+        return firmwareVersion;\n+    }\n+\n+    @Override\n+    public FirmwareVersion convertFrom(\n+            final org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.FirmwareVersionGas source,\n+            final Type<FirmwareVersion> destinationType, final MappingContext mappingContext) {\n+\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final FirmwareModuleType type = FirmwareModuleType.forDescription(source.getFirmwareModuleType().name());\n+        final String version = new String(source.getVersion());\n+\n+        return new FirmwareVersion(type, version);\n+    }\n+}"
  },
  {
    "sha": "d546975b722bdcaa13ecaaffd575e30e5142463c",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperResponseService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperResponseService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperResponseService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperResponseService.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -21,6 +21,7 @@\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.AllResponses;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.BundleResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.FindEventsResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetFirmwareVersionGasResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetFirmwareVersionResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetMbusEncryptionKeyStatusByChannelResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetMbusEncryptionKeyStatusResponse;\n@@ -47,6 +48,7 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EventMessagesResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FaultResponse;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FirmwareVersionGasResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FirmwareVersionResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetAllAttributeValuesResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetConfigurationObjectResponse;\n@@ -111,6 +113,7 @@ private void postConstruct() {\n         CLASS_TO_MAPPER_MAP.put(PeriodicMeterReadsContainerGas.class, this.monitoringMapper);\n         CLASS_TO_MAPPER_MAP.put(GetAllAttributeValuesResponse.class, this.monitoringMapper);\n         CLASS_TO_MAPPER_MAP.put(FirmwareVersionResponse.class, this.configurationMapper);\n+        CLASS_TO_MAPPER_MAP.put(FirmwareVersionGasResponse.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(UpdateFirmwareResponse.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(AssociationLnObjectsResponseData.class, this.adhocMapper);\n         CLASS_TO_MAPPER_MAP.put(GetConfigurationObjectResponse.class, this.configurationMapper);\n@@ -142,6 +145,7 @@ private void postConstruct() {\n         CLASS_MAP.put(GetAllAttributeValuesResponse.class,\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetAllAttributeValuesResponse.class);\n         CLASS_MAP.put(FirmwareVersionResponse.class, GetFirmwareVersionResponse.class);\n+        CLASS_MAP.put(FirmwareVersionGasResponse.class, GetFirmwareVersionGasResponse.class);\n         CLASS_MAP.put(UpdateFirmwareResponse.class,\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.UpdateFirmwareResponse.class);\n         CLASS_MAP.put(AssociationLnObjectsResponseData.class,"
  },
  {
    "sha": "71488631eb520abc15dccf233e9fbb370820aa6c",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 9,
    "changes": 19,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/a87dea6f986fae6d5a660420f66780aa8faa5219/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperService.java?ref=a87dea6f986fae6d5a660420f66780aa8faa5219",
    "patch": "@@ -27,6 +27,7 @@\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetAllAttributeValuesRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetAssociationLnObjectsRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetConfigurationObjectRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetFirmwareVersionGasRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetFirmwareVersionRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetMbusEncryptionKeyStatusByChannelRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetMbusEncryptionKeyStatusRequest;\n@@ -72,6 +73,7 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetAllAttributeValuesRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetAssociationLnObjectsRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetConfigurationObjectRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetFirmwareVersionGasRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetFirmwareVersionRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetMbusEncryptionKeyStatusByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GetMbusEncryptionKeyStatusRequestData;\n@@ -169,6 +171,9 @@\n         CLASS_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionRequestData.class,\n                 GetFirmwareVersionRequestData.class);\n+        CLASS_MAP.put(\n+                org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasRequestData.class,\n+                GetFirmwareVersionGasRequestData.class);\n         CLASS_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.UpdateFirmwareRequestData.class,\n                 UpdateFirmwareRequestData.class);\n@@ -214,6 +219,7 @@\n         CLASS_MAP.put(SynchronizeTimeRequest.class, SynchronizeTimeRequestData.class);\n         CLASS_MAP.put(GetAllAttributeValuesRequest.class, GetAllAttributeValuesRequestData.class);\n         CLASS_MAP.put(GetFirmwareVersionRequest.class, GetFirmwareVersionRequestData.class);\n+        CLASS_MAP.put(GetFirmwareVersionGasRequest.class, GetFirmwareVersionGasRequestData.class);\n         CLASS_MAP.put(UpdateFirmwareRequest.class, UpdateFirmwareRequestData.class);\n         CLASS_MAP.put(SetKeysRequest.class, SetKeysRequestData.class);\n         CLASS_MAP.put(GetAssociationLnObjectsRequest.class, GetAssociationLnObjectsRequestData.class);\n@@ -259,7 +265,6 @@\n      */\n     @PostConstruct\n     private void postConstruct() {\n-\n         this.mapAdHocRequestData();\n         this.mapConfigurationRequestData();\n         this.mapInstallationRequestData();\n@@ -269,15 +274,13 @@ private void postConstruct() {\n     }\n \n     private void mapInstallationRequestData() {\n-\n         CLASS_TO_MAPPER_MAP.put(CoupleMbusDeviceByChannelRequest.class, this.installationMapper);\n         CLASS_TO_MAPPER_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceByChannelRequestData.class,\n                 this.installationMapper);\n     }\n \n     private void mapAdHocRequestData() {\n-\n         CLASS_TO_MAPPER_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.adhoc.SynchronizeTimeRequestData.class,\n                 this.adhocMapper);\n@@ -297,7 +300,6 @@ private void mapAdHocRequestData() {\n     }\n \n     private void mapManagementRequestData() {\n-\n         CLASS_TO_MAPPER_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.management.FindEventsRequestData.class,\n                 this.managementMapper);\n@@ -309,14 +311,10 @@ private void mapManagementRequestData() {\n         CLASS_TO_MAPPER_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.management.GetOutagesRequestData.class,\n                 this.managementMapper);\n-        CLASS_TO_MAPPER_MAP.put(\n-                org.opensmartgridplatform.adapter.ws.schema.smartmetering.management.GetOutagesRequestData.class,\n-                this.managementMapper);\n         CLASS_TO_MAPPER_MAP.put(GetOutagesRequest.class, this.managementMapper);\n     }\n \n     private void mapMonitoringRequestData() {\n-\n         CLASS_TO_MAPPER_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.monitoring.ReadAlarmRegisterData.class,\n                 this.monitoringMapper);\n@@ -353,7 +351,6 @@ private void mapMonitoringRequestData() {\n     }\n \n     private void mapConfigurationRequestData() {\n-\n         CLASS_TO_MAPPER_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.SpecialDaysRequestData.class,\n                 this.configurationMapper);\n@@ -402,6 +399,10 @@ private void mapConfigurationRequestData() {\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionRequestData.class,\n                 this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(GetFirmwareVersionRequest.class, this.configurationMapper);\n+        CLASS_TO_MAPPER_MAP.put(\n+                org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.GetFirmwareVersionGasRequestData.class,\n+                this.configurationMapper);\n+        CLASS_TO_MAPPER_MAP.put(GetFirmwareVersionGasRequest.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(UpdateFirmwareRequest.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.configuration.SetKeysRequestData.class,"
  }
]
