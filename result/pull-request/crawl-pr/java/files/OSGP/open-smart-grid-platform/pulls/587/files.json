[
  {
    "sha": "6f607e4592c1eb4763e3116e22226711b05a6113",
    "filename": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java",
    "status": "modified",
    "additions": 17,
    "deletions": 23,
    "changes": 40,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -10,6 +10,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.springframework.ws.test.server.RequestCreators.withPayload;\n+import static org.springframework.ws.test.server.RequestCreators.withSoapEnvelope;\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -103,6 +104,7 @@ public void getSecretsRequest() throws IOException {\n          */\n         assertThat(this.secretRepository.count()).isEqualTo(2);\n         final Resource request = new ClassPathResource(\"test-requests/getSecrets.xml\");\n+        final Resource envelope = new ClassPathResource(\"test-requests/getSecretsEnvelope.xml\");\n         this.mockWebServiceClient.sendRequest(withPayload(request)).andExpect((request2, response) -> {\n             final OutputStream outStream = new ByteArrayOutputStream();\n             response.writeTo(outStream);\n@@ -114,6 +116,17 @@ public void getSecretsRequest() throws IOException {\n         });\n     }\n \n+    @Test\n+    public void getSecretsWithCorrelationUidInHeader() throws IOException {\n+        final Resource envelope = new ClassPathResource(\"test-requests/getSecretsEnvelope.xml\");\n+        this.mockWebServiceClient.sendRequest(withSoapEnvelope(envelope)).andExpect((request2, response) -> {\n+            final OutputStream outStream = new ByteArrayOutputStream();\n+            response.writeTo(outStream);\n+            final String outputString = outStream.toString();\n+            assertThat(outputString.contains(\">123456</correlationUid>\")).isTrue();\n+        });\n+    }\n+\n     @Test\n     public void getSecretsRequestNoStoredSecretType() {\n \n@@ -208,25 +221,7 @@ public void activateSecretsRequestNoNewSecret() throws IOException {\n         final Resource activateRequest = new ClassPathResource(\"test-requests/activateSecrets.xml\");\n         //Store secrets\n         this.mockWebServiceClient.sendRequest(withPayload(activateRequest))\n-                                 .andExpect(ResponseMatchers.serverOrReceiverFault(\"Could not activate new secrets\"));\n-    }\n-\n-    @Test\n-    public void getSecretsRequestNoSecretTypes() {\n-\n-        /**\n-         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n-         */\n-        assertThat(this.secretRepository.count()).isEqualTo(2);\n-\n-        final Resource request = new ClassPathResource(\"test-requests/invalidGetSecrets.xml\");\n-\n-        try {\n-            this.mockWebServiceClient.sendRequest(withPayload(request))\n-                                     .andExpect(ResponseMatchers.serverOrReceiverFault(\"Missing input: secret types\"));\n-        } catch (final Exception exc) {\n-            Assertions.fail(\"Error\", exc);\n-        }\n+                                 .andExpect(ResponseMatchers.serverOrReceiverFault());\n     }\n \n     @Test\n@@ -256,11 +251,10 @@ public void generateAndStoreSecrets() throws IOException {\n             response.writeTo(outputStream);\n             assertThat(outputStream.toString()).contains(\"Result>OK\");\n         });\n-        List<DbEncryptedSecret> authKeys = this.secretRepository.findSecrets(DEVICE_IDENTIFICATION,\n-                SecretType.E_METER_AUTHENTICATION_KEY,\n-                SecretStatus.NEW);\n+        final List<DbEncryptedSecret> authKeys = this.secretRepository\n+                .findSecrets(DEVICE_IDENTIFICATION, SecretType.E_METER_AUTHENTICATION_KEY, SecretStatus.NEW);\n         assertThat(authKeys).hasSize(1);\n-        DbEncryptedSecret authKey = authKeys.get(0);\n+        final DbEncryptedSecret authKey = authKeys.get(0);\n         assertThat(authKey.getEncodedSecret()).hasSize(64);\n     }\n "
  },
  {
    "sha": "5a9fac261d55bac502061040996b3ea9988d9b2d",
    "filename": "osgp/platform/osgp-secret-management/src/integration-test/resources/test-requests/getSecretsEnvelope.xml",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/integration-test/resources/test-requests/getSecretsEnvelope.xml",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/integration-test/resources/test-requests/getSecretsEnvelope.xml",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-secret-management/src/integration-test/resources/test-requests/getSecretsEnvelope.xml?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -0,0 +1,15 @@\n+<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n+               xmlns:ns=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\">\n+  <soap:Header>\n+    <ns:correlationUid>123456</ns:correlationUid>\n+  </soap:Header>\n+  <soap:Body>\n+    <ns:getSecretsRequest>\n+      <ns:DeviceId>E0000000000000000</ns:DeviceId>\n+      <ns:SecretTypes>\n+        <ns:SecretType>E_METER_AUTHENTICATION_KEY</ns:SecretType>\n+        <ns:SecretType>E_METER_ENCRYPTION_KEY_UNICAST</ns:SecretType>\n+      </ns:SecretTypes>\n+    </ns:getSecretsRequest>\n+  </soap:Body>\n+</soap:Envelope>\n\\ No newline at end of file"
  },
  {
    "sha": "597cfc27f51e41fb7e16b0e80dd98faa93d73f4f",
    "filename": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java",
    "status": "modified",
    "additions": 12,
    "deletions": 11,
    "changes": 23,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -8,6 +8,8 @@\n  */\n package org.opensmartgridplatform.secretmanagement.application.config;\n \n+import java.util.Properties;\n+\n import org.opensmartgridplatform.secretmanagement.application.exception.DetailSoapFaultMappingExceptionResolver;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n@@ -17,15 +19,14 @@\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.ws.config.annotation.EnableWs;\n import org.springframework.ws.config.annotation.WsConfigurerAdapter;\n+import org.springframework.ws.server.EndpointExceptionResolver;\n import org.springframework.ws.soap.server.endpoint.SoapFaultDefinition;\n import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n import org.springframework.ws.transport.http.MessageDispatcherServlet;\n import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;\n import org.springframework.xml.xsd.XsdSchemaCollection;\n import org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection;\n \n-import java.util.Properties;\n-\n @EnableWs\n @Configuration\n public class WebServiceConfig extends WsConfigurerAdapter {\n@@ -39,8 +40,8 @@\n \n     @Bean\n     public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(\n-            ApplicationContext applicationContext) {\n-        MessageDispatcherServlet servlet = new MessageDispatcherServlet();\n+            final ApplicationContext applicationContext) {\n+        final MessageDispatcherServlet servlet = new MessageDispatcherServlet();\n         servlet.setApplicationContext(applicationContext);\n         servlet.setTransformWsdlLocations(true);\n         return new ServletRegistrationBean<>(servlet, SECRET_MANAGEMENT_WS_BASE_PATH);\n@@ -52,8 +53,8 @@\n      * http://localhost:8080/ws/SecretManagement/secretManagement.wsdl\n      */\n     @Bean(name = \"secretManagement\")\n-    public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchemaCollection secretManagementSchemas) {\n-        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();\n+    public DefaultWsdl11Definition defaultWsdl11Definition(final XsdSchemaCollection secretManagementSchemas) {\n+        final DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();\n         wsdl11Definition.setPortTypeName(SECRET_MANAGEMENT_PORT);\n         wsdl11Definition.setLocationUri(SECRET_MANAGEMENT_URI);\n         wsdl11Definition.setTargetNamespace(SECRET_MANAGEMENT_NS);\n@@ -63,20 +64,20 @@ public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchemaCollection secre\n \n     @Bean\n     public XsdSchemaCollection secretManagementSchemas() {\n-        CommonsXsdSchemaCollection sc = new CommonsXsdSchemaCollection();\n+        final CommonsXsdSchemaCollection sc = new CommonsXsdSchemaCollection();\n         sc.setXsds(new ClassPathResource(SECRET_MANAGEMENT_SCHEMA_LOC));\n         return sc;\n     }\n \n     @Bean\n-    public SoapFaultMappingExceptionResolver exceptionResolver() {\n-        SoapFaultMappingExceptionResolver exceptionResolver = new DetailSoapFaultMappingExceptionResolver();\n+    public EndpointExceptionResolver exceptionResolver() {\n+        final SoapFaultMappingExceptionResolver exceptionResolver = new DetailSoapFaultMappingExceptionResolver();\n \n-        SoapFaultDefinition faultDefinition = new SoapFaultDefinition();\n+        final SoapFaultDefinition faultDefinition = new SoapFaultDefinition();\n         faultDefinition.setFaultCode(SoapFaultDefinition.SERVER);\n         exceptionResolver.setDefaultFault(faultDefinition);\n \n-        Properties errorMappings = new Properties();\n+        final Properties errorMappings = new Properties();\n         errorMappings.setProperty(Exception.class.getName(), SoapFaultDefinition.SERVER.toString());\n         errorMappings.setProperty(TechnicalException.class.getName(),\n                 SoapFaultDefinition.SERVER.toString());"
  },
  {
    "sha": "51a37fc8d679c529819eb2e3e2bc1618cf2bc5fb",
    "filename": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java",
    "status": "modified",
    "additions": 123,
    "deletions": 95,
    "changes": 218,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -14,13 +14,17 @@\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.JAXBException;\n import javax.xml.bind.Marshaller;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n \n import lombok.extern.slf4j.Slf4j;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n-import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.AbstractRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.AbstractResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.ActivateSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.ActivateSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsRequest;\n@@ -36,19 +40,28 @@\n import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.springframework.ws.context.MessageContext;\n import org.springframework.ws.server.endpoint.annotation.Endpoint;\n import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+import org.springframework.ws.soap.SoapHeaderElement;\n+import org.springframework.ws.soap.saaj.SaajSoapMessage;\n+import org.springframework.ws.soap.server.endpoint.annotation.SoapHeader;\n+import org.springframework.xml.transform.StringSource;\n \n @Endpoint\n @Slf4j\n public class SecretManagementEndpoint {\n+    @FunctionalInterface\n+    private interface RequestProcessor<R extends AbstractRequest, S extends AbstractResponse> {\n+        S processRequest(R request) throws OsgpException;\n+    }\n \n     private static final String NAMESPACE_URI =\n             \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\";\n-    private static final String STR_MISSING_SECRET_TYPES = \"Missing input: secret types\";\n-    private static final String STR_MISSING_TYPED_SECRETS = \"Missing input: typed secrets\";\n+    private static final String CORRELATION_UID = \"correlationUid\";\n+    private static final String CORRELATION_HEADER = \"{\" + NAMESPACE_URI + \"}\"+CORRELATION_UID;\n \n     private final SecretManagementService secretManagementService;\n     private final SoapEndpointDataTypeConverter converter;\n@@ -59,90 +72,143 @@ public SecretManagementEndpoint(final SecretManagementService secretManagementSe\n         this.converter = converter;\n     }\n \n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n-    @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload final GetSecretsRequest request) throws OsgpException {\n-        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+    private String getCorrelationUidFromHeader(final SoapHeaderElement header) {\n+        return header != null ? header.getText() : null;\n+    }\n+\n+    private void addHeaderToResponse(final MessageContext messageContext, final SoapHeaderElement header)\n+            throws TransformerException {\n+        if (header != null) {\n+            final SaajSoapMessage soapResponse = (SaajSoapMessage) messageContext.getResponse();\n+            final org.springframework.ws.soap.SoapHeader responseHeader = soapResponse.getSoapHeader();\n+            final TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+            final String headerXml = String\n+                    .format(\"<%1$s xmlns=\\\"%2$s\\\">%3$s</%1$s>\", CORRELATION_UID, NAMESPACE_URI, header.getText());\n+            final StringSource headerSource = new StringSource(headerXml);\n+            final Transformer transformer = transformerFactory.newTransformer();\n+            transformer.transform(headerSource, responseHeader.getResult());\n+        }\n+    }\n+\n+    private <R extends AbstractRequest, S extends AbstractResponse> S handleRequest(final R request,\n+            final RequestProcessor<R, S> processor, final SoapHeaderElement header, final MessageContext messageContext)\n+            throws TransformerException, OsgpException {\n+        final String correlationUid = this.getCorrelationUidFromHeader(header);\n+        log.info(\"[{}] Handling incoming SOAP request '{}' for device {}\", correlationUid,\n+                request.getClass().getSimpleName(), request.getDeviceId());\n         if (log.isDebugEnabled()) {\n             log.debug(this.requestToString(request));\n         }\n+        final S response = processor.processRequest(request);\n+        response.setResult(OsgpResultType.OK);\n+        this.addHeaderToResponse(messageContext, header);\n+        return response;\n+    }\n+\n+    public GetSecretsResponse getSecrets(final GetSecretsRequest request) throws OsgpException {\n         final GetSecretsResponse response = new GetSecretsResponse();\n         final SecretTypes soapSecretTypes = request.getSecretTypes();\n-        if (soapSecretTypes == null) {\n-            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n-        }\n         final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n-        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveSecrets(request.getDeviceId(),\n-                secretTypeList);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService\n+                .retrieveSecrets(request.getDeviceId(), secretTypeList);\n         final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n         response.setTypedSecrets(soapTypedSecrets);\n-        response.setResult(OsgpResultType.OK);\n         return response;\n     }\n \n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getNewSecretsRequest\")\n-    @ResponsePayload\n-    public GetNewSecretsResponse getNewSecretsRequest(@RequestPayload final GetNewSecretsRequest request) throws OsgpException {\n-        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-        if (log.isDebugEnabled()) {\n-            log.debug(this.requestToString(request));\n-        }\n+    public GetNewSecretsResponse getNewSecrets(final GetNewSecretsRequest request) {\n         final GetNewSecretsResponse response = new GetNewSecretsResponse();\n         final SecretTypes soapSecretTypes = request.getSecretTypes();\n-        if (soapSecretTypes == null) {\n-            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n-        }\n         final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n-        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveNewSecrets(request.getDeviceId(),\n-                secretTypeList);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService\n+                .retrieveNewSecrets(request.getDeviceId(), secretTypeList);\n         final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n         response.setTypedSecrets(soapTypedSecrets);\n-        response.setResult(OsgpResultType.OK);\n         return response;\n     }\n \n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n-    @ResponsePayload\n-    public StoreSecretsResponse storeSecretsRequest(@RequestPayload final StoreSecretsRequest request)\n-            throws OsgpException {\n-        log.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n-        if (log.isDebugEnabled()) {\n-            log.debug(this.requestToString(request));\n-        }\n-        final StoreSecretsResponse response = new StoreSecretsResponse();\n+    public StoreSecretsResponse storeSecrets(final StoreSecretsRequest request) throws OsgpException {\n         final TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n-        if (soapTypedSecrets == null) {\n-            throw new TechnicalException(STR_MISSING_TYPED_SECRETS);\n-        }\n         final List<TypedSecret> typedSecretList = this.converter.convertToTypedSecrets(soapTypedSecrets);\n         this.secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n-        response.setResult(OsgpResultType.OK);\n-        return response;\n+        return new StoreSecretsResponse();\n     }\n \n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"generateAndStoreSecretsRequest\")\n-    @ResponsePayload\n-    public GenerateAndStoreSecretsResponse generateAndStoreSecretsRequest(\n-            @RequestPayload final GenerateAndStoreSecretsRequest request) throws OsgpException {\n-        log.info(\"Handling incoming SOAP request 'generateAndStoreSecretsRequest' for device {}\",\n-                request.getDeviceId());\n-        if (log.isDebugEnabled()) {\n-            log.debug(this.requestToString(request));\n-        }\n+    public GenerateAndStoreSecretsResponse generateAndStoreSecrets(final GenerateAndStoreSecretsRequest request) {\n         final GenerateAndStoreSecretsResponse response = new GenerateAndStoreSecretsResponse();\n         final SecretTypes soapSecretTypes = request.getSecretTypes();\n-        if (soapSecretTypes == null) {\n-            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n-        }\n         final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n-        final List<TypedSecret> typedSecretList = this.secretManagementService.generateAndStoreSecrets(request.getDeviceId(),\n-                secretTypeList);\n-        response.setResult(OsgpResultType.OK);\n+        final List<TypedSecret> typedSecretList = this.secretManagementService\n+                .generateAndStoreSecrets(request.getDeviceId(), secretTypeList);\n         response.setTypedSecrets(this.converter.convertToSoapTypedSecrets(typedSecretList));\n         return response;\n     }\n \n-    private <T> String requestToString(final T request) {\n+    public ActivateSecretsResponse activateSecrets(final ActivateSecretsRequest request) {\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        this.secretManagementService\n+                .activateNewSecrets(request.getDeviceId(), this.converter.convertToSecretTypes(soapSecretTypes));\n+        return new ActivateSecretsResponse();\n+    }\n+\n+    public HasNewSecretResponse hasNewSecret(final HasNewSecretRequest request) {\n+        final SecretType type = this.converter.convertToSecretType(request.getSecretType());\n+        final boolean result = this.secretManagementService.hasNewSecret(request.getDeviceId(), type);\n+        final HasNewSecretResponse response = new HasNewSecretResponse();\n+        response.setHasNewSecret(result);\n+        return response;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload final GetSecretsRequest request,\n+            @SoapHeader(CORRELATION_HEADER) final SoapHeaderElement header, final MessageContext messageContext)\n+            throws OsgpException, TransformerException {\n+        return this.handleRequest(request, this::getSecrets, header, messageContext);\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getNewSecretsRequest\")\n+    @ResponsePayload\n+    public GetNewSecretsResponse getNewSecretsRequest(@RequestPayload final GetNewSecretsRequest request,\n+            @SoapHeader(CORRELATION_HEADER) final SoapHeaderElement header, final MessageContext messageContext)\n+            throws OsgpException, TransformerException {\n+        return this.handleRequest(request, this::getNewSecrets, header, messageContext);\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n+    @ResponsePayload\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload final StoreSecretsRequest request,\n+            @SoapHeader(CORRELATION_HEADER) final SoapHeaderElement header, final MessageContext messageContext)\n+            throws OsgpException, TransformerException {\n+        return this.handleRequest(request, this::storeSecrets, header, messageContext);\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"generateAndStoreSecretsRequest\")\n+    @ResponsePayload\n+    public GenerateAndStoreSecretsResponse generateAndStoreSecretsRequest(\n+            @RequestPayload final GenerateAndStoreSecretsRequest request,\n+            @SoapHeader(CORRELATION_HEADER) final SoapHeaderElement header, final MessageContext messageContext)\n+            throws OsgpException, TransformerException {\n+        return this.handleRequest(request, this::generateAndStoreSecrets, header, messageContext);\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"activateSecretsRequest\")\n+    @ResponsePayload\n+    public ActivateSecretsResponse activateSecretsRequest(@RequestPayload final ActivateSecretsRequest request,\n+            @SoapHeader(CORRELATION_HEADER) final SoapHeaderElement header, final MessageContext messageContext)\n+            throws OsgpException, TransformerException {\n+        return this.handleRequest(request, this::activateSecrets, header, messageContext);\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"hasNewSecretRequest\")\n+    @ResponsePayload\n+    public HasNewSecretResponse hasNewSecretRequest(@RequestPayload final HasNewSecretRequest request,\n+            @SoapHeader(CORRELATION_HEADER) final SoapHeaderElement header, final MessageContext messageContext)\n+            throws OsgpException, TransformerException {\n+        return this.handleRequest(request, this::hasNewSecret, header, messageContext);\n+    }\n+\n+    private String requestToString(final AbstractRequest request) {\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         try {\n             final JAXBContext ctx = JAXBContext.newInstance(request.getClass());\n@@ -151,47 +217,9 @@ public GenerateAndStoreSecretsResponse generateAndStoreSecretsRequest(\n             marshaller.marshal(request, baos);\n         } catch (final JAXBException e) {\n             final String logFormat = \"Could not serialize request of type %s\";\n-            log.error(String.format(logFormat,request.getClass()), e);\n+            log.error(String.format(logFormat, request.getClass()), e);\n         }\n         return baos.toString();\n     }\n \n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"activateSecretsRequest\")\n-    @ResponsePayload\n-    public ActivateSecretsResponse activateSecretsRequest(@RequestPayload final ActivateSecretsRequest request)\n-            throws OsgpException {\n-        log.info(\"Handling incoming SOAP request 'activateSecretRequest' for device {}\", request.getDeviceId());\n-        if (log.isDebugEnabled()) {\n-            log.debug(this.requestToString(request));\n-        }\n-        final ActivateSecretsResponse response = new ActivateSecretsResponse();\n-        final SecretTypes soapSecretTypes = request.getSecretTypes();\n-        if (soapSecretTypes == null) {\n-            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n-        }\n-        try {\n-            this.secretManagementService.activateNewSecrets(request.getDeviceId(),\n-                    this.converter.convertToSecretTypes(soapSecretTypes));\n-            response.setResult(OsgpResultType.OK);\n-        } catch (final RuntimeException rte) {\n-            log.error(\"Could not activate new secrets: \"+rte.toString());\n-            throw new TechnicalException(\"Could not activate new secrets\",rte);\n-        }\n-        return response;\n-    }\n-\n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"hasNewSecretRequest\")\n-    @ResponsePayload\n-    public HasNewSecretResponse hasNewSecretRequest(@RequestPayload final HasNewSecretRequest request)\n-            throws OsgpException {\n-        log.info(\"Handling incoming SOAP request 'hasNewSecretRequest' for device {}\", request.getDeviceId());\n-        if (log.isDebugEnabled()) {\n-            log.debug(this.requestToString(request));\n-        }\n-        final HasNewSecretResponse response = new HasNewSecretResponse();\n-        final SecretType type = this.converter.convertToSecretType(request.getSecretType());\n-        final boolean result = this.secretManagementService.hasNewSecret(request.getDeviceId(), type);\n-        response.setHasNewSecret(result);\n-        return response;\n-    }\n }"
  },
  {
    "sha": "779c5a59187d2a9c336685837cec6f071eb2974b",
    "filename": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java",
    "status": "modified",
    "additions": 18,
    "deletions": 2,
    "changes": 20,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -8,23 +8,26 @@\n  */\n package org.opensmartgridplatform.secretmanagement.application.exception;\n \n+import java.util.Iterator;\n+\n import javax.xml.namespace.QName;\n \n import lombok.extern.slf4j.Slf4j;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.context.MessageContext;\n import org.springframework.ws.soap.SoapFault;\n import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.SoapHeaderElement;\n+import org.springframework.ws.soap.saaj.SaajSoapMessage;\n import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n \n @Slf4j\n public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n-\n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n \n     @Override\n     protected void customizeFault(final Object endpoint, final Exception ex, final SoapFault fault) {\n-        log.error(\"Exception occured during SOAP request processing\", ex);\n         final SoapFaultDetail detail = fault.addFaultDetail();\n         if (ex instanceof ExceptionWrapper) {\n             this.customizeFault(endpoint, (Exception) ex.getCause(), fault);\n@@ -44,4 +47,17 @@ protected void customizeFault(final Object endpoint, final Exception ex, final S\n         }\n     }\n \n+    @Override\n+    protected void logException(final Exception ex, final MessageContext messageContext) {\n+        log.error(\"[{}] Exception occurred during SOAP request processing\", this.getCorrelationUid(messageContext), ex);\n+    }\n+\n+    private String getCorrelationUid(final MessageContext messageContext) {\n+        final SaajSoapMessage request = (SaajSoapMessage) messageContext.getRequest();\n+        final Iterator<SoapHeaderElement> iter = request.getEnvelope().getHeader()\n+                                                        .examineHeaderElements(new QName(\"correlationUid\"));\n+        return iter.hasNext() ? iter.next().getText() : null;\n+\n+    }\n+\n }"
  },
  {
    "sha": "9662ed6a963e5005144471715ab8d8747dee1531",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/ConfigurationService.java",
    "status": "modified",
    "additions": 32,
    "deletions": 29,
    "changes": 61,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/ConfigurationService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/ConfigurationService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/ConfigurationService.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -11,6 +11,7 @@\n import java.util.List;\n \n import org.openmuc.jdlms.AccessResultCode;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.CorrelatedObject;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.alarm.SetAlarmNotificationsCommandExecutor;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.configuration.GetConfigurationObjectCommandExecutor;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.configuration.SetConfigurationObjectCommandExecutor;\n@@ -162,8 +163,8 @@ public void requestSetConfiguration(final DlmsConnectionManager conn, final Dlms\n             final SetConfigurationObjectRequestDto setConfigurationObjectRequest) throws ProtocolAdapterException {\n \n         // Configuration Object towards the Smart Meter\n-        final ConfigurationObjectDto configurationObject =\n-                setConfigurationObjectRequest.getSetConfigurationObjectRequestData().getConfigurationObject();\n+        final ConfigurationObjectDto configurationObject = setConfigurationObjectRequest\n+                .getSetConfigurationObjectRequestData().getConfigurationObject();\n \n         final GprsOperationModeTypeDto gprsOperationModeType = configurationObject.getGprsOperationMode();\n         final ConfigurationFlagsDto configurationFlags = configurationObject.getConfigurationFlags();\n@@ -180,8 +181,8 @@ public void requestSetConfiguration(final DlmsConnectionManager conn, final Dlms\n         }\n         LOGGER.info(VISUAL_SEPARATOR);\n \n-        final AccessResultCode accessResultCode = this.setConfigurationObjectCommandExecutor.execute(conn, device,\n-                configurationObject);\n+        final AccessResultCode accessResultCode = this.setConfigurationObjectCommandExecutor\n+                .execute(conn, device, configurationObject);\n         if (!AccessResultCode.SUCCESS.equals(accessResultCode)) {\n             throw new ProtocolAdapterException(\"Set configuration object reported result is: \" + accessResultCode);\n         }\n@@ -193,8 +194,8 @@ public void requestSetAdministrativeStatus(final DlmsConnectionManager conn, fin\n \n         LOGGER.info(\"Device for Set Administrative Status is: {}\", device);\n \n-        final AccessResultCode accessResultCode = this.setAdministrativeStatusCommandExecutor.execute(conn, device,\n-                administrativeStatusType);\n+        final AccessResultCode accessResultCode = this.setAdministrativeStatusCommandExecutor\n+                .execute(conn, device, administrativeStatusType);\n         if (AccessResultCode.SUCCESS != accessResultCode) {\n             throw new ProtocolAdapterException(\n                     \"AccessResultCode for set administrative status was not SUCCESS: \" + accessResultCode);\n@@ -206,8 +207,8 @@ public void setAlarmNotifications(final DlmsConnectionManager conn, final DlmsDe\n \n         LOGGER.info(\"Alarm Notifications to set on the device: {}\", alarmNotifications);\n \n-        final AccessResultCode accessResultCode = this.setAlarmNotificationsCommandExecutor.execute(conn, device,\n-                alarmNotifications);\n+        final AccessResultCode accessResultCode = this.setAlarmNotificationsCommandExecutor\n+                .execute(conn, device, alarmNotifications);\n         if (AccessResultCode.SUCCESS != accessResultCode) {\n             throw new ProtocolAdapterException(\n                     \"AccessResultCode for set alarm notifications was not SUCCESS: \" + accessResultCode);\n@@ -221,22 +222,24 @@ public AdministrativeStatusTypeDto requestGetAdministrativeStatus(final DlmsConn\n     }\n \n     public String setEncryptionKeyExchangeOnGMeter(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final GMeterInfoDto gMeterInfo) throws ProtocolAdapterException {\n+            final CorrelatedObject<GMeterInfoDto> gMeterInfo) throws ProtocolAdapterException {\n \n         LOGGER.info(\"Device for Set Encryption Key Exchange On G-Meter is: {}\", device);\n         this.setEncryptionKeyExchangeOnGMeterCommandExecutor.execute(conn, device, gMeterInfo);\n         return \"Set Encryption Key Exchange On G-Meter Result is OK for device id: \" + device.getDeviceIdentification();\n     }\n \n     public String setMbusUserKeyByChannel(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final SetMbusUserKeyByChannelRequestDataDto setMbusUserKeyByChannelRequestDataDto) throws OsgpException {\n+            final CorrelatedObject<SetMbusUserKeyByChannelRequestDataDto> setMbusUserKeyByChannelRequestData)\n+            throws OsgpException {\n \n         LOGGER.info(\"Device for Set M-Bus User Key By Channel is: {}\", device);\n \n-        final GMeterInfoDto gMeterInfo = this.getMbusKeyExchangeData(conn, device,\n-                setMbusUserKeyByChannelRequestDataDto);\n+        final GMeterInfoDto gMeterInfo = this\n+                .getMbusKeyExchangeData(conn, device, setMbusUserKeyByChannelRequestData.getObject());\n \n-        this.setEncryptionKeyExchangeOnGMeterCommandExecutor.execute(conn, device, gMeterInfo);\n+        this.setEncryptionKeyExchangeOnGMeterCommandExecutor.execute(conn, device,\n+                CorrelatedObject.from(setMbusUserKeyByChannelRequestData, gMeterInfo));\n \n         return \"Set M-Bus User Key By Channel Result is OK for device id: \" + device.getDeviceIdentification();\n     }\n@@ -246,13 +249,13 @@ public GMeterInfoDto getMbusKeyExchangeData(final DlmsConnectionManager conn, fi\n \n         final GetMBusDeviceOnChannelRequestDataDto mbusDeviceOnChannelRequest =\n                 new GetMBusDeviceOnChannelRequestDataDto(\n-                        device.getDeviceIdentification(), setMbusUserKeyByChannelRequestData.getChannel());\n-        final ChannelElementValuesDto channelElementValues = this.getMBusDeviceOnChannelCommandExecutor.execute(conn,\n-                device, mbusDeviceOnChannelRequest);\n+                device.getDeviceIdentification(), setMbusUserKeyByChannelRequestData.getChannel());\n+        final ChannelElementValuesDto channelElementValues = this.getMBusDeviceOnChannelCommandExecutor\n+                .execute(conn, device, mbusDeviceOnChannelRequest);\n \n-        final DlmsDevice mbusDevice = this.domainHelperService.findMbusDevice(\n-                Long.valueOf(channelElementValues.getIdentificationNumber()),\n-                channelElementValues.getManufacturerIdentification());\n+        final DlmsDevice mbusDevice = this.domainHelperService\n+                .findMbusDevice(Long.valueOf(channelElementValues.getIdentificationNumber()),\n+                        channelElementValues.getManufacturerIdentification());\n \n         return new GMeterInfoDto(setMbusUserKeyByChannelRequestData.getChannel(), mbusDevice.getDeviceIdentification());\n     }\n@@ -274,8 +277,8 @@ public void setPushSetupAlarm(final DlmsConnectionManager conn, final DlmsDevice\n \n         LOGGER.info(\"Push Setup Alarm to set on the device: {}\", pushSetupAlarm);\n \n-        final AccessResultCode accessResultCode = this.setPushSetupAlarmCommandExecutor.execute(conn, device,\n-                pushSetupAlarm);\n+        final AccessResultCode accessResultCode = this.setPushSetupAlarmCommandExecutor\n+                .execute(conn, device, pushSetupAlarm);\n \n         if (AccessResultCode.SUCCESS != accessResultCode) {\n             throw new ProtocolAdapterException(\n@@ -288,8 +291,8 @@ public void setPushSetupSms(final DlmsConnectionManager conn, final DlmsDevice d\n \n         LOGGER.info(\"Push Setup Sms to set on the device: {}\", pushSetupSms);\n \n-        final AccessResultCode accessResultCode = this.setPushSetupSmsCommandExecutor.execute(conn, device,\n-                pushSetupSms);\n+        final AccessResultCode accessResultCode = this.setPushSetupSmsCommandExecutor\n+                .execute(conn, device, pushSetupSms);\n \n         if (AccessResultCode.SUCCESS != accessResultCode) {\n             throw new ProtocolAdapterException(\n@@ -380,16 +383,16 @@ public GetMbusEncryptionKeyStatusByChannelResponseDto requestGetMbusEncryptionKe\n             final GetMbusEncryptionKeyStatusByChannelRequestDataDto getMbusEncryptionKeyStatusByChannelRequest)\n             throws OsgpException {\n \n-        return this.getMbusEncryptionKeyStatusByChannelCommandExecutor.execute(conn, device,\n-                getMbusEncryptionKeyStatusByChannelRequest);\n+        return this.getMbusEncryptionKeyStatusByChannelCommandExecutor\n+                .execute(conn, device, getMbusEncryptionKeyStatusByChannelRequest);\n     }\n \n-    public void requestSetRandomizationSettings(DlmsConnectionManager conn, DlmsDevice device,\n-            SetRandomisationSettingsRequestDataDto setRandomisationSettingsRequestDataDto)\n+    public void requestSetRandomizationSettings(final DlmsConnectionManager conn, final DlmsDevice device,\n+            final SetRandomisationSettingsRequestDataDto setRandomisationSettingsRequestDataDto)\n             throws ProtocolAdapterException {\n \n-        AccessResultCode accessResultCode = this.setRandomisationSettingsCommandExecutor.execute(conn, device,\n-                setRandomisationSettingsRequestDataDto);\n+        final AccessResultCode accessResultCode = this.setRandomisationSettingsCommandExecutor\n+                .execute(conn, device, setRandomisationSettingsRequestDataDto);\n \n         if (AccessResultCode.SUCCESS != accessResultCode) {\n             throw new ProtocolAdapterException("
  },
  {
    "sha": "700d24532d9a6ff8500a391a824c0e287633230f",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 7,
    "changes": 15,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -66,31 +66,32 @@\n     @Autowired\n     private CoupleMbusDeviceByChannelCommandExecutor coupleMbusDeviceByChannelCommandExecutor;\n \n-    public void addMeter(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n+    public void addMeter(final String correlationUid, final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n         if (smartMeteringDevice.getDeviceIdentification() == null) {\n             throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.PROTOCOL_DLMS,\n                     new IllegalArgumentException(\"Provided device does not contain device identification\"));\n         }\n-        this.storeAndActivateKeys(smartMeteringDevice);\n+        this.storeAndActivateKeys(correlationUid, smartMeteringDevice);\n         final DlmsDevice dlmsDevice = this.installationMapper.map(smartMeteringDevice, DlmsDevice.class);\n         this.dlmsDeviceRepository.save(dlmsDevice);\n     }\n \n-    private void storeAndActivateKeys(final SmartMeteringDeviceDto deviceDto) throws FunctionalException {\n+    private void storeAndActivateKeys(final String correlationUid, final SmartMeteringDeviceDto deviceDto) throws FunctionalException {\n         final Map<SecurityKeyType, byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);\n         final List<SecurityKeyType> keyTypesToStore = this.determineKeyTypesToStore(deviceDto);\n-        for (SecurityKeyType keyType : keyTypesToStore) {\n+        for (final SecurityKeyType keyType : keyTypesToStore) {\n             final byte[] key = this.getKeyFromDeviceDto(deviceDto, keyType);\n             if (ArrayUtils.isNotEmpty(key)) {\n                 keysByType.put(keyType, this.encryptionService.rsaDecrypt(key));\n             } else {\n-                Exception rootCause = new NoSuchElementException(keyType.name());\n+                final Exception rootCause = new NoSuchElementException(keyType.name());\n                 throw new FunctionalException(FunctionalExceptionType.KEY_NOT_PRESENT, ComponentType.PROTOCOL_DLMS,\n                         rootCause);\n             }\n         }\n-        this.secretManagementService.storeNewKeys(deviceDto.getDeviceIdentification(), keysByType);\n-        this.secretManagementService.activateNewKeys(deviceDto.getDeviceIdentification(), keyTypesToStore);\n+        this.secretManagementService.storeNewKeys(correlationUid, deviceDto.getDeviceIdentification(), keysByType);\n+        this.secretManagementService.activateNewKeys(correlationUid, deviceDto.getDeviceIdentification(),\n+                keyTypesToStore);\n     }\n \n     private List<SecurityKeyType> determineKeyTypesToStore(final SmartMeteringDeviceDto deviceDto)"
  },
  {
    "sha": "92ca3536e838dffa6de241edf8807b1904f2b089",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java",
    "status": "modified",
    "additions": 56,
    "deletions": 36,
    "changes": 92,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -61,69 +61,76 @@ public SecretManagementService(final RsaEncrypter soapRsaEncrypter,\n     /**\n      * Retrieve an active key of a certain type for a specified device\n      *\n+     * @param correlationUid the correlation UID of the original request\n      * @param deviceIdentification\n      *         the device identification string of the device\n      * @param keyType\n      *         the requested key type\n      *\n      * @return the key or NULL if not present\n      */\n-    public byte[] getKey(final String deviceIdentification, final SecurityKeyType keyType) {\n+    public byte[] getKey(final String correlationUid, final String deviceIdentification,\n+            final SecurityKeyType keyType) {\n         if (LOGGER.isInfoEnabled()) {\n             LOGGER.info(\"Retrieving {} for device {}\", keyType.name(), deviceIdentification);\n         }\n-        return this.getKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n+        return this.getKeys(correlationUid, deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n     /**\n      * Retrieves the active keys of requested types for a specified device\n      *\n+     * @param correlationUid the correlation UID of the original request\n      * @param deviceIdentification\n      *         the device identification string of the device\n      * @param keyTypes\n      *         the requested key types\n      *\n      * @return the requested keys in a map by key type, with value NULL if not present\n      */\n-    public Map<SecurityKeyType, byte[]> getKeys(final String deviceIdentification,\n+    public Map<SecurityKeyType, byte[]> getKeys(final String correlationUid, final String deviceIdentification,\n             final List<SecurityKeyType> keyTypes) {\n         final GetSecretsRequest request = this.createGetSecretsRequest(deviceIdentification, keyTypes);\n-        final GetSecretsResponse response = this.secretManagementClient.getSecretsRequest(request);\n+        final GetSecretsResponse response = this.secretManagementClient.getSecretsRequest(correlationUid, request);\n         this.validateGetResponse(keyTypes, response);\n         return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n     /**\n      * Retrieve a new (not yet activated) key of a certain type for a specified device\n      *\n+     * @param correlationUid the correlation UID of the original request\n      * @param deviceIdentification\n      *         the device identification string of the device\n      * @param keyType\n      *         the requested key type\n      *\n      * @return the key or NULL if not present\n      */\n-    public byte[] getNewKey(final String deviceIdentification, final SecurityKeyType keyType) {\n+    public byte[] getNewKey(final String correlationUid, final String deviceIdentification,\n+            final SecurityKeyType keyType) {\n         if (LOGGER.isInfoEnabled()) {\n             LOGGER.info(\"Retrieving new {} for device {}\", keyType.name(), deviceIdentification);\n         }\n-        return this.getNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n+        return this.getNewKeys(correlationUid, deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n     /**\n      * Retrieves the new (not yet activated) keys of requested types for a specified device\n      *\n+     * @param correlationUid the correlation UID of the original request\n      * @param deviceIdentification\n      *         the device identification string of the device\n      * @param keyTypes\n      *         the requested key types\n      *\n      * @return the requested keys in a map by key type, with value NULL if not present\n      */\n-    public Map<SecurityKeyType, byte[]> getNewKeys(final String deviceIdentification,\n+    public Map<SecurityKeyType, byte[]> getNewKeys(final String correlationUid, final String deviceIdentification,\n             final List<SecurityKeyType> keyTypes) {\n         final GetNewSecretsRequest request = this.createGetNewSecretsRequest(deviceIdentification, keyTypes);\n-        final GetNewSecretsResponse response = this.secretManagementClient.getNewSecretsRequest(request);\n+        final GetNewSecretsResponse response = this.secretManagementClient\n+                .getNewSecretsRequest(correlationUid, request);\n         this.validateGetNewResponse(keyTypes, response);\n         return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n@@ -180,38 +187,41 @@ private GetNewSecretsRequest createGetNewSecretsRequest(final String deviceIdent\n      * <p>\n      * The moment the new key is known to be transferred to the device, make\n      * sure to activate it by calling\n-     * {@link #activateNewKey(String, SecurityKeyType)}.\n+     * {@link #activateNewKey(String, String, SecurityKeyType)}.\n      *\n+     * @param correlationUid the correlation UID of the original request\n      * @param deviceIdentification\n      *         DLMS device id\n      * @param key\n      *         key to store, unencrypted\n      * @param keyType\n      *         type of key\n      *\n-     * @see #activateNewKey(String, SecurityKeyType)\n+     * @see #activateNewKey(String, String, SecurityKeyType)\n      */\n-    public void storeNewKey(final String deviceIdentification, final SecurityKeyType keyType, byte[] key) {\n+    public void storeNewKey(final String correlationUid, final String deviceIdentification,\n+            final SecurityKeyType keyType, final byte[] key) {\n         final Map<SecurityKeyType, byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);\n         keysByType.put(keyType, key);\n-        this.storeNewKeys(deviceIdentification, keysByType);\n+        this.storeNewKeys(correlationUid, deviceIdentification, keysByType);\n     }\n \n-    public void storeNewKeys(final String deviceIdentification, final Map<SecurityKeyType, byte[]> keysByType) {\n+    public void storeNewKeys(final String correlationUid, final String deviceIdentification,\n+            final Map<SecurityKeyType, byte[]> keysByType) {\n         this.validateKeys(keysByType);\n         final TypedSecrets typedSecrets = new TypedSecrets();\n         final List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n-        for (Map.Entry<SecurityKeyType, byte[]> entry : keysByType.entrySet()) {\n-            TypedSecret ts = new TypedSecret();\n+        for (final Map.Entry<SecurityKeyType, byte[]> entry : keysByType.entrySet()) {\n+            final TypedSecret ts = new TypedSecret();\n             ts.setType(entry.getKey().toSecretType());\n             ts.setSecret(this.encryptSoapSecret(entry.getValue(), true));\n             typedSecretList.add(ts);\n         }\n         final StoreSecretsRequest request = this.createStoreSecretsRequest(deviceIdentification, typedSecrets);\n         StoreSecretsResponse response = null;\n         try {\n-            response = this.secretManagementClient.storeSecretsRequest(request);\n-        } catch (RuntimeException exc) {\n+            response = this.secretManagementClient.storeSecretsRequest(correlationUid, request);\n+        } catch (final RuntimeException exc) {\n             throw new IllegalStateException(\"Could not store keys: unexpected exception occured\", exc);\n         }\n         if (response == null) {\n@@ -243,39 +253,45 @@ private StoreSecretsRequest createStoreSecretsRequest(final String deviceIdentif\n      * Updates the state of a new key from 'new' to 'active'\n      * <p>\n      * This method should be called to activate a new key stored with\n-     * {@link #storeNewKeys(String, Map)} after it has\n+     * {@link #storeNewKeys(String, String, Map)} after it has\n      * been confirmed to be set on the device.\n      *\n+     * @param correlationUid the correlation UID of the original request\n      * @param deviceIdentification\n      *         DLMS device id\n      * @param keyType\n      *         type of key\n      *\n-     * @see #storeNewKeys(String, Map)\n+     * @see #storeNewKeys(String, String, Map)\n      */\n-    public void activateNewKey(final String deviceIdentification, final SecurityKeyType keyType) {\n-        this.activateNewKeys(deviceIdentification, Arrays.asList(keyType));\n+    public void activateNewKey(final String correlationUid, final String deviceIdentification,\n+            final SecurityKeyType keyType) {\n+        this.activateNewKeys(correlationUid, deviceIdentification, Arrays.asList(keyType));\n     }\n \n-    public void activateNewKeys(final String deviceIdentification, final List<SecurityKeyType> keyTypes) {\n+    public void activateNewKeys(final String correlationUid, final String deviceIdentification,\n+            final List<SecurityKeyType> keyTypes) {\n         final ActivateSecretsRequest request = new ActivateSecretsRequest();\n         request.setDeviceId(deviceIdentification);\n         request.setSecretTypes(new SecretTypes());\n         final List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n         keyTypes.forEach(kt -> secretTypeList.add(kt.toSecretType()));\n-        this.secretManagementClient.activateSecretsRequest(request);\n+        this.secretManagementClient.activateSecretsRequest(correlationUid, request);\n     }\n \n-    public boolean hasNewSecretOfType(final String deviceIdentification, final SecurityKeyType keyType) {\n+    public boolean hasNewSecretOfType(final String correlationUid, final String deviceIdentification,\n+            final SecurityKeyType keyType) {\n         final HasNewSecretRequest request = new HasNewSecretRequest();\n         request.setDeviceId(deviceIdentification);\n         request.setSecretType(keyType.toSecretType());\n-        final HasNewSecretResponse response = this.secretManagementClient.hasNewSecretRequest(request);\n+        final HasNewSecretResponse response = this.secretManagementClient.hasNewSecretRequest(correlationUid, request);\n         return response.isHasNewSecret();\n     }\n \n-    public byte[] generate128BitsKeyAndStoreAsNewKey(final String deviceIdentification, final SecurityKeyType keyType) {\n-        return this.generate128BitsKeysAndStoreAsNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n+    public byte[] generate128BitsKeyAndStoreAsNewKey(final String correlationUid, final String deviceIdentification,\n+            final SecurityKeyType keyType) {\n+        return this.generate128BitsKeysAndStoreAsNewKeys(correlationUid, deviceIdentification, Arrays.asList(keyType))\n+                   .get(keyType);\n     }\n \n     /**\n@@ -285,16 +301,20 @@ public boolean hasNewSecretOfType(final String deviceIdentification, final Secur\n      * The master keys (DLMS master or M-Bus Default) cannot be changed on a\n      * device, but can be generated for use in tests or with simulated devices.\n      *\n+     * @param correlationUid the correlation UID of the original request\n+     * @param deviceIdentification the device identification for which to generate the keys\n+     * @param keyTypes the requested key types\n      * @return a new 128bits key, unencrypted.\n      */\n-    public Map<SecurityKeyType, byte[]> generate128BitsKeysAndStoreAsNewKeys(final String deviceIdentification,\n-            final List<SecurityKeyType> keyTypes) {\n+    public Map<SecurityKeyType, byte[]> generate128BitsKeysAndStoreAsNewKeys(final String correlationUid,\n+            final String deviceIdentification, final List<SecurityKeyType> keyTypes) {\n         final SecretTypes secretTypes = new SecretTypes();\n         final GenerateAndStoreSecretsRequest request = this\n                 .createGenerateAndStoreSecretsRequest(deviceIdentification, secretTypes);\n         secretTypes.getSecretType().addAll(keyTypes.stream().map(SecurityKeyType::toSecretType).collect(toList()));\n \n-        final GenerateAndStoreSecretsResponse response = this.secretManagementClient.generateAndStoreSecrets(request);\n+        final GenerateAndStoreSecretsResponse response = this.secretManagementClient\n+                .generateAndStoreSecrets(correlationUid, request);\n         final TypedSecrets typedSecrets = response.getTypedSecrets();\n         final List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n         this.validateGenerateAndStoreResponse(keyTypes, response, typedSecretList);\n@@ -334,31 +354,31 @@ private void validateOsgpResultAndTypedSecrets(final OsgpResultType result, fina\n     }\n \n     private byte[] decryptSoapSecret(final TypedSecret typedSecret, final boolean exceptionOnNull) {\n-        boolean nullValue = typedSecret.getSecret() == null || typedSecret.getSecret().isEmpty();\n+        final boolean nullValue = typedSecret.getSecret() == null || typedSecret.getSecret().isEmpty();\n         if (exceptionOnNull && nullValue) {\n             throw new IllegalArgumentException(\"Cannot decrypt NULL value\");\n         } else if (!exceptionOnNull && nullValue) {\n             return null;\n         }\n         try {\n-            byte[] encryptedDecodedSoapSecret = Hex.decodeHex(typedSecret.getSecret());\n+            final byte[] encryptedDecodedSoapSecret = Hex.decodeHex(typedSecret.getSecret());\n             return this.soapRsaEncrypter.decrypt(encryptedDecodedSoapSecret);\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new IllegalStateException(\"Error decoding/decrypting SOAP key\", e);\n         }\n     }\n \n     private String encryptSoapSecret(final byte[] secret, final boolean exceptionOnNull) {\n-        boolean nullValue = secret == null || secret.length == 0;\n+        final boolean nullValue = secret == null || secret.length == 0;\n         if (exceptionOnNull && nullValue) {\n             throw new IllegalArgumentException(\"Cannot encrypt NULL value\");\n         } else if (!exceptionOnNull && nullValue) {\n             return null;\n         }\n         try {\n-            byte[] encrypted = this.soapRsaEncrypter.encrypt(secret);\n+            final byte[] encrypted = this.soapRsaEncrypter.encrypt(secret);\n             return Hex.encodeHexString(encrypted);\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new IllegalStateException(\"Error encoding/encrypting SOAP key\", e);\n         }\n     }"
  },
  {
    "sha": "83984ec7ffe9de60d6608f2ef506d97e39a5b7c9",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java",
    "status": "modified",
    "additions": 26,
    "deletions": 32,
    "changes": 58,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -17,6 +17,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n import org.bouncycastle.util.encoders.Hex;\n import org.openmuc.jdlms.AuthenticationMechanism;\n import org.openmuc.jdlms.DlmsConnection;\n@@ -34,27 +36,25 @@\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n+@Slf4j\n public class RecoverKeyProcess implements Runnable {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(RecoverKeyProcess.class);\n-\n     private final DomainHelperService domainHelperService;\n \n     private final int responseTimeout;\n \n     private final int logicalDeviceAddress;\n \n     private final int clientId;\n-\n-    private String deviceIdentification;\n-\n     private DlmsDevice device;\n-\n+    @Setter\n+    private String deviceIdentification;\n+    @Setter\n     private String ipAddress;\n+    @Setter\n+    private String correlationUid;\n \n     @Autowired\n     private SecretManagementService secretManagementService;\n@@ -67,43 +67,36 @@ public RecoverKeyProcess(final DomainHelperService domainHelperService, final in\n         this.clientId = deviceAssociation.getClientId();\n     }\n \n-    public void setDeviceIdentification(final String deviceIdentification) {\n-        this.deviceIdentification = deviceIdentification;\n-    }\n-\n-    public void setIpAddress(final String ipAddress) {\n-        this.ipAddress = ipAddress;\n-    }\n-\n     @Override\n     public void run() {\n         this.checkState();\n \n-        LOGGER.info(\"Attempting key recovery for device {}\", this.deviceIdentification);\n+        log.info(\"[{}] Attempting key recovery for device {}\", this.correlationUid, this.deviceIdentification);\n \n         try {\n             this.findDevice();\n         } catch (final Exception e) {\n-            LOGGER.error(\"Could not find device\", e);\n-            //why try to find device if you don't do anything with the result?!?\n-            //shouldn't we throw an exception here?\n+            log.error(\"[{}] Could not find device\", this.correlationUid, e);\n         }\n \n-        if (!this.secretManagementService.hasNewSecretOfType(this.deviceIdentification, E_METER_AUTHENTICATION)) {\n-            LOGGER.warn(\"Could not recover keys: device has no new authorisation key registered in secret-mgmt module\");\n+        if (!this.secretManagementService\n+                .hasNewSecretOfType(this.correlationUid, this.deviceIdentification, E_METER_AUTHENTICATION)) {\n+            log.warn(\n+                    \"[{}] Could not recover keys: device has no new authorisation key registered in secret-mgmt module\",\n+                    this.correlationUid);\n             return;\n         }\n \n         if (this.canConnectUsingNewKeys()) {\n-            List<SecurityKeyType> keyTypesToActivate=Arrays.asList(E_METER_ENCRYPTION,E_METER_AUTHENTICATION);\n+            final List<SecurityKeyType> keyTypesToActivate = Arrays.asList(E_METER_ENCRYPTION, E_METER_AUTHENTICATION);\n             try {\n-                this.secretManagementService.activateNewKeys(this.deviceIdentification, keyTypesToActivate);\n-            } catch (Exception e) {\n+                this.secretManagementService\n+                        .activateNewKeys(this.correlationUid, this.deviceIdentification, keyTypesToActivate);\n+            } catch (final Exception e) {\n                 throw new RecoverKeyException(e);\n             }\n         } else {\n-            LOGGER.warn(\"Could not recover keys: could not connect to device using new keys\");\n-            //shouldn't we try to connect using 'old' keys? or send key change to device again?\n+            log.warn(\"[{}] Could not recover keys: could not connect to device using new keys\", this.correlationUid);\n         }\n     }\n \n@@ -130,14 +123,14 @@ private boolean canConnectUsingNewKeys() {\n             connection = this.createConnectionUsingNewKeys();\n             return true;\n         } catch (final Exception e) {\n-            LOGGER.warn(\"Connection exception: {}\", e.getMessage(), e);\n+            log.warn(\"Connection exception: {}\", e.getMessage(), e);\n             return false;\n         } finally {\n             if (connection != null) {\n                 try {\n                     connection.close();\n                 } catch (final IOException e) {\n-                    LOGGER.warn(\"Connection exception: {}\", e.getMessage(), e);\n+                    log.warn(\"Connection exception: {}\", e.getMessage(), e);\n                 }\n             }\n         }\n@@ -153,8 +146,9 @@ private boolean canConnectUsingNewKeys() {\n      *         with the device.\n      */\n     private DlmsConnection createConnectionUsingNewKeys() throws IOException, FunctionalException {\n-        Map<SecurityKeyType, byte[]> keys = this.secretManagementService\n-                .getNewKeys(this.deviceIdentification, Arrays.asList(E_METER_AUTHENTICATION, E_METER_ENCRYPTION));\n+        final Map<SecurityKeyType, byte[]> keys = this.secretManagementService\n+                .getNewKeys(this.correlationUid, this.deviceIdentification,\n+                        Arrays.asList(E_METER_AUTHENTICATION, E_METER_ENCRYPTION));\n         final byte[] authenticationKey = Hex.decode(keys.get(E_METER_AUTHENTICATION));\n         final byte[] encryptionKey = Hex.decode(keys.get(E_METER_ENCRYPTION));\n \n@@ -177,7 +171,7 @@ private DlmsConnection createConnectionUsingNewKeys() throws IOException, Functi\n                 tcpConnectionBuilder.setChallengeLength(challengeLength);\n             }\n         } catch (final IllegalArgumentException e) {\n-            LOGGER.error(\"Exception occurred: Invalid key format\");\n+            log.error(\"Exception occurred: Invalid key format\");\n             throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_FORMAT, ComponentType.PROTOCOL_DLMS,\n                     e);\n         }"
  },
  {
    "sha": "a15f6cc5b75542d9d349f87b61262c1b93a790cd",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcessInitiator.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcessInitiator.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcessInitiator.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcessInitiator.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -13,11 +13,11 @@\n import javax.inject.Provider;\n \n public class RecoverKeyProcessInitiator {\n-    private ScheduledExecutorService executorService;\n+    private final ScheduledExecutorService executorService;\n \n-    private Provider<RecoverKeyProcess> recoverKeyProcessProvider;\n+    private final Provider<RecoverKeyProcess> recoverKeyProcessProvider;\n \n-    private int recoverKeyDelay;\n+    private final int recoverKeyDelay;\n \n     public RecoverKeyProcessInitiator(final ScheduledExecutorService executorService,\n             final Provider<RecoverKeyProcess> recoverKeyProcessProvider, final int recoverKeyDelay) {\n@@ -26,8 +26,9 @@ public RecoverKeyProcessInitiator(final ScheduledExecutorService executorService\n         this.recoverKeyDelay = recoverKeyDelay;\n     }\n \n-    public void initiate(final String deviceIdentification, final String ipAddress) {\n+    public void initiate(final String correlationUid, final String deviceIdentification, final String ipAddress) {\n         final RecoverKeyProcess process = this.recoverKeyProcessProvider.get();\n+        process.setCorrelationUid(correlationUid);\n         process.setDeviceIdentification(deviceIdentification);\n         process.setIpAddress(ipAddress);\n         this.executorService.schedule(process, this.recoverKeyDelay, TimeUnit.MILLISECONDS);"
  },
  {
    "sha": "4356e03557a2799b163ac92c691089bdcf1673a5",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java",
    "status": "modified",
    "additions": 46,
    "deletions": 27,
    "changes": 73,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -1,12 +1,17 @@\n /**\n  * Copyright 2016 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n \n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+\n import org.opensmartgridplatform.ws.schema.core.secret.management.ActivateSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.ActivateSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsRequest;\n@@ -22,65 +27,79 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n+import org.springframework.ws.client.core.WebServiceMessageCallback;\n import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.soap.SoapHeader;\n+import org.springframework.ws.soap.SoapMessage;\n+import org.springframework.xml.transform.StringSource;\n \n /**\n  * SOAP Client for SecretManagement\n  */\n @Component\n public class SecretManagementClient {\n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementClient.class);\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement\";\n+    private static final String CORRELATION_UID = \"correlationUid\";\n \n     private final WebServiceTemplate webServiceTemplate;\n \n-    SecretManagementClient(WebServiceTemplate webServiceTemplate) {\n+    SecretManagementClient(final WebServiceTemplate webServiceTemplate) {\n         this.webServiceTemplate = webServiceTemplate;\n     }\n \n-    public GetSecretsResponse getSecretsRequest(GetSecretsRequest request) {\n+    private WebServiceMessageCallback createCorrelationHeaderCallback(final String correlationUid) {\n+        return message -> {\n+            try {\n+                final SoapMessage soapMessage = (SoapMessage) message;\n+                final SoapHeader header = soapMessage.getSoapHeader();\n+                final String headerXml = String\n+                        .format(\"<%1$s xmlns=\\\"%2$s\\\">%3$s</%1$s>\", CORRELATION_UID, NAMESPACE_URI, correlationUid);\n+                final StringSource headerSource = new StringSource(headerXml);\n+                final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+                transformer.transform(headerSource, header.getResult());\n+            } catch (final TransformerException e) {\n+                LOGGER.error(\"Exception during SOAP header callback generation\", e);\n+            }\n+        };\n+    }\n+\n+    public GetSecretsResponse getSecretsRequest(final String correlationUid, final GetSecretsRequest request) {\n \n         LOGGER.info(\"Calling SecretManagement.getSecretsRequest over SOAP for device {}\", request.getDeviceId());\n-\n         return (GetSecretsResponse) this.webServiceTemplate\n-                .marshalSendAndReceive(request);\n+                .marshalSendAndReceive(request, this.createCorrelationHeaderCallback(correlationUid));\n     }\n \n-    public GetNewSecretsResponse getNewSecretsRequest(GetNewSecretsRequest request) {\n+    public GetNewSecretsResponse getNewSecretsRequest(final String correlationUid, final GetNewSecretsRequest request) {\n \n         LOGGER.info(\"Calling SecretManagement.getNewSecretsRequest over SOAP for device {}\", request.getDeviceId());\n \n-        return (GetNewSecretsResponse) this.webServiceTemplate\n-                .marshalSendAndReceive(request);\n+        return (GetNewSecretsResponse) this.webServiceTemplate.marshalSendAndReceive(request, this.createCorrelationHeaderCallback(correlationUid));\n     }\n \n-    public StoreSecretsResponse storeSecretsRequest(StoreSecretsRequest request) {\n+    public StoreSecretsResponse storeSecretsRequest(final String correlationUid, final StoreSecretsRequest request) {\n         LOGGER.info(\"Calling SecretManagement.storeSecretsRequest over SOAP for device {}\", request.getDeviceId());\n \n-        return (StoreSecretsResponse) this.webServiceTemplate\n-                .marshalSendAndReceive(request);\n+        return (StoreSecretsResponse) this.webServiceTemplate.marshalSendAndReceive(request, this.createCorrelationHeaderCallback(correlationUid));\n     }\n \n-    public ActivateSecretsResponse activateSecretsRequest(ActivateSecretsRequest request) {\n-        LOGGER.info(\"Calling SecretManagement.activateSecretsRequest over SOAP for device {}\",\n-                request.getDeviceId());\n+    public ActivateSecretsResponse activateSecretsRequest(final String correlationUid, final ActivateSecretsRequest request) {\n+        LOGGER.info(\"Calling SecretManagement.activateSecretsRequest over SOAP for device {}\", request.getDeviceId());\n \n-        return (ActivateSecretsResponse) this.webServiceTemplate\n-                .marshalSendAndReceive(request);\n+        return (ActivateSecretsResponse) this.webServiceTemplate.marshalSendAndReceive(request, this.createCorrelationHeaderCallback(correlationUid));\n     }\n \n-    public HasNewSecretResponse hasNewSecretRequest(HasNewSecretRequest request) {\n-        LOGGER.info(\"Calling SecretManagement.hasNewSecretsRequest over SOAP for device {}\",\n-                request.getDeviceId());\n+    public HasNewSecretResponse hasNewSecretRequest(final String correlationUid, final HasNewSecretRequest request) {\n+        LOGGER.info(\"Calling SecretManagement.hasNewSecretsRequest over SOAP for device {}\", request.getDeviceId());\n \n-        return (HasNewSecretResponse) this.webServiceTemplate\n-                .marshalSendAndReceive(request);\n+        return (HasNewSecretResponse) this.webServiceTemplate.marshalSendAndReceive(request, this.createCorrelationHeaderCallback(correlationUid));\n     }\n \n-    public GenerateAndStoreSecretsResponse generateAndStoreSecrets(GenerateAndStoreSecretsRequest request) {\n-        LOGGER.info(\"Calling SecretManagement.generateAndStoreSecrets over SOAP for device {}\",\n-                request.getDeviceId());\n+    public GenerateAndStoreSecretsResponse generateAndStoreSecrets(final String correlationUid, final GenerateAndStoreSecretsRequest request) {\n+        LOGGER.info(\"Calling SecretManagement.generateAndStoreSecrets over SOAP for device {}\", request.getDeviceId());\n \n-        return (GenerateAndStoreSecretsResponse) this.webServiceTemplate\n-                .marshalSendAndReceive(request);\n+        return (GenerateAndStoreSecretsResponse) this.webServiceTemplate.marshalSendAndReceive(request, this.createCorrelationHeaderCallback(correlationUid));\n     }\n }"
  },
  {
    "sha": "f73d38eb38db60f73acae7d95d4f258eae4bbd60",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/CorrelatedObject.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/CorrelatedObject.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/CorrelatedObject.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/CorrelatedObject.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.dlms.domain.commands;\n+\n+import java.io.Serializable;\n+\n+import lombok.Getter;\n+import org.opensmartgridplatform.adapter.protocol.dlms.infra.messaging.RequestWithMetadata;\n+import org.opensmartgridplatform.shared.infra.jms.MessageMetadata;\n+\n+@Getter\n+public class CorrelatedObject<T> {\n+    private static final long serialVersionUID = -6205572886092338803L;\n+    private final String correlationUid;\n+    private final T object;\n+\n+    private CorrelatedObject(final String correlationUid, final T object) {\n+        this.correlationUid = correlationUid;\n+        this.object = object;\n+    }\n+\n+    public static <T> CorrelatedObject<T> from(final CorrelatedObject<?> correlationSource,\n+            final T object) {\n+        return from(correlationSource.correlationUid, object);\n+    }\n+\n+    public static <T extends Serializable> CorrelatedObject<T> from(final RequestWithMetadata<T> request) {\n+        return from(request.getMetadata(), request.getRequestObject());\n+    }\n+\n+    public static <T> CorrelatedObject<T> from(final RequestWithMetadata<?> request, final T object) {\n+        return from(request.getMetadata(), object);\n+    }\n+\n+    public static <T> CorrelatedObject<T> from(final MessageMetadata metadata, final T object) {\n+        return from(metadata.getCorrelationUid(), object);\n+    }\n+\n+    public static <T> CorrelatedObject<T> from(final String correlationUid, final T object) {\n+        return new CorrelatedObject<>(correlationUid, object);\n+    }\n+}"
  },
  {
    "sha": "1b51add189b40a3366213bd14a8fdfd198220046",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/mbus/SetMbusUserKeyByChannelCommandExecutor.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/mbus/SetMbusUserKeyByChannelCommandExecutor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/mbus/SetMbusUserKeyByChannelCommandExecutor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/mbus/SetMbusUserKeyByChannelCommandExecutor.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -12,6 +12,7 @@\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.BundleService;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.ConfigurationService;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.AbstractCommandExecutor;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.CorrelatedObject;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.security.SetEncryptionKeyExchangeOnGMeterCommandExecutor;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsConnectionManager;\n@@ -44,7 +45,8 @@\n  * in the former case it can be looked up by device identification).\n  */\n @Component()\n-public class SetMbusUserKeyByChannelCommandExecutor extends AbstractCommandExecutor<GMeterInfoDto, MethodResultCode> {\n+public class SetMbusUserKeyByChannelCommandExecutor\n+        extends AbstractCommandExecutor<CorrelatedObject<GMeterInfoDto>, MethodResultCode> {\n \n     @Autowired\n     private ConfigurationService configurationService;\n@@ -61,11 +63,12 @@ public ActionResponseDto executeBundleAction(final DlmsConnectionManager conn, f\n             final ActionRequestDto actionRequestDto) throws OsgpException {\n \n         this.checkActionRequestType(actionRequestDto);\n-        final SetMbusUserKeyByChannelRequestDataDto setMbusUserKeyByChannelRequestData =\n-                (SetMbusUserKeyByChannelRequestDataDto) actionRequestDto;\n+        final CorrelatedObject<SetMbusUserKeyByChannelRequestDataDto> setMbusUserKeyByChannelRequestData =\n+                (CorrelatedObject<SetMbusUserKeyByChannelRequestDataDto>) actionRequestDto;\n         final GMeterInfoDto gMeterInfo = this.configurationService\n-                .getMbusKeyExchangeData(conn, device, setMbusUserKeyByChannelRequestData);\n-        final MethodResultCode executionResult = this.execute(conn, device, gMeterInfo);\n+                .getMbusKeyExchangeData(conn, device, setMbusUserKeyByChannelRequestData.getObject());\n+        final MethodResultCode executionResult = this\n+                .execute(conn, device, CorrelatedObject.from(setMbusUserKeyByChannelRequestData, gMeterInfo));\n         return this.asBundleResponse(executionResult);\n     }\n \n@@ -77,7 +80,7 @@ public ActionResponseDto asBundleResponse(final MethodResultCode executionResult\n \n     @Override\n     public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final GMeterInfoDto gMeterInfo) throws ProtocolAdapterException, FunctionalException {\n+            final CorrelatedObject<GMeterInfoDto> gMeterInfo) throws ProtocolAdapterException, FunctionalException {\n         return this.setEncryptionKeyExchangeOnGMeterCommandExecutor.execute(conn, device, gMeterInfo);\n     }\n }"
  },
  {
    "sha": "f16d96df367c87489013ac408ab8a8b9da007676",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java",
    "status": "modified",
    "additions": 9,
    "deletions": 7,
    "changes": 16,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -17,6 +17,7 @@\n \n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.SecretManagementService;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.AbstractCommandExecutor;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.CorrelatedObject;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsConnectionManager;\n@@ -35,7 +36,8 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class GenerateAndReplaceKeyCommandExecutor extends AbstractCommandExecutor<ActionRequestDto, ActionResponseDto> {\n+public class GenerateAndReplaceKeyCommandExecutor extends AbstractCommandExecutor<CorrelatedObject<ActionRequestDto>,\n+        ActionResponseDto> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GenerateAndReplaceKeyCommandExecutor.class);\n \n@@ -52,23 +54,23 @@ public GenerateAndReplaceKeyCommandExecutor() {\n     @Override\n     public ActionResponseDto executeBundleAction(final DlmsConnectionManager conn, final DlmsDevice device,\n             final ActionRequestDto actionRequestDto) throws OsgpException {\n-\n-        return this.execute(conn, device, actionRequestDto);\n+        return this.execute(conn, device, (CorrelatedObject<ActionRequestDto>) actionRequestDto);\n     }\n \n     @Override\n     public ActionResponseDto execute(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final ActionRequestDto actionRequestDto) throws OsgpException {\n+            final CorrelatedObject<ActionRequestDto> actionRequestDto) throws OsgpException {\n         LOGGER.info(\"Generate new keys for device {}\", device.getDeviceIdentification());\n-        final SetKeysRequestDto setKeysRequest = this.generateSetKeysRequest(device.getDeviceIdentification());\n+        final SetKeysRequestDto setKeysRequest =\n+                this.generateSetKeysRequest(actionRequestDto.getCorrelationUid(), device.getDeviceIdentification());\n         return this.replaceKeyCommandExecutor.executeBundleAction(conn, device, setKeysRequest);\n     }\n \n-    private SetKeysRequestDto generateSetKeysRequest(final String deviceIdentification) throws FunctionalException {\n+    private SetKeysRequestDto generateSetKeysRequest(final String correlationUid, final String deviceIdentification) throws FunctionalException {\n         try {\n             final List<SecurityKeyType> keyTypes = Arrays.asList(E_METER_AUTHENTICATION, E_METER_ENCRYPTION);\n             final Map<SecurityKeyType, byte[]> generatedKeys = this.secretManagementService\n-                    .generate128BitsKeysAndStoreAsNewKeys(deviceIdentification, keyTypes);\n+                    .generate128BitsKeysAndStoreAsNewKeys(correlationUid, deviceIdentification, keyTypes);\n             final SetKeysRequestDto setKeysRequest = new SetKeysRequestDto(generatedKeys.get(E_METER_AUTHENTICATION),\n                     generatedKeys.get(E_METER_ENCRYPTION));\n             setKeysRequest.setGeneratedKeys(true);"
  },
  {
    "sha": "490a9168ad0e3a18f441995b6ecf380310a602b5",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyCommandExecutor.java",
    "status": "modified",
    "additions": 37,
    "deletions": 61,
    "changes": 98,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyCommandExecutor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyCommandExecutor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyCommandExecutor.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -17,6 +17,7 @@\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.EncryptionHelperService;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.SecretManagementService;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.AbstractCommandExecutor;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.CorrelatedObject;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.utils.JdlmsObjectToStringUtil;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n@@ -48,8 +49,7 @@\n  * promoteInvalidKeys, get/hasNewSecurityKey.\n  */\n @Component\n-public class ReplaceKeyCommandExecutor\n-        extends AbstractCommandExecutor<ReplaceKeyCommandExecutor.ReplaceKeyInput, DlmsDevice> {\n+public class ReplaceKeyCommandExecutor extends AbstractCommandExecutor<CorrelatedObject<ReplaceKeyInput>, DlmsDevice> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ReplaceKeyCommandExecutor.class);\n \n@@ -62,89 +62,64 @@\n     @Autowired\n     EncryptionHelperService encryptionService;\n \n-    static class ReplaceKeyInput {\n-        private final byte[] bytes;\n-        private final KeyId keyId;\n-        private final SecurityKeyType securityKeyType;\n-        private final boolean isGenerated;\n-\n-        public ReplaceKeyInput(final byte[] bytes, final KeyId keyId, final SecurityKeyType securityKeyType,\n-                boolean isGenerated) {\n-            this.bytes = bytes;\n-            this.keyId = keyId;\n-            this.securityKeyType = securityKeyType;\n-            this.isGenerated = isGenerated;\n-        }\n-\n-        public byte[] getBytes() {\n-            return this.bytes;\n-        }\n-\n-        public KeyId getKeyId() {\n-            return this.keyId;\n-        }\n-\n-        public SecurityKeyType getSecurityKeyType() {\n-            return this.securityKeyType;\n-        }\n-\n-        public boolean isGenerated() { return this.isGenerated; }\n-    }\n-\n     public ReplaceKeyCommandExecutor() {\n         super(SetKeysRequestDto.class);\n     }\n \n     public static ReplaceKeyInput wrap(final byte[] bytes, final KeyId keyId, final SecurityKeyType securityKeyType,\n-            boolean isGenerated) {\n-        return new ReplaceKeyInput(bytes, keyId, securityKeyType, isGenerated);\n+            final boolean isGenerated) {\n+        return ReplaceKeyInput.from(bytes, keyId, securityKeyType, isGenerated);\n     }\n \n     @Override\n     public ActionResponseDto executeBundleAction(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final ActionRequestDto actionRequestDto) throws OsgpException {\n+            final ActionRequestDto actionRequest) throws OsgpException {\n \n-        this.checkActionRequestType(actionRequestDto);\n+        this.checkActionRequestType(actionRequest);\n \n         LOGGER.info(\"Keys set on device :{}\", device.getDeviceIdentification());\n \n-        SetKeysRequestDto setKeysRequestDto = (SetKeysRequestDto) actionRequestDto;\n+        final CorrelatedObject<SetKeysRequestDto> correlatedObject =\n+                (CorrelatedObject<SetKeysRequestDto>) actionRequest;\n+        SetKeysRequestDto setKeysRequestDto = correlatedObject.getObject();\n \n         if (!setKeysRequestDto.isGeneratedKeys()) {\n-            setKeysRequestDto = this.decryptRsaKeys((SetKeysRequestDto) actionRequestDto);\n+            setKeysRequestDto = this.decryptRsaKeys((SetKeysRequestDto) actionRequest);\n         }\n         //if keys are generated, then they are unencrypted by the GenerateAndReplaceKeyCommandExecutor\n \n-        final DlmsDevice devicePostSave = this.execute(conn, device, ReplaceKeyCommandExecutor\n-                .wrap(setKeysRequestDto.getAuthenticationKey(), KeyId.AUTHENTICATION_KEY,\n-                        SecurityKeyType.E_METER_AUTHENTICATION, setKeysRequestDto.isGeneratedKeys()));\n+        final ReplaceKeyInput replaceAuthKeyInput = wrap(setKeysRequestDto.getAuthenticationKey(),\n+                KeyId.AUTHENTICATION_KEY, SecurityKeyType.E_METER_AUTHENTICATION, setKeysRequestDto.isGeneratedKeys());\n+        final DlmsDevice devicePostSave = this\n+                .execute(conn, device, CorrelatedObject.from(correlatedObject, replaceAuthKeyInput));\n \n-        this.execute(conn, devicePostSave, ReplaceKeyCommandExecutor\n-                .wrap(setKeysRequestDto.getEncryptionKey(), KeyId.GLOBAL_UNICAST_ENCRYPTION_KEY,\n-                        SecurityKeyType.E_METER_ENCRYPTION, setKeysRequestDto.isGeneratedKeys()));\n+        final ReplaceKeyInput replaceEncrKeyInput = wrap(setKeysRequestDto.getEncryptionKey(),\n+                KeyId.GLOBAL_UNICAST_ENCRYPTION_KEY, SecurityKeyType.E_METER_ENCRYPTION,\n+                setKeysRequestDto.isGeneratedKeys());\n+        this.execute(conn, devicePostSave, CorrelatedObject.from(correlatedObject, replaceEncrKeyInput));\n \n         return new ActionResponseDto(REPLACE_KEYS + device.getDeviceIdentification() + WAS_SUCCESFULL);\n     }\n \n     private SetKeysRequestDto decryptRsaKeys(final SetKeysRequestDto setKeysRequestDto) throws FunctionalException {\n-        final byte[] authenticationKey =\n-                this.encryptionService.rsaDecrypt(setKeysRequestDto.getAuthenticationKey());\n+        final byte[] authenticationKey = this.encryptionService.rsaDecrypt(setKeysRequestDto.getAuthenticationKey());\n         final byte[] encryptionKey = this.encryptionService.rsaDecrypt(setKeysRequestDto.getEncryptionKey());\n \n         return new SetKeysRequestDto(authenticationKey, encryptionKey);\n     }\n \n     @Override\n     public DlmsDevice execute(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final ReplaceKeyCommandExecutor.ReplaceKeyInput keyWrapper) throws OsgpException {\n-\n-        if (!keyWrapper.isGenerated()) {\n-            this.secretManagementService.storeNewKey(device.getDeviceIdentification(), keyWrapper.getSecurityKeyType(),\n-                    keyWrapper.getBytes());\n+            final CorrelatedObject<ReplaceKeyInput> keyWrapper) throws OsgpException {\n+        final ReplaceKeyInput replaceKeyInput = keyWrapper.getObject();\n+        if (!replaceKeyInput.isGenerated()) {\n+            this.secretManagementService.storeNewKey(keyWrapper.getCorrelationUid(), device.getDeviceIdentification(),\n+                    replaceKeyInput.getSecurityKeyType(), replaceKeyInput.getBytes());\n         }\n \n         this.sendToDevice(conn, device.getDeviceIdentification(), keyWrapper);\n-        this.secretManagementService.activateNewKey(device.getDeviceIdentification(), keyWrapper.getSecurityKeyType());\n+        this.secretManagementService.activateNewKey(keyWrapper.getCorrelationUid(), device.getDeviceIdentification(),\n+                replaceKeyInput.getSecurityKeyType());\n         return device;\n     }\n \n@@ -158,20 +133,21 @@ public DlmsDevice execute(final DlmsConnectionManager conn, final DlmsDevice dev\n      * @param keyWrapper\n      *         Key data\n      */\n-    private void sendToDevice(final DlmsConnectionManager conn, String deviceIdentification,\n-            final ReplaceKeyCommandExecutor.ReplaceKeyInput keyWrapper) throws ProtocolAdapterException {\n-\n+    private void sendToDevice(final DlmsConnectionManager conn, final String deviceIdentification,\n+            final CorrelatedObject<ReplaceKeyInput> keyWrapper) throws ProtocolAdapterException {\n+        final ReplaceKeyInput replaceKeyInput = keyWrapper.getObject();\n         try {\n-            final byte[] decryptedKey = keyWrapper.getBytes();\n+            final byte[] decryptedKey = replaceKeyInput.getBytes();\n             final byte[] decryptedMasterKey = this.secretManagementService\n-                    .getKey(deviceIdentification, SecurityKeyType.E_METER_MASTER);\n+                    .getKey(keyWrapper.getCorrelationUid(), deviceIdentification, SecurityKeyType.E_METER_MASTER);\n \n             final MethodParameter methodParameterAuth = SecurityUtils\n-                    .keyChangeMethodParamFor(decryptedMasterKey, decryptedKey, keyWrapper.getKeyId());\n+                    .keyChangeMethodParamFor(decryptedMasterKey, decryptedKey, replaceKeyInput.getKeyId());\n \n+            final String format = \"ReplaceKey for %s %s , call method: %s\";\n             conn.getDlmsMessageListener().setDescription(\n-                    \"ReplaceKey for \" + keyWrapper.securityKeyType + \" \" + keyWrapper.getKeyId() + \", call method: \"\n-                            + JdlmsObjectToStringUtil.describeMethod(methodParameterAuth));\n+                    String.format(format, replaceKeyInput.getSecurityKeyType(), replaceKeyInput.getKeyId(),\n+                            JdlmsObjectToStringUtil.describeMethod(methodParameterAuth)));\n \n             final MethodResultCode methodResultCode = conn.getConnection().action(methodParameterAuth).getResultCode();\n \n@@ -180,9 +156,9 @@ private void sendToDevice(final DlmsConnectionManager conn, String deviceIdentif\n                         \"AccessResultCode for replace keys was not SUCCESS: \" + methodResultCode);\n             }\n \n-            if (keyWrapper.securityKeyType == SecurityKeyType.E_METER_AUTHENTICATION) {\n+            if (replaceKeyInput.getSecurityKeyType() == SecurityKeyType.E_METER_AUTHENTICATION) {\n                 conn.getConnection().changeClientGlobalAuthenticationKey(decryptedKey);\n-            } else if (keyWrapper.securityKeyType == SecurityKeyType.E_METER_ENCRYPTION) {\n+            } else if (replaceKeyInput.getSecurityKeyType() == SecurityKeyType.E_METER_ENCRYPTION) {\n                 conn.getConnection().changeClientGlobalEncryptionKey(decryptedKey);\n             }\n         } catch (final IOException e) {"
  },
  {
    "sha": "5e07fc78e9a8c4c18d7d02d3256bcebd2f9cc8fc",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyInput.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyInput.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyInput.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyInput.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.security;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.openmuc.jdlms.SecurityUtils;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+\n+@Getter\n+class ReplaceKeyInput {\n+    @Getter(AccessLevel.PROTECTED)\n+    private final byte[] bytes;\n+    private final SecurityUtils.KeyId keyId;\n+    private final SecurityKeyType securityKeyType;\n+    private final boolean isGenerated;\n+\n+    private ReplaceKeyInput(final byte[] bytes, final SecurityUtils.KeyId keyId, final SecurityKeyType securityKeyType,\n+            final boolean isGenerated) {\n+        this.bytes = bytes;\n+        this.keyId = keyId;\n+        this.securityKeyType = securityKeyType;\n+        this.isGenerated = isGenerated;\n+    }\n+\n+    static ReplaceKeyInput from(final byte[] bytes, final SecurityUtils.KeyId keyId, final SecurityKeyType securityKeyType,\n+            final boolean isGenerated) {\n+        return new ReplaceKeyInput(bytes, keyId, securityKeyType, isGenerated);\n+    }\n+}"
  },
  {
    "sha": "ed979c2ee26504f16eecadbcd93ae23bc387e514",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java",
    "status": "modified",
    "additions": 19,
    "deletions": 13,
    "changes": 32,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -33,6 +33,7 @@\n import org.openmuc.jdlms.datatypes.DataObject;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.SecretManagementService;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.AbstractCommandExecutor;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.CorrelatedObject;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.commands.utils.JdlmsObjectToStringUtil;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsConnectionManager;\n@@ -50,7 +51,7 @@\n \n @Component()\n public class SetEncryptionKeyExchangeOnGMeterCommandExecutor\n-        extends AbstractCommandExecutor<GMeterInfoDto, MethodResultCode> {\n+        extends AbstractCommandExecutor<CorrelatedObject<GMeterInfoDto>, MethodResultCode> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SetEncryptionKeyExchangeOnGMeterCommandExecutor.class);\n \n@@ -86,25 +87,27 @@ public ActionResponseDto asBundleResponse(final MethodResultCode executionResult\n     }\n \n     @Override\n-    public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final GMeterInfoDto gMeterInfo) throws ProtocolAdapterException {\n+    public MethodResultCode execute(final DlmsConnectionManager conn,\n+            final DlmsDevice device,\n+            final CorrelatedObject<GMeterInfoDto> gMeterInfo) throws ProtocolAdapterException {\n         try {\n             LOGGER.debug(\"SetEncryptionKeyExchangeOnGMeterCommandExecutor.execute called\");\n-\n-            final String mbusDeviceIdentification = gMeterInfo.getDeviceIdentification();\n-            final int channel = gMeterInfo.getChannel();\n+            final GMeterInfoDto gMeterInfoDto = gMeterInfo.getObject();\n+            final String correlationUid = gMeterInfo.getCorrelationUid();\n+            final String mbusDeviceIdentification = gMeterInfoDto.getDeviceIdentification();\n+            final int channel = gMeterInfoDto.getChannel();\n             final ObisCode obisCode = OBIS_HASHMAP.get(channel);\n             final byte[] gMeterEncryptionKey = this.secretManagementService\n-                    .generate128BitsKeyAndStoreAsNewKey(mbusDeviceIdentification, G_METER_ENCRYPTION);\n+                    .generate128BitsKeyAndStoreAsNewKey(correlationUid, mbusDeviceIdentification, G_METER_ENCRYPTION);\n \n             MethodResult methodResultCode = this\n-                    .transferKey(conn, mbusDeviceIdentification, channel, gMeterEncryptionKey);\n+                    .transferKey(correlationUid, conn, mbusDeviceIdentification, channel, gMeterEncryptionKey);\n             this.checkMethodResultCode(methodResultCode, \"M-Bus Setup transfer_key\", obisCode);\n \n             methodResultCode = this.setEncryptionKey(conn, channel, gMeterEncryptionKey);\n             this.checkMethodResultCode(methodResultCode, \"M-Bus Setup set_encryption_key\", obisCode);\n \n-            this.secretManagementService.activateNewKey(mbusDeviceIdentification, G_METER_ENCRYPTION);\n+            this.secretManagementService.activateNewKey(correlationUid, mbusDeviceIdentification, G_METER_ENCRYPTION);\n             return MethodResultCode.SUCCESS;\n         } catch (final IOException e) {\n             throw new ConnectionException(e);\n@@ -125,24 +128,27 @@ private MethodResult setEncryptionKey(final DlmsConnectionManager conn, final in\n         return conn.getConnection().action(methodSetEncryptionKey);\n     }\n \n-    private MethodResult transferKey(final DlmsConnectionManager conn, final String mbusDeviceIdentification, final int channel,\n+    private MethodResult transferKey(final String correlationUid, final DlmsConnectionManager conn,\n+            final String mbusDeviceIdentification, final int channel,\n             final byte[] encryptionKey) throws ProtocolAdapterException, IOException {\n         final MethodParameter methodTransferKey = this\n-                .getTransferKeyMethodParameter(mbusDeviceIdentification, channel, encryptionKey);\n+                .getTransferKeyMethodParameter(correlationUid, mbusDeviceIdentification, channel, encryptionKey);\n         conn.getDlmsMessageListener().setDescription(\n                 \"SetEncryptionKeyExchangeOnGMeter for channel \" + channel + \", call M-Bus Setup transfer_key method: \"\n                         + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n \n         return conn.getConnection().action(methodTransferKey);\n     }\n \n-    private MethodParameter getTransferKeyMethodParameter(final String mbusDeviceIdentification, final int channel,\n+    private MethodParameter getTransferKeyMethodParameter(final String correlationUid,\n+            final String mbusDeviceIdentification, final int channel,\n             final byte[] gMeterUserKey) throws ProtocolAdapterException {\n         final DlmsDevice mbusDevice = this.dlmsDeviceRepository.findByDeviceIdentification(mbusDeviceIdentification);\n         if (mbusDevice == null) {\n             throw new ProtocolAdapterException(\"Unknown M-Bus device: \" + mbusDeviceIdentification);\n         }\n-        final byte[] mbusDefaultKey = this.secretManagementService.getKey(mbusDeviceIdentification, G_METER_MASTER);\n+        final byte[] mbusDefaultKey = this.secretManagementService.getKey(correlationUid, mbusDeviceIdentification,\n+                G_METER_MASTER);\n         final byte[] encryptedUserKey = this.encryptMbusUserKey(mbusDefaultKey, gMeterUserKey);\n         final DataObject methodParameter = DataObject.newOctetStringData(encryptedUserKey);\n         final MBusClientMethod method = MBusClientMethod.TRANSFER_KEY;"
  },
  {
    "sha": "0f5c38617a4091e417cdd8d9f769107c025eda5b",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionFactory.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionFactory.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionFactory.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionFactory.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -62,9 +62,11 @@ public DlmsConnectionFactory(final Hls5Connector hls5Connector, final Lls1Connec\n      * @throws OsgpException\n      *         in case of a TechnicalException or FunctionalException\n      */\n-    public DlmsConnectionManager getConnection(final DlmsDevice device, final DlmsMessageListener dlmsMessageListener)\n+    public DlmsConnectionManager getConnection(final String correlationUid, final DlmsDevice device,\n+            final DlmsMessageListener dlmsMessageListener)\n             throws OsgpException {\n-        return this.newConnectionWithSecurityLevel(device, dlmsMessageListener, SecurityLevel.forDevice(device));\n+        return this.newConnectionWithSecurityLevel(correlationUid, device, dlmsMessageListener,\n+                SecurityLevel.forDevice(device));\n     }\n \n     /**\n@@ -87,15 +89,15 @@ public DlmsConnectionManager getConnection(final DlmsDevice device, final DlmsMe\n      * @throws OsgpException\n      *         in case of a TechnicalException or FunctionalException\n      */\n-    public DlmsConnectionManager getPublicClientConnection(final DlmsDevice device,\n+    public DlmsConnectionManager getPublicClientConnection(final String correlationUid, final DlmsDevice device,\n             final DlmsMessageListener dlmsMessageListener) throws OsgpException {\n-        return this.newConnectionWithSecurityLevel(device, dlmsMessageListener, SecurityLevel.LLS0);\n+        return this.newConnectionWithSecurityLevel(correlationUid, device, dlmsMessageListener, SecurityLevel.LLS0);\n     }\n \n-    private DlmsConnectionManager newConnectionWithSecurityLevel(final DlmsDevice device,\n+    private DlmsConnectionManager newConnectionWithSecurityLevel(final String correlationUid, final DlmsDevice device,\n             final DlmsMessageListener dlmsMessageListener, final SecurityLevel securityLevel) throws OsgpException {\n         final DlmsConnectionManager connectionManager = new DlmsConnectionManager(this.connectorFor(securityLevel),\n-                device, dlmsMessageListener, this.domainHelperService);\n+                correlationUid, device, dlmsMessageListener, this.domainHelperService);\n         connectionManager.connect();\n         return connectionManager;\n     }"
  },
  {
    "sha": "f925bdbfdb0498fa95c65391db7951fbddf100a0",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionHelper.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionHelper.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionHelper.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionHelper.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -40,14 +40,14 @@ public DlmsConnectionHelper(final InvocationCounterManager invocationCounterMana\n      * Returns an open connection to the device, taking care of details like initializing the invocation counter when\n      * required.\n      */\n-    public DlmsConnectionManager createConnectionForDevice(final DlmsDevice device,\n+    public DlmsConnectionManager createConnectionForDevice(final String correlationUid, final DlmsDevice device,\n             final DlmsMessageListener messageListener) throws OsgpException {\n         if (device.needsInvocationCounter() && !device.isInvocationCounterInitialized()) {\n-            this.invocationCounterManager.initializeInvocationCounter(device);\n+            this.invocationCounterManager.initializeInvocationCounter(correlationUid, device);\n         }\n \n         try {\n-            return this.connectionFactory.getConnection(device, messageListener);\n+            return this.connectionFactory.getConnection(correlationUid, device, messageListener);\n         } catch (final ConnectionException e) {\n             if (device.needsInvocationCounter() && this.indicatesInvocationCounterOutOfSync(e)) {\n                 this.resetInvocationCounter(device);"
  },
  {
    "sha": "76db62e762659f147d58466c3ba1b79b489085fb",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionManager.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionManager.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionManager.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionManager.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -44,15 +44,17 @@ public void setDescription(final String description) {\n         }\n     };\n \n+    private final String correlationUid;\n     private final DlmsConnector connector;\n     private final DlmsDevice device;\n     private final DlmsMessageListener dlmsMessageListener;\n     private final DomainHelperService domainHelperService;\n \n     private DlmsConnection dlmsConnection;\n \n-    public DlmsConnectionManager(final DlmsConnector connector, final DlmsDevice device,\n+    public DlmsConnectionManager(final DlmsConnector connector, final String correlationUid, final DlmsDevice device,\n             final DlmsMessageListener dlmsMessageListener, final DomainHelperService domainHelperService) {\n+        this.correlationUid = correlationUid;\n         this.connector = connector;\n         this.device = device;\n         this.domainHelperService = domainHelperService;\n@@ -118,7 +120,7 @@ public void connect() throws OsgpException {\n             throw new IllegalStateException(\"Cannot create a new connection because a connection already exists.\");\n         }\n \n-        this.dlmsConnection = this.connector.connect(this.device, this.dlmsMessageListener);\n+        this.dlmsConnection = this.connector.connect(this.correlationUid, this.device, this.dlmsMessageListener);\n     }\n \n     /**\n@@ -138,7 +140,7 @@ public void reconnect() throws OsgpException {\n         if (!this.device.isIpAddressIsStatic()) {\n             this.device.setIpAddress(this.domainHelperService.getDeviceIpAddressFromSessionProvider(this.device));\n         }\n-        this.dlmsConnection = this.connector.connect(this.device, this.dlmsMessageListener);\n+        this.dlmsConnection = this.connector.connect(this.correlationUid, this.device, this.dlmsMessageListener);\n     }\n \n     /**"
  },
  {
    "sha": "c5e107ad733e0d4d08be5e244568c3e48590860e",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnector.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnector.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnector.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnector.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -21,7 +21,8 @@\n public abstract class DlmsConnector {\n     private static final Logger LOGGER = LoggerFactory.getLogger(DlmsConnector.class);\n \n-    public abstract DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener dlmsMessageListener)\n+    public abstract DlmsConnection connect(final String correlationUid, final DlmsDevice device,\n+            final DlmsMessageListener dlmsMessageListener)\n             throws OsgpException;\n \n     protected void checkDevice(final DlmsDevice device) {"
  },
  {
    "sha": "89ff19bc395dd72dc3822973b23a464fc89351e8",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java",
    "status": "modified",
    "additions": 13,
    "deletions": 8,
    "changes": 21,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -58,22 +58,25 @@ public Hls5Connector(final RecoverKeyProcessInitiator recoverKeyProcessInitiator\n     }\n \n     @Override\n-    public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener dlmsMessageListener)\n+    public DlmsConnection connect(final String correlationUid, final DlmsDevice device,\n+            final DlmsMessageListener dlmsMessageListener)\n             throws OsgpException {\n \n         // Make sure neither device or device.getIpAddress() is null.\n         this.checkDevice(device);\n         this.checkIpAddress(device);\n \n         try {\n-            return this.createConnection(device, dlmsMessageListener);\n+            return this.createConnection(correlationUid, device, dlmsMessageListener);\n         } catch (final UnknownHostException e) { // Unknown IP, unrecoverable.\n             LOGGER.error(\"The IP address is not found: {}\", device.getIpAddress(), e);\n             throw new TechnicalException(ComponentType.PROTOCOL_DLMS,\n                     \"The IP address is not found: \" + device.getIpAddress());\n         } catch (final IOException e) { //Queue key recovery process\n-            if (this.secretManagementService.hasNewSecretOfType(device.getDeviceIdentification(), E_METER_ENCRYPTION)) {\n-                this.recoverKeyProcessInitiator.initiate(device.getDeviceIdentification(), device.getIpAddress());\n+            if (this.secretManagementService.hasNewSecretOfType(correlationUid, device.getDeviceIdentification(),\n+                    E_METER_ENCRYPTION)) {\n+                this.recoverKeyProcessInitiator.initiate(correlationUid, device.getDeviceIdentification(),\n+                        device.getIpAddress());\n             }\n \n             final String msg = String\n@@ -90,15 +93,17 @@ public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener\n     }\n \n     @Override\n-    protected void setSecurity(final DlmsDevice device, final TcpConnectionBuilder tcpConnectionBuilder)\n+    protected void setSecurity(final String correlationUid, final DlmsDevice device,\n+            final TcpConnectionBuilder tcpConnectionBuilder)\n             throws OsgpException {\n \n         final String deviceIdentification = device.getDeviceIdentification();\n         final byte[] dlmsAuthenticationKey;\n         final byte[] dlmsEncryptionKey;\n         try {\n-            Map<SecurityKeyType, byte[]> encryptedKeys = this.secretManagementService\n-                    .getKeys(deviceIdentification, Arrays.asList(E_METER_AUTHENTICATION, E_METER_ENCRYPTION));\n+            final Map<SecurityKeyType, byte[]> encryptedKeys = this.secretManagementService\n+                    .getKeys(correlationUid, deviceIdentification, Arrays.asList(E_METER_AUTHENTICATION,\n+                            E_METER_ENCRYPTION));\n             dlmsAuthenticationKey = encryptedKeys.get(E_METER_AUTHENTICATION);\n             dlmsEncryptionKey = encryptedKeys.get(E_METER_ENCRYPTION);\n         } catch (final EncrypterException e) {\n@@ -147,7 +152,7 @@ private void configureIvData(final TcpConnectionBuilder tcpConnectionBuilder, fi\n         }\n         tcpConnectionBuilder.setSystemTitle(manufacturerId, device.getDeviceId());\n \n-        long frameCounter = device.getInvocationCounter();\n+        final long frameCounter = device.getInvocationCounter();\n \n         tcpConnectionBuilder.setFrameCounter(frameCounter);\n         LOGGER.debug(\"Framecounter for device {} set to {}\", device.getDeviceIdentification(), frameCounter);"
  },
  {
    "sha": "ee9b5a048153c48127668fb451ec0cef8924671e",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/InvocationCounterManager.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/InvocationCounterManager.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/InvocationCounterManager.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/InvocationCounterManager.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -46,8 +46,8 @@ public InvocationCounterManager(final DlmsConnectionFactory connectionFactory, f\n      * Updates the device instance with the invocation counter value on the actual device.\n      * Should only be called for a device that actually has an invocation counter stored on the device itself.\n      */\n-    public void initializeInvocationCounter(final DlmsDevice device) throws OsgpException {\n-        this.initializeWithInvocationCounterStoredOnDevice(device);\n+    public void initializeInvocationCounter(final String correlationUid, final DlmsDevice device) throws OsgpException {\n+        this.initializeWithInvocationCounterStoredOnDevice(correlationUid, device);\n         this.deviceRepository.save(device);\n \n         // At this point proceeding to create a new connection will fail due to a current limitation in the OpenMUC\n@@ -57,9 +57,9 @@ public void initializeInvocationCounter(final DlmsDevice device) throws OsgpExce\n         throw new DeviceSessionTerminatedAfterReadingInvocationCounterException(device.getDeviceIdentification());\n     }\n \n-    private void initializeWithInvocationCounterStoredOnDevice(final DlmsDevice device) throws OsgpException {\n+    private void initializeWithInvocationCounterStoredOnDevice(final String correlationUid, final DlmsDevice device) throws OsgpException {\n         try (final DlmsConnectionManager connectionManager = this.connectionFactory\n-                .getPublicClientConnection(device, null)) {\n+                .getPublicClientConnection(correlationUid, device, null)) {\n             device.setInvocationCounter(this.getInvocationCounter(connectionManager));\n             LOGGER.info(\"Property invocationCounter of device {} initialized to the value of the invocation counter \"\n                     + \"stored on the device: {}\", device.getDeviceIdentification(), device.getInvocationCounter());"
  },
  {
    "sha": "6ea3be296a51218350e94dfdf58665ba840ea4e9",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls0Connector.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls0Connector.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls0Connector.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls0Connector.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -41,7 +41,8 @@ public Lls0Connector(final int responseTimeout, final int logicalDeviceAddress,\n     }\n \n     @Override\n-    public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener dlmsMessageListener)\n+    public DlmsConnection connect(final String correlationUid, final DlmsDevice device,\n+            final DlmsMessageListener dlmsMessageListener)\n             throws OsgpException {\n \n         // Make sure neither device or device.getIpAddress() is null."
  },
  {
    "sha": "dc0dc7ad4cef0434acc68dd1bd59729eab8542fd",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -43,15 +43,16 @@ public Lls1Connector(final int responseTimeout, final int logicalDeviceAddress,\n     }\n \n     @Override\n-    public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener dlmsMessageListener)\n+    public DlmsConnection connect(final String correlationUid, final DlmsDevice device,\n+            final DlmsMessageListener dlmsMessageListener)\n             throws OsgpException {\n \n         // Make sure neither device or device.getIpAddress() is null.\n         this.checkDevice(device);\n         this.checkIpAddress(device);\n \n         try {\n-            return this.createConnection(device, dlmsMessageListener);\n+            return this.createConnection(correlationUid, device, dlmsMessageListener);\n         } catch (final UnknownHostException e) {\n             LOGGER.warn(\"The IP address is not found: {}\", device.getIpAddress(), e);\n             // Unknown IP, unrecoverable.\n@@ -67,12 +68,14 @@ public DlmsConnection connect(final DlmsDevice device, final DlmsMessageListener\n     }\n \n     @Override\n-    protected void setSecurity(final DlmsDevice device, final TcpConnectionBuilder tcpConnectionBuilder)\n+    protected void setSecurity(final String correlationUid, final DlmsDevice device,\n+            final TcpConnectionBuilder tcpConnectionBuilder)\n             throws OsgpException {\n \n         final byte[] password;\n         try {\n-            password = this.secretManagementService.getKey(device.getDeviceIdentification(), SecurityKeyType.PASSWORD);\n+            password = this.secretManagementService.getKey(correlationUid, device.getDeviceIdentification(),\n+                    SecurityKeyType.PASSWORD);\n         } catch (final EncrypterException e) {\n             LOGGER.error(\"Error determining DLMS password setting up LLS1 connection\", e);\n             throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_ENCRYPTION,"
  },
  {
    "sha": "943e53e5127dab0242eeba7993845d978e6bc9f9",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecureDlmsConnector.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecureDlmsConnector.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecureDlmsConnector.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/SecureDlmsConnector.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -34,7 +34,8 @@ public SecureDlmsConnector(final int responseTimeout, final int logicalDeviceAdd\n      * @param tcpConnectionBuilder\n      *         The connection builder instance.\n      */\n-    protected abstract void setSecurity(final DlmsDevice device, final TcpConnectionBuilder tcpConnectionBuilder)\n+    protected abstract void setSecurity(final String correlationUid, final DlmsDevice device,\n+            final TcpConnectionBuilder tcpConnectionBuilder)\n             throws OsgpException;\n \n     /**\n@@ -54,7 +55,8 @@ protected abstract void setSecurity(final DlmsDevice device, final TcpConnection\n      *         When there are problems reading the security and\n      *         authorization keys.\n      */\n-    DlmsConnection createConnection(final DlmsDevice device, final DlmsMessageListener dlmsMessageListener)\n+    DlmsConnection createConnection(final String correlationUid, final DlmsDevice device,\n+            final DlmsMessageListener dlmsMessageListener)\n             throws IOException, OsgpException {\n \n         // Setup connection to device\n@@ -68,7 +70,7 @@ DlmsConnection createConnection(final DlmsDevice device, final DlmsMessageListen\n             tcpConnectionBuilder.useHdlc();\n         }\n \n-        this.setSecurity(device, tcpConnectionBuilder);\n+        this.setSecurity(correlationUid, device, tcpConnectionBuilder);\n         this.setOptionalValues(device, tcpConnectionBuilder);\n \n         if (device.isInDebugMode() || dlmsMessageListener instanceof InvocationCountingDlmsMessageListener) {"
  },
  {
    "sha": "08f0b382b5b70d39a964f2cb499fcbacf644f55a",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/DeviceRequestMessageProcessor.java",
    "status": "modified",
    "additions": 61,
    "deletions": 32,
    "changes": 93,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/DeviceRequestMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/DeviceRequestMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/DeviceRequestMessageProcessor.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -17,6 +17,7 @@\n import org.opensmartgridplatform.adapter.protocol.dlms.application.services.DomainHelperService;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsConnectionManager;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.SilentException;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n import org.opensmartgridplatform.shared.infra.jms.MessageMetadata;\n@@ -36,7 +37,12 @@\n  * construction. The Singleton instance is added to the HashMap of\n  * MessageProcessors after dependency injection has completed.\n  */\n-public abstract class DeviceRequestMessageProcessor extends DlmsConnectionMessageProcessor implements MessageProcessor {\n+public abstract class DeviceRequestMessageProcessor<S extends Serializable> extends DlmsConnectionMessageProcessor\n+        implements MessageProcessor {\n+    /**\n+     * Constant to signal that message processor doesn't (have to) send a response.\n+     */\n+    protected static final String NO_RESPONSE = \"NO-RESPONSE\";\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DeviceRequestMessageProcessor.class);\n \n@@ -80,52 +86,71 @@ public void processMessage(final ObjectMessage message) throws JMSException {\n         LOGGER.debug(\"Processing {} request message\", this.messageType);\n \n         MessageMetadata messageMetadata = null;\n-        DlmsConnectionManager conn = null;\n+        final DlmsConnectionManager conn = null;\n         DlmsDevice device = null;\n \n         try {\n             messageMetadata = MessageMetadata.fromMessage(message);\n \n-            /**\n-             * The happy flow for addMeter requires that the dlmsDevice does not\n-             * exist. Because the findDlmsDevice below throws a runtime\n-             * exception, we skip this call in the addMeter flow. The\n-             * AddMeterRequestMessageProcessor will throw the appropriate\n-             * 'dlmsDevice already exists' error if the dlmsDevice does exists!\n-             */\n-            if (!MessageType.ADD_METER.name().equals(messageMetadata.getMessageType())) {\n+            if (this.requiresExistingDevice()) {\n                 device = this.domainHelperService.findDlmsDevice(messageMetadata);\n             }\n \n-            LOGGER.info(\"{} called for device: {} for organisation: {}\", message.getJMSType(),\n-                    messageMetadata.getDeviceIdentification(), messageMetadata.getOrganisationIdentification());\n-\n-            final Serializable response;\n-            if (this.usesDeviceConnection()) {\n-                conn = this.createConnectionForDevice(device, messageMetadata);\n-                response = this.handleMessage(conn, device, message.getObject());\n-            } else {\n-                response = this.handleMessage(device, message.getObject());\n-            }\n+            LOGGER.info(\"{} called for device: {} for organisation: {}, correlationUID={}\", message.getJMSType(),\n+                    messageMetadata.getDeviceIdentification(), messageMetadata.getOrganisationIdentification(),\n+                    messageMetadata.getCorrelationUid());\n \n-            // Send response\n-            this.sendResponseMessage(messageMetadata, ResponseMessageResultType.OK, null, this.responseMessageSender,\n-                    response);\n+            final RequestWithMetadata<S> request = this.createRequestWithMetadata(message, messageMetadata);\n+            final Serializable response = this.getResponse(conn, device, request);\n+            this.sendResponse(messageMetadata, response);\n         } catch (final JMSException exception) {\n             this.logJmsException(LOGGER, exception, messageMetadata);\n         } catch (final Exception exception) {\n-            // Return original request + exception\n-            if (!(exception instanceof SilentException)) {\n-                LOGGER.error(\"Unexpected exception during {}\", this.messageType.name(), exception);\n-            }\n-\n-            this.sendResponseMessage(messageMetadata, ResponseMessageResultType.NOT_OK, exception,\n-                    this.responseMessageSender, message.getObject());\n+            this.sendErrorResponse(messageMetadata, exception, message.getObject());\n         } finally {\n             this.doConnectionPostProcessing(device, conn);\n         }\n     }\n \n+    protected Serializable getResponse(DlmsConnectionManager conn, final DlmsDevice device,\n+            final RequestWithMetadata<S> request) throws OsgpException {\n+        if (this.usesDeviceConnection()) {\n+            conn = this.createConnectionForDevice(device, request.getMetadata());\n+            return this.handleMessage(conn, device, request);\n+        } else {\n+            return this.handleMessage(device, request);\n+        }\n+    }\n+\n+    protected void sendResponse(final MessageMetadata metadata, final Serializable response) {\n+        if (!NO_RESPONSE.equals(response)) {\n+            this.sendResponseMessage(metadata, ResponseMessageResultType.OK, null, this.responseMessageSender,\n+                    response);\n+        }\n+    }\n+\n+    protected void sendErrorResponse(final MessageMetadata metadata, final Exception exception,\n+            final Serializable requestObject) {\n+        // Return original request + exception\n+        if (!(exception instanceof SilentException)) {\n+            final String errorMessage = String\n+                    .format(\"Unexpected exception during %s, correlationUID=%s\", this.messageType.name(),\n+                            metadata.getCorrelationUid());\n+            LOGGER.error(errorMessage, exception);\n+        }\n+        this.sendResponseMessage(metadata, ResponseMessageResultType.NOT_OK, exception, this.responseMessageSender,\n+                requestObject);\n+    }\n+\n+    protected RequestWithMetadata<S> createRequestWithMetadata(final ObjectMessage message,\n+            final MessageMetadata messageMetadata) throws JMSException, ProtocolAdapterException {\n+        try {\n+            return new RequestWithMetadata<>(messageMetadata, (S) message.getObject());\n+        } catch (final ClassCastException cce) {\n+            throw new ProtocolAdapterException(\"The request object has an incorrect type\", cce);\n+        }\n+    }\n+\n     /**\n      * Implementation of this method should call a service that can handle the\n      * requestObject and return a response object to be put on the response\n@@ -142,13 +167,13 @@ public void processMessage(final ObjectMessage message) throws JMSException {\n      * @return A serializable object to be put on the response queue.\n      */\n     protected Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final Serializable requestObject) throws OsgpException {\n+            final RequestWithMetadata<S> requestObject) throws OsgpException {\n         throw new UnsupportedOperationException(\n                 \"handleMessage(DlmsConnection, DlmsDevice, Serializable) should be overriden by a subclass, or \"\n                         + \"usesDeviceConnection should return false.\");\n     }\n \n-    protected Serializable handleMessage(final DlmsDevice device, final Serializable requestObject)\n+    protected Serializable handleMessage(final DlmsDevice device, final RequestWithMetadata<S> requestObject)\n             throws OsgpException {\n         throw new UnsupportedOperationException(\n                 \"handleMessage(Serializable) should be overriden by a subclass, or usesDeviceConnection should return\"\n@@ -164,4 +189,8 @@ protected Serializable handleMessage(final DlmsDevice device, final Serializable\n     protected boolean usesDeviceConnection() {\n         return true;\n     }\n+\n+    protected boolean requiresExistingDevice() {\n+        return true;\n+    }\n }"
  },
  {
    "sha": "17f8cf14c587ed46c6183cb2ff1e55b7dab68984",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/DlmsConnectionMessageProcessor.java",
    "status": "modified",
    "additions": 5,
    "deletions": 14,
    "changes": 19,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/DlmsConnectionMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/DlmsConnectionMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/DlmsConnectionMessageProcessor.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -18,7 +18,6 @@\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsConnectionManager;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.repositories.DlmsDeviceRepository;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.OsgpExceptionConverter;\n-import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n import org.opensmartgridplatform.shared.infra.jms.DeviceMessageMetadata;\n import org.opensmartgridplatform.shared.infra.jms.MessageMetadata;\n@@ -58,15 +57,16 @@\n     public DlmsConnectionManager createConnectionForDevice(final DlmsDevice device,\n             final MessageMetadata messageMetadata) throws OsgpException {\n \n-        throttlingService.openConnection();\n+        this.throttlingService.openConnection();\n \n         final DlmsMessageListener dlmsMessageListener = this\n                 .createMessageListenerForDeviceConnection(device, messageMetadata);\n \n         try {\n-            return this.dlmsConnectionHelper.createConnectionForDevice(device, dlmsMessageListener);\n-        } catch (Exception e) {\n-            throttlingService.closeConnection();\n+            return this.dlmsConnectionHelper.createConnectionForDevice(messageMetadata.getCorrelationUid(), device,\n+                    dlmsMessageListener);\n+        } catch (final Exception e) {\n+            this.throttlingService.closeConnection();\n             throw e;\n         }\n     }\n@@ -154,15 +154,6 @@ protected void logJmsException(final Logger logger, final JMSException exception\n         logger.debug(\"deviceIdentification: {}\", messageMetadata.getDeviceIdentification());\n     }\n \n-    protected void assertRequestObjectType(final Class<?> expected, final Serializable requestObject)\n-            throws ProtocolAdapterException {\n-        if (!expected.isInstance(requestObject)) {\n-            throw new ProtocolAdapterException(\n-                    String.format(\"The request object has an incorrect type. %s expected but %s was found.\",\n-                            expected.getCanonicalName(), requestObject.getClass().getCanonicalName()));\n-        }\n-    }\n-\n     protected void sendResponseMessage(final MessageMetadata messageMetadata, final ResponseMessageResultType result,\n             final Exception exception, final DeviceResponseMessageSender responseMessageSender,\n             final Serializable responseObject) {"
  },
  {
    "sha": "a4d5d4475808b65feb2d5f8375dae64742973d0b",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/RequestWithMetadata.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/RequestWithMetadata.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/RequestWithMetadata.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/RequestWithMetadata.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.dlms.infra.messaging;\n+\n+import java.io.Serializable;\n+\n+import lombok.Getter;\n+import org.opensmartgridplatform.shared.infra.jms.MessageMetadata;\n+\n+@Getter\n+public class RequestWithMetadata<S extends Serializable> {\n+    private final MessageMetadata metadata;\n+    private final S requestObject;\n+\n+    RequestWithMetadata(final MessageMetadata metadata, final S requestObject) {\n+        this.metadata = metadata;\n+        this.requestObject = requestObject;\n+    }\n+}"
  },
  {
    "sha": "ab90db2527f96e151a730105a99b760daaa1aae4",
    "filename": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/processors/ActualMeterReadsRequestMessageProcessor.java",
    "status": "modified",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/processors/ActualMeterReadsRequestMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/d6566da755200c6a7067c390b2c16d1e234efd6d/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/processors/ActualMeterReadsRequestMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/processors/ActualMeterReadsRequestMessageProcessor.java?ref=d6566da755200c6a7067c390b2c16d1e234efd6d",
    "patch": "@@ -13,14 +13,15 @@\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.factories.DlmsConnectionManager;\n import org.opensmartgridplatform.adapter.protocol.dlms.infra.messaging.DeviceRequestMessageProcessor;\n+import org.opensmartgridplatform.adapter.protocol.dlms.infra.messaging.RequestWithMetadata;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.ActualMeterReadsQueryDto;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n import org.opensmartgridplatform.shared.infra.jms.MessageType;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class ActualMeterReadsRequestMessageProcessor extends DeviceRequestMessageProcessor {\n+public class ActualMeterReadsRequestMessageProcessor extends DeviceRequestMessageProcessor<ActualMeterReadsQueryDto> {\n \n     @Autowired\n     private MonitoringService monitoringService;\n@@ -31,11 +32,7 @@ protected ActualMeterReadsRequestMessageProcessor() {\n \n     @Override\n     protected Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final Serializable requestObject) throws OsgpException {\n-\n-        this.assertRequestObjectType(ActualMeterReadsQueryDto.class, requestObject);\n-\n-        final ActualMeterReadsQueryDto actualMeterReadsRequest = (ActualMeterReadsQueryDto) requestObject;\n-        return this.monitoringService.requestActualMeterReads(conn, device, actualMeterReadsRequest);\n+            final RequestWithMetadata<ActualMeterReadsQueryDto> request) throws OsgpException {\n+        return this.monitoringService.requestActualMeterReads(conn, device, request.getRequestObject());\n     }\n }"
  }
]
