[
  {
    "sha": "b7947f58441a0fc22e8d97490d114e74714465b1",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java",
    "status": "modified",
    "additions": 104,
    "deletions": 71,
    "changes": 175,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -34,8 +34,6 @@\n import java.util.Map;\n import java.util.Objects;\n \n-import io.cucumber.java.en.Given;\n-import io.cucumber.java.en.Then;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.repositories.DlmsDeviceRepository;\n@@ -76,6 +74,9 @@\n import org.springframework.data.domain.Example;\n import org.springframework.transaction.annotation.Transactional;\n \n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+\n /**\n  * DLMS device specific steps.\n  */\n@@ -120,22 +121,22 @@\n \n     private final Map<String, SecurityKeyType> securityKeyTypesByInputName = new HashMap<>();\n \n-    private final List<SecretBuilder> defaultSecretBuilders = Arrays\n-            .asList(new SecretBuilder().setSecurityKeyType(E_METER_AUTHENTICATION)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_A_DB),\n-                    new SecretBuilder().setSecurityKeyType(E_METER_ENCRYPTION)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_E_DB),\n-                    new SecretBuilder().setSecurityKeyType(E_METER_MASTER)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_M_DB),\n-                    new SecretBuilder().setSecurityKeyType(PASSWORD).setKey(PlatformSmartmeteringDefaults.PASSWORD),\n-                    new SecretBuilder().setSecurityKeyType(G_METER_ENCRYPTION)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_ENCRYPTION),\n-                    new SecretBuilder().setSecurityKeyType(G_METER_MASTER)\n-                                       .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_MASTER));\n+    private final List<SecretBuilder> defaultSecretBuilders = Arrays.asList(\n+            new SecretBuilder().setSecurityKeyType(E_METER_AUTHENTICATION)\n+                    .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_A_DB),\n+            new SecretBuilder().setSecurityKeyType(E_METER_ENCRYPTION)\n+                    .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_E_DB),\n+            new SecretBuilder().setSecurityKeyType(E_METER_MASTER)\n+                    .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_M_DB),\n+            new SecretBuilder().setSecurityKeyType(PASSWORD).setKey(PlatformSmartmeteringDefaults.PASSWORD),\n+            new SecretBuilder().setSecurityKeyType(G_METER_ENCRYPTION)\n+                    .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_ENCRYPTION),\n+            new SecretBuilder().setSecurityKeyType(G_METER_MASTER)\n+                    .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_MASTER));\n \n     public DlmsDeviceSteps() {\n-        this.securityKeyTypesByInputName\n-                .put(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY, E_METER_AUTHENTICATION);\n+        this.securityKeyTypesByInputName.put(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY,\n+                E_METER_AUTHENTICATION);\n         this.securityKeyTypesByInputName.put(PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY, E_METER_ENCRYPTION);\n         this.securityKeyTypesByInputName.put(PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY, E_METER_MASTER);\n         this.securityKeyTypesByInputName.put(PlatformSmartmeteringKeys.PASSWORD, PASSWORD);\n@@ -187,11 +188,11 @@ public void theDlmsDeviceWithIdentificationExistsWithDeviceModel(final String de\n         final Device device = this.deviceRepository.findByDeviceIdentification(deviceIdentification);\n         final DeviceModel deviceModel = device.getDeviceModel();\n         assertThat(deviceModel.getModelCode()).as(PlatformKeys.DEVICEMODEL_MODELCODE)\n-                                              .isEqualTo(deviceModelAttributes.get(PlatformKeys.DEVICEMODEL_MODELCODE));\n+                .isEqualTo(deviceModelAttributes.get(PlatformKeys.DEVICEMODEL_MODELCODE));\n \n         final Manufacturer manufacturer = deviceModel.getManufacturer();\n         assertThat(manufacturer.getCode()).as(PlatformKeys.MANUFACTURER_CODE)\n-                                          .isEqualTo(deviceModelAttributes.get(PlatformKeys.MANUFACTURER_CODE));\n+                .isEqualTo(deviceModelAttributes.get(PlatformKeys.MANUFACTURER_CODE));\n     }\n \n     @Then(\"^the smart meter is registered in the core database$\")\n@@ -212,12 +213,36 @@ public void theSmartMeterIsRegisteredInTheCoreDatabase(final Map<String, String>\n                 .isEqualTo(getShort(settings, PlatformSmartmeteringKeys.MBUS_DEVICE_TYPE_IDENTIFICATION, null));\n     }\n \n+    @Then(\"^the smart meter is not decoupled from gateway device in the core database$\")\n+    public void theSmartMeterIsNotDecoupledInTheCoreDatabase(final Map<String, String> settings) {\n+        final SmartMeter smartMeter = this.smartMeterRepository\n+                .findByDeviceIdentification(settings.get(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION));\n+\n+        assertThat(smartMeter).isNotNull();\n+        assertThat(smartMeter.getChannel()).isEqualTo(getShort(settings, PlatformSmartmeteringKeys.CHANNEL));\n+        assertThat(smartMeter.getMbusPrimaryAddress())\n+                .isEqualTo(getShort(settings, PlatformSmartmeteringKeys.MBUS_PRIMARY_ADDRESS, null));\n+        assertThat(smartMeter.getGatewayDevice().getDeviceIdentification())\n+                .isEqualTo(settings.get(PlatformSmartmeteringKeys.GATEWAY_DEVICE_IDENTIFICATION));\n+    }\n+\n+    @Then(\"^the smart meter is decoupled from gateway device in the core database$\")\n+    public void theSmartMeterIsDecoupledFromGatewayDeviceInTheCoreDatabase(final Map<String, String> settings) {\n+        final SmartMeter smartMeter = this.smartMeterRepository\n+                .findByDeviceIdentification(settings.get(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION));\n+\n+        assertThat(smartMeter).isNotNull();\n+        assertThat(smartMeter.getChannel()).isNull();\n+        assertThat(smartMeter.getGatewayDevice()).isNull();\n+        assertThat(smartMeter.getMbusPrimaryAddress()).isNull();\n+    }\n+\n     @Then(\"^the dlms device with identification \\\"([^\\\"]*)\\\" does not exist$\")\n     public void theDlmsDeviceWithIdentificationDoesNotExist(final String deviceIdentification) {\n \n         final DlmsDevice dlmsDevice = this.dlmsDeviceRepository.findByDeviceIdentification(deviceIdentification);\n         assertThat(dlmsDevice).as(\"DLMS device with identification \" + deviceIdentification + \" in protocol database\")\n-                              .isNull();\n+                .isNull();\n \n         final Device device = this.deviceRepository.findByDeviceIdentification(deviceIdentification);\n         assertThat(device).as(\"DLMS device with identification \" + deviceIdentification + \" in core database\").isNull();\n@@ -296,15 +321,15 @@ public void theKeysAreNotChangedInTheOsgpAdapterProtocolDlmsDatabaseSecurityKeyT\n                 // other keys are not counted\n             }\n             assertThat(securityKey.getSecretStatus()).as(\"security key \" + securityKey.getSecretType() + \" is active\")\n-                                                     .isEqualTo(SecretStatus.ACTIVE);\n+                    .isEqualTo(SecretStatus.ACTIVE);\n         }\n \n         assertThat(numberOfMasterKeys).as(\"Number of master keys\").isEqualTo(1);\n         assertThat(numberOfAuthenticationKeys).as(\"Number of authentication keys\").isEqualTo(1);\n         assertThat(numberOfEncryptionKeys).as(\"Number of encryption keys\").isEqualTo(1);\n     }\n \n-    private List<DbEncryptedSecret> findAllSecretsForDevice(String deviceIdentification) {\n+    private List<DbEncryptedSecret> findAllSecretsForDevice(final String deviceIdentification) {\n         final DbEncryptedSecret searchByIdExample = new DbEncryptedSecret();\n         searchByIdExample.setDeviceIdentification(deviceIdentification);\n         return this.encryptedSecretRepository.findAll(Example.of(searchByIdExample));\n@@ -323,23 +348,23 @@ public void theStoredKeysAreNotEqualToTheReceivedKeys() {\n \n         final DbEncryptedSecret masterKey = this.findExistingSecurityKey(dlmsDevice, E_METER_MASTER_KEY, \"Master key\");\n         final String receivedMasterKey = (String) ScenarioContext.current()\n-                                                                 .get(PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY);\n+                .get(PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY);\n         assertThat(masterKey.getEncodedSecret())\n                 .as(\"Stored master key for \" + deviceDescription + \" must be different from received key\")\n                 .isNotEqualTo(receivedMasterKey);\n \n-        final DbEncryptedSecret authenticationKey = this\n-                .findExistingSecurityKey(dlmsDevice, E_METER_AUTHENTICATION_KEY, \"Authentication key\");\n+        final DbEncryptedSecret authenticationKey = this.findExistingSecurityKey(dlmsDevice, E_METER_AUTHENTICATION_KEY,\n+                \"Authentication key\");\n         final String receivedAuthenticationKey = (String) ScenarioContext.current()\n-                                                                         .get(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY);\n+                .get(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY);\n         assertThat(authenticationKey.getEncodedSecret())\n                 .as(\"Stored authentication key for \" + deviceDescription + \" must be different from received key\")\n                 .isNotEqualTo(receivedAuthenticationKey);\n \n-        final DbEncryptedSecret encryptionKey = this\n-                .findExistingSecurityKey(dlmsDevice, E_METER_ENCRYPTION_KEY_UNICAST, \"Encryption key\");\n+        final DbEncryptedSecret encryptionKey = this.findExistingSecurityKey(dlmsDevice, E_METER_ENCRYPTION_KEY_UNICAST,\n+                \"Encryption key\");\n         final String receivedEncryptionKey = (String) ScenarioContext.current()\n-                                                                     .get(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY);\n+                .get(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY);\n         assertThat(encryptionKey.getEncodedSecret())\n                 .as(\"Stored encryption key for \" + deviceDescription + \" must be different from received key\")\n                 .isNotEqualTo(receivedEncryptionKey);\n@@ -356,10 +381,10 @@ public void theStoredMbusDefaultKeysIsNotEqualToTheReceivedKey() {\n         final String deviceDescription = \"DLMS device with identification \" + deviceIdentification;\n         final DlmsDevice dlmsDevice = this.findExistingDlmsDevice(deviceIdentification);\n \n-        final DbEncryptedSecret mbusDefaultKey = this\n-                .findExistingSecurityKey(dlmsDevice, G_METER_MASTER_KEY, \"M-Bus Default key\");\n+        final DbEncryptedSecret mbusDefaultKey = this.findExistingSecurityKey(dlmsDevice, G_METER_MASTER_KEY,\n+                \"M-Bus Default key\");\n         final String receivedMbusDefaultKey = (String) ScenarioContext.current()\n-                                                                      .get(PlatformSmartmeteringKeys.MBUS_DEFAULT_KEY);\n+                .get(PlatformSmartmeteringKeys.MBUS_DEFAULT_KEY);\n         assertThat(mbusDefaultKey.getEncodedSecret())\n                 .as(\"Stored M-Bus Default key for \" + deviceDescription + \" must be different from received key\")\n                 .isNotEqualTo(receivedMbusDefaultKey);\n@@ -413,13 +438,15 @@ public void theInvocationCounterForTheEncryptionKeyOfShouldBeGreaterThan(final S\n         final Long invocationCounter = dlmsDevice.getInvocationCounter();\n \n         assertThat(invocationCounter)\n-                .as(\"The invocation counter for the encryption key of DLMS device with identification \" + dlmsDevice\n-                        .getDeviceIdentification() + \" must not be null\").isNotNull();\n+                .as(\"The invocation counter for the encryption key of DLMS device with identification \"\n+                        + dlmsDevice.getDeviceIdentification() + \" must not be null\")\n+                .isNotNull();\n \n         assertThat(invocationCounter > invocationCounterLowerBound)\n-                .as(\"The invocation counter for the encryption key of DLMS device with identification \" + dlmsDevice\n-                        .getDeviceIdentification() + \" (which is \" + invocationCounter + \") must be greater than \"\n-                        + invocationCounterLowerBound).isTrue();\n+                .as(\"The invocation counter for the encryption key of DLMS device with identification \"\n+                        + dlmsDevice.getDeviceIdentification() + \" (which is \" + invocationCounter\n+                        + \") must be greater than \" + invocationCounterLowerBound)\n+                .isTrue();\n     }\n \n     private DlmsDevice findExistingDlmsDevice(final String deviceIdentification) {\n@@ -434,23 +461,22 @@ private DbEncryptedSecret findExistingSecurityKey(final DlmsDevice dlmsDevice, f\n         final List<DbEncryptedSecret> validSecrets = this.encryptedSecretRepository\n                 .findSecrets(dlmsDevice.getDeviceIdentification(), secretType, SecretStatus.ACTIVE);\n         assertThat(validSecrets.size()).isEqualTo(1)\n-                                       .as(\"Device %s should have 1 active secret of type %s, but found %s\",\n-                                               dlmsDevice.getDeviceIdentification(), secretType, validSecrets.size());\n+                .as(\"Device %s should have 1 active secret of type %s, but found %s\",\n+                        dlmsDevice.getDeviceIdentification(), secretType, validSecrets.size());\n         final DbEncryptedSecret secret = validSecrets.get(0);\n-        assertThat(secret)\n-                .as(keyDescription + \" for DLMS device with identification \" + dlmsDevice.getDeviceIdentification()\n-                        + \" must be stored\").isNotNull();\n+        assertThat(secret).as(keyDescription + \" for DLMS device with identification \"\n+                + dlmsDevice.getDeviceIdentification() + \" must be stored\").isNotNull();\n         return secret;\n     }\n \n     private void setScenarioContextForDevice(final Map<String, String> inputSettings, final Device device) {\n         final String deviceType = inputSettings.get(PlatformSmartmeteringKeys.DEVICE_TYPE);\n         if (this.isGasSmartMeter(deviceType)) {\n             ScenarioContext.current()\n-                           .put(PlatformSmartmeteringKeys.GAS_DEVICE_IDENTIFICATION, device.getDeviceIdentification());\n+                    .put(PlatformSmartmeteringKeys.GAS_DEVICE_IDENTIFICATION, device.getDeviceIdentification());\n         } else {\n             ScenarioContext.current()\n-                           .put(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION, device.getDeviceIdentification());\n+                    .put(PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION, device.getDeviceIdentification());\n         }\n     }\n \n@@ -462,13 +488,16 @@ private Device createDeviceInCoreDatabase(final Map<String, String> inputSetting\n         final boolean isSmartMeter = this.isSmartMeter(inputSettings);\n         if (isSmartMeter) {\n             final SmartMeter smartMeter = new SmartMeterBuilder().withSettings(inputSettings)\n-                                                                 .setProtocolInfo(protocolInfo)\n-                                                                 .setDeviceModel(deviceModel).build();\n+                    .setProtocolInfo(protocolInfo)\n+                    .setDeviceModel(deviceModel)\n+                    .build();\n             device = this.smartMeterRepository.save(smartMeter);\n \n         } else {\n-            device = new DeviceBuilder(this.deviceRepository).withSettings(inputSettings).setProtocolInfo(protocolInfo)\n-                                                             .setDeviceModel(deviceModel).build();\n+            device = new DeviceBuilder(this.deviceRepository).withSettings(inputSettings)\n+                    .setProtocolInfo(protocolInfo)\n+                    .setDeviceModel(deviceModel)\n+                    .build();\n             device = this.deviceRepository.save(device);\n         }\n \n@@ -491,8 +520,8 @@ private Device createDeviceInCoreDatabase(final Map<String, String> inputSetting\n     private void createDeviceAuthorisationInCoreDatabase(final Device device) {\n         final Organisation organisation = this.organisationRepo.findByOrganisationIdentification(\n                 org.opensmartgridplatform.cucumber.platform.PlatformDefaults.DEFAULT_ORGANIZATION_IDENTIFICATION);\n-        final DeviceAuthorization deviceAuthorization = device\n-                .addAuthorization(organisation, DeviceFunctionGroup.OWNER);\n+        final DeviceAuthorization deviceAuthorization = device.addAuthorization(organisation,\n+                DeviceFunctionGroup.OWNER);\n \n         this.deviceAuthorizationRepository.save(deviceAuthorization);\n         this.deviceRepository.save(device);\n@@ -512,8 +541,8 @@ private void createDlmsDeviceInSecretManagementDatabase(final DlmsDevice dlmsDev\n             final Map<String, String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n         final List<SecretBuilder> secretBuilders = new ArrayList<>();\n-        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n-                .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n+        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE)\n+                && \"true\".equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n             secretBuilders.add(this.getAppropriateSecretBuilder(PlatformSmartmeteringKeys.PASSWORD, inputSettings));\n         } else if (this.isGasSmartMeter(deviceType)) {\n             secretBuilders.add(this.getAppropriateSecretBuilder(MBUS_DEFAULT_KEY, inputSettings));\n@@ -526,42 +555,46 @@ private void createDlmsDeviceInSecretManagementDatabase(final DlmsDevice dlmsDev\n                 secretBuilders.add(this.getAppropriateSecretBuilder(MBUS_USER_KEY, inputSettings));\n             }\n         } else if (this.isESmartMeter(deviceType)) {\n-            secretBuilders.add(this\n-                    .getAppropriateSecretBuilder(PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY, inputSettings));\n-            secretBuilders.add(this\n-                    .getAppropriateSecretBuilder(PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY, inputSettings));\n+            secretBuilders.add(this.getAppropriateSecretBuilder(PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY,\n+                    inputSettings));\n+            secretBuilders.add(\n+                    this.getAppropriateSecretBuilder(PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY, inputSettings));\n             secretBuilders.add(this.getAppropriateSecretBuilder(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY,\n                     inputSettings));\n         }\n         final DbEncryptionKeyReference encryptionKeyRef = this.encryptionKeyRepository\n-                .findByTypeAndValid(EncryptionProviderType.JRE, new Date()).iterator().next();\n+                .findByTypeAndValid(EncryptionProviderType.JRE, new Date())\n+                .iterator()\n+                .next();\n         secretBuilders.stream()\n-                      .filter(Objects::nonNull)\n-                      .map(SecretBuilder::build)\n-                      .map(key -> this.setSecretDefaultProperties(dlmsDevice.getDeviceIdentification(), encryptionKeyRef, key))\n-                      .forEach(this.encryptedSecretRepository::save);\n+                .filter(Objects::nonNull)\n+                .map(SecretBuilder::build)\n+                .map(key -> this.setSecretDefaultProperties(dlmsDevice.getDeviceIdentification(), encryptionKeyRef,\n+                        key))\n+                .forEach(this.encryptedSecretRepository::save);\n     }\n \n-    private SecretBuilder getDefaultSecretBuilder(SecurityKeyType keyType) {\n-        return this.defaultSecretBuilders.stream().filter(sb -> sb.getSecurityKeyType().equals(keyType)).findFirst()\n-                                         .orElseThrow(() -> new IllegalArgumentException(\n-                                                 String.format(\"Unknown secret builder requested for type %s\",\n-                                                         keyType)));\n+    private SecretBuilder getDefaultSecretBuilder(final SecurityKeyType keyType) {\n+        return this.defaultSecretBuilders.stream()\n+                .filter(sb -> sb.getSecurityKeyType().equals(keyType))\n+                .findFirst()\n+                .orElseThrow(() -> new IllegalArgumentException(\n+                        String.format(\"Unknown secret builder requested for type %s\", keyType)));\n     }\n \n     private SecretBuilder getAppropriateSecretBuilder(final String keyTypeInputName,\n             final Map<String, String> inputSettings) {\n         final SecurityKeyType keyType = this.securityKeyTypesByInputName.get(keyTypeInputName);\n         if (keyType == null) {\n-            throw new IllegalArgumentException(\n-                    String.format(\"Unknown key type name %s; available types names: %s\", keyTypeInputName,\n-                            this.securityKeyTypesByInputName.keySet()));\n+            throw new IllegalArgumentException(String.format(\"Unknown key type name %s; available types names: %s\",\n+                    keyTypeInputName, this.securityKeyTypesByInputName.keySet()));\n         }\n         if (inputSettings.containsKey(keyTypeInputName)) {\n             final String inputKey = inputSettings.get(keyTypeInputName);\n             if (inputKey != null && !inputKey.trim().isEmpty()) {\n                 return new SecretBuilder().setSecurityKeyType(E_METER_ENCRYPTION).setKey(inputKey);\n-            } else {    //secret explicitly set to empty; return null to prevent secret storing\n+            } else { // secret explicitly set to empty; return null to prevent\n+                     // secret storing\n                 return null;\n             }\n         } else {\n@@ -598,8 +631,8 @@ private boolean isESmartMeter(final String deviceType) {\n      * @return ProtocolInfo\n      */\n     private ProtocolInfo getProtocolInfo(final Map<String, String> inputSettings) {\n-        final String protocol = inputSettings\n-                .getOrDefault(PlatformSmartmeteringKeys.PROTOCOL, PlatformSmartmeteringDefaults.PROTOCOL);\n+        final String protocol = inputSettings.getOrDefault(PlatformSmartmeteringKeys.PROTOCOL,\n+                PlatformSmartmeteringDefaults.PROTOCOL);\n         final String protocolVersion = inputSettings.getOrDefault(PlatformSmartmeteringKeys.PROTOCOL_VERSION,\n                 PlatformSmartmeteringDefaults.PROTOCOL_VERSION);\n         return this.protocolInfoRepository.findByProtocolAndProtocolVersion(protocol, protocolVersion);"
  },
  {
    "sha": "897a6e5b9fcde07b9e0d8e1c546504db6af84c59",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringbundle/BundledDecoupleMbusDeviceByChannelSteps.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringbundle/BundledDecoupleMbusDeviceByChannelSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringbundle/BundledDecoupleMbusDeviceByChannelSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringbundle/BundledDecoupleMbusDeviceByChannelSteps.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License.  You may obtain a copy of\n+ * the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.smartmetering.glue.steps.ws.smartmetering.smartmeteringbundle;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.DecoupleMbusDeviceByChannelRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.DecoupleMbusDeviceByChannelResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.common.OsgpResultType;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.common.Response;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.PlatformSmartmeteringKeys;\n+\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+\n+public class BundledDecoupleMbusDeviceByChannelSteps extends BaseBundleSteps {\n+\n+    @Given(\"^the bundle request contains a Decouple M-Bus Device By Channel action$\")\n+    public void theBundleRequestContainsADeCoupleMbusDeviceByChannelAction(final Map<String, String> parameters)\n+            throws Throwable {\n+\n+        final DecoupleMbusDeviceByChannelRequest action = new DecoupleMbusDeviceByChannelRequest();\n+        action.setChannel(Short.valueOf(parameters.get(PlatformSmartmeteringKeys.CHANNEL)));\n+        this.addActionToBundleRequest(action);\n+    }\n+\n+    @Then(\"^the Decouple M-Bus Device By Channel bundle response is \\\"([^\\\"]*)\\\" with Mbus Device \\\"([^\\\"]*)\\\"$\")\n+    public void theDecoupleMbusDeviceByChannelBundleResponseIsWithMbusDevice(final String result,\n+            final String mbusDeviceIdentification) throws Throwable {\n+\n+        final Response response = this.getNextBundleResponse();\n+\n+        assertThat(response).as(\"Not a valid response\").isInstanceOf(DecoupleMbusDeviceByChannelResponse.class);\n+\n+        assertThat(((DecoupleMbusDeviceByChannelResponse) response).getMbusDeviceIdentification())\n+                .as(\"MbusDeviceIdentification\")\n+                .isEqualTo(mbusDeviceIdentification);\n+        assertThat(response.getResult()).as(\"Result\").isEqualTo(OsgpResultType.valueOf(result));\n+\n+    }\n+\n+    @Then(\"^the Decouple M-Bus Device By Channel bundle response is \\\"([^\\\"]*)\\\" without Mbus Device$\")\n+    public void theDecoupleMbusDeviceByChannelBundleResponseIsWithoutMbusDevice(final String result) throws Throwable {\n+\n+        final Response response = this.getNextBundleResponse();\n+\n+        assertThat(response).as(\"Not a valid response\").isInstanceOf(DecoupleMbusDeviceByChannelResponse.class);\n+\n+        assertThat(((DecoupleMbusDeviceByChannelResponse) response).getMbusDeviceIdentification())\n+                .as(\"MbusDeviceIdentification\")\n+                .isNull();\n+        assertThat(response.getResult()).as(\"Result\").isEqualTo(OsgpResultType.valueOf(result));\n+\n+    }\n+\n+}"
  },
  {
    "sha": "8a2051d5ff14188d193f4c98edcf1f02f41c2789",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DecoupleDeviceSteps.java",
    "status": "renamed",
    "additions": 33,
    "deletions": 33,
    "changes": 66,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DecoupleDeviceSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DecoupleDeviceSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DecoupleDeviceSteps.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -12,14 +12,14 @@\n import java.util.List;\n \n import org.junit.jupiter.api.Assertions;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceAsyncRequest;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceAsyncResponse;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceRequest;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceResponse;\n import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.glue.steps.ws.smartmetering.AbstractSmartMeteringSteps;\n-import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.installation.DeCoupleMbusDeviceRequestFactory;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.installation.DecoupleMbusDeviceRequestFactory;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.installation.SmartMeteringInstallationClient;\n import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -28,87 +28,87 @@\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n \n-public class DeCoupleDeviceSteps extends AbstractSmartMeteringSteps {\n+public class DecoupleDeviceSteps extends AbstractSmartMeteringSteps {\n \n     @Autowired\n     private SmartMeteringInstallationClient smartMeteringInstallationClient;\n \n-    @When(\"^the DeCouple G-meter \\\"([^\\\"]*)\\\" from E-meter \\\"([^\\\"]*)\\\" request is received for an unknown gateway$\")\n-    public void theDeCoupleGMeterFromEMeterRequestIsReceivedForAnUnknownDevice(final String gasMeter,\n+    @When(\"^the Decouple G-meter \\\"([^\\\"]*)\\\" from E-meter \\\"([^\\\"]*)\\\" request is received for an unknown gateway$\")\n+    public void theDecoupleGMeterFromEMeterRequestIsReceivedForAnUnknownDevice(final String gasMeter,\n             final String eMeter) throws WebServiceSecurityException {\n \n-        final DeCoupleMbusDeviceRequest request = DeCoupleMbusDeviceRequestFactory.forGatewayAndMbusDevice(eMeter,\n+        final DecoupleMbusDeviceRequest request = DecoupleMbusDeviceRequestFactory.forGatewayAndMbusDevice(eMeter,\n                 gasMeter);\n \n         try {\n-            this.smartMeteringInstallationClient.deCoupleMbusDevice(request);\n+            this.smartMeteringInstallationClient.decoupleMbusDevice(request);\n             Assertions.fail(\"A SoapFaultClientException should be thrown\");\n         } catch (final SoapFaultClientException e) {\n             ScenarioContext.current().put(PlatformKeys.RESPONSE, e);\n         }\n     }\n \n-    @When(\"^the DeCouple G-meter \\\"([^\\\"]*)\\\" from E-meter \\\"([^\\\"]*)\\\" request is received for an inactive gateway$\")\n-    public void theDeCoupleGMeterFromEMeterRequestIsReceivedForAnInactiveDevice(final String gasMeter,\n+    @When(\"^the Decouple G-meter \\\"([^\\\"]*)\\\" from E-meter \\\"([^\\\"]*)\\\" request is received for an inactive gateway$\")\n+    public void theDecoupleGMeterFromEMeterRequestIsReceivedForAnInactiveDevice(final String gasMeter,\n             final String eMeter) throws WebServiceSecurityException {\n \n-        final DeCoupleMbusDeviceRequest request = DeCoupleMbusDeviceRequestFactory.forGatewayAndMbusDevice(eMeter,\n+        final DecoupleMbusDeviceRequest request = DecoupleMbusDeviceRequestFactory.forGatewayAndMbusDevice(eMeter,\n                 gasMeter);\n \n         try {\n-            this.smartMeteringInstallationClient.deCoupleMbusDevice(request);\n+            this.smartMeteringInstallationClient.decoupleMbusDevice(request);\n             Assertions.fail(\"A SoapFaultClientException should be thrown\");\n         } catch (final SoapFaultClientException e) {\n             ScenarioContext.current().put(PlatformKeys.RESPONSE, e);\n         }\n     }\n \n-    @When(\"^the DeCouple G-meter \\\"([^\\\"]*)\\\" from E-meter \\\"([^\\\"]*)\\\" request is received$\")\n-    public void theDeCoupleGMeterRequestIsReceived(final String gasMeter, final String eMeter)\n+    @When(\"^the Decouple G-meter \\\"([^\\\"]*)\\\" from E-meter \\\"([^\\\"]*)\\\" request is received$\")\n+    public void theDecoupleGMeterRequestIsReceived(final String gasMeter, final String eMeter)\n             throws WebServiceSecurityException {\n \n-        final DeCoupleMbusDeviceRequest request = DeCoupleMbusDeviceRequestFactory.forGatewayAndMbusDevice(eMeter,\n+        final DecoupleMbusDeviceRequest request = DecoupleMbusDeviceRequestFactory.forGatewayAndMbusDevice(eMeter,\n                 gasMeter);\n-        final DeCoupleMbusDeviceAsyncResponse asyncResponse = this.smartMeteringInstallationClient\n-                .deCoupleMbusDevice(request);\n+        final DecoupleMbusDeviceAsyncResponse asyncResponse = this.smartMeteringInstallationClient\n+                .decoupleMbusDevice(request);\n \n         this.checkAndSaveCorrelationId(asyncResponse.getCorrelationUid());\n     }\n \n-    @Then(\"^the DeCouple response is \\\"([^\\\"]*)\\\"$\")\n-    public void theDeCoupleResponseIs(final String status) throws WebServiceSecurityException {\n+    @Then(\"^the Decouple response is \\\"([^\\\"]*)\\\"$\")\n+    public void theDecoupleResponseIs(final String status) throws WebServiceSecurityException {\n \n-        final DeCoupleMbusDeviceAsyncRequest deCoupleMbusDeviceAsyncRequest = DeCoupleMbusDeviceRequestFactory\n+        final DecoupleMbusDeviceAsyncRequest decoupleMbusDeviceAsyncRequest = DecoupleMbusDeviceRequestFactory\n                 .fromScenarioContext();\n-        final DeCoupleMbusDeviceResponse response = this.smartMeteringInstallationClient\n-                .getDeCoupleMbusDeviceResponse(deCoupleMbusDeviceAsyncRequest);\n+        final DecoupleMbusDeviceResponse response = this.smartMeteringInstallationClient\n+                .getDecoupleMbusDeviceResponse(decoupleMbusDeviceAsyncRequest);\n \n         assertThat(response.getResult()).as(\"Result\").isNotNull();\n         assertThat(response.getResult().name()).as(\"Result\").isEqualTo(status);\n     }\n \n-    @Then(\"^the DeCouple response is \\\"([^\\\"]*)\\\" and contains$\")\n-    public void theDeCoupleResponseIsAndContains(final String status, final List<String> resultList)\n+    @Then(\"^the Decouple response is \\\"([^\\\"]*)\\\" and contains$\")\n+    public void theDecoupleResponseIsAndContains(final String status, final List<String> resultList)\n             throws WebServiceSecurityException {\n \n-        final DeCoupleMbusDeviceAsyncRequest deCoupleMbusDeviceAsyncRequest = DeCoupleMbusDeviceRequestFactory\n+        final DecoupleMbusDeviceAsyncRequest decoupleMbusDeviceAsyncRequest = DecoupleMbusDeviceRequestFactory\n                 .fromScenarioContext();\n-        final DeCoupleMbusDeviceResponse response = this.smartMeteringInstallationClient\n-                .getDeCoupleMbusDeviceResponse(deCoupleMbusDeviceAsyncRequest);\n+        final DecoupleMbusDeviceResponse response = this.smartMeteringInstallationClient\n+                .getDecoupleMbusDeviceResponse(decoupleMbusDeviceAsyncRequest);\n \n         assertThat(response.getResult()).as(\"Result\").isNotNull();\n         assertThat(response.getResult().name()).as(\"Result\").isEqualTo(status);\n         assertThat(this.checkDescription(response.getDescription(), resultList))\n                 .as(\"Description should contain all of \" + resultList).isTrue();\n     }\n \n-    @Then(\"^retrieving the DeCouple response results in an exception$\")\n-    public void retrievingTheDeCoupleResponseResultsInAnException() throws WebServiceSecurityException {\n+    @Then(\"^retrieving the Decouple response results in an exception$\")\n+    public void retrievingTheDecoupleResponseResultsInAnException() throws WebServiceSecurityException {\n \n-        final DeCoupleMbusDeviceAsyncRequest asyncRequest = DeCoupleMbusDeviceRequestFactory.fromScenarioContext();\n+        final DecoupleMbusDeviceAsyncRequest asyncRequest = DecoupleMbusDeviceRequestFactory.fromScenarioContext();\n \n         try {\n-            this.smartMeteringInstallationClient.getDeCoupleMbusDeviceResponse(asyncRequest);\n+            this.smartMeteringInstallationClient.getDecoupleMbusDeviceResponse(asyncRequest);\n             Assertions.fail(\"A SoapFaultClientException should be thrown\");\n         } catch (final SoapFaultClientException e) {\n             ScenarioContext.current().put(PlatformKeys.RESPONSE, e);",
    "previous_filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DeCoupleDeviceSteps.java"
  },
  {
    "sha": "568a1f5d3e74356602969d707363b99cbfc51b43",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DecoupleMbusDeviceByChannelSteps.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DecoupleMbusDeviceByChannelSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DecoupleMbusDeviceByChannelSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringinstallation/DecoupleMbusDeviceByChannelSteps.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.smartmetering.glue.steps.ws.smartmetering.smartmeteringinstallation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelResponse;\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.glue.steps.ws.smartmetering.AbstractSmartMeteringSteps;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.installation.DecoupleMbusDeviceByChannelRequestFactory;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.installation.SmartMeteringInstallationClient;\n+import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.ws.soap.client.SoapFaultClientException;\n+\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class DecoupleMbusDeviceByChannelSteps extends AbstractSmartMeteringSteps {\n+\n+    @Autowired\n+    private SmartMeteringInstallationClient smartMeteringInstallationClient;\n+\n+    @When(\"^the Decouple M-Bus Device By Channel \\\"([^\\\"]*)\\\" from E-meter \\\"([^\\\"]*)\\\" request is received$\")\n+    public void theDeCoupleMbusDeviceByChannelFromEmeterRequestIsReceived(final String channel, final String eMeter)\n+            throws WebServiceSecurityException {\n+\n+        final DecoupleMbusDeviceByChannelRequest request = DecoupleMbusDeviceByChannelRequestFactory\n+                .fromGatewayAndChannel(eMeter, channel);\n+        final DecoupleMbusDeviceByChannelAsyncResponse asyncResponse = this.smartMeteringInstallationClient\n+                .decoupleMbusDeviceByChannel(request);\n+\n+        this.checkAndSaveCorrelationId(asyncResponse.getCorrelationUid());\n+    }\n+\n+    @Then(\"^the Decouple M-Bus Device By Channel response is \\\"([^\\\"]*)\\\" for device \\\"([^\\\"]*)\\\"$\")\n+    public void theDecoupleResponseIs(final String status, final String mbusDevice) throws WebServiceSecurityException {\n+\n+        final DecoupleMbusDeviceByChannelResponse response = this.getAndCheckResponse(status);\n+        assertThat(response.getMbusDeviceIdentification()).as(\"MbusDeviceIdentification\").isEqualTo(mbusDevice);\n+    }\n+\n+    @Then(\"^the Decouple M-Bus Device By Channel response is \\\"([^\\\"]*)\\\" without M-Bus device$\")\n+    public void theDecoupleResponseIsWithoutMBusDevice(final String status) throws WebServiceSecurityException {\n+\n+        final DecoupleMbusDeviceByChannelResponse response = this.getAndCheckResponse(status);\n+        assertThat(response.getMbusDeviceIdentification()).as(\"MbusDeviceIdentification\").isNull();\n+    }\n+\n+    private DecoupleMbusDeviceByChannelResponse getAndCheckResponse(final String status)\n+            throws WebServiceSecurityException {\n+        final DecoupleMbusDeviceByChannelAsyncRequest request = DecoupleMbusDeviceByChannelRequestFactory\n+                .fromScenarioContext();\n+        final DecoupleMbusDeviceByChannelResponse response = this.smartMeteringInstallationClient\n+                .getDecoupleMbusDeviceByChannelResponse(request);\n+\n+        assertThat(response.getResult()).as(\"Result\").isNotNull();\n+        assertThat(response.getResult().name()).as(\"Result\").isEqualTo(status);\n+        return response;\n+    }\n+\n+    @Then(\"^retrieving the Decouple By Channel response results in an exception$\")\n+    public void retrievingTheDecoupleResponseResultsInAnException() throws WebServiceSecurityException {\n+\n+        final DecoupleMbusDeviceByChannelAsyncRequest asyncRequest = DecoupleMbusDeviceByChannelRequestFactory\n+                .fromScenarioContext();\n+\n+        try {\n+            this.smartMeteringInstallationClient.getDecoupleMbusDeviceByChannelResponse(asyncRequest);\n+            fail(\"A SoapFaultClientException should be thrown\");\n+        } catch (final SoapFaultClientException e) {\n+            ScenarioContext.current().put(PlatformKeys.RESPONSE, e);\n+        }\n+    }\n+\n+    @When(\"^the Decouple M-Bus Device By Channel \\\"([^\\\"]*)\\\" from E-meter \\\"([^\\\"]*)\\\" request is received for an unknown gateway$\")\n+    public void theDecoupleGMeterFromEMeterRequestIsReceivedForAnUnknownDevice(final String channel,\n+            final String eMeter) throws WebServiceSecurityException {\n+\n+        final DecoupleMbusDeviceByChannelRequest request = DecoupleMbusDeviceByChannelRequestFactory\n+                .fromGatewayAndChannel(eMeter, channel);\n+\n+        try {\n+            this.smartMeteringInstallationClient.decoupleMbusDeviceByChannel(request);\n+            fail(\"A SoapFaultClientException should be thrown\");\n+        } catch (final SoapFaultClientException e) {\n+            ScenarioContext.current().put(PlatformKeys.RESPONSE, e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "e1ef367145887c7f85946f2d05b7f112a9178c06",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DecoupleMbusDeviceByChannelRequestFactory.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DecoupleMbusDeviceByChannelRequestFactory.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DecoupleMbusDeviceByChannelRequestFactory.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DecoupleMbusDeviceByChannelRequestFactory.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.installation;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelRequestData;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.RequestFactoryHelper;\n+\n+public class DecoupleMbusDeviceByChannelRequestFactory {\n+\n+    private DecoupleMbusDeviceByChannelRequestFactory() {\n+        // Private constructor for utility class.\n+    }\n+\n+    public static DecoupleMbusDeviceByChannelRequest fromGatewayAndChannel(final String gatewayDeviceIdentification,\n+            final String channel) {\n+        final DecoupleMbusDeviceByChannelRequest request = new DecoupleMbusDeviceByChannelRequest();\n+        request.setDeviceIdentification(gatewayDeviceIdentification);\n+        final DecoupleMbusDeviceByChannelRequestData requestData = new DecoupleMbusDeviceByChannelRequestData();\n+        requestData.setChannel(Short.parseShort(channel));\n+        request.setDecoupleMbusDeviceByChannelRequestData(requestData);\n+        return request;\n+    }\n+\n+    public static DecoupleMbusDeviceByChannelRequest fromSettings(final Map<String, String> settings) {\n+        final DecoupleMbusDeviceByChannelRequest request = new DecoupleMbusDeviceByChannelRequest();\n+        final DecoupleMbusDeviceByChannelRequestData requestData = new DecoupleMbusDeviceByChannelRequestData();\n+        requestData.setChannel(Short.valueOf(settings.get(PlatformKeys.KEY_CHANNEL)));\n+        request.setDecoupleMbusDeviceByChannelRequestData(requestData);\n+        request.setDeviceIdentification(settings.get(PlatformKeys.KEY_DEVICE_IDENTIFICATION));\n+        return request;\n+    }\n+\n+    public static DecoupleMbusDeviceByChannelAsyncRequest fromScenarioContext() {\n+        final String correlationUid = RequestFactoryHelper.getCorrelationUidFromScenarioContext();\n+        final String deviceIdentification = RequestFactoryHelper.getDeviceIdentificationFromScenarioContext();\n+        final DecoupleMbusDeviceByChannelAsyncRequest asyncRequest = new DecoupleMbusDeviceByChannelAsyncRequest();\n+        asyncRequest.setCorrelationUid(correlationUid);\n+        asyncRequest.setDeviceIdentification(deviceIdentification);\n+        return asyncRequest;\n+    }\n+\n+}"
  },
  {
    "sha": "1ab9d815bd64a33bbc7eaadf2d4f8f4d54ab9465",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DecoupleMbusDeviceRequestFactory.java",
    "status": "renamed",
    "additions": 14,
    "deletions": 14,
    "changes": 28,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DecoupleMbusDeviceRequestFactory.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DecoupleMbusDeviceRequestFactory.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DecoupleMbusDeviceRequestFactory.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -7,30 +7,30 @@\n  */\n package org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.installation;\n \n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceAsyncRequest;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceRequest;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.RequestFactoryHelper;\n \n-public class DeCoupleMbusDeviceRequestFactory {\n+public class DecoupleMbusDeviceRequestFactory {\n \n-    private DeCoupleMbusDeviceRequestFactory() {\n+    private DecoupleMbusDeviceRequestFactory() {\n         // Private constructor for utility class.\n     }\n \n-    public static DeCoupleMbusDeviceRequest forGatewayAndMbusDevice(final String gatewayDeviceIdentification,\n+    public static DecoupleMbusDeviceRequest forGatewayAndMbusDevice(final String gatewayDeviceIdentification,\n             final String mbusDeviceIdentification) {\n-        final DeCoupleMbusDeviceRequest deCoupleMbusDeviceRequest = new DeCoupleMbusDeviceRequest();\n-        deCoupleMbusDeviceRequest.setDeviceIdentification(gatewayDeviceIdentification);\n-        deCoupleMbusDeviceRequest.setMbusDeviceIdentification(mbusDeviceIdentification);\n-        return deCoupleMbusDeviceRequest;\n+        final DecoupleMbusDeviceRequest decoupleMbusDeviceRequest = new DecoupleMbusDeviceRequest();\n+        decoupleMbusDeviceRequest.setDeviceIdentification(gatewayDeviceIdentification);\n+        decoupleMbusDeviceRequest.setMbusDeviceIdentification(mbusDeviceIdentification);\n+        return decoupleMbusDeviceRequest;\n     }\n \n-    public static DeCoupleMbusDeviceAsyncRequest fromScenarioContext() {\n+    public static DecoupleMbusDeviceAsyncRequest fromScenarioContext() {\n         final String correlationUid = RequestFactoryHelper.getCorrelationUidFromScenarioContext();\n         final String deviceIdentification = RequestFactoryHelper.getDeviceIdentificationFromScenarioContext();\n-        final DeCoupleMbusDeviceAsyncRequest deCoupleMbusDeviceAsyncRequest = new DeCoupleMbusDeviceAsyncRequest();\n-        deCoupleMbusDeviceAsyncRequest.setCorrelationUid(correlationUid);\n-        deCoupleMbusDeviceAsyncRequest.setDeviceIdentification(deviceIdentification);\n-        return deCoupleMbusDeviceAsyncRequest;\n+        final DecoupleMbusDeviceAsyncRequest decoupleMbusDeviceAsyncRequest = new DecoupleMbusDeviceAsyncRequest();\n+        decoupleMbusDeviceAsyncRequest.setCorrelationUid(correlationUid);\n+        decoupleMbusDeviceAsyncRequest.setDeviceIdentification(deviceIdentification);\n+        return decoupleMbusDeviceAsyncRequest;\n     }\n }",
    "previous_filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/DeCoupleMbusDeviceRequestFactory.java"
  },
  {
    "sha": "d75f85e80bfab02448e2f4576b4bf8e04502fe46",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/SmartMeteringInstallationClient.java",
    "status": "modified",
    "additions": 33,
    "deletions": 12,
    "changes": 45,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/SmartMeteringInstallationClient.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/SmartMeteringInstallationClient.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/support/ws/smartmetering/installation/SmartMeteringInstallationClient.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -7,10 +7,6 @@\n  */\n package org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.installation;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.ws.client.core.WebServiceTemplate;\n-\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.AddDeviceAsyncRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.AddDeviceAsyncResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.AddDeviceRequest;\n@@ -23,13 +19,20 @@\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceByChannelResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceResponse;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceAsyncRequest;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceAsyncResponse;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceRequest;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceResponse;\n import org.opensmartgridplatform.cucumber.platform.smartmetering.support.ws.smartmetering.SmartMeteringBaseClient;\n import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n import org.opensmartgridplatform.shared.infra.ws.DefaultWebServiceTemplateFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n \n @Component\n public class SmartMeteringInstallationClient extends SmartMeteringBaseClient {\n@@ -72,22 +75,22 @@ public CoupleMbusDeviceResponse getCoupleMbusDeviceResponse(final CoupleMbusDevi\n         return (CoupleMbusDeviceResponse) webServiceTemplate.marshalSendAndReceive(asyncRequest);\n     }\n \n-    public DeCoupleMbusDeviceAsyncResponse deCoupleMbusDevice(final DeCoupleMbusDeviceRequest request)\n+    public DecoupleMbusDeviceAsyncResponse decoupleMbusDevice(final DecoupleMbusDeviceRequest request)\n             throws WebServiceSecurityException {\n         final WebServiceTemplate webServiceTemplate = this.smartMeteringInstallationWebServiceTemplateFactory\n                 .getTemplate(this.getOrganizationIdentification(), this.getUserName());\n-        return (DeCoupleMbusDeviceAsyncResponse) webServiceTemplate.marshalSendAndReceive(request);\n+        return (DecoupleMbusDeviceAsyncResponse) webServiceTemplate.marshalSendAndReceive(request);\n     }\n \n-    public DeCoupleMbusDeviceResponse getDeCoupleMbusDeviceResponse(final DeCoupleMbusDeviceAsyncRequest asyncRequest)\n+    public DecoupleMbusDeviceResponse getDecoupleMbusDeviceResponse(final DecoupleMbusDeviceAsyncRequest asyncRequest)\n             throws WebServiceSecurityException {\n \n         final String correlationUid = asyncRequest.getCorrelationUid();\n         this.waitForNotification(correlationUid);\n \n         final WebServiceTemplate webServiceTemplate = this.smartMeteringInstallationWebServiceTemplateFactory\n                 .getTemplate(this.getOrganizationIdentification(), this.getUserName());\n-        return (DeCoupleMbusDeviceResponse) webServiceTemplate.marshalSendAndReceive(asyncRequest);\n+        return (DecoupleMbusDeviceResponse) webServiceTemplate.marshalSendAndReceive(asyncRequest);\n     }\n \n     public CoupleMbusDeviceByChannelAsyncResponse coupleMbusDeviceByChannel(\n@@ -108,4 +111,22 @@ public CoupleMbusDeviceByChannelResponse getCoupleMbusDeviceByChannelResponse(\n         return (CoupleMbusDeviceByChannelResponse) webServiceTemplate.marshalSendAndReceive(asyncRequest);\n     }\n \n+    public DecoupleMbusDeviceByChannelAsyncResponse decoupleMbusDeviceByChannel(\n+            final DecoupleMbusDeviceByChannelRequest request) throws WebServiceSecurityException {\n+        final WebServiceTemplate webServiceTemplate = this.smartMeteringInstallationWebServiceTemplateFactory\n+                .getTemplate(this.getOrganizationIdentification(), this.getUserName());\n+        return (DecoupleMbusDeviceByChannelAsyncResponse) webServiceTemplate.marshalSendAndReceive(request);\n+    }\n+\n+    public DecoupleMbusDeviceByChannelResponse getDecoupleMbusDeviceByChannelResponse(\n+            final DecoupleMbusDeviceByChannelAsyncRequest asyncRequest) throws WebServiceSecurityException {\n+\n+        final String correlationUid = asyncRequest.getCorrelationUid();\n+        this.waitForNotification(correlationUid);\n+\n+        final WebServiceTemplate webServiceTemplate = this.smartMeteringInstallationWebServiceTemplateFactory\n+                .getTemplate(this.getOrganizationIdentification(), this.getUserName());\n+        return (DecoupleMbusDeviceByChannelResponse) webServiceTemplate.marshalSendAndReceive(asyncRequest);\n+    }\n+\n }"
  },
  {
    "sha": "3f4ec0a3499b42cbdc35b957b485aa9c0ef32f07",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/bundle/BundledDecoupleMBusDeviceByChannel.feature",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/bundle/BundledDecoupleMBusDeviceByChannel.feature",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/bundle/BundledDecoupleMBusDeviceByChannel.feature",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/bundle/BundledDecoupleMBusDeviceByChannel.feature?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,135 @@\n+@SmartMetering @Platform\n+Feature: SmartMetering Bundle - Decouple M-Bus Device By Channel\n+  As a grid operator\n+  I want to be able to decouple an M-Bus device by channel to a smart meter\n+\n+  Scenario: Decouple M-Bus Device By Channel on a administratively decoupled E-meter\n+    Given a bundle request\n+      | DeviceIdentification | TEST1024000000001 |\n+    And the bundle request contains a Decouple M-Bus Device By Channel action\n+      | Channel | 1 |\n+    And a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+    And device simulation of \"TEST1024000000001\" with classid 72 obiscode \"0-1:24.1.0\" and attributes\n+      | 5 | unsigned             |        9 |\n+      | 6 | double-long-unsigned | 12056731 |\n+      | 7 | long-unsigned        |    12514 |\n+      | 8 | unsigned             |       66 |\n+      | 9 | unsigned             |        3 |\n+    When the bundle request is received\n+    Then the Decouple M-Bus Device By Channel bundle response is \"OK\" without Mbus Device\n+    And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+\n+  Scenario: Decouple M-Bus Device By Channel on a administratively decoupled E-meter with empty channel\n+    Given a bundle request\n+      | DeviceIdentification | TEST1024000000001 |\n+    And the bundle request contains a Decouple M-Bus Device By Channel action\n+      | Channel | 1 |\n+    And a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+    And device simulation of \"TEST1024000000001\" with classid 72 obiscode \"0-1:24.1.0\" and attributes\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+    When the bundle request is received\n+    Then the Decouple M-Bus Device By Channel bundle response is \"OK\" without Mbus Device\n+    And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+\n+  Scenario: Decouple M-Bus Device By Channel from unknown E-meter by channel\n+    Given a dlms device\n+      | DeviceIdentification | TESTG102400000001 |\n+      | DeviceType           | SMART_METER_G     |\n+    When the Decouple M-Bus Device By Channel \"1\" from E-meter \"TEST102400unknown\" request is received for an unknown gateway\n+    Then a SOAP fault should have been returned\n+      | Code    |            201 |\n+      | Message | UNKNOWN_DEVICE |\n+\n+  Scenario: Decouple M-Bus Device By Channel on a administratively coupled E-meter, same G-meter as in channel\n+    Given a bundle request\n+      | DeviceIdentification | TEST1024000000001 |\n+    And the bundle request contains a Decouple M-Bus Device By Channel action\n+      | Channel | 1 |\n+    And a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+    And device simulation of \"TEST1024000000001\" with classid 72 obiscode \"0-1:24.1.0\" and attributes\n+      | 5 | unsigned             |        9 |\n+      | 6 | double-long-unsigned | 12056731 |\n+      | 7 | long-unsigned        |    12514 |\n+      | 8 | unsigned             |       66 |\n+      | 9 | unsigned             |        3 |\n+    And a dlms device\n+      | DeviceIdentification           | TESTG102400000001 |\n+      | DeviceType                     | SMART_METER_G     |\n+      | GatewayDeviceIdentification    | TEST1024000000001 |\n+      | Channel                        |                 1 |\n+      | MbusPrimaryAddress             |                 9 |\n+      | MbusIdentificationNumber       |          12056731 |\n+      | MbusManufacturerIdentification | LGB               |\n+      | MbusVersion                    |                66 |\n+      | MbusDeviceTypeIdentification   |                 3 |\n+    When the bundle request is received\n+    Then the Decouple M-Bus Device By Channel bundle response is \"OK\" with Mbus Device \"TESTG102400000001\"\n+    And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+    And the smart meter is decoupled from gateway device in the core database\n+      | DeviceIdentification           | TESTG102400000001 |\n+\n+  Scenario: Decouple M-Bus Device By Channel on a administratively coupled E-meter, different from one in channel\n+    Given a bundle request\n+      | DeviceIdentification | TEST1024000000001 |\n+    And the bundle request contains a Decouple M-Bus Device By Channel action\n+      | Channel | 1 |\n+    And a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+    And device simulation of \"TEST1024000000001\" with classid 72 obiscode \"0-1:24.1.0\" and attributes\n+      | 5 | unsigned             |        9 |\n+      | 6 | double-long-unsigned | 12056731 |\n+      | 7 | long-unsigned        |    12514 |\n+      | 8 | unsigned             |       66 |\n+      | 9 | unsigned             |        3 |\n+    And a dlms device\n+      | DeviceIdentification | TEST1024000000002 |\n+      | DeviceType           | SMART_METER_E     |\n+    And a dlms device\n+      | DeviceIdentification           | TESTG102400000001 |\n+      | DeviceType                     | SMART_METER_G     |\n+      | GatewayDeviceIdentification    | TEST1024000000002 |\n+      | Channel                        |                 1 |\n+      | MbusPrimaryAddress             |                 9 |\n+      | MbusIdentificationNumber       |          12056731 |\n+      | MbusManufacturerIdentification | LGB               |\n+      | MbusVersion                    |                66 |\n+      | MbusDeviceTypeIdentification   |                 3 |\n+    When the bundle request is received\n+    Then the Decouple M-Bus Device By Channel bundle response is \"OK\" with Mbus Device \"TESTG102400000001\"\n+    And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+    And the smart meter is not decoupled from gateway device in the core database\n+      | DeviceIdentification           | TESTG102400000001 |\n+      | GatewayDeviceIdentification    | TEST1024000000002 |\n+      | Channel                        |                 1 |\n+      | MbusPrimaryAddress             |                 9 |"
  },
  {
    "sha": "03c8afa0e9ab86f61bb173a38d08738de8d80bb1",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/installation/DecoupleMBusDevice.feature",
    "status": "modified",
    "additions": 16,
    "deletions": 16,
    "changes": 32,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/installation/DecoupleMBusDevice.feature",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/installation/DecoupleMBusDevice.feature",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/installation/DecoupleMBusDevice.feature?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -3,7 +3,7 @@ Feature: SmartMetering Installation - Decouple M-Bus Device\n   As a grid operator\n   I want to be able to decouple an M-Bus device from a smart meter\n \n-  Scenario: DeCouple G-meter from E-meter\n+  Scenario: Decouple G-meter from E-meter\n     Given a dlms device\n       | DeviceIdentification | TEST1024000000001 |\n       | DeviceType           | SMART_METER_E     |\n@@ -12,31 +12,31 @@ Feature: SmartMetering Installation - Decouple M-Bus Device\n       | DeviceType                  | SMART_METER_G     |\n       | GatewayDeviceIdentification | TEST1024000000001 |\n       | Channel                     |                 1 |\n-    When the DeCouple G-meter \"TESTG102400000001\" from E-meter \"TEST1024000000001\" request is received\n-    Then the DeCouple response is \"OK\"\n-    And the G-meter \"TESTG102400000001\" is DeCoupled from device \"TEST1024000000001\"\n+    When the Decouple G-meter \"TESTG102400000001\" from E-meter \"TEST1024000000001\" request is received\n+    Then the Decouple response is \"OK\"\n+    And the G-meter \"TESTG102400000001\" is Decoupled from device \"TEST1024000000001\"\n     And the channel of device \"TESTG102400000001\" is cleared\n \n-  Scenario: DeCouple unknown G-meter from E-meter\n+  Scenario: Decouple unknown G-meter from E-meter\n     Given a dlms device\n       | DeviceIdentification | TEST1024000000001 |\n       | DeviceType           | SMART_METER_E     |\n-    When the DeCouple G-meter \"TESTunknownDevice\" from E-meter \"TEST1024000000001\" request is received\n-    Then retrieving the DeCouple response results in an exception\n+    When the Decouple G-meter \"TESTunknownDevice\" from E-meter \"TEST1024000000001\" request is received\n+    Then retrieving the Decouple response results in an exception\n     And a SOAP fault should have been returned\n       | Code    |            201 |\n       | Message | UNKNOWN_DEVICE |\n \n-  Scenario: DeCouple G-meter from unknown E-meter\n+  Scenario: Decouple G-meter from unknown E-meter\n     Given a dlms device\n       | DeviceIdentification | TESTG102400000001 |\n       | DeviceType           | SMART_METER_G     |\n-    When the DeCouple G-meter \"TESTG102400000001\" from E-meter \"TEST102400unknown\" request is received for an unknown gateway\n+    When the Decouple G-meter \"TESTG102400000001\" from E-meter \"TEST102400unknown\" request is received for an unknown gateway\n     Then a SOAP fault should have been returned\n       | Code    |            201 |\n       | Message | UNKNOWN_DEVICE |\n \n-  Scenario: DeCouple inactive G-meter from E-meter\n+  Scenario: Decouple inactive G-meter from E-meter\n     Given a dlms device\n       | DeviceIdentification | TEST1024000000001 |\n       | DeviceType           | SMART_METER_E     |\n@@ -46,8 +46,8 @@ Feature: SmartMetering Installation - Decouple M-Bus Device\n       | GatewayDeviceIdentification | TEST1024000000001 |\n       | Channel                     |                 1 |\n       | DeviceLifecycleStatus       | NEW_IN_INVENTORY  |\n-    When the DeCouple G-meter \"TESTG102400000001\" from E-meter \"TEST1024000000001\" request is received\n-    Then retrieving the DeCouple response results in an exception\n+    When the Decouple G-meter \"TESTG102400000001\" from E-meter \"TEST1024000000001\" request is received\n+    Then retrieving the Decouple response results in an exception\n     And a SOAP fault should have been returned\n       | Code    |             207 |\n       | Message | INACTIVE_DEVICE |\n@@ -74,8 +74,8 @@ Feature: SmartMetering Installation - Decouple M-Bus Device\n       | 7 | long-unsigned        |     12514 |\n       | 8 | unsigned             |        66 |\n       | 9 | unsigned             |         3 |\n-    When the DeCouple G-meter \"TESTG101205673117\" from E-meter \"TEST1024000000001\" request is received\n-    Then the DeCouple response is \"OK\"\n+    When the Decouple G-meter \"TESTG101205673117\" from E-meter \"TEST1024000000001\" request is received\n+    Then the Decouple response is \"OK\"\n     And the mbus device \"TESTG101205673117\" is not coupled to the device \"TEST1024000000001\"\n     And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n       | 5 | unsigned             | 0 |\n@@ -104,8 +104,8 @@ Feature: SmartMetering Installation - Decouple M-Bus Device\n       | 7 | long-unsigned        | 0 |\n       | 8 | unsigned             | 0 |\n       | 9 | unsigned             | 0 |\n-    When the DeCouple G-meter \"TESTG101205673117\" from E-meter \"TEST1024000000001\" request is received\n-    Then the DeCouple response is \"OK\"\n+    When the Decouple G-meter \"TESTG101205673117\" from E-meter \"TEST1024000000001\" request is received\n+    Then the Decouple response is \"OK\"\n     And the mbus device \"TESTG101205673117\" is not coupled to the device \"TEST1024000000001\"\n     And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n       | 5 | unsigned             | 0 |"
  },
  {
    "sha": "be6e0fb7605c628324e53c049c7a85b4ab78d33f",
    "filename": "integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/installation/DecoupleMBusDeviceByChannel.feature",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/installation/DecoupleMBusDeviceByChannel.feature",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/installation/DecoupleMBusDeviceByChannel.feature",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/osgp-adapter-ws-smartmetering/installation/DecoupleMBusDeviceByChannel.feature?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,119 @@\n+@SmartMetering @Platform\n+Feature: SmartMetering Installation - Decouple M-Bus Device By Channel\n+  As a grid operator\n+  I want to be able to decouple an M-Bus device by channel to a smart meter\n+\n+  Scenario: Decouple M-Bus Device By Channel on a administratively decoupled E-meter\n+    Given a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+    And device simulation of \"TEST1024000000001\" with classid 72 obiscode \"0-1:24.1.0\" and attributes\n+      | 5 | unsigned             |        9 |\n+      | 6 | double-long-unsigned | 12056731 |\n+      | 7 | long-unsigned        |    12514 |\n+      | 8 | unsigned             |       66 |\n+      | 9 | unsigned             |        3 |\n+    When the Decouple M-Bus Device By Channel \"1\" from E-meter \"TEST1024000000001\" request is received\n+    Then the Decouple M-Bus Device By Channel response is \"OK\" without M-Bus device\n+    And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+\n+  Scenario: Decouple M-Bus Device By Channel on a administratively decoupled E-meter with empty channel\n+    Given a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+    And device simulation of \"TEST1024000000001\" with classid 72 obiscode \"0-1:24.1.0\" and attributes\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+    When the Decouple M-Bus Device By Channel \"1\" from E-meter \"TEST1024000000001\" request is received\n+    Then the Decouple M-Bus Device By Channel response is \"OK\" without M-Bus device\n+    And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+\n+  Scenario: Decouple M-Bus Device By Channel from unknown E-meter by channel\n+    Given a dlms device\n+      | DeviceIdentification | TESTG102400000001 |\n+      | DeviceType           | SMART_METER_G     |\n+    When the Decouple M-Bus Device By Channel \"1\" from E-meter \"TEST102400unknown\" request is received for an unknown gateway\n+    Then a SOAP fault should have been returned\n+      | Code    |            201 |\n+      | Message | UNKNOWN_DEVICE |\n+\n+  Scenario: Decouple M-Bus Device By Channel on a administratively coupled E-meter, same G-meter as in channel\n+    Given a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+    And device simulation of \"TEST1024000000001\" with classid 72 obiscode \"0-1:24.1.0\" and attributes\n+      | 5 | unsigned             |        9 |\n+      | 6 | double-long-unsigned | 12056731 |\n+      | 7 | long-unsigned        |    12514 |\n+      | 8 | unsigned             |       66 |\n+      | 9 | unsigned             |        3 |\n+    And a dlms device\n+      | DeviceIdentification           | TESTG102400000001 |\n+      | DeviceType                     | SMART_METER_G     |\n+      | GatewayDeviceIdentification    | TEST1024000000001 |\n+      | Channel                        |                 1 |\n+      | MbusPrimaryAddress             |                 9 |\n+      | MbusIdentificationNumber       |          12056731 |\n+      | MbusManufacturerIdentification | LGB               |\n+      | MbusVersion                    |                66 |\n+      | MbusDeviceTypeIdentification   |                 3 |\n+    When the Decouple M-Bus Device By Channel \"1\" from E-meter \"TEST1024000000001\" request is received\n+    Then the Decouple M-Bus Device By Channel response is \"OK\" for device \"TESTG102400000001\"\n+    And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+    And the smart meter is decoupled from gateway device in the core database\n+      | DeviceIdentification           | TESTG102400000001 |\n+\n+  Scenario: Decouple M-Bus Device By Channel on a administratively coupled E-meter, different from one in channel\n+    Given a dlms device\n+      | DeviceIdentification | TEST1024000000001 |\n+      | DeviceType           | SMART_METER_E     |\n+    And device simulation of \"TEST1024000000001\" with classid 72 obiscode \"0-1:24.1.0\" and attributes\n+      | 5 | unsigned             |        9 |\n+      | 6 | double-long-unsigned | 12056731 |\n+      | 7 | long-unsigned        |    12514 |\n+      | 8 | unsigned             |       66 |\n+      | 9 | unsigned             |        3 |\n+    And a dlms device\n+      | DeviceIdentification | TEST1024000000002 |\n+      | DeviceType           | SMART_METER_E     |\n+    And a dlms device\n+      | DeviceIdentification           | TESTG102400000001 |\n+      | DeviceType                     | SMART_METER_G     |\n+      | GatewayDeviceIdentification    | TEST1024000000002 |\n+      | Channel                        |                 1 |\n+      | MbusPrimaryAddress             |                 9 |\n+      | MbusIdentificationNumber       |          12056731 |\n+      | MbusManufacturerIdentification | LGB               |\n+      | MbusVersion                    |                66 |\n+      | MbusDeviceTypeIdentification   |                 3 |\n+    When the Decouple M-Bus Device By Channel \"1\" from E-meter \"TEST1024000000001\" request is received\n+    Then the Decouple M-Bus Device By Channel response is \"OK\" for device \"TESTG102400000001\"\n+    And the values for classid 72 obiscode \"0-1:24.1.0\" on device simulator \"TEST1024000000001\" are\n+      | 5 | unsigned             | 0 |\n+      | 6 | double-long-unsigned | 0 |\n+      | 7 | long-unsigned        | 0 |\n+      | 8 | unsigned             | 0 |\n+      | 9 | unsigned             | 0 |\n+    And the smart meter is not decoupled from gateway device in the core database\n+      | DeviceIdentification           | TESTG102400000001 |\n+      | GatewayDeviceIdentification    | TEST1024000000002 |\n+      | Channel                        |                 1 |\n+      | MbusPrimaryAddress             |                 9 |"
  },
  {
    "sha": "82d8327464eec3a2b8e08d2617c50ba0870254e8",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/DeviceSteps.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/DeviceSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/DeviceSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/DeviceSteps.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -197,7 +197,7 @@ public void theDeviceWithIdExists(final String deviceIdentification) throws Thro\n         });\n     }\n \n-    @Then(\"^the G-meter \\\"([^\\\"]*)\\\" is DeCoupled from device \\\"([^\\\"]*)\\\"$\")\n+    @Then(\"^the G-meter \\\"([^\\\"]*)\\\" is Decoupled from device \\\"([^\\\"]*)\\\"$\")\n     public void theGMeterIsDecoupledFromDevice(final String gMeter, final String eMeter) {\n         Wait.until(() -> {\n             final SmartMeter mbusDevice = this.smartMeterRepository.findByDeviceIdentification(gMeter);"
  },
  {
    "sha": "99667c65869e1e33af40b45ae2498505f4d34c8b",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/InstallationMapper.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/InstallationMapper.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/InstallationMapper.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/InstallationMapper.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping;\n+\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters.DecoupleMbusDeviceByChannelResponseConverter;\n+import org.springframework.stereotype.Component;\n+\n+import ma.glasnost.orika.MapperFactory;\n+import ma.glasnost.orika.converter.ConverterFactory;\n+import ma.glasnost.orika.impl.ConfigurableMapper;\n+\n+@Component(value = \"installationMapper\")\n+public class InstallationMapper extends ConfigurableMapper {\n+\n+    @Override\n+    public final void configure(final MapperFactory mapperFactory) {\n+        final ConverterFactory converterFactory = mapperFactory.getConverterFactory();\n+        converterFactory.registerConverter(new DecoupleMbusDeviceByChannelResponseConverter());\n+    }\n+\n+}"
  },
  {
    "sha": "4b2b13c42b35d94bd0938ce8a1ea182858804231",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/DecoupleMbusDeviceByChannelResponseConverter.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/DecoupleMbusDeviceByChannelResponseConverter.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/DecoupleMbusDeviceByChannelResponseConverter.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/DecoupleMbusDeviceByChannelResponseConverter.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n+\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelResponse;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceResponseDto;\n+import org.springframework.stereotype.Component;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+@Component\n+public class DecoupleMbusDeviceByChannelResponseConverter\n+        extends CustomConverter<DecoupleMbusDeviceResponseDto, DecoupleMbusDeviceByChannelResponse> {\n+\n+    @Override\n+    public DecoupleMbusDeviceByChannelResponse convert(final DecoupleMbusDeviceResponseDto source,\n+            final Type<? extends DecoupleMbusDeviceByChannelResponse> type, final MappingContext mappingContext) {\n+\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        return new DecoupleMbusDeviceByChannelResponse(source.getMbusDeviceIdentification(),\n+                source.getChannelElementValues().getChannel());\n+    }\n+}"
  },
  {
    "sha": "842d9d59108116e1df158bce3128335a2d468e7f",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperResponseService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperResponseService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperResponseService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperResponseService.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -17,6 +17,7 @@\n \n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.CommonMapper;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ConfigurationMapper;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.InstallationMapper;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ManagementMapper;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.MonitoringMapper;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.ActionResponse;\n@@ -26,6 +27,7 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.AssociationLnObjectsResponseData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.BundleMessagesResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponse;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EventMessagesResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FaultResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FirmwareVersionResponse;\n@@ -49,6 +51,7 @@\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.AssociationLnObjectsResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.BundleMessagesRequestDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponseDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.EventMessageDataResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.FaultResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.FirmwareVersionResponseDto;\n@@ -90,6 +93,9 @@\n     @Autowired\n     private CommonMapper commonMapper;\n \n+    @Autowired\n+    private InstallationMapper installationMapper;\n+\n     private static final Map<Class<? extends ActionResponseDto>, ConfigurableMapper> classToMapperMap = new HashMap<>();\n     private static final Map<Class<? extends ActionResponseDto>, Class<? extends ActionResponse>> classMap = new HashMap<>();\n \n@@ -114,6 +120,7 @@\n         classMap.put(GetPowerQualityProfileResponseDto.class, GetPowerQualityProfileResponse.class);\n         classMap.put(ActualPowerQualityResponseDto.class, ActualPowerQualityResponse.class);\n         classMap.put(CoupleMbusDeviceByChannelResponseDto.class, CoupleMbusDeviceByChannelResponse.class);\n+        classMap.put(DecoupleMbusDeviceResponseDto.class, DecoupleMbusDeviceByChannelResponse.class);\n         classMap.put(GetMbusEncryptionKeyStatusResponseDto.class, GetMbusEncryptionKeyStatusResponseData.class);\n         classMap.put(GetMbusEncryptionKeyStatusByChannelResponseDto.class,\n                 GetMbusEncryptionKeyStatusByChannelResponseData.class);\n@@ -145,6 +152,7 @@ private void postConstruct() {\n         classToMapperMap.put(GetPowerQualityProfileResponseDto.class, this.monitoringMapper);\n         classToMapperMap.put(ActualPowerQualityResponseDto.class, this.monitoringMapper);\n         classToMapperMap.put(CoupleMbusDeviceByChannelResponseDto.class, this.commonMapper);\n+        classToMapperMap.put(DecoupleMbusDeviceResponseDto.class, this.installationMapper);\n         classToMapperMap.put(GetMbusEncryptionKeyStatusResponseDto.class, this.configurationMapper);\n         classToMapperMap.put(GetMbusEncryptionKeyStatusByChannelResponseDto.class, this.configurationMapper);\n         classToMapperMap.put(SetDeviceLifecycleStatusByChannelResponseDto.class, this.managementMapper);"
  },
  {
    "sha": "ddd129315e2f2b6f182183781b88edb7d383f3fc",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/ActionMapperService.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -34,6 +34,7 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.ClearAlarmRegisterData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DefinableLoadProfileConfigurationData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FindEventsRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GenerateAndReplaceKeysRequestData;\n@@ -76,6 +77,7 @@\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.BundleMessagesRequestDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.ClearAlarmRegisterRequestDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.CoupleMbusDeviceByChannelRequestDataDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.DefinableLoadProfileConfigurationDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.FindEventsRequestDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.GenerateAndReplaceKeysRequestDataDto;\n@@ -177,6 +179,7 @@\n         CLASS_MAP.put(DefinableLoadProfileConfigurationData.class, DefinableLoadProfileConfigurationDto.class);\n         CLASS_MAP.put(SetMbusUserKeyByChannelRequestData.class, SetMbusUserKeyByChannelRequestDataDto.class);\n         CLASS_MAP.put(CoupleMbusDeviceByChannelRequestData.class, CoupleMbusDeviceByChannelRequestDataDto.class);\n+        CLASS_MAP.put(DecoupleMbusDeviceByChannelRequestData.class, DecoupleMbusDeviceDto.class);\n         CLASS_MAP.put(GetMbusEncryptionKeyStatusRequestData.class, GetMbusEncryptionKeyStatusRequestDto.class);\n         CLASS_MAP.put(ClearAlarmRegisterData.class, ClearAlarmRegisterRequestDto.class);\n         CLASS_MAP.put(GetMbusEncryptionKeyStatusByChannelRequestData.class,\n@@ -226,6 +229,7 @@ private void postConstruct() {\n         CLASS_TO_MAPPER_MAP.put(DefinableLoadProfileConfigurationData.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(SetMbusUserKeyByChannelRequestData.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(CoupleMbusDeviceByChannelRequestData.class, this.commonMapper);\n+        CLASS_TO_MAPPER_MAP.put(DecoupleMbusDeviceByChannelRequestData.class, this.commonMapper);\n         CLASS_TO_MAPPER_MAP.put(GetMbusEncryptionKeyStatusRequestData.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(ClearAlarmRegisterData.class, this.monitoringMapper);\n         CLASS_TO_MAPPER_MAP.put(GetMbusEncryptionKeyStatusByChannelRequestData.class, this.configurationMapper);"
  },
  {
    "sha": "266ab539415eedecaa9431ed3450b436cd2b98fd",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/BundleService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/BundleService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/BundleService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/BundleService.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -19,6 +19,7 @@\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.ActionResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.BundleMessagesRequestDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponseDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.EventMessageDataResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.FirmwareVersionResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.SetDeviceLifecycleStatusByChannelResponseDto;\n@@ -134,11 +135,14 @@ private void checkIfAdditionalActionIsNeeded(final DeviceMessageMetadata deviceM\n             if (action instanceof CoupleMbusDeviceByChannelResponseDto) {\n                 this.mBusGatewayService.handleCoupleMbusDeviceByChannelResponse(deviceMessageMetadata,\n                         (CoupleMbusDeviceByChannelResponseDto) action);\n+            } else if (action instanceof DecoupleMbusDeviceResponseDto) {\n+                this.mBusGatewayService.handleDecoupleMbusDeviceResponse(deviceMessageMetadata,\n+                        (DecoupleMbusDeviceResponseDto) action);\n             } else if (action instanceof SetDeviceLifecycleStatusByChannelResponseDto) {\n                 this.managementService\n                         .setDeviceLifecycleStatusByChannel((SetDeviceLifecycleStatusByChannelResponseDto) action);\n             } else if (action instanceof EventMessageDataResponseDto) {\n-                this.eventService.addEventTypeToEvents(deviceMessageMetadata, (EventMessageDataResponseDto)action);\n+                this.eventService.addEventTypeToEvents(deviceMessageMetadata, (EventMessageDataResponseDto) action);\n             } else if (action instanceof FirmwareVersionResponseDto) {\n                 final List<FirmwareVersion> firmwareVersions = this.configurationMapper\n                         .mapAsList(((FirmwareVersionResponseDto) action).getFirmwareVersions(), FirmwareVersion.class);"
  },
  {
    "sha": "0ce895dc71f01e1f66d36a6d7d918d30c9c9eb4f",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/InstallationService.java",
    "status": "modified",
    "additions": 47,
    "deletions": 10,
    "changes": 57,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/InstallationService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/InstallationService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/InstallationService.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -8,7 +8,6 @@\n  */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.services;\n \n-import ma.glasnost.orika.MapperFactory;\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.CommonMapper;\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.core.OsgpCoreRequestMessageSender;\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.ws.WebServiceResponseMessageSender;\n@@ -17,10 +16,12 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceRequestData;\n-import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DeCoupleMbusDeviceRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelResponse;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.SmartMeteringDevice;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponseDto;\n-import org.opensmartgridplatform.dto.valueobjects.smartmetering.DeCoupleMbusDeviceResponseDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.MbusChannelElementsResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.SmartMeteringDeviceDto;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n@@ -36,6 +37,8 @@\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n+import ma.glasnost.orika.MapperFactory;\n+\n @Service(value = \"domainSmartMeteringInstallationService\")\n public class InstallationService {\n \n@@ -114,9 +117,9 @@ public void coupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n     }\n \n     @Transactional(value = \"transactionManager\")\n-    public void deCoupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n-            final DeCoupleMbusDeviceRequestData requestData) throws FunctionalException {\n-        this.mBusGatewayService.deCoupleMbusDevice(deviceMessageMetadata, requestData);\n+    public void decoupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n+            final DecoupleMbusDeviceRequestData requestData) throws FunctionalException {\n+        this.mBusGatewayService.decoupleMbusDevice(deviceMessageMetadata, requestData);\n     }\n \n     @Transactional(value = \"transactionManager\")\n@@ -136,13 +139,47 @@ public void handleCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMes\n     }\n \n     @Transactional(value = \"transactionManager\")\n-    public void handleDeCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n+    public void decoupleMbusDeviceByChannel(final DeviceMessageMetadata deviceMessageMetadata,\n+            final DecoupleMbusDeviceByChannelRequestData requestData) throws FunctionalException {\n+        this.mBusGatewayService.decoupleMbusDeviceByChannel(deviceMessageMetadata, requestData);\n+    }\n+\n+    @Transactional(value = \"transactionManager\")\n+    public void handleDecoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n             final ResponseMessageResultType result, final OsgpException exception,\n-            final DeCoupleMbusDeviceResponseDto deCoupleMbusDeviceResponseDto) throws FunctionalException {\n+            final DecoupleMbusDeviceResponseDto decoupleMbusDeviceResponseDto) throws FunctionalException {\n         if (exception == null) {\n-            this.mBusGatewayService.handleDeCoupleMbusDeviceResponse(deCoupleMbusDeviceResponseDto);\n+            this.mBusGatewayService.handleDecoupleMbusDeviceResponse(deviceMessageMetadata,\n+                    decoupleMbusDeviceResponseDto);\n+        }\n+        this.handleResponse(\"decoupleMbusDevice\", deviceMessageMetadata, result, exception);\n+    }\n+\n+    @Transactional(value = \"transactionManager\")\n+    public void handleDecoupleMbusDeviceByChannelResponse(final DeviceMessageMetadata deviceMessageMetadata,\n+            final ResponseMessageResultType responseMessageResultType, final OsgpException osgpException,\n+            final DecoupleMbusDeviceResponseDto decoupleMbusDeviceResponseDto) throws FunctionalException {\n+\n+        if (osgpException == null) {\n+            this.mBusGatewayService.handleDecoupleMbusDeviceResponse(deviceMessageMetadata,\n+                    decoupleMbusDeviceResponseDto);\n         }\n-        this.handleResponse(\"deCoupleMbusDevice\", deviceMessageMetadata, result, exception);\n+\n+        final DecoupleMbusDeviceByChannelResponse response = new DecoupleMbusDeviceByChannelResponse(\n+                decoupleMbusDeviceResponseDto.getMbusDeviceIdentification(),\n+                decoupleMbusDeviceResponseDto.getChannelElementValues().getChannel());\n+\n+        final ResponseMessage responseMessage = ResponseMessage.newResponseMessageBuilder()\n+                .withCorrelationUid(deviceMessageMetadata.getCorrelationUid())\n+                .withOrganisationIdentification(deviceMessageMetadata.getOrganisationIdentification())\n+                .withDeviceIdentification(deviceMessageMetadata.getDeviceIdentification())\n+                .withResult(responseMessageResultType)\n+                .withOsgpException(osgpException)\n+                .withDataObject(response)\n+                .withMessagePriority(deviceMessageMetadata.getMessagePriority())\n+                .build();\n+\n+        this.webServiceResponseMessageSender.send(responseMessage, deviceMessageMetadata.getMessageType());\n     }\n \n     @Transactional(value = \"transactionManager\")"
  },
  {
    "sha": "c85b9390aae046e1caa605d35bd881696af2e505",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/MBusGatewayService.java",
    "status": "modified",
    "additions": 80,
    "deletions": 30,
    "changes": 110,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/MBusGatewayService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/MBusGatewayService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/services/MBusGatewayService.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -8,21 +8,25 @@\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.services;\n \n import java.util.List;\n+import java.util.Optional;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n import org.opensmartgridplatform.domain.core.entities.SmartMeter;\n import org.opensmartgridplatform.domain.core.exceptions.InactiveDeviceException;\n import org.opensmartgridplatform.domain.core.repositories.SmartMeterRepository;\n import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceRequestData;\n-import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DeCoupleMbusDeviceRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceRequestData;\n import org.opensmartgridplatform.domain.smartmetering.exceptions.MbusChannelNotFoundException;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.ChannelElementValuesDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.CoupleMbusDeviceByChannelRequestDataDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponseDto;\n-import org.opensmartgridplatform.dto.valueobjects.smartmetering.DeCoupleMbusDeviceDto;\n-import org.opensmartgridplatform.dto.valueobjects.smartmetering.DeCoupleMbusDeviceResponseDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceResponseDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.MbusChannelElementsDto;\n import org.opensmartgridplatform.dto.valueobjects.smartmetering.MbusChannelElementsResponseDto;\n import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n@@ -32,19 +36,16 @@\n import org.opensmartgridplatform.shared.infra.jms.DeviceMessageMetadata;\n import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n+@Slf4j\n @Service(value = \"domainSmartMeteringMBusGatewayService\")\n @Transactional(value = \"transactionManager\")\n public class MBusGatewayService {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(MBusGatewayService.class);\n-\n     private static final int MAXIMUM_NUMBER_OF_MBUS_CHANNELS = 4;\n \n     @Autowired\n@@ -78,7 +79,7 @@ public void coupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n         final String deviceIdentification = deviceMessageMetadata.getDeviceIdentification();\n         final String mbusDeviceIdentification = requestData.getMbusDeviceIdentification();\n \n-        LOGGER.debug(\"coupleMbusDevice for organizationIdentification: {} for gateway: {}, m-bus device {} \",\n+        log.debug(\"coupleMbusDevice for organizationIdentification: {} for gateway: {}, m-bus device {} \",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceIdentification, mbusDeviceIdentification);\n \n         try {\n@@ -102,13 +103,13 @@ public void coupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n         }\n     }\n \n-    public void deCoupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n-            final DeCoupleMbusDeviceRequestData requestData) throws FunctionalException {\n+    public void decoupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata,\n+            final DecoupleMbusDeviceRequestData requestData) throws FunctionalException {\n \n         final String deviceIdentification = deviceMessageMetadata.getDeviceIdentification();\n         final String mbusDeviceIdentification = requestData.getMbusDeviceIdentification();\n \n-        LOGGER.debug(\"deCoupleMbusDevice for organizationIdentification: {} for gateway: {}, m-bus device {} \",\n+        log.debug(\"decoupleMbusDevice for organizationIdentification: {} for gateway: {}, m-bus device {} \",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceIdentification, mbusDeviceIdentification);\n \n         final SmartMeter gatewayDevice = this.domainHelperService.findSmartMeter(deviceIdentification);\n@@ -118,23 +119,53 @@ public void deCoupleMbusDevice(final DeviceMessageMetadata deviceMessageMetadata\n \n         // If Mbus device is already decoupled, return response OK, otherwise,\n         // decouple it.\n-        if (this.isMbusDeviceCoupled(mbusDevice)) {\n-            this.installationService.handleResponse(\"deCoupleMbusDevice\", deviceMessageMetadata,\n+        if (!this.isMbusDeviceCoupled(mbusDevice)) {\n+            this.installationService.handleResponse(\"decoupleMbusDevice\", deviceMessageMetadata,\n                     ResponseMessageResultType.OK, null);\n         } else {\n-            final DeCoupleMbusDeviceDto deCoupleMbusDeviceDto = new DeCoupleMbusDeviceDto(mbusDeviceIdentification,\n-                    mbusDevice.getChannel());\n+            final DecoupleMbusDeviceDto decoupleMbusDeviceDto = new DecoupleMbusDeviceDto(mbusDevice.getChannel());\n             final RequestMessage requestMessage = new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n                     deviceMessageMetadata.getOrganisationIdentification(),\n                     deviceMessageMetadata.getDeviceIdentification(), gatewayDevice.getIpAddress(),\n-                    deCoupleMbusDeviceDto);\n+                    decoupleMbusDeviceDto);\n             this.osgpCoreRequestMessageSender.send(requestMessage, deviceMessageMetadata.getMessageType(),\n                     deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n         }\n     }\n \n+    public void decoupleMbusDeviceByChannel(final DeviceMessageMetadata deviceMessageMetadata,\n+            final DecoupleMbusDeviceByChannelRequestData requestData) throws FunctionalException {\n+\n+        final String deviceIdentification = deviceMessageMetadata.getDeviceIdentification();\n+        final SmartMeter gatewayDevice = this.domainHelperService.findSmartMeter(deviceIdentification);\n+\n+        log.debug(\"decoupleMbusDeviceByChannel for organizationIdentification: {} for gateway: {}, channel {} \",\n+                deviceMessageMetadata.getOrganisationIdentification(), deviceIdentification, requestData.getChannel());\n+\n+        final DecoupleMbusDeviceDto decoupleMbusDeviceDto = new DecoupleMbusDeviceDto(requestData.getChannel());\n+        final RequestMessage requestMessage = new RequestMessage(deviceMessageMetadata.getCorrelationUid(),\n+                deviceMessageMetadata.getOrganisationIdentification(), deviceMessageMetadata.getDeviceIdentification(),\n+                gatewayDevice.getIpAddress(), decoupleMbusDeviceDto);\n+        this.osgpCoreRequestMessageSender.send(requestMessage, deviceMessageMetadata.getMessageType(),\n+                deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime());\n+    }\n+\n+    private Optional<SmartMeter> findByMBusIdentificationNumber(final ChannelElementValuesDto channelElementValuesDto) {\n+        final SmartMeter mbusDevice = this.smartMeteringDeviceRepository.findByMBusIdentificationNumber(\n+                Long.valueOf(channelElementValuesDto.getIdentificationNumber()),\n+                channelElementValuesDto.getManufacturerIdentification());\n+\n+        return Optional.ofNullable(mbusDevice);\n+    }\n+    private Optional<SmartMeter> findByGatewayDeviceAndChannel(final Device gatewayDevice, final Short channel) {\n+        final SmartMeter mbusDevice =\n+                this.smartMeteringDeviceRepository.findByGatewayDeviceAndChannel(gatewayDevice, channel);\n+\n+        return Optional.ofNullable(mbusDevice);\n+    }\n+\n     private boolean isMbusDeviceCoupled(final SmartMeter mbusDevice) {\n-        return mbusDevice.getChannel() == null;\n+        return mbusDevice.getChannel() != null;\n     }\n \n     public void handleCoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n@@ -152,7 +183,7 @@ public void coupleMbusDeviceByChannel(final DeviceMessageMetadata deviceMessageM\n \n         final String deviceIdentification = deviceMessageMetadata.getDeviceIdentification();\n \n-        LOGGER.debug(\"getMBusDeviceOnChannel for organizationIdentification: {} for gateway: {}\",\n+        log.debug(\"getMBusDeviceOnChannel for organizationIdentification: {} for gateway: {}\",\n                 deviceMessageMetadata.getOrganisationIdentification(), deviceIdentification);\n \n         final CoupleMbusDeviceByChannelRequestDataDto requestDataDto = new CoupleMbusDeviceByChannelRequestDataDto(\n@@ -221,21 +252,40 @@ private void doCoupleMBusDevice(final SmartMeter gatewayDevice,\n \n     /**\n      * Updates the M-Bus device identified in the input part of the\n-     * {@code deCoupleMbusResponseDto}.\n+     * {@code decoupleMbusResponseDto}.\n      *\n-     * @param deCoupleMbusDeviceResponseDto\n+     * @param deviceMessageMetadata\n+     * @param decoupleMbusDeviceResponseDto\n      * @throws FunctionalException\n      */\n-    public void handleDeCoupleMbusDeviceResponse(final DeCoupleMbusDeviceResponseDto deCoupleMbusDeviceResponseDto)\n-            throws FunctionalException {\n+    public void handleDecoupleMbusDeviceResponse(final DeviceMessageMetadata deviceMessageMetadata,\n+            final DecoupleMbusDeviceResponseDto decoupleMbusDeviceResponseDto) throws FunctionalException {\n+        final Optional<SmartMeter> mbusDeviceOnDeviceChannel = this\n+                .findByMBusIdentificationNumber(decoupleMbusDeviceResponseDto.getChannelElementValues());\n+\n+        if (mbusDeviceOnDeviceChannel.isPresent()) {\n+            // Add the M-Bus device found on the meter to the response\n+            final SmartMeter mbusDevice = mbusDeviceOnDeviceChannel.get();\n+            decoupleMbusDeviceResponseDto.setMbusDeviceIdentification(mbusDevice.getDeviceIdentification());\n+        }\n \n-        final String mbusDeviceIdentification = deCoupleMbusDeviceResponseDto.getmBusDeviceIdentification();\n-        final SmartMeter mbusDevice = this.domainHelperService.findSmartMeter(mbusDeviceIdentification);\n+        // Decouple the M-Bus Device found on gateway device and the channel from the database\n+        final SmartMeter gatewayDevice =\n+                this.domainHelperService.findSmartMeter(deviceMessageMetadata.getDeviceIdentification());\n+        final Short channelInRequest = decoupleMbusDeviceResponseDto.getChannelElementValues().getChannel();\n \n-        mbusDevice.setChannel(null);\n-        mbusDevice.setMbusPrimaryAddress(null);\n-        mbusDevice.updateGatewayDevice(null);\n-        this.smartMeteringDeviceRepository.save(mbusDevice);\n+        final Optional<SmartMeter> optionalMbusDevice = this.findByGatewayDeviceAndChannel(gatewayDevice, channelInRequest);\n+        if (!optionalMbusDevice.isPresent()) {\n+            return;\n+        }\n+\n+        final SmartMeter mbusDevice = optionalMbusDevice.get();\n+        if (mbusDevice.getGatewayDevice() != null) {\n+            mbusDevice.setChannel(null);\n+            mbusDevice.setMbusPrimaryAddress(null);\n+            mbusDevice.updateGatewayDevice(null);\n+            this.smartMeteringDeviceRepository.save(mbusDevice);\n+        }\n     }\n \n     private MbusChannelElementsDto makeMbusChannelElementsDto(final SmartMeter mbusDevice) {\n@@ -305,7 +355,7 @@ private void checkAndHandleIfNoChannelElementValuesFound(final CoupleMbusDeviceB\n      */\n     private void checkAndHandleIfGivenMBusAlreadyCoupled(final SmartMeter mbusDevice) throws FunctionalException {\n         if (mbusDevice.getGatewayDevice() != null) {\n-            LOGGER.info(\"The given M-bus device {} is already coupled to gateway {} on channel {}\",\n+            log.info(\"The given M-bus device {} is already coupled to gateway {} on channel {}\",\n                     mbusDevice.getDeviceIdentification(), mbusDevice.getGatewayDevice().getDeviceIdentification(),\n                     mbusDevice.getChannel());\n \n@@ -332,7 +382,7 @@ private void checkAndHandleIfAllMBusChannelsAreAlreadyOccupied(final SmartMeter\n \n     private void checkAndHandleInactiveMbusDevice(final SmartMeter mbusDevice) throws FunctionalException {\n         if (!mbusDevice.getDeviceLifecycleStatus().equals(DeviceLifecycleStatus.IN_USE)) {\n-            LOGGER.info(\"The given M-bus device {} is inactive\", mbusDevice.getDeviceIdentification());\n+            log.info(\"The given M-bus device {} is inactive\", mbusDevice.getDeviceIdentification());\n \n             throw new FunctionalException(FunctionalExceptionType.INACTIVE_DEVICE, ComponentType.DOMAIN_SMART_METERING,\n                     new InactiveDeviceException(mbusDevice.getDeviceIdentification()));"
  },
  {
    "sha": "573ea314e5898dfce7419a8149a056bf0bbf73c6",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DecoupleMbusDeviceByChannelResponseMessageProcessor.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DecoupleMbusDeviceByChannelResponseMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DecoupleMbusDeviceByChannelResponseMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DecoupleMbusDeviceByChannelResponseMessageProcessor.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.core.messageprocessors;\n+\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.services.InstallationService;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.core.OsgpCoreResponseMessageProcessor;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceResponseDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.DeviceMessageMetadata;\n+import org.opensmartgridplatform.shared.infra.jms.MessageProcessorMap;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DecoupleMbusDeviceByChannelResponseMessageProcessor extends OsgpCoreResponseMessageProcessor {\n+\n+    private InstallationService installationService;\n+\n+    protected DecoupleMbusDeviceByChannelResponseMessageProcessor(\n+            final WebServiceResponseMessageSender responseMessageSender,\n+            @Qualifier(\"domainSmartMeteringInboundOsgpCoreResponsesMessageProcessorMap\") final MessageProcessorMap messageProcessorMap,\n+            final InstallationService installationService) {\n+        super(responseMessageSender, messageProcessorMap, MessageType.DECOUPLE_MBUS_DEVICE_BY_CHANNEL,\n+                ComponentType.DOMAIN_SMART_METERING);\n+        this.installationService = installationService;\n+    }\n+\n+    @Override\n+    protected boolean hasRegularResponseObject(final ResponseMessage responseMessage) {\n+        return responseMessage.getDataObject() instanceof DecoupleMbusDeviceResponseDto;\n+    }\n+\n+    @Override\n+    protected void handleMessage(final DeviceMessageMetadata deviceMessageMetadata,\n+            final ResponseMessage responseMessage, final OsgpException osgpException) throws FunctionalException {\n+        this.installationService.handleDecoupleMbusDeviceByChannelResponse(deviceMessageMetadata,\n+                responseMessage.getResult(), responseMessage.getOsgpException(),\n+                (DecoupleMbusDeviceResponseDto) responseMessage.getDataObject());\n+    }\n+}"
  },
  {
    "sha": "ba7e1a2d68a19899b68a6486eb322f5f8174032b",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DecoupleMbusDeviceResponseMessageProcessor.java",
    "status": "renamed",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DecoupleMbusDeviceResponseMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DecoupleMbusDeviceResponseMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DecoupleMbusDeviceResponseMessageProcessor.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -12,7 +12,7 @@\n import org.opensmartgridplatform.adapter.domain.smartmetering.application.services.InstallationService;\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.core.OsgpCoreResponseMessageProcessor;\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.ws.WebServiceResponseMessageSender;\n-import org.opensmartgridplatform.dto.valueobjects.smartmetering.DeCoupleMbusDeviceResponseDto;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.DecoupleMbusDeviceResponseDto;\n import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n@@ -25,29 +25,29 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class DeCoupleMbusDeviceResponseMessageProcessor extends OsgpCoreResponseMessageProcessor {\n+public class DecoupleMbusDeviceResponseMessageProcessor extends OsgpCoreResponseMessageProcessor {\n \n     @Autowired\n     private InstallationService installationService;\n \n     @Autowired\n-    protected DeCoupleMbusDeviceResponseMessageProcessor(\n+    protected DecoupleMbusDeviceResponseMessageProcessor(\n             WebServiceResponseMessageSender responseMessageSender,\n             @Qualifier(\"domainSmartMeteringInboundOsgpCoreResponsesMessageProcessorMap\") MessageProcessorMap messageProcessorMap) {\n-        super(responseMessageSender, messageProcessorMap, MessageType.DE_COUPLE_MBUS_DEVICE,\n+        super(responseMessageSender, messageProcessorMap, MessageType.DECOUPLE_MBUS_DEVICE,\n                 ComponentType.DOMAIN_SMART_METERING);\n     }\n \n     @Override\n     protected boolean hasRegularResponseObject(final ResponseMessage responseMessage) {\n-        return responseMessage.getDataObject() instanceof DeCoupleMbusDeviceResponseDto;\n+        return responseMessage.getDataObject() instanceof DecoupleMbusDeviceResponseDto;\n     }\n \n     @Override\n     protected void handleMessage(final DeviceMessageMetadata deviceMessageMetadata,\n             final ResponseMessage responseMessage, final OsgpException osgpException) throws FunctionalException {\n \n-        this.installationService.handleDeCoupleMbusDeviceResponse(deviceMessageMetadata, responseMessage.getResult(),\n-                responseMessage.getOsgpException(), (DeCoupleMbusDeviceResponseDto) responseMessage.getDataObject());\n+        this.installationService.handleDecoupleMbusDeviceResponse(deviceMessageMetadata, responseMessage.getResult(),\n+                responseMessage.getOsgpException(), (DecoupleMbusDeviceResponseDto) responseMessage.getDataObject());\n     }\n-}\n\\ No newline at end of file\n+}",
    "previous_filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/core/messageprocessors/DeCoupleMbusDeviceResponseMessageProcessor.java"
  },
  {
    "sha": "543fde3db88bebac2e1ca2c27658d13d461dff0c",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DecoupleMbusDeviceByChannelRequestMessageProcessor.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DecoupleMbusDeviceByChannelRequestMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DecoupleMbusDeviceByChannelRequestMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DecoupleMbusDeviceByChannelRequestMessageProcessor.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,42 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.ws.messageprocessors;\n+\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.services.InstallationService;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.BaseRequestMessageProcessor;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelRequestData;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.DeviceMessageMetadata;\n+import org.opensmartgridplatform.shared.infra.jms.MessageProcessorMap;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DecoupleMbusDeviceByChannelRequestMessageProcessor extends BaseRequestMessageProcessor {\n+\n+    private InstallationService installationService;\n+\n+    protected DecoupleMbusDeviceByChannelRequestMessageProcessor(\n+            @Qualifier(\"domainSmartMeteringInboundWebServiceRequestsMessageProcessorMap\") final MessageProcessorMap messageProcessorMap,\n+            @Qualifier(\"domainSmartMeteringInstallationService\") final InstallationService installationService) {\n+        super(messageProcessorMap, MessageType.DECOUPLE_MBUS_DEVICE_BY_CHANNEL);\n+        this.installationService = installationService;\n+    }\n+\n+    @Override\n+    protected void handleMessage(final DeviceMessageMetadata deviceMessageMetadata, final Object dataObject)\n+            throws FunctionalException {\n+\n+        final DecoupleMbusDeviceByChannelRequestData decoupleMbusDeviceByChannelRequest = (DecoupleMbusDeviceByChannelRequestData) dataObject;\n+\n+        this.installationService.decoupleMbusDeviceByChannel(deviceMessageMetadata, decoupleMbusDeviceByChannelRequest);\n+    }\n+}"
  },
  {
    "sha": "7b927fefe42525928b7e2ada7b680fc35d6f9740",
    "filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DecoupleMbusDeviceRequestMessageProcessor.java",
    "status": "renamed",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DecoupleMbusDeviceRequestMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DecoupleMbusDeviceRequestMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DecoupleMbusDeviceRequestMessageProcessor.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -10,7 +10,7 @@\n \n import org.opensmartgridplatform.adapter.domain.smartmetering.application.services.InstallationService;\n import org.opensmartgridplatform.adapter.domain.smartmetering.infra.jms.BaseRequestMessageProcessor;\n-import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DeCoupleMbusDeviceRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceRequestData;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n import org.opensmartgridplatform.shared.infra.jms.DeviceMessageMetadata;\n import org.opensmartgridplatform.shared.infra.jms.MessageProcessorMap;\n@@ -24,16 +24,16 @@\n  * to decouple a device and a m-bus device\n  */\n @Component\n-public class DeCoupleMbusDeviceRequestMessageProcessor extends BaseRequestMessageProcessor {\n+public class DecoupleMbusDeviceRequestMessageProcessor extends BaseRequestMessageProcessor {\n \n     @Autowired\n     @Qualifier(\"domainSmartMeteringInstallationService\")\n     private InstallationService installationService;\n \n     @Autowired\n-    protected DeCoupleMbusDeviceRequestMessageProcessor(\n+    protected DecoupleMbusDeviceRequestMessageProcessor(\n             @Qualifier(\"domainSmartMeteringInboundWebServiceRequestsMessageProcessorMap\") MessageProcessorMap messageProcessorMap) {\n-        super(messageProcessorMap, MessageType.DE_COUPLE_MBUS_DEVICE);\n+        super(messageProcessorMap, MessageType.DECOUPLE_MBUS_DEVICE);\n     }\n \n     /*\n@@ -46,8 +46,8 @@ protected DeCoupleMbusDeviceRequestMessageProcessor(\n     @Override\n     protected void handleMessage(final DeviceMessageMetadata deviceMessageMetadata, final Object dataObject)\n             throws FunctionalException {\n-        final DeCoupleMbusDeviceRequestData requestData = (DeCoupleMbusDeviceRequestData) dataObject;\n-        this.installationService.deCoupleMbusDevice(deviceMessageMetadata, requestData);\n+        final DecoupleMbusDeviceRequestData requestData = (DecoupleMbusDeviceRequestData) dataObject;\n+        this.installationService.decoupleMbusDevice(deviceMessageMetadata, requestData);\n     }\n \n }",
    "previous_filename": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/infra/jms/ws/messageprocessors/DeCoupleMbusDeviceRequestMessageProcessor.java"
  },
  {
    "sha": "35982e4c61d288628ef6d41483ade1a61a8518d6",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperResponseService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperResponseService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperResponseService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperResponseService.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -45,6 +45,7 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.AssociationLnObjectsResponseData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.BundleMessagesResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelResponse;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EventMessagesResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FaultResponse;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FirmwareVersionResponse;\n@@ -117,6 +118,7 @@ private void postConstruct() {\n         CLASS_TO_MAPPER_MAP.put(GetPowerQualityProfileResponse.class, this.monitoringMapper);\n         CLASS_TO_MAPPER_MAP.put(ActualPowerQualityResponse.class, this.monitoringMapper);\n         CLASS_TO_MAPPER_MAP.put(CoupleMbusDeviceByChannelResponse.class, this.installationMapper);\n+        CLASS_TO_MAPPER_MAP.put(DecoupleMbusDeviceByChannelResponse.class, this.installationMapper);\n         CLASS_TO_MAPPER_MAP.put(GetMbusEncryptionKeyStatusResponseData.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(GetMbusEncryptionKeyStatusByChannelResponseData.class, this.configurationMapper);\n         CLASS_TO_MAPPER_MAP.put(SetDeviceLifecycleStatusByChannelResponseData.class, this.managementMapper);\n@@ -154,6 +156,8 @@ private void postConstruct() {\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.ActualPowerQualityResponse.class);\n         CLASS_MAP.put(CoupleMbusDeviceByChannelResponse.class,\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.CoupleMbusDeviceByChannelResponse.class);\n+        CLASS_MAP.put(DecoupleMbusDeviceByChannelResponse.class,\n+                org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.DecoupleMbusDeviceByChannelResponse.class);\n         CLASS_MAP.put(GetMbusEncryptionKeyStatusResponseData.class, GetMbusEncryptionKeyStatusResponse.class);\n         CLASS_MAP.put(GetMbusEncryptionKeyStatusByChannelResponseData.class,\n                 GetMbusEncryptionKeyStatusByChannelResponse.class);"
  },
  {
    "sha": "6c3c105224611d65230653c562d4277f9377521a",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/ActionMapperService.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -18,6 +18,7 @@\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.ClearAlarmRegisterRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.ConfigureDefinableLoadProfileRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.CoupleMbusDeviceByChannelRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.DecoupleMbusDeviceByChannelRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.FindEventsRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GenerateAndReplaceKeysRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.bundle.GetActualMeterReadsGasRequest;\n@@ -65,6 +66,7 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.ActualPowerQualityRequest;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.AdministrativeStatusTypeData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DefinableLoadProfileConfigurationData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.FindEventsRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.GenerateAndReplaceKeysRequestData;\n@@ -192,6 +194,9 @@\n         CLASS_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceByChannelRequestData.class,\n                 CoupleMbusDeviceByChannelRequestData.class);\n+        CLASS_MAP.put(\n+                org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelRequestData.class,\n+                DecoupleMbusDeviceByChannelRequestData.class);\n         CLASS_MAP.put(org.opensmartgridplatform.adapter.ws.schema.smartmetering.adhoc.ScanMbusChannelsRequestData.class,\n                 ScanMbusChannelsRequestData.class);\n \n@@ -224,6 +229,7 @@\n         CLASS_MAP.put(GenerateAndReplaceKeysRequest.class, GenerateAndReplaceKeysRequestData.class);\n         CLASS_MAP.put(ConfigureDefinableLoadProfileRequest.class, DefinableLoadProfileConfigurationData.class);\n         CLASS_MAP.put(CoupleMbusDeviceByChannelRequest.class, CoupleMbusDeviceByChannelRequestData.class);\n+        CLASS_MAP.put(DecoupleMbusDeviceByChannelRequest.class, DecoupleMbusDeviceByChannelRequestData.class);\n         CLASS_MAP.put(GetMbusEncryptionKeyStatusRequest.class, GetMbusEncryptionKeyStatusRequestData.class);\n         CLASS_MAP.put(SetDeviceLifecycleStatusByChannelRequest.class,\n                 SetDeviceLifecycleStatusByChannelRequestData.class);\n@@ -271,9 +277,13 @@ private void postConstruct() {\n     private void mapInstallationRequestData() {\n \n         CLASS_TO_MAPPER_MAP.put(CoupleMbusDeviceByChannelRequest.class, this.installationMapper);\n+        CLASS_TO_MAPPER_MAP.put(DecoupleMbusDeviceByChannelRequest.class, this.installationMapper);\n         CLASS_TO_MAPPER_MAP.put(\n                 org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceByChannelRequestData.class,\n                 this.installationMapper);\n+        CLASS_TO_MAPPER_MAP.put(\n+                org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelRequestData.class,\n+                this.installationMapper);\n     }\n \n     private void mapAdHocRequestData() {"
  },
  {
    "sha": "c811d4a77d057c250c681a53440b844e64dd76c1",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/InstallationService.java",
    "status": "modified",
    "additions": 72,
    "deletions": 21,
    "changes": 93,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/InstallationService.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/InstallationService.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/services/InstallationService.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -16,24 +16,24 @@\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.AddSmartMeterRequest;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceByChannelRequestData;\n import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CoupleMbusDeviceRequestData;\n-import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DeCoupleMbusDeviceRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceByChannelRequestData;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.DecoupleMbusDeviceRequestData;\n import org.opensmartgridplatform.shared.domain.services.CorrelationIdProviderService;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n import org.opensmartgridplatform.shared.infra.jms.DeviceMessageMetadata;\n import org.opensmartgridplatform.shared.infra.jms.MessageType;\n import org.opensmartgridplatform.shared.validation.Identification;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.springframework.validation.annotation.Validated;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n @Service(value = \"wsSmartMeteringInstallationService\")\n @Validated\n public class InstallationService {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(InstallationService.class);\n-\n     @Autowired\n     private DomainHelperService domainHelperService;\n \n@@ -47,8 +47,8 @@ public String enqueueAddSmartMeterRequest(@Identification final String organisat\n             @Identification final String deviceIdentification, final AddSmartMeterRequest addSmartMeterRequest,\n             final int messagePriority, final Long scheduleTime) {\n \n-        LOGGER.debug(\"enqueueAddSmartMeterRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n+        log.debug(\"enqueueAddSmartMeterRequest called with organisation {} and device {}\", organisationIdentification,\n+                deviceIdentification);\n \n         final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n                 deviceIdentification);\n@@ -57,8 +57,10 @@ public String enqueueAddSmartMeterRequest(@Identification final String organisat\n                 organisationIdentification, correlationUid, MessageType.ADD_METER.name(), messagePriority,\n                 scheduleTime);\n \n-        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder().deviceMessageMetadata(\n-                deviceMessageMetadata).request(addSmartMeterRequest).build();\n+        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder()\n+                .deviceMessageMetadata(deviceMessageMetadata)\n+                .request(addSmartMeterRequest)\n+                .build();\n \n         this.smartMeteringRequestMessageSender.send(message);\n \n@@ -87,7 +89,7 @@ public String enqueueCoupleMbusDeviceRequest(@Identification final String organi\n \n         this.domainHelperService.checkAllowed(organisation, device, DeviceFunction.COUPLE_MBUS_DEVICE);\n \n-        LOGGER.debug(\"enqueueCoupleMbusDeviceRequest called with organisation {}, gateway {} and mbus device {}\",\n+        log.debug(\"enqueueCoupleMbusDeviceRequest called with organisation {}, gateway {} and mbus device {}\",\n                 organisationIdentification, deviceIdentification, mbusDeviceIdentification);\n \n         final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n@@ -97,8 +99,10 @@ public String enqueueCoupleMbusDeviceRequest(@Identification final String organi\n                 organisationIdentification, correlationUid, MessageType.COUPLE_MBUS_DEVICE.name(), messagePriority,\n                 scheduleTime);\n \n-        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder().deviceMessageMetadata(\n-                deviceMessageMetadata).request(new CoupleMbusDeviceRequestData(mbusDeviceIdentification)).build();\n+        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder()\n+                .deviceMessageMetadata(deviceMessageMetadata)\n+                .request(new CoupleMbusDeviceRequestData(mbusDeviceIdentification))\n+                .build();\n \n         final CoupleMbusDeviceRequestData coupleMbusDeviceRequestData = new CoupleMbusDeviceRequestData(\n                 mbusDeviceIdentification);\n@@ -122,26 +126,28 @@ public String enqueueCoupleMbusDeviceRequest(@Identification final String organi\n      *            the time the request should be carried out\n      * @return the correlationUid identifying the operation\n      */\n-    public String enqueueDeCoupleMbusDeviceRequest(@Identification final String organisationIdentification,\n+    public String enqueueDecoupleMbusDeviceRequest(@Identification final String organisationIdentification,\n             @Identification final String deviceIdentification, @Identification final String mbusDeviceIdentification,\n             final int messagePriority, final Long scheduleTime) throws FunctionalException {\n \n         final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n         final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-        this.domainHelperService.checkAllowed(organisation, device, DeviceFunction.DE_COUPLE_MBUS_DEVICE);\n+        this.domainHelperService.checkAllowed(organisation, device, DeviceFunction.DECOUPLE_MBUS_DEVICE);\n \n-        LOGGER.debug(\"enqueueDeCoupleMbusDeviceRequest called with organisation {}, gateway {} and mbus device {}\",\n+        log.debug(\"enqueueDecoupleMbusDeviceRequest called with organisation {}, gateway {} and mbus device {}\",\n                 organisationIdentification, deviceIdentification, mbusDeviceIdentification);\n \n         final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n                 deviceIdentification);\n \n         final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.DE_COUPLE_MBUS_DEVICE.name(), messagePriority,\n+                organisationIdentification, correlationUid, MessageType.DECOUPLE_MBUS_DEVICE.name(), messagePriority,\n                 scheduleTime);\n \n-        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder().deviceMessageMetadata(\n-                deviceMessageMetadata).request(new DeCoupleMbusDeviceRequestData(mbusDeviceIdentification)).build();\n+        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder()\n+                .deviceMessageMetadata(deviceMessageMetadata)\n+                .request(new DecoupleMbusDeviceRequestData(mbusDeviceIdentification))\n+                .build();\n \n         this.smartMeteringRequestMessageSender.send(message);\n \n@@ -168,7 +174,7 @@ public String enqueueCoupleMbusDeviceByChannelRequest(@Identification final Stri\n \n         this.domainHelperService.checkAllowed(organisation, device, DeviceFunction.COUPLE_MBUS_DEVICE_BY_CHANNEL);\n \n-        LOGGER.debug(\"enqueueCoupleMbusDeviceByChannelRequest called with organisation {}, gateway {}\",\n+        log.debug(\"enqueueCoupleMbusDeviceByChannelRequest called with organisation {}, gateway {}\",\n                 organisationIdentification, deviceIdentification);\n \n         final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n@@ -178,8 +184,53 @@ public String enqueueCoupleMbusDeviceByChannelRequest(@Identification final Stri\n                 organisationIdentification, correlationUid, MessageType.COUPLE_MBUS_DEVICE_BY_CHANNEL.name(),\n                 messagePriority, scheduleTime);\n \n-        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder().deviceMessageMetadata(\n-                deviceMessageMetadata).request(new CoupleMbusDeviceByChannelRequestData(channel)).build();\n+        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder()\n+                .deviceMessageMetadata(deviceMessageMetadata)\n+                .request(new CoupleMbusDeviceByChannelRequestData(channel))\n+                .build();\n+\n+        this.smartMeteringRequestMessageSender.send(message);\n+\n+        return correlationUid;\n+    }\n+\n+    /**\n+     * @param organisationIdentification\n+     *            the organisation requesting the coupling of devices\n+     * @param deviceIdentification\n+     *            the identification of the gateway device\n+     * @param messagePriority\n+     *            the priority of the message\n+     * @param scheduleTime\n+     *            the time the request should be carried out\n+     * @param channel\n+     *            the channel on the gateway device that should be cleared\n+     *            (decoupled)\n+     * @return the correlationUid identifying the operation\n+     */\n+    public String enqueueDecoupleMbusDeviceByChannelRequest(@Identification final String organisationIdentification,\n+            @Identification final String deviceIdentification, final int messagePriority, final Long scheduleTime,\n+            final short channel) throws FunctionalException {\n+\n+        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n+        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+        this.domainHelperService.checkAllowed(organisation, device, DeviceFunction.DECOUPLE_MBUS_DEVICE_BY_CHANNEL);\n+\n+        log.debug(\"enqueueDecoupleMbusDeviceByChannelRequest called with organisation {}, gateway {}\",\n+                organisationIdentification, deviceIdentification);\n+\n+        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n+                deviceIdentification);\n+\n+        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n+                organisationIdentification, correlationUid, MessageType.DECOUPLE_MBUS_DEVICE_BY_CHANNEL.name(),\n+                messagePriority, scheduleTime);\n+\n+        final SmartMeteringRequestMessage message = new SmartMeteringRequestMessage.Builder()\n+                .deviceMessageMetadata(deviceMessageMetadata)\n+                .request(new DecoupleMbusDeviceByChannelRequestData(channel))\n+                .build();\n \n         this.smartMeteringRequestMessageSender.send(message);\n "
  },
  {
    "sha": "c5c24f6f2d1d3af889f9da930658cd76da2c0edd",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringInstallationEndpoint.java",
    "status": "modified",
    "additions": 107,
    "deletions": 29,
    "changes": 136,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringInstallationEndpoint.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringInstallationEndpoint.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringInstallationEndpoint.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -27,10 +27,14 @@\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceByChannelResponse;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceRequest;\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.CoupleMbusDeviceResponse;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceAsyncRequest;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceAsyncResponse;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceRequest;\n-import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DeCoupleMbusDeviceResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelAsyncRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelAsyncResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceByChannelResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.smartmetering.installation.DecoupleMbusDeviceResponse;\n import org.opensmartgridplatform.adapter.ws.smartmetering.application.mapping.InstallationMapper;\n import org.opensmartgridplatform.adapter.ws.smartmetering.application.services.InstallationService;\n import org.opensmartgridplatform.domain.core.exceptions.ValidationException;\n@@ -42,18 +46,18 @@\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n import org.opensmartgridplatform.shared.wsheaderattribute.priority.MessagePriorityEnum;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.ws.server.endpoint.annotation.Endpoint;\n import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n @Endpoint\n public class SmartMeteringInstallationEndpoint extends SmartMeteringEndpoint {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(SmartMeteringInstallationEndpoint.class);\n     private static final String SMARTMETER_INSTALLATION_NAMESPACE = \"http://www.opensmartgridplatform.org/schemas/smartmetering/sm-installation/2014/10\";\n \n     @Autowired\n@@ -72,7 +76,7 @@ public AddDeviceAsyncResponse addDevice(@OrganisationIdentification final String\n             @RequestPayload final AddDeviceRequest request, @MessagePriority final String messagePriority,\n             @ScheduleTime final String scheduleTime, @ResponseUrl final String responseUrl) throws OsgpException {\n \n-        LOGGER.info(\"Incoming AddDeviceRequest for meter: {}.\", request.getDevice().getDeviceIdentification());\n+        log.info(\"Incoming AddDeviceRequest for meter: {}.\", request.getDevice().getDeviceIdentification());\n \n         AddDeviceAsyncResponse response = null;\n         try {\n@@ -92,15 +96,15 @@ public AddDeviceAsyncResponse addDevice(@OrganisationIdentification final String\n             this.saveResponseUrlIfNeeded(correlationUid, responseUrl);\n         } catch (final ConstraintViolationException e) {\n \n-            LOGGER.error(\"Exception: {} while adding device: {} for organisation {}.\", e.getMessage(),\n+            log.error(\"Exception: {} while adding device: {} for organisation {}.\", e.getMessage(),\n                     request.getDevice().getDeviceIdentification(), organisationIdentification, e);\n \n             throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n                     new ValidationException(e.getConstraintViolations()));\n \n         } catch (final Exception e) {\n \n-            LOGGER.error(\"Exception: {} while adding device: {} for organisation {}.\", e.getMessage(),\n+            log.error(\"Exception: {} while adding device: {} for organisation {}.\", e.getMessage(),\n                     request.getDevice().getDeviceIdentification(), organisationIdentification, e);\n \n             this.handleException(e);\n@@ -155,7 +159,7 @@ public CoupleMbusDeviceAsyncResponse coupleMbusDevice(\n \n         final String deviceIdentification = request.getDeviceIdentification();\n         final String mbusDeviceIdentification = request.getMbusDeviceIdentification();\n-        LOGGER.info(\"Incoming CoupleMbusDeviceRequest for meter: {} and mbus device {}.\", deviceIdentification,\n+        log.info(\"Incoming CoupleMbusDeviceRequest for meter: {} and mbus device {}.\", deviceIdentification,\n                 mbusDeviceIdentification);\n \n         CoupleMbusDeviceAsyncResponse response = null;\n@@ -171,7 +175,7 @@ public CoupleMbusDeviceAsyncResponse coupleMbusDevice(\n             response.setDeviceIdentification(deviceIdentification);\n             this.saveResponseUrlIfNeeded(correlationUid, responseUrl);\n         } catch (final Exception e) {\n-            LOGGER.error(\"Exception while coupling devices: {} and {} for organisation {}.\", deviceIdentification,\n+            log.error(\"Exception while coupling devices: {} and {} for organisation {}.\", deviceIdentification,\n                     mbusDeviceIdentification, organisationIdentification, e);\n             this.handleException(e);\n         }\n@@ -213,7 +217,7 @@ public CoupleMbusDeviceResponse getCoupleMbusDeviceResponse(\n      * @param organisationIdentification\n      *            the organisation requesting the coupling of devices\n      * @param request\n-     *            the DeCoupleMbusDeviceRequest containing the\n+     *            the DecoupleMbusDeviceRequest containing the\n      *            deviceIdentification, mbusDeviceIdentification and channel\n      * @param messagePriority\n      *            the priority of the message\n@@ -223,23 +227,23 @@ public CoupleMbusDeviceResponse getCoupleMbusDeviceResponse(\n      *         deviceIdentification\n      * @throws OsgpException\n      */\n-    @PayloadRoot(localPart = \"DeCoupleMbusDeviceRequest\", namespace = SMARTMETER_INSTALLATION_NAMESPACE)\n+    @PayloadRoot(localPart = \"DecoupleMbusDeviceRequest\", namespace = SMARTMETER_INSTALLATION_NAMESPACE)\n     @ResponsePayload\n-    public DeCoupleMbusDeviceAsyncResponse deCoupleMbusDevice(\n+    public DecoupleMbusDeviceAsyncResponse decoupleMbusDevice(\n             @OrganisationIdentification final String organisationIdentification,\n-            @RequestPayload final DeCoupleMbusDeviceRequest request, @MessagePriority final String messagePriority,\n+            @RequestPayload final DecoupleMbusDeviceRequest request, @MessagePriority final String messagePriority,\n             @ScheduleTime final String scheduleTime, @ResponseUrl final String responseUrl) throws OsgpException {\n \n         final String deviceIdentification = request.getDeviceIdentification();\n         final String mbusDeviceIdentification = request.getMbusDeviceIdentification();\n-        LOGGER.info(\"Incoming DeCoupleMbusDeviceRequest for meter: {} and mbus device {}.\", deviceIdentification,\n+        log.info(\"Incoming DecoupleMbusDeviceRequest for meter: {} and mbus device {}.\", deviceIdentification,\n                 mbusDeviceIdentification);\n \n-        DeCoupleMbusDeviceAsyncResponse response = null;\n+        DecoupleMbusDeviceAsyncResponse response = null;\n         try {\n-            response = new DeCoupleMbusDeviceAsyncResponse();\n+            response = new DecoupleMbusDeviceAsyncResponse();\n \n-            final String correlationUid = this.installationService.enqueueDeCoupleMbusDeviceRequest(\n+            final String correlationUid = this.installationService.enqueueDecoupleMbusDeviceRequest(\n                     organisationIdentification, deviceIdentification, mbusDeviceIdentification,\n                     MessagePriorityEnum.getMessagePriority(messagePriority),\n                     this.installationMapper.map(scheduleTime, Long.class));\n@@ -249,7 +253,7 @@ public DeCoupleMbusDeviceAsyncResponse deCoupleMbusDevice(\n             this.saveResponseUrlIfNeeded(correlationUid, responseUrl);\n         } catch (final Exception e) {\n \n-            LOGGER.error(\"Exception: {} while decoupling devices: {} and {} for organisation {}.\", e.getMessage(),\n+            log.error(\"Exception: {} while decoupling devices: {} and {} for organisation {}.\", e.getMessage(),\n                     deviceIdentification, mbusDeviceIdentification, organisationIdentification, e);\n \n             this.handleException(e);\n@@ -264,18 +268,18 @@ public DeCoupleMbusDeviceAsyncResponse deCoupleMbusDevice(\n      *         message\n      * @throws OsgpException\n      */\n-    @PayloadRoot(localPart = \"DeCoupleMbusDeviceAsyncRequest\", namespace = SMARTMETER_INSTALLATION_NAMESPACE)\n+    @PayloadRoot(localPart = \"DecoupleMbusDeviceAsyncRequest\", namespace = SMARTMETER_INSTALLATION_NAMESPACE)\n     @ResponsePayload\n-    public DeCoupleMbusDeviceResponse getDeCoupleMbusDeviceResponse(\n-            @RequestPayload final DeCoupleMbusDeviceAsyncRequest request) throws OsgpException {\n+    public DecoupleMbusDeviceResponse getDecoupleMbusDeviceResponse(\n+            @RequestPayload final DecoupleMbusDeviceAsyncRequest request) throws OsgpException {\n \n-        DeCoupleMbusDeviceResponse response = null;\n+        DecoupleMbusDeviceResponse response = null;\n         try {\n-            response = new DeCoupleMbusDeviceResponse();\n+            response = new DecoupleMbusDeviceResponse();\n             final ResponseData responseData = this.responseDataService.dequeue(request.getCorrelationUid(),\n                     ComponentType.WS_SMART_METERING);\n \n-            this.throwExceptionIfResultNotOk(responseData, \"DeCouple Mbus Device\");\n+            this.throwExceptionIfResultNotOk(responseData, \"Decouple Mbus Device\");\n \n             response.setResult(OsgpResultType.fromValue(responseData.getResultType().getValue()));\n             if (responseData.getMessageData() instanceof String) {\n@@ -312,7 +316,7 @@ public CoupleMbusDeviceByChannelAsyncResponse coupleMbusDeviceByChannel(\n \n         final String deviceIdentification = request.getDeviceIdentification();\n         final short channel = request.getCoupleMbusDeviceByChannelRequestData().getChannel();\n-        LOGGER.info(\"Incoming CoupleMbusDeviceByChannelRequest for device: {} and channel {}.\", deviceIdentification,\n+        log.info(\"Incoming CoupleMbusDeviceByChannelRequest for device: {} and channel {}.\", deviceIdentification,\n                 channel);\n \n         CoupleMbusDeviceByChannelAsyncResponse response = null;\n@@ -328,7 +332,7 @@ public CoupleMbusDeviceByChannelAsyncResponse coupleMbusDeviceByChannel(\n             response.setDeviceIdentification(deviceIdentification);\n             this.saveResponseUrlIfNeeded(correlationUid, responseUrl);\n         } catch (final Exception e) {\n-            LOGGER.error(\"Exception while coupling on channel: {} for device: {} for organisation {}.\", channel,\n+            log.error(\"Exception while coupling on channel: {} for device: {} for organisation {}.\", channel,\n                     deviceIdentification, organisationIdentification, e);\n             this.handleException(e);\n         }\n@@ -369,4 +373,78 @@ public CoupleMbusDeviceByChannelResponse getCoupleMbusDeviceByChannelResponse(\n         return response;\n     }\n \n+    /**\n+     * @param organisationIdentification\n+     *            the organization requesting the coupling of devices\n+     * @param request\n+     *            the DecoupleMbusDeviceByChannelRequest containing the\n+     *            gatewayDeviceIdentification and channel\n+     * @param messagePriority\n+     *            the priority of the message\n+     * @param scheduleTime\n+     *            the time the request is scheduled for\n+     * @return a response containing a correlationUid and the\n+     *         deviceIdentification\n+     * @throws OsgpException\n+     */\n+    @PayloadRoot(localPart = \"DecoupleMbusDeviceByChannelRequest\", namespace = SMARTMETER_INSTALLATION_NAMESPACE)\n+    @ResponsePayload\n+    public DecoupleMbusDeviceByChannelAsyncResponse decoupleMbusDeviceByChannel(\n+            @OrganisationIdentification final String organisationIdentification,\n+            @RequestPayload final DecoupleMbusDeviceByChannelRequest request,\n+            @MessagePriority final String messagePriority, @ScheduleTime final String scheduleTime,\n+            @ResponseUrl final String responseUrl) throws OsgpException {\n+\n+        final String deviceIdentification = request.getDeviceIdentification();\n+        final short channel = request.getDecoupleMbusDeviceByChannelRequestData().getChannel();\n+        log.info(\"Incoming DecoupleMbusDeviceByChannelRequest for device: {} and channel {}.\", deviceIdentification,\n+                channel);\n+\n+        DecoupleMbusDeviceByChannelAsyncResponse response = null;\n+        try {\n+            response = new DecoupleMbusDeviceByChannelAsyncResponse();\n+\n+            final String correlationUid = this.installationService.enqueueDecoupleMbusDeviceByChannelRequest(\n+                    organisationIdentification, deviceIdentification,\n+                    MessagePriorityEnum.getMessagePriority(messagePriority),\n+                    this.installationMapper.map(scheduleTime, Long.class), channel);\n+\n+            response.setCorrelationUid(correlationUid);\n+            response.setDeviceIdentification(deviceIdentification);\n+            this.saveResponseUrlIfNeeded(correlationUid, responseUrl);\n+        } catch (final Exception e) {\n+            log.error(\"Exception while cleaning up on channel: {} for device: {} for organisation {}.\", channel,\n+                    deviceIdentification, organisationIdentification, e);\n+            this.handleException(e);\n+        }\n+        return response;\n+    }\n+\n+    /**\n+     * @param request\n+     *            the request message containing the correlationUid\n+     * @return the response message containing the OsgpResultType and optional a\n+     *         message\n+     * @throws OsgpException\n+     */\n+    @PayloadRoot(localPart = \"DecoupleMbusDeviceByChannelAsyncRequest\", namespace = SMARTMETER_INSTALLATION_NAMESPACE)\n+    @ResponsePayload\n+    public DecoupleMbusDeviceByChannelResponse getDecoupleMbusDeviceByChannelResponse(\n+            @RequestPayload final DecoupleMbusDeviceByChannelAsyncRequest request) throws OsgpException {\n+\n+        DecoupleMbusDeviceByChannelResponse response = null;\n+        try {\n+            final ResponseData responseData = this.responseDataService.dequeue(request.getCorrelationUid(),\n+                    ComponentType.WS_SMART_METERING);\n+\n+            this.throwExceptionIfResultNotOk(responseData, \"Decouple Mbus Device By Channel\");\n+\n+            response = this.installationMapper.map(responseData.getMessageData(),\n+                    DecoupleMbusDeviceByChannelResponse.class);\n+\n+        } catch (final Exception e) {\n+            this.handleException(e);\n+        }\n+        return response;\n+    }\n }"
  },
  {
    "sha": "b01d1527213790965e1a15e4f1ab0776c818d526",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/SmartMeteringResponseMessageListener.java",
    "status": "modified",
    "additions": 7,
    "deletions": 10,
    "changes": 17,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/SmartMeteringResponseMessageListener.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/SmartMeteringResponseMessageListener.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/SmartMeteringResponseMessageListener.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -15,17 +15,16 @@\n import org.opensmartgridplatform.adapter.ws.schema.smartmetering.notification.NotificationType;\n import org.opensmartgridplatform.shared.infra.jms.MessageProcessor;\n import org.opensmartgridplatform.shared.infra.jms.MessageProcessorMap;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n @Component(value = \"wsSmartMeteringInboundDomainResponsesMessageListener\")\n public class SmartMeteringResponseMessageListener implements MessageListener {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(SmartMeteringResponseMessageListener.class);\n-\n     @Autowired\n     @Qualifier(value = \"wsSmartMeteringInboundDomainResponsesMessageProcessorMap\")\n     private MessageProcessorMap domainResponseMessageProcessorMap;\n@@ -37,19 +36,17 @@ public SmartMeteringResponseMessageListener() {\n     @Override\n     public void onMessage(final Message message) {\n         try {\n-            LOGGER.info(\"Received message of type: {}\", message.getJMSType());\n-\n-            LOGGER.info(\"Received message of type: {}\", message.getJMSType());\n+            log.info(\"Received message of type: {}\", message.getJMSType());\n \n             final String messageType = message.getJMSType();\n             final ObjectMessage objectMessage = (ObjectMessage) message;\n             final String correlationUid = objectMessage.getJMSCorrelationID();\n-            LOGGER.info(\"objectMessage CorrelationUID: {}\", correlationUid);\n+            log.info(\"objectMessage CorrelationUID: {}\", correlationUid);\n \n             // Temporary if instead of message processor.\n             if (messageType.equals(NotificationType.FIND_EVENTS.toString())) {\n                 // Save the events to the database.\n-                LOGGER.info(\"Saving events for FIND_EVENTS\");\n+                log.info(\"Saving events for FIND_EVENTS\");\n \n             }\n \n@@ -59,7 +56,7 @@ public void onMessage(final Message message) {\n             processor.processMessage(objectMessage);\n \n         } catch (final JMSException ex) {\n-            LOGGER.error(\"Exception: {} \", ex.getMessage(), ex);\n+            log.error(\"Exception: {} \", ex.getMessage(), ex);\n         }\n     }\n }"
  },
  {
    "sha": "852034619d717b3e5c0e3e42dd926c1e67ce9fbb",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DecoupleMbusDeviceByChannelResponseMessageProcessor.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DecoupleMbusDeviceByChannelResponseMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DecoupleMbusDeviceByChannelResponseMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DecoupleMbusDeviceByChannelResponseMessageProcessor.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.smartmetering.infra.jms.messageprocessor;\n+\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DecoupleMbusDeviceByChannelResponseMessageProcessor extends DomainResponseMessageProcessor {\n+\n+    protected DecoupleMbusDeviceByChannelResponseMessageProcessor() {\n+        super(MessageType.DECOUPLE_MBUS_DEVICE_BY_CHANNEL);\n+    }\n+}"
  },
  {
    "sha": "49753bfde7e880a3c0d189dc4e1181dc8df7d044",
    "filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DecoupleMbusDeviceResponseMessageProcessor.java",
    "status": "renamed",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DecoupleMbusDeviceResponseMessageProcessor.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DecoupleMbusDeviceResponseMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DecoupleMbusDeviceResponseMessageProcessor.java?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -15,10 +15,10 @@\n  * Class for processing smart metering decouple mbus device response messages\n  */\n @Component\n-public class DeCoupleMbusDeviceResponseMessageProcessor extends DomainResponseMessageProcessor {\n+public class DecoupleMbusDeviceResponseMessageProcessor extends DomainResponseMessageProcessor {\n \n-    protected DeCoupleMbusDeviceResponseMessageProcessor() {\n-        super(MessageType.DE_COUPLE_MBUS_DEVICE);\n+    protected DecoupleMbusDeviceResponseMessageProcessor() {\n+        super(MessageType.DECOUPLE_MBUS_DEVICE);\n     }\n \n }",
    "previous_filename": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/infra/jms/messageprocessor/DeCoupleMbusDeviceResponseMessageProcessor.java"
  },
  {
    "sha": "1e141eeba6f04c8e911a3772df44122274994495",
    "filename": "osgp/platform/osgp-core/src/main/resources/db/migration/V20210226155113221__Added_device_function_mapping_CleanUpMbus.sql",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-core/src/main/resources/db/migration/V20210226155113221__Added_device_function_mapping_CleanUpMbus.sql",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48/osgp/platform/osgp-core/src/main/resources/db/migration/V20210226155113221__Added_device_function_mapping_CleanUpMbus.sql",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/osgp/platform/osgp-core/src/main/resources/db/migration/V20210226155113221__Added_device_function_mapping_CleanUpMbus.sql?ref=51b1438e32d2f05afa7b5bd0fe0774aebc1dcd48",
    "patch": "@@ -0,0 +1,14 @@\n+DO\n+$$\n+BEGIN\n+\n+    IF EXISTS (SELECT 1 FROM device_function_mapping WHERE \"function\" = 'DE_COUPLE_MBUS_DEVICE') THEN\n+        UPDATE device_function_mapping SET \"function\" = 'DECOUPLE_MBUS_DEVICE' WHERE \"function\" = 'DE_COUPLE_MBUS_DEVICE';\n+    END IF;\n+    IF NOT EXISTS (SELECT 1 FROM device_function_mapping WHERE \"function\" = 'DECOUPLE_MBUS_DEVICE_BY_CHANNEL') THEN\n+        insert into device_function_mapping (function_group, \"function\") values ('OWNER', 'DECOUPLE_MBUS_DEVICE_BY_CHANNEL');\n+    END IF;\n+\n+\n+END;\n+$$"
  }
]
