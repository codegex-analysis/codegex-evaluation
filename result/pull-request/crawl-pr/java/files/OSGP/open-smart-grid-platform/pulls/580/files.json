[
  {
    "sha": "04b8562b9f217d7286fceef89cd8c0dceb412291",
    "filename": "integration-tests/cucumber-tests-core/src/test/java/org/opensmartgridplatform/cucumber/core/Wait.java",
    "status": "modified",
    "additions": 13,
    "deletions": 4,
    "changes": 17,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-core/src/test/java/org/opensmartgridplatform/cucumber/core/Wait.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-core/src/test/java/org/opensmartgridplatform/cucumber/core/Wait.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-core/src/test/java/org/opensmartgridplatform/cucumber/core/Wait.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -93,15 +93,24 @@ public Wait(final CoreApplicationConfiguration configuration) {\n         return response;\n     }\n \n-    public static <T> void until(final Runnable task) {\n+    public static void until(final Runnable task) {\n+        until(task, configuration.getTimeout());\n+    }\n+\n+    public static void until(final Runnable task, final int timeoutSeconds) {\n+        until(task, timeoutSeconds, configuration.getSleepTime());\n+    }\n+\n+    public static void until(final Runnable task, final int timeoutSeconds, final int sleeptimeMillis) {\n+\n         final Logger logger = LoggerFactory.getLogger(Wait.class);\n \n         boolean success = false;\n         final Instant startInstant = Instant.now();\n-        final Instant timeoutInstant = startInstant.plusSeconds(configuration.getTimeout());\n+        final Instant timeoutInstant = startInstant.plusSeconds(timeoutSeconds);\n         while (!success) {\n             if (Instant.now().isAfter(timeoutInstant)) {\n-                Assertions.fail(\"Timeout after [\" + configuration.getTimeout() + \"] seconds.\");\n+                Assertions.fail(\"Timeout after [\" + timeoutSeconds + \"] seconds.\");\n             }\n \n             try {\n@@ -125,7 +134,7 @@ public Wait(final CoreApplicationConfiguration configuration) {\n             logger.info(\"... polling in Wait.until (\" + Duration.between(startInstant, Instant.now()).getSeconds()\n                     + \" seconds) ...\");\n             try {\n-                TimeUnit.MILLISECONDS.sleep(configuration.getSleepTime());\n+                TimeUnit.MILLISECONDS.sleep(sleeptimeMillis);\n             } catch (final Exception ex) {\n                 handleException(logger, ex);\n             }"
  },
  {
    "sha": "4ce17918843d5d7c717f49f7fc4d8e76c07efd85",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/pom.xml",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/pom.xml",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/pom.xml?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -124,6 +124,11 @@\n       <artifactId>cucumber-tests-platform-common</artifactId>\n       <type>test-jar</type>\n     </dependency>\n+    <dependency>\n+      <groupId>org.opensmartgridplatform</groupId>\n+      <artifactId>cucumber-tests-protocol-iec60870</artifactId>\n+      <type>test-jar</type>\n+    </dependency>\n     <dependency>\n       <groupId>org.opensmartgridplatform</groupId>\n       <artifactId>osgp-adapter-kafka-distributionautomation</artifactId>"
  },
  {
    "sha": "e5007dad637598edb7acdcfc5752e00fe57249e1",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/AcceptanceTests.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/AcceptanceTests.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/AcceptanceTests.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/AcceptanceTests.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -21,7 +21,8 @@\n         tags = { \"not @Skip\", \"not @NightlyBuildOnly\" },\n         glue = { \"classpath:org.opensmartgridplatform.cucumber.platform.glue\",\n                 \"classpath:org.opensmartgridplatform.cucumber.platform.common.glue\",\n-                \"classpath:org.opensmartgridplatform.cucumber.platform.distributionautomation.glue\" },\n+                \"classpath:org.opensmartgridplatform.cucumber.platform.distributionautomation.glue\",\n+                \"classpath:org.opensmartgridplatform.cucumber.protocol.iec60870.glue\" },\n         plugin = { \"pretty\", \"html:target/output/Cucumber-report\", \"html:target/output/Cucumber-html-report.html\",\n                 \"json:target/output/cucumber.json\" },\n         snippets = SnippetType.CAMELCASE,"
  },
  {
    "sha": "d45c85afe1ab03e2b47e2c8bae79ca6c5ff6786c",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/PlatformDistributionAutomationDefaults.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/PlatformDistributionAutomationDefaults.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/PlatformDistributionAutomationDefaults.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/PlatformDistributionAutomationDefaults.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -13,13 +13,11 @@\n \n public class PlatformDistributionAutomationDefaults {\n \n-    public static final Integer COMMON_ADDRESS = 1511;\n     public static final String FEEDER_NAME = \"feeder-1\";\n     public static final Integer FEEDER_NUMBER = 1;\n     public static final String MQTT_HOST = \"0.0.0.0\";\n     public static final Integer MQTT_PORT = 8883;\n     public static final String MQTT_QOS = \"EXACTLY_ONCE\";\n-    public static final Integer PORT = 2404;\n     public static final String PROFILE = \"default_controlled_station\";\n     public static final String SUBSTATION_IDENTIFICATION = \"sub-1\";\n     public static final String SUBSTATION_NAME = \"substation-1\";"
  },
  {
    "sha": "689345b701596c11fc0d0f8a3ef2d8c80c1646ff",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/PlatformDistributionAutomationKeys.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/PlatformDistributionAutomationKeys.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/PlatformDistributionAutomationKeys.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/PlatformDistributionAutomationKeys.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -13,7 +13,6 @@\n \n     public static final String BAY_IDENTIFICATION = \"bay identification\";\n     public static final String BAY_POSITION = \"bay position\";\n-    public static final String COMMON_ADDRESS = \"CommonAddress\";\n     public static final String DESCRIPTION = \"description\";\n     public static final String FEEDER_NUMBER = \"feeder number\";\n     public static final String FEEDER_NAME = \"feeder name\";\n@@ -29,7 +28,6 @@\n     public static final String MQTT_TOPIC = \"MqttTopic\";\n     public static final String NUMBER_OF_ELEMENTS = \"numberOfElements\";\n     public static final String PAYLOAD = \"payload\";\n-    public static final String PORT = \"Port\";\n     public static final String PROFILE = \"Profile\";\n     public static final String SUBSTATION_IDENTIFICATION = \"substation identification\";\n     public static final String SUBSTATION_NAME = \"substation name\";"
  },
  {
    "sha": "45116502d60eab62181d466839699674f9536415",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/config/PlatformDistributionAutomationConfiguration.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/config/PlatformDistributionAutomationConfiguration.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/config/PlatformDistributionAutomationConfiguration.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/config/PlatformDistributionAutomationConfiguration.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -8,10 +8,13 @@\n package org.opensmartgridplatform.cucumber.platform.distributionautomation.config;\n \n import org.opensmartgridplatform.cucumber.platform.config.AbstractPlatformApplicationConfiguration;\n+import org.opensmartgridplatform.cucumber.protocol.iec60870.config.Iec60870Config;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.PropertySource;\n \n @Configuration\n+@Import(Iec60870Config.class)\n @PropertySource(\"classpath:cucumber-tests-platform-distributionautomation.properties\")\n @PropertySource(value = \"file:/etc/osp/test/global-cucumber.properties\", ignoreResourceNotFound = true)\n @PropertySource(value = \"file:/etc/osp/test/cucumber-tests-platform-distributionautomation.properties\","
  },
  {
    "sha": "0b216e1da2bd155b5b225e102e23aaa9b9ee86a4",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/database/Database.java",
    "status": "modified",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/database/Database.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/database/Database.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/database/Database.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -11,7 +11,6 @@\n import java.util.List;\n \n import org.opensmartgridplatform.adapter.kafka.da.domain.repositories.LocationRepository;\n-import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n import org.opensmartgridplatform.adapter.protocol.mqtt.domain.repositories.MqttDeviceRepository;\n import org.opensmartgridplatform.adapter.ws.domain.entities.NotificationWebServiceConfiguration;\n import org.opensmartgridplatform.adapter.ws.domain.repositories.NotificationWebServiceConfigurationRepository;\n@@ -24,9 +23,6 @@\n @Component\n public class Database {\n \n-    @Autowired\n-    private Iec60870DeviceRepository iec60870DeviceRepository;\n-\n     @Autowired\n     private MqttDeviceRepository mqttDeviceRepository;\n \n@@ -62,9 +58,6 @@ private void insertDefaultData() {\n     public void prepareDatabaseForScenario() {\n         // Removes all test related data from the various databases\n \n-        // Remove from osgp_adapter_protocol_iec60870\n-        this.iec60870DeviceRepository.deleteAll();\n-\n         // Remove from osgp_adapter_protocol_mqtt\n         this.mqttDeviceRepository.deleteAll();\n "
  },
  {
    "sha": "cc69def3e2ffdbb2941642426748941c6f3b0c62",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/ProcessImageSteps.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/ProcessImageSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/ProcessImageSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/ProcessImageSteps.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -15,7 +15,7 @@\n import java.util.Map;\n \n import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n-import org.opensmartgridplatform.cucumber.platform.distributionautomation.mocks.iec60870.Iec60870MockServer;\n+import org.opensmartgridplatform.cucumber.protocol.iec60870.mock.Iec60870MockServer;\n import org.opensmartgridplatform.iec60870.Iec60870InformationObjectType;\n import org.springframework.beans.factory.annotation.Autowired;\n "
  },
  {
    "sha": "5939c71516facb06d9e0bb7855d767837aaa5547",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/ReceiveMeasurementReportSteps.java",
    "status": "modified",
    "additions": 0,
    "deletions": 31,
    "changes": 31,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/ReceiveMeasurementReportSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/ReceiveMeasurementReportSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/ReceiveMeasurementReportSteps.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -11,11 +11,9 @@\n import static org.opensmartgridplatform.cucumber.platform.distributionautomation.PlatformDistributionAutomationKeys.INFORMATION_ELEMENT_VALUE;\n import static org.opensmartgridplatform.cucumber.platform.distributionautomation.PlatformDistributionAutomationKeys.INFORMATION_OBJECT_ADDRESS;\n import static org.opensmartgridplatform.cucumber.platform.distributionautomation.PlatformDistributionAutomationKeys.INFORMATION_OBJECT_TYPE;\n-import static org.opensmartgridplatform.cucumber.platform.distributionautomation.PlatformDistributionAutomationKeys.PROFILE;\n \n import java.util.Map;\n \n-import org.openmuc.j60870.ASduType;\n import org.opensmartgridplatform.adapter.ws.schema.distributionautomation.generic.BitmaskMeasurementElement;\n import org.opensmartgridplatform.adapter.ws.schema.distributionautomation.generic.FloatMeasurementElement;\n import org.opensmartgridplatform.adapter.ws.schema.distributionautomation.generic.GetHealthStatusAsyncResponse;\n@@ -25,16 +23,9 @@\n import org.opensmartgridplatform.adapter.ws.schema.distributionautomation.generic.MeasurementGroup;\n import org.opensmartgridplatform.adapter.ws.schema.distributionautomation.notification.Notification;\n import org.opensmartgridplatform.adapter.ws.schema.distributionautomation.notification.NotificationType;\n-import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n-import org.opensmartgridplatform.cucumber.platform.distributionautomation.mocks.iec60870.Iec60870MockServer;\n import org.opensmartgridplatform.cucumber.platform.distributionautomation.support.ws.distributionautomation.DistributionAutomationDeviceManagementClient;\n-import org.opensmartgridplatform.iec60870.Iec60870AsduHandler;\n import org.opensmartgridplatform.iec60870.Iec60870InformationObjectType;\n import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n-import org.opensmartgridplatform.simulator.protocol.iec60870.domain.Iec60870AsduFactory;\n-import org.opensmartgridplatform.simulator.protocol.iec60870.domain.profile.DefaultControlledStationAsduFactory;\n-import org.opensmartgridplatform.simulator.protocol.iec60870.domain.profile.LightMeasurementDeviceAsduFactory;\n-import org.opensmartgridplatform.simulator.protocol.iec60870.server.handlers.Iec60870InterrogationCommandAsduHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -49,18 +40,12 @@\n     @Autowired\n     private DistributionAutomationDeviceManagementClient client;\n \n-    @Autowired\n-    private Iec60870MockServer mockServer;\n-\n     @When(\"^Organization (.+) connects to device (.+)$\")\n     public void iRequestTheHealthStatus(final String organizationIdentification, final String deviceIdentification)\n             throws WebServiceSecurityException {\n         // There's no \"connect\" method yet. As a workaround, connect to the\n         // device by requesting its health status.\n \n-        // Ensure the mocked device returns an ASDU\n-        this.mockServer.addIec60870ASduHandler(ASduType.C_IC_NA_1, this.getInterrogationCommandASduHandler());\n-\n         final GetHealthStatusRequest request = new GetHealthStatusRequest();\n         request.setDeviceIdentification(deviceIdentification);\n \n@@ -69,22 +54,6 @@ public void iRequestTheHealthStatus(final String organizationIdentification, fin\n                 response.getAsyncResponse().getCorrelationUid());\n     }\n \n-    private Iec60870AsduHandler getInterrogationCommandASduHandler() {\n-        final Iec60870AsduFactory iec60870AsduFactory = this.getAsduFactory();\n-\n-        iec60870AsduFactory.setIec60870Server(this.mockServer.getRtuSimulator());\n-\n-        return new Iec60870InterrogationCommandAsduHandler(iec60870AsduFactory);\n-    }\n-\n-    private Iec60870AsduFactory getAsduFactory() {\n-        final String profile = (String) ScenarioContext.current().get(PROFILE);\n-        if (\"light_measurement_device\".equals(profile)) {\n-            return new LightMeasurementDeviceAsduFactory();\n-        }\n-        return new DefaultControlledStationAsduFactory();\n-    }\n-\n     @Then(\"^I receive a measurement report for device (.+)$\")\n     public void iReceiveAMeasurementReportForDevice(final String deviceIdentification)\n             throws WebServiceSecurityException {"
  },
  {
    "sha": "3acda497ab5aeefee4f40a66f5ad5a7e1f556f3d",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/database/Iec60870DeviceSteps.java",
    "status": "modified",
    "additions": 5,
    "deletions": 22,
    "changes": 27,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/database/Iec60870DeviceSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/database/Iec60870DeviceSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/database/Iec60870DeviceSteps.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -7,25 +7,21 @@\n  */\n package org.opensmartgridplatform.cucumber.platform.distributionautomation.glue.steps.database;\n \n-import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getInteger;\n-import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n-\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n \n-import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n-import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n import org.opensmartgridplatform.cucumber.platform.PlatformDefaults;\n import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n import org.opensmartgridplatform.cucumber.platform.distributionautomation.PlatformDistributionAutomationDefaults;\n import org.opensmartgridplatform.cucumber.platform.distributionautomation.PlatformDistributionAutomationKeys;\n-import org.opensmartgridplatform.cucumber.platform.distributionautomation.config.Iec60870MockServerConfig;\n import org.opensmartgridplatform.cucumber.platform.glue.steps.database.core.RtuDeviceSteps;\n+import org.opensmartgridplatform.cucumber.platform.helpers.DeviceType;\n import org.opensmartgridplatform.cucumber.platform.helpers.SettingsHelper;\n+import org.opensmartgridplatform.cucumber.protocol.iec60870.config.Iec60870MockServerConfig;\n+import org.opensmartgridplatform.cucumber.protocol.iec60870.database.Iec60870Database;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n \n import io.cucumber.java.en.Given;\n \n@@ -51,7 +47,7 @@\n     }\n \n     @Autowired\n-    private Iec60870DeviceRepository iec60870DeviceRepository;\n+    private Iec60870Database iec60870Database;\n \n     @Autowired\n     private RtuDeviceSteps rtuDeviceSteps;\n@@ -68,9 +64,6 @@ public void anIec60870Rtu(final Map<String, String> settings) {\n         ScenarioContext.current()\n                 .put(PlatformKeys.KEY_DEVICE_IDENTIFICATION, PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION);\n         final Map<String, String> rtuSettings = SettingsHelper.addAsDefaults(settings, RTU_60870_DEFAULT_SETTINGS);\n-        ScenarioContext.current()\n-                .put(PlatformDistributionAutomationKeys.PROFILE,\n-                        rtuSettings.get(PlatformDistributionAutomationKeys.PROFILE));\n \n         rtuSettings.put(PlatformKeys.KEY_NETWORKADDRESS, this.mockServerConfig.iec60870MockNetworkAddress());\n \n@@ -81,17 +74,7 @@ public void anIec60870Rtu(final Map<String, String> settings) {\n         this.createIec60870Device(rtuSettings);\n     }\n \n-    @Transactional(\"txMgrIec60870\")\n     private void createIec60870Device(final Map<String, String> settings) {\n-\n-        final Iec60870Device iec60870Device = new Iec60870Device(getString(settings,\n-                PlatformKeys.KEY_DEVICE_IDENTIFICATION, PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION));\n-\n-        iec60870Device.setCommonAddress(getInteger(settings, PlatformDistributionAutomationKeys.COMMON_ADDRESS,\n-                PlatformDistributionAutomationDefaults.COMMON_ADDRESS));\n-        iec60870Device.setPort(getInteger(settings, PlatformDistributionAutomationKeys.PORT,\n-                PlatformDistributionAutomationDefaults.PORT));\n-\n-        this.iec60870DeviceRepository.save(iec60870Device);\n+        this.iec60870Database.addIec60870Device(DeviceType.DISTRIBUTION_AUTOMATION_DEVICE, settings);\n     }\n }"
  },
  {
    "sha": "173ff62070cebd9878eea1ef3bc053addcba86b6",
    "filename": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/resources/features/osgp-adapter-ws-distributionautomation/ReceiveMeasurementReports.feature",
    "status": "modified",
    "additions": 2,
    "deletions": 21,
    "changes": 23,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/resources/features/osgp-adapter-ws-distributionautomation/ReceiveMeasurementReports.feature",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-distributionautomation/src/test/resources/features/osgp-adapter-ws-distributionautomation/ReceiveMeasurementReports.feature",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-distributionautomation/src/test/resources/features/osgp-adapter-ws-distributionautomation/ReceiveMeasurementReports.feature?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -4,22 +4,19 @@ Feature: DistributionAutomation Receive measurement reports\n   I want to receive measurement reports from an IEC 60870 device\n   So I get updates about the current state of the device\n \n+  @Iec60870MockServerDefaultControlledStation\n   Scenario: Connect to an IEC 60870 device\n     Given an IEC 60870 RTU\n       | DeviceIdentification | TEST1024000000001 |\n       | Status               | Active            |\n-      | Port                 |             62404 |\n-      | CommonAddress        |                75 |\n     When Organization test-org connects to device TEST1024000000001\n     Then I receive a measurement report for device TEST1024000000001\n \n+  @Iec60870MockServerDefaultControlledStation\n   Scenario: Update process image of default controlled station\n     Given an IEC 60870 RTU\n       | DeviceIdentification | TEST1024000000002          |\n       | Status               | Active                     |\n-      | Port                 |                      62404 |\n-      | CommonAddress        |                         75 |\n-      | Profile              | default_controlled_station |\n     When Organization test-org connects to device TEST1024000000002\n     And I update the information object\n       | InformationObjectAddress |            2 |\n@@ -30,19 +27,3 @@ Feature: DistributionAutomation Receive measurement reports\n       | InformationObjectType    | IeShortFloat |\n       | InformationElementValue  |         10.0 |\n \n-  Scenario: Update process image of light measurement device\n-    Given an IEC 60870 RTU\n-      | DeviceIdentification | TEST1024000000001        |\n-      | Status               | Active                   |\n-      | Port                 |                    62404 |\n-      | CommonAddress        |                       75 |\n-      | Profile              | light_measurement_device |\n-    When Organization test-org connects to device TEST1024000000001\n-    And I update the information object\n-      | InformationObjectAddress |                        2 |\n-      | InformationObjectType    | IeSinglePointWithQuality |\n-      | InformationElementValue  | true                     |\n-    Then I get a measurement report for device TEST1024000000001 with values\n-      | InformationObjectAddress |                        2 |\n-      | InformationObjectType    | IeSinglePointWithQuality |\n-      | InformationElementValue  | true                     |"
  },
  {
    "sha": "a2bf147394ab6314acf19abb776b867075953485",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/pom.xml",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/pom.xml",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/pom.xml",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/pom.xml?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -116,7 +116,6 @@\n     <dependency>\n       <groupId>org.projectlombok</groupId>\n       <artifactId>lombok</artifactId>\n-      <version>${lombok.version}</version>\n       <scope>test</scope>\n     </dependency>\n \n@@ -140,12 +139,22 @@\n       <artifactId>cucumber-tests-platform-common</artifactId>\n       <type>test-jar</type>\n     </dependency>\n+    <dependency>\n+      <groupId>org.opensmartgridplatform</groupId>\n+      <artifactId>cucumber-tests-protocol-iec60870</artifactId>\n+      <type>test-jar</type>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.opensmartgridplatform</groupId>\n       <artifactId>osgp-protocol-adapter-oslp-elster</artifactId>\n       <classifier>classes</classifier>\n     </dependency>\n+    <dependency>\n+      <groupId>org.opensmartgridplatform</groupId>\n+      <artifactId>osgp-protocol-adapter-iec60870</artifactId>\n+      <classifier>classes</classifier>\n+    </dependency>\n     <dependency>\n       <groupId>org.opensmartgridplatform</groupId>\n       <artifactId>osgp-adapter-ws-publiclighting</artifactId>"
  },
  {
    "sha": "8966c8a63e0537cca55c4d56b8769b447442a24e",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/AcceptanceTests.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/AcceptanceTests.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/AcceptanceTests.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/AcceptanceTests.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -20,7 +20,8 @@\n         tags = { \"not @Skip\", \"not @NightlyBuildOnly\" },\n         glue = { \"classpath:org.opensmartgridplatform.cucumber.platform.glue\",\n                 \"classpath:org.opensmartgridplatform.cucumber.platform.common.glue\",\n-                \"classpath:org.opensmartgridplatform.cucumber.platform.publiclighting.glue\" },\n+                \"classpath:org.opensmartgridplatform.cucumber.platform.publiclighting.glue\",\n+                \"classpath:org.opensmartgridplatform.cucumber.protocol.iec60870.glue\" },\n         plugin = { \"pretty\", \"html:target/output/Cucumber-report\", \"html:target/output/Cucumber-html-report.html\",\n                 \"json:target/output/cucumber.json\" },\n         snippets = SnippetType.CAMELCASE,"
  },
  {
    "sha": "92e66bd3337dd33076a6fdf2fcc61aa02edd6c04",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/config/PublicLightingConfiguration.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/config/PublicLightingConfiguration.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/config/PublicLightingConfiguration.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/config/PublicLightingConfiguration.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -8,13 +8,17 @@\n package org.opensmartgridplatform.cucumber.platform.publiclighting.config;\n \n import org.opensmartgridplatform.cucumber.platform.config.AbstractPlatformApplicationConfiguration;\n+import org.opensmartgridplatform.cucumber.protocol.iec60870.config.Iec60870Config;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.PropertySource;\n \n @Configuration\n+@Import(Iec60870Config.class)\n @PropertySource(\"classpath:cucumber-tests-platform-publiclighting.properties\")\n @PropertySource(value = \"file:/etc/osp/test/global-cucumber.properties\", ignoreResourceNotFound = true)\n-@PropertySource(value = \"file:/etc/osp/test/cucumber-tests-platform-publiclighting.properties\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:/etc/osp/test/cucumber-tests-platform-publiclighting.properties\",\n+        ignoreResourceNotFound = true)\n public class PublicLightingConfiguration extends AbstractPlatformApplicationConfiguration {\n \n }"
  },
  {
    "sha": "3064f89ba8b4c4be8adfbba83cd5a5ec60e4942e",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/database/OslpDatabase.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/database/OslpDatabase.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/database/OslpDatabase.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/database/OslpDatabase.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -29,10 +29,10 @@ public void prepareDatabaseForScenario() {\n     }\n \n     public boolean isOslpDeviceTableEmpty() {\n-        return this.oslpDeviceRepository.findAll().size() == 0;\n+        return this.oslpDeviceRepository.count() == 0;\n     }\n \n     public boolean isPendingSetScheduleRequestEmpty() {\n-        return this.pendingSetScheduleRequestRepository.findAll().size() == 0;\n+        return this.pendingSetScheduleRequestRepository.count() == 0;\n     }\n }"
  },
  {
    "sha": "06356fbf80cf4ec7dfdef32340d26df503bf2d91",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/DeviceFactory.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/DeviceFactory.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/DeviceFactory.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/DeviceFactory.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.domain;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+import org.opensmartgridplatform.cucumber.platform.helpers.DeviceType;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol;\n+import org.opensmartgridplatform.cucumber.platform.publiclighting.domain.platform.PlatformDeviceFactory;\n+import org.opensmartgridplatform.cucumber.platform.publiclighting.domain.protocol.ProtocolDeviceFactory;\n+import org.opensmartgridplatform.shared.domain.entities.AbstractEntity;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DeviceFactory implements InitializingBean {\n+\n+    @Autowired\n+    private PlatformDeviceFactory platformDeviceFactory;\n+\n+    @Autowired\n+    private ProtocolDeviceFactory protocolDeviceFactory;\n+\n+    private final Map<DeviceType, BiFunction<Protocol, Map<String, String>, Collection<AbstractEntity>>> deviceFactoryMap = new HashMap<>();\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        this.deviceFactoryMap.put(DeviceType.LIGHT_MEASUREMENT_DEVICE, this::createLightMeasurementDevice);\n+        this.deviceFactoryMap.put(DeviceType.LIGHT_MEASUREMENT_RTU, this::createLightMeasurementRtu);\n+    }\n+\n+    public Collection<AbstractEntity> createDevice(final DeviceType deviceType, final Protocol protocol,\n+            final Map<String, String> settings) {\n+        if (this.deviceFactoryMap.containsKey(deviceType)) {\n+            return this.deviceFactoryMap.get(deviceType).apply(protocol, settings);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unsupported DeviceType: \" + deviceType);\n+        }\n+    }\n+\n+    private Collection<AbstractEntity> createLightMeasurementDevice(final Protocol protocol,\n+            final Map<String, String> settings) {\n+        return Arrays.asList(\n+                this.platformDeviceFactory.createPlatformDevice(DeviceType.LIGHT_MEASUREMENT_DEVICE, protocol,\n+                        settings),\n+                this.protocolDeviceFactory.createProtocolDevice(DeviceType.LIGHT_MEASUREMENT_DEVICE, protocol,\n+                        settings));\n+    }\n+\n+    private Collection<AbstractEntity> createLightMeasurementRtu(final Protocol protocol,\n+            final Map<String, String> settings) {\n+        return Arrays.asList(\n+                this.platformDeviceFactory.createPlatformDevice(DeviceType.LIGHT_MEASUREMENT_RTU, protocol, settings),\n+                this.protocolDeviceFactory.createProtocolDevice(DeviceType.LIGHT_MEASUREMENT_RTU, protocol, settings));\n+    }\n+}"
  },
  {
    "sha": "cb99d3c3b96027a6921f059c2d23cab319139b81",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/AbstractPlatformDeviceCreator.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/AbstractPlatformDeviceCreator.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/AbstractPlatformDeviceCreator.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/AbstractPlatformDeviceCreator.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.domain.platform;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+\n+import org.junit.platform.commons.util.StringUtils;\n+import org.openqa.selenium.InvalidArgumentException;\n+import org.opensmartgridplatform.cucumber.core.ReadSettingsHelper;\n+import org.opensmartgridplatform.cucumber.platform.PlatformDefaults;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.DeviceAuthorization;\n+import org.opensmartgridplatform.domain.core.entities.DomainInfo;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.ProtocolInfo;\n+import org.opensmartgridplatform.domain.core.repositories.DeviceAuthorizationRepository;\n+import org.opensmartgridplatform.domain.core.repositories.DeviceRepository;\n+import org.opensmartgridplatform.domain.core.repositories.DomainInfoRepository;\n+import org.opensmartgridplatform.domain.core.repositories.OrganisationRepository;\n+import org.opensmartgridplatform.domain.core.repositories.ProtocolInfoRepository;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceFunctionGroup;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractPlatformDeviceCreator<T extends Device> implements PlatformDeviceCreator<T> {\n+\n+    @Autowired\n+    private DeviceRepository deviceRepository;\n+\n+    @Autowired\n+    private OrganisationRepository organisationRepository;\n+\n+    @Autowired\n+    private DeviceAuthorizationRepository deviceAuthorizationRepository;\n+\n+    @Autowired\n+    private ProtocolInfoRepository protocolInfoRepository;\n+\n+    @Autowired\n+    private DomainInfoRepository domainInfoRepository;\n+\n+    protected InetAddress networkAddress(final Map<String, String> settings) {\n+        try {\n+            return InetAddress.getByName(ReadSettingsHelper.getNullOrNonEmptyString(settings,\n+                    PlatformKeys.KEY_NETWORKADDRESS, PlatformDefaults.DEFAULT_NETWORK_ADDRESS));\n+        } catch (final UnknownHostException e) {\n+            throw new InvalidArgumentException(\"Invalid hostname\");\n+        }\n+    }\n+\n+    protected String deviceIdentification(final Map<String, String> settings) {\n+        return ReadSettingsHelper.getString(settings, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+                PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION);\n+    }\n+\n+    protected DeviceLifecycleStatus deviceLifecycleStatus(final Map<String, String> settings) {\n+        return ReadSettingsHelper.getEnum(settings, PlatformKeys.KEY_DEVICE_LIFECYCLE_STATUS,\n+                DeviceLifecycleStatus.class, PlatformDefaults.DEFAULT_DEVICE_LIFECYCLE_STATUS);\n+    }\n+\n+    protected boolean activated(final Map<String, String> settings) {\n+        return ReadSettingsHelper.getBoolean(settings, PlatformKeys.KEY_ACTIVATED, PlatformDefaults.DEFAULT_ACTIVATED);\n+    }\n+\n+    protected ProtocolInfo protocolInfo(final Protocol protocol) {\n+        return this.protocolInfoRepository.findByProtocolAndProtocolVersion(protocol.getProtocol(),\n+                protocol.getVersion());\n+    }\n+\n+    protected DomainInfo domainInfo() {\n+        return this.domainInfoRepository.findByDomainAndDomainVersion(\"PUBLIC_LIGHTING\", \"1.0\");\n+    }\n+\n+    protected Device gatewayDevice(final Map<String, String> settings) {\n+        final String gatewayDeviceIdentification = ReadSettingsHelper.getString(settings,\n+                PlatformKeys.KEY_GATEWAY_DEVICE_ID, null);\n+        if (StringUtils.isNotBlank(gatewayDeviceIdentification)) {\n+            return this.deviceRepository.findByDeviceIdentification(gatewayDeviceIdentification);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    protected Organisation ownerOrganisation() {\n+        return this.organisationRepository\n+                .findByOrganisationIdentification(PlatformDefaults.DEFAULT_ORGANIZATION_IDENTIFICATION);\n+    }\n+\n+    protected DeviceAuthorization addDeviceAuthorization(final Device device) {\n+        DeviceAuthorization deviceAuthorization = device.addAuthorization(this.ownerOrganisation(),\n+                DeviceFunctionGroup.OWNER);\n+        deviceAuthorization = this.deviceAuthorizationRepository.save(deviceAuthorization);\n+        return deviceAuthorization;\n+    }\n+\n+}"
  },
  {
    "sha": "964014cc62cdf50857e9ccea9d7caa3cfdef9bcf",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/LightMeasurementRtuDeviceCreator.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/LightMeasurementRtuDeviceCreator.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/LightMeasurementRtuDeviceCreator.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/LightMeasurementRtuDeviceCreator.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.domain.platform;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.cucumber.platform.helpers.DeviceType;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol;\n+import org.opensmartgridplatform.domain.core.entities.RtuDevice;\n+import org.opensmartgridplatform.domain.core.repositories.RtuDeviceRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class LightMeasurementRtuDeviceCreator extends AbstractPlatformDeviceCreator<RtuDevice> {\n+\n+    @Autowired\n+    private RtuDeviceRepository rtuDeviceRepository;\n+\n+    @Override\n+    public RtuDevice apply(final Protocol protocol, final Map<String, String> settings) {\n+        RtuDevice device = new RtuDevice(this.deviceIdentification(settings));\n+        device.setDeviceType(DeviceType.LIGHT_MEASUREMENT_RTU.getPlatformDeviceType());\n+        device.setNetworkAddress(this.networkAddress(settings));\n+        device.setDeviceLifecycleStatus(this.deviceLifecycleStatus(settings));\n+        device.setActivated(this.activated(settings));\n+        device.updateProtocol(this.protocolInfo(protocol));\n+        device.setDomainInfo(this.domainInfo());\n+\n+        device = this.rtuDeviceRepository.save(device);\n+\n+        this.addDeviceAuthorization(device);\n+\n+        return device;\n+    }\n+}"
  },
  {
    "sha": "704d0258a1632aa644208abb93f70f1dd19390a3",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/LmdDeviceCreator.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/LmdDeviceCreator.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/LmdDeviceCreator.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/LmdDeviceCreator.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.domain.platform;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.cucumber.platform.helpers.DeviceType;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol;\n+import org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice;\n+import org.opensmartgridplatform.domain.core.repositories.LightMeasurementDeviceRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class LmdDeviceCreator extends AbstractPlatformDeviceCreator<LightMeasurementDevice> {\n+\n+    @Autowired\n+    private LightMeasurementDeviceRepository lmdRepository;\n+\n+    @Override\n+    public LightMeasurementDevice apply(final Protocol protocol, final Map<String, String> settings) {\n+        LightMeasurementDevice device = new LightMeasurementDevice(this.deviceIdentification(settings));\n+        device.setDeviceType(DeviceType.LIGHT_MEASUREMENT_DEVICE.getPlatformDeviceType());\n+        device.updateGatewayDevice(this.gatewayDevice(settings));\n+        device.setDeviceLifecycleStatus(this.deviceLifecycleStatus(settings));\n+        device.setActivated(this.activated(settings));\n+        device.updateProtocol(this.protocolInfo(protocol));\n+\n+        device = this.lmdRepository.save(device);\n+\n+        this.addDeviceAuthorization(device);\n+\n+        return device;\n+    }\n+\n+}"
  },
  {
    "sha": "e3361c10f9522789dcf85cb2cbc5b7c817dc8479",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/PlatformDeviceCreator.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/PlatformDeviceCreator.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/PlatformDeviceCreator.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/PlatformDeviceCreator.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.domain.platform;\n+\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+\n+@FunctionalInterface\n+public interface PlatformDeviceCreator<T extends Device> extends BiFunction<Protocol, Map<String, String>, T> {\n+\n+}"
  },
  {
    "sha": "c78588754ce2ce923d24c41a1217a3d5013235ef",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/PlatformDeviceFactory.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/PlatformDeviceFactory.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/PlatformDeviceFactory.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/platform/PlatformDeviceFactory.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.domain.platform;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.cucumber.platform.helpers.DeviceType;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PlatformDeviceFactory implements InitializingBean {\n+\n+    @Autowired\n+    private LmdDeviceCreator lmdCreator;\n+\n+    @Autowired\n+    private LightMeasurementRtuDeviceCreator lmgCreator;\n+\n+    private final Map<DeviceType, PlatformDeviceCreator<? extends Device>> factoryMap = new HashMap<>();\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        this.factoryMap.put(DeviceType.LIGHT_MEASUREMENT_DEVICE, this.lmdCreator);\n+        this.factoryMap.put(DeviceType.LIGHT_MEASUREMENT_RTU, this.lmgCreator);\n+    }\n+\n+    public Device createPlatformDevice(final DeviceType deviceType, final Protocol protocol,\n+            final Map<String, String> settings) {\n+\n+        if (this.factoryMap.containsKey(deviceType)) {\n+            return this.factoryMap.get(deviceType).apply(protocol, settings);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unsupported DeviceType: \" + deviceType);\n+        }\n+    }\n+}"
  },
  {
    "sha": "ad1e47352f2134dbf5413a0258d90518fe530828",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/protocol/ProtocolDeviceFactory.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/protocol/ProtocolDeviceFactory.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/protocol/ProtocolDeviceFactory.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/domain/protocol/ProtocolDeviceFactory.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.domain.protocol;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.cucumber.platform.helpers.DeviceType;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol.ProtocolType;\n+import org.opensmartgridplatform.cucumber.protocol.iec60870.database.Iec60870Database;\n+import org.opensmartgridplatform.shared.domain.entities.AbstractEntity;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ProtocolDeviceFactory implements InitializingBean {\n+\n+    @Autowired\n+    private Iec60870Database iec60870Database;\n+\n+    private final Map<ProtocolType, BiFunction<DeviceType, Map<String, String>, AbstractEntity>> factoryMap = new HashMap<>();\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        this.factoryMap.put(ProtocolType.IEC60870, this::createIec60870Device);\n+    }\n+\n+    public AbstractEntity createProtocolDevice(final DeviceType deviceType, final Protocol protocol,\n+            final Map<String, String> settings) {\n+\n+        final ProtocolType protocolType = protocol.getType();\n+\n+        if (this.factoryMap.containsKey(protocolType)) {\n+            return this.factoryMap.get(protocolType).apply(deviceType, settings);\n+        } else {\n+            throw new UnsupportedOperationException(\"Unsupported protocol: \" + protocol);\n+        }\n+    }\n+\n+    private Iec60870Device createIec60870Device(final DeviceType deviceType, final Map<String, String> settings) {\n+        return this.iec60870Database.addIec60870Device(deviceType, settings);\n+    }\n+}"
  },
  {
    "sha": "d1b9a0a3b76040a51707c9339ec013eededba572",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/hooks/ScenarioHooks.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/hooks/ScenarioHooks.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/hooks/ScenarioHooks.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/hooks/ScenarioHooks.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -59,7 +59,8 @@ public void beforeScenario() {\n \n         this.oslpDatabase.prepareDatabaseForScenario();\n         if (!this.oslpDatabase.isOslpDeviceTableEmpty() || !this.oslpDatabase.isPendingSetScheduleRequestEmpty()) {\n-            LOGGER.warn(\"OSLP device table or the 'pending set schedule request' table is not empty after inital delete! Trying once more...\");\n+            LOGGER.warn(\n+                    \"OSLP device table or the 'pending set schedule request' table is not empty after inital delete! Trying once more...\");\n             this.oslpDatabase.prepareDatabaseForScenario();\n         }\n "
  },
  {
    "sha": "f51284a5458ba7f4ae22731fdaf01501031a8cb2",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/DeviceSteps.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/DeviceSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/DeviceSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/DeviceSteps.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.glue.steps;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.cucumber.platform.helpers.DeviceType;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol;\n+import org.opensmartgridplatform.cucumber.platform.helpers.Protocol.ProtocolType;\n+import org.opensmartgridplatform.cucumber.platform.helpers.ProtocolHelper;\n+import org.opensmartgridplatform.cucumber.platform.publiclighting.domain.DeviceFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.util.StringUtils;\n+\n+import io.cucumber.java.ParameterType;\n+import io.cucumber.java.en.Given;\n+\n+public class DeviceSteps {\n+\n+    @Autowired\n+    private DeviceFactory deviceFactory;\n+\n+    @ParameterType(\"light measurement device|light measurement RTU\")\n+    public DeviceType deviceType(final String deviceType) {\n+        return DeviceType.valueOf(StringUtils.replace(deviceType, \" \", \"_\").toUpperCase());\n+    }\n+\n+    @ParameterType(\".*\")\n+    public Protocol protocol(final String protocolName) {\n+        return ProtocolHelper.getProtocol(ProtocolType.valueOf(protocolName));\n+    }\n+\n+    @Given(\"a(n) {deviceType}( device) using {protocol} protocol\")\n+    public void givenADeviceUsingProtocol(final DeviceType deviceType, final Protocol protocol,\n+            final Map<String, String> parameters) {\n+        this.deviceFactory.createDevice(deviceType, protocol, parameters);\n+    }\n+}"
  },
  {
    "sha": "bd3ee4e12102708118f6644ae02203ed9da614d9",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/LightMeasurementSteps.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/LightMeasurementSteps.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/LightMeasurementSteps.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/LightMeasurementSteps.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.glue.steps;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.cucumber.core.ReadSettingsHelper;\n+import org.opensmartgridplatform.cucumber.core.Wait;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.cucumber.platform.database.core.EventSpecifications;\n+import org.opensmartgridplatform.cucumber.platform.database.logging.DeviceLogItemSpecifications;\n+import org.opensmartgridplatform.cucumber.protocol.iec60870.mock.Iec60870MockServer;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.repositories.EventRepository;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.opensmartgridplatform.iec60870.Iec60870InformationObjectType;\n+import org.opensmartgridplatform.logging.domain.entities.DeviceLogItem;\n+import org.opensmartgridplatform.logging.domain.repositories.DeviceLogItemSlicingRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class LightMeasurementSteps {\n+\n+    private static final String GI_TERMINATION_MESSAGE = \"ASDU Type: 100, C_IC_NA_1, \"\n+            + \"Interrogation command\\nCause of transmission: ACTIVATION_TERMINATION\";\n+\n+    private static final String EVENT_MESSAGE = \"ASDU Type: 30, M_SP_TB_1, \"\n+            + \"Single-point information with time tag CP56Time2a\\nCause of transmission: SPONTANEOUS\";\n+\n+    private static final String KEY_DEVICE_IDENTIFICATION = PlatformKeys.KEY_DEVICE_IDENTIFICATION;\n+    private static final String KEY_INFORMATION_OBJECT_ADDRESS = \"InformationObjectAddress\";\n+    private static final String KEY_SINGLE_POINT_INFORMATION = \"SinglePointInformation\";\n+    private static final String KEY_LIGHTMEASUREMENT_EVENT = \"LightMeasurementEvent\";\n+\n+    @Autowired\n+    private DeviceLogItemSlicingRepository deviceLogItemRepository;\n+\n+    @Autowired\n+    private EventRepository eventRepository;\n+\n+    @Autowired\n+    private Iec60870MockServer iec60870MockServer;\n+\n+    @Given(\"an existing connection with the RTU\")\n+    public void givenAnExistingConnectionWithTheRTU(final Map<String, String> parameters) {\n+\n+        final String deviceIdentification = getDeviceIdentification(parameters);\n+\n+        this.waitForIec60870Connection(deviceIdentification);\n+    }\n+\n+    @When(\"the RTU sends a light measurement event\")\n+    public void whenTheRtuSendsALightMeasurementEvent(final Map<String, String> parameters) {\n+\n+        final int informationObjectAddress = getInformationObjectAddress(parameters);\n+        final boolean singlePointInformation = getSinglePointInformation(parameters);\n+\n+        this.iec60870MockServer.getRtuSimulator()\n+                .updateInformationObject(informationObjectAddress,\n+                        Iec60870InformationObjectType.SINGLE_POINT_INFORMATION_WITH_QUALITY, singlePointInformation);\n+    }\n+\n+    @Then(\"the device message for the light measurement event should be logged\")\n+    public void theDeviceMessageForTheLightMeasurementEventShouldBeLogged(final Map<String, String> parameters) {\n+\n+        final String deviceIdentification = getDeviceIdentification(parameters);\n+\n+        final Specification<DeviceLogItem> specification = DeviceLogItemSpecifications\n+                .hasDeviceIdentification(deviceIdentification)\n+                .and(DeviceLogItemSpecifications.hasDecodedMessageContaining(EVENT_MESSAGE));\n+\n+        this.verifyDeviceLogItemCreated(specification);\n+    }\n+\n+    @Then(\"the light measurement event should be logged\")\n+    public void theLightMeasurementEventShouldBeLogged(final Map<String, String> parameters) {\n+\n+        final String deviceIdentification = getDeviceIdentification(parameters);\n+        final EventType eventType = getEventType(parameters);\n+\n+        final Specification<Event> specification = EventSpecifications.isFromDevice(deviceIdentification)\n+                .and(EventSpecifications.hasEventType(eventType));\n+\n+        this.verifyEventCreated(specification);\n+    }\n+\n+    private void waitForIec60870Connection(final String deviceIdentification) {\n+\n+        final Specification<DeviceLogItem> specification = DeviceLogItemSpecifications\n+                .hasDeviceIdentification(deviceIdentification)\n+                .and(DeviceLogItemSpecifications.hasDecodedMessageContaining(GI_TERMINATION_MESSAGE));\n+\n+        final Runnable task = () -> assertThat(this.deviceLogItemRepository.findAll(specification)).isNotEmpty();\n+        Wait.until(task, 90, 5000);\n+    }\n+\n+    private void verifyDeviceLogItemCreated(final Specification<DeviceLogItem> deviceLogItemSpecification) {\n+\n+        Wait.until(() -> assertThat(this.deviceLogItemRepository.findAll(deviceLogItemSpecification)).isNotEmpty());\n+    }\n+\n+    private void verifyEventCreated(final Specification<Event> eventSpecification) {\n+\n+        Wait.until(() -> assertThat(this.eventRepository.findAll(eventSpecification)).isNotEmpty());\n+    }\n+\n+    private static String getDeviceIdentification(final Map<String, String> parameters) {\n+        return ReadSettingsHelper.getString(parameters, KEY_DEVICE_IDENTIFICATION);\n+    }\n+\n+    private static int getInformationObjectAddress(final Map<String, String> parameters) {\n+        return ReadSettingsHelper.getInteger(parameters, KEY_INFORMATION_OBJECT_ADDRESS);\n+    }\n+\n+    private static boolean getSinglePointInformation(final Map<String, String> parameters) {\n+        return ReadSettingsHelper.getBoolean(parameters, KEY_SINGLE_POINT_INFORMATION);\n+    }\n+\n+    private static EventType getEventType(final Map<String, String> parameters) {\n+        final String event = ReadSettingsHelper.getString(parameters, KEY_LIGHTMEASUREMENT_EVENT).toUpperCase();\n+        switch (event) {\n+        case \"DARK\":\n+            return EventType.LIGHT_SENSOR_REPORTS_DARK;\n+        case \"LIGHT\":\n+            return EventType.LIGHT_SENSOR_REPORTS_LIGHT;\n+        default:\n+            throw new UnsupportedOperationException(\"Unsupported value for mapping event to EventType: \" + event);\n+        }\n+    }\n+}"
  },
  {
    "sha": "f40699b59f69692fabb375b8fb90cb5ea7d2bee3",
    "filename": "integration-tests/cucumber-tests-platform-publiclighting/src/test/resources/features/publiclighting/light-measurements/LightMeasurements.feature",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/resources/features/publiclighting/light-measurements/LightMeasurements.feature",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform-publiclighting/src/test/resources/features/publiclighting/light-measurements/LightMeasurements.feature",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform-publiclighting/src/test/resources/features/publiclighting/light-measurements/LightMeasurements.feature?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,36 @@\n+@PublicLighting @Platform @LightMeasurement\n+Feature: Light Measurement using IEC-60870 device\n+  As a grid operator\n+  I want to receive light measurement events\n+  So that I can switch public lighting based on light measurements\n+\n+  @OslpMockServer @Iec60870MockServerLightMeasurement\n+  Scenario Outline: Switch public lighting upon receiving a light measurement event\n+    Given a light measurement RTU using IEC60870 protocol\n+      | DeviceIdentification | <RTU> |\n+    And a light measurement device using IEC60870 protocol\n+      | DeviceIdentification        | <LMD> |\n+      | GatewayDeviceIdentification | <RTU> |\n+      | InformationObjectAddress    | <IOA> |\n+    And an ssld oslp device\n+      | DeviceIdentification                 | <SSLD>     |\n+      | LightMeasurementDeviceIdentification | <LMD>      |\n+      | TechnicalInstallationDate            | 2020-01-01 |\n+    And the device returns a set transition response \"OK\" over \"OSLP ELSTER\"\n+    And an existing connection with the RTU\n+      | DeviceIdentification | <RTU> |\n+    When the RTU sends a light measurement event\n+      | InformationObjectAddress | <IOA> |\n+      | SinglePointInformation   | <SPI> |\n+    Then the device message for the light measurement event should be logged\n+      | DeviceIdentification | <RTU> |\n+    And the light measurement event should be logged\n+      | DeviceIdentification  | <LMD>   |\n+      | LightMeasurementEvent | <EVENT> |\n+    And a set transition \"OSLP ELSTER\" message is sent to device \"<SSLD>\"\n+      | TransitionType | <TRANSITION> |\n+\n+    Examples: \n+      | LMD   | IOA | RTU   | SSLD   | SPI   | EVENT | TRANSITION |\n+      | LMD-1 |   1 | RTU-1 | SSLD-1 | true  | DARK  | DAY_NIGHT  |\n+      | LMD-1 |   1 | RTU-1 | SSLD-1 | false | LIGHT | NIGHT_DAY  |"
  },
  {
    "sha": "1fdf182d6d7d64faa54999884500eefb5fdefdc7",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformDefaults.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformDefaults.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformDefaults.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformDefaults.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -95,6 +95,7 @@\n     public static final String DEFAULT_MANUFACTURER_CODE = \"Test\";\n     public static final String DEFAULT_MANUFACTURER_NAME = \"Test\";\n     public static final Boolean DEFAULT_MANUFACTURER_USE_PREFIX = false;\n+    public static final String DEFAULT_NETWORK_ADDRESS = \"127.0.0.1\";\n     public static final String DEFAULT_NEW_ORGANIZATION_IDENTIFICATION = \"NewOrganization\";\n     public static final String DEFAULT_NEW_ORGANIZATION_NAME = \"New Organization\";\n     public static final Boolean DEFAULT_ON = true;"
  },
  {
    "sha": "5a9e510b81e0ed4416b995d7d867d6067f22ae12",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformKeys.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformKeys.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformKeys.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/PlatformKeys.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -304,6 +304,7 @@\n     public static final String FIRMWARE_INSTALLATION_DATE = \"InstallationDate\";\n     public static final String KEY_SCHEDULE_VERSION = \"Version\";\n     public static final String KEY_LIGHTMEASUREMENT_IDENTIFICATION = \"Identification\";\n+    public static final String KEY_LIGHTMEASUREMENT_DEVICE_IDENTIFICATION = \"LightMeasurementDeviceIdentification\";\n     public static final String KEY_LIGHTMEASUREMENT_COLOR = \"Color\";\n     public static final String KEY_LIGHTMEASUREMENT_DIGITAL_INPUT = \"DigitalInput\";\n     public static final String KEY_LIGHTMEASUREMENT_LAST_COMMUNICATION_TIME = \"LastCommunicationTime\";"
  },
  {
    "sha": "10c542ea8ada7e3a1fdc24a365c1a8c7cf640302",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/database/core/EventSpecifications.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/database/core/EventSpecifications.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/database/core/EventSpecifications.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/database/core/EventSpecifications.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.database.core;\n+\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+public class EventSpecifications {\n+\n+    private static final String DEVICE_IDENTIFICATION = \"deviceIdentification\";\n+    private static final String EVENT_TYPE = \"eventType\";\n+\n+    public static Specification<Event> isFromDevice(final String deviceIdentification) {\n+        return ((eventRoot, query, cb) -> cb.equal(eventRoot.<String> get(DEVICE_IDENTIFICATION),\n+                deviceIdentification));\n+    }\n+\n+    public static Specification<Event> hasEventType(final EventType eventType) {\n+\n+        return ((eventRoot, query, cb) -> cb.equal(eventRoot.<Event> get(EVENT_TYPE), eventType));\n+    }\n+}"
  },
  {
    "sha": "99cc998467388e76dd56e6eec19a79af76230e8b",
    "filename": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/database/logging/DeviceLogItemSpecifications.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/OSGP/open-smart-grid-platform/blob/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/database/logging/DeviceLogItemSpecifications.java",
    "raw_url": "https://github.com/OSGP/open-smart-grid-platform/raw/877ac035e09020881e0aec9b96e17396fb78e488/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/database/logging/DeviceLogItemSpecifications.java",
    "contents_url": "https://api.github.com/repos/OSGP/open-smart-grid-platform/contents/integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/database/logging/DeviceLogItemSpecifications.java?ref=877ac035e09020881e0aec9b96e17396fb78e488",
    "patch": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright 2021 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.database.logging;\n+\n+import static org.opensmartgridplatform.shared.utils.SearchUtil.replaceAndEscapeWildcards;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.opensmartgridplatform.logging.domain.entities.DeviceLogItem;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+public class DeviceLogItemSpecifications {\n+\n+    private static final String DEVICE_IDENTIFICATION = \"deviceIdentification\";\n+    private static final String DECODED_MESSAGE = \"decodedMessage\";\n+\n+    public static Specification<DeviceLogItem> hasDeviceIdentification(final String deviceIdentification) {\n+        return (final Root<DeviceLogItem> r, final CriteriaQuery<?> q, final CriteriaBuilder cb) -> cb.like(\n+                cb.upper(r.<String> get(DEVICE_IDENTIFICATION)),\n+                replaceAndEscapeWildcards(deviceIdentification.toUpperCase()));\n+    }\n+\n+    public static Specification<DeviceLogItem> hasDecodedMessageContaining(final String messagePart) {\n+        return (final Root<DeviceLogItem> r, final CriteriaQuery<?> q, final CriteriaBuilder cb) -> cb\n+                .like(cb.upper(r.<String> get(DECODED_MESSAGE)), addWildcards(messagePart).toUpperCase());\n+    }\n+\n+    private static String addWildcards(final String searchString) {\n+        return \"%\" + searchString + \"%\";\n+    }\n+}"
  }
]
