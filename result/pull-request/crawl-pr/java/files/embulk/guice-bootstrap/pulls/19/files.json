[
  {
    "sha": "a800edea7081ac4b3692f73d598496ee26566b55",
    "filename": "src/main/java/org/embulk/guice/Bootstrap.java",
    "status": "modified",
    "additions": 17,
    "deletions": 7,
    "changes": 24,
    "blob_url": "https://github.com/embulk/guice-bootstrap/blob/07e9add813f44215cbf34464c05f7bc5faa09458/src/main/java/org/embulk/guice/Bootstrap.java",
    "raw_url": "https://github.com/embulk/guice-bootstrap/raw/07e9add813f44215cbf34464c05f7bc5faa09458/src/main/java/org/embulk/guice/Bootstrap.java",
    "contents_url": "https://api.github.com/repos/embulk/guice-bootstrap/contents/src/main/java/org/embulk/guice/Bootstrap.java?ref=07e9add813f44215cbf34464c05f7bc5faa09458",
    "patch": "@@ -16,7 +16,6 @@\n package org.embulk.guice;\n \n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n \n import com.google.inject.Binder;\n@@ -31,6 +30,7 @@\n \n public class Bootstrap\n {\n+    private static final Stage DEFAULT_STAGE = Stage.PRODUCTION;\n     private final List<Module> modules = Lists.newArrayList();\n \n     private final List<Function<? super List<Module>, ? extends Iterable<? extends Module>>> moduleOverrides = Lists.newArrayList();\n@@ -117,25 +117,35 @@ public Bootstrap overrideModules(Function<? super List<Module>, ? extends Iterab\n \n     public LifeCycleInjector initialize()\n     {\n-        return build(true);\n+        return initialize(DEFAULT_STAGE);\n+    }\n+\n+    public LifeCycleInjector initialize(Stage stage)\n+    {\n+        return build(true, stage);\n     }\n \n     public CloseableInjector initializeCloseable()\n     {\n-        return build(false);\n+        return initializeCloseable(DEFAULT_STAGE);\n+    }\n+\n+    public CloseableInjector initializeCloseable(Stage stage)\n+    {\n+        return build(false, stage);\n     }\n \n-    private LifeCycleInjectorProxy build(boolean destroyOnShutdownHook)\n+    private LifeCycleInjectorProxy build(boolean destroyOnShutdownHook, Stage stage)\n     {\n-        Injector injector = start();\n+        Injector injector = start(stage);\n         LifeCycleManager lifeCycleManager = injector.getInstance(LifeCycleManager.class);\n         if (destroyOnShutdownHook) {\n             lifeCycleManager.destroyOnShutdownHook();\n         }\n         return new LifeCycleInjectorProxy(injector, lifeCycleManager);\n     }\n \n-    private Injector start()\n+    private Injector start(Stage stage)\n     {\n         List<Module> userModules = ImmutableList.copyOf(modules);\n         for (Function<? super List<Module>, ? extends Iterable<? extends Module>> moduleOverride : moduleOverrides) {\n@@ -165,7 +175,7 @@ public void configure(Binder binder)\n \n         builder.add(new LifeCycleModule(ImmutableList.copyOf(lifeCycleListeners)));\n \n-        Injector injector = Guice.createInjector(Stage.PRODUCTION, builder.build());\n+        Injector injector = Guice.createInjector(stage, builder.build());\n \n         LifeCycleManager lifeCycleManager = injector.getInstance(LifeCycleManager.class);\n         if (lifeCycleManager.size() > 0) {"
  },
  {
    "sha": "44c8b4e964a1f35e357483d751a7ac940b05e261",
    "filename": "src/test/java/org/embulk/guice/TestBootstrap.java",
    "status": "modified",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/embulk/guice-bootstrap/blob/07e9add813f44215cbf34464c05f7bc5faa09458/src/test/java/org/embulk/guice/TestBootstrap.java",
    "raw_url": "https://github.com/embulk/guice-bootstrap/raw/07e9add813f44215cbf34464c05f7bc5faa09458/src/test/java/org/embulk/guice/TestBootstrap.java",
    "contents_url": "https://api.github.com/repos/embulk/guice-bootstrap/contents/src/test/java/org/embulk/guice/TestBootstrap.java?ref=07e9add813f44215cbf34464c05f7bc5faa09458",
    "patch": "@@ -19,6 +19,7 @@\n import com.google.inject.ConfigurationException;\n import com.google.inject.Module;\n import com.google.inject.ProvisionException;\n+import com.google.inject.Stage;\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n@@ -40,6 +41,20 @@ public void testRequiresExplicitBindings()\n         }\n     }\n \n+    @Test\n+    public void testRequiresExplicitBindingsWithStageDevelopment()\n+            throws Exception\n+    {\n+        Bootstrap bootstrap = new Bootstrap();\n+        try {\n+            bootstrap.initialize(Stage.DEVELOPMENT).getInstance(Instance.class);\n+            Assert.fail(\"should require explicit bindings\");\n+        }\n+        catch (ConfigurationException e) {\n+            assertContains(e.getErrorMessages().iterator().next().getMessage(), \"Explicit bindings are required\");\n+        }\n+    }\n+\n     @Test\n     public void testDoesNotAllowCircularDependencies()\n             throws Exception\n@@ -63,6 +78,29 @@ public void configure(Binder binder)\n         }\n     }\n \n+    @Test\n+    public void testDoesNotAllowCircularDependenciesWithStageDevelopment()\n+            throws Exception\n+    {\n+        Bootstrap bootstrap = new Bootstrap(new Module()\n+        {\n+            @Override\n+            public void configure(Binder binder)\n+            {\n+                binder.bind(InstanceA.class);\n+                binder.bind(InstanceB.class);\n+            }\n+        });\n+\n+        try {\n+            bootstrap.initialize(Stage.DEVELOPMENT).getInstance(InstanceA.class);\n+            Assert.fail(\"should not allow circular dependencies\");\n+        }\n+        catch (ProvisionException e) {\n+            assertContains(e.getErrorMessages().iterator().next().getMessage(), \"circular dependencies are disabled\");\n+        }\n+    }\n+\n     public static class Instance {}\n \n     public static class InstanceA"
  },
  {
    "sha": "0c9cbe060e0351ecbb5cdd5542dae219fe7ef461",
    "filename": "src/test/java/org/embulk/guice/TestBootstrapExtension.java",
    "status": "modified",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/embulk/guice-bootstrap/blob/07e9add813f44215cbf34464c05f7bc5faa09458/src/test/java/org/embulk/guice/TestBootstrapExtension.java",
    "raw_url": "https://github.com/embulk/guice-bootstrap/raw/07e9add813f44215cbf34464c05f7bc5faa09458/src/test/java/org/embulk/guice/TestBootstrapExtension.java",
    "contents_url": "https://api.github.com/repos/embulk/guice-bootstrap/contents/src/test/java/org/embulk/guice/TestBootstrapExtension.java?ref=07e9add813f44215cbf34464c05f7bc5faa09458",
    "patch": "@@ -17,6 +17,7 @@\n \n import com.google.inject.Binder;\n import com.google.inject.Module;\n+import com.google.inject.Stage;\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n@@ -81,6 +82,32 @@ public void configure(Binder binder)\n         Assert.assertEquals(iface.get(), 1);\n     }\n \n+    @Test\n+    public void testAddModulesWithStageDevelopment()\n+            throws Exception\n+    {\n+        Bootstrap bootstrap = new Bootstrap()\n+                .addModules(new Module()\n+                {\n+                    @Override\n+                    public void configure(Binder binder)\n+                    {\n+                        binder.bind(Class1.class);\n+                    }\n+                })\n+                .addModules(new Module()\n+                {\n+                    @Override\n+                    public void configure(Binder binder)\n+                    {\n+                        binder.bind(Interface1.class).to(Implementation1.class);\n+                    }\n+                });\n+\n+        Interface1 iface = bootstrap.initialize(Stage.DEVELOPMENT).getInstance(Interface1.class);\n+        Assert.assertEquals(iface.get(), 1);\n+    }\n+\n     @Test\n     public void testOverrideModules()\n             throws Exception\n@@ -107,6 +134,32 @@ public void configure(Binder binder)\n         Assert.assertEquals(iface.get(), 2);\n     }\n \n+    @Test\n+    public void testOverrideModulesWithStageDevelopment()\n+            throws Exception\n+    {\n+        Bootstrap bootstrap = new Bootstrap()\n+            .addModules(new Module()\n+            {\n+                @Override\n+                public void configure(Binder binder)\n+                {\n+                    binder.bind(Interface1.class).to(Implementation1.class);\n+                }\n+            })\n+            .overrideModulesWith(new Module()\n+            {\n+                @Override\n+                public void configure(Binder binder)\n+                {\n+                    binder.bind(Interface1.class).to(Implementation2.class);\n+                }\n+            });\n+\n+        Interface1 iface = bootstrap.initialize(Stage.DEVELOPMENT).getInstance(Interface1.class);\n+        Assert.assertEquals(iface.get(), 2);\n+    }\n+\n     @Test\n     public void testOverrideModulesLazily()\n             throws Exception\n@@ -132,4 +185,30 @@ public void configure(Binder binder)\n         Interface1 iface = bootstrap.initialize().getInstance(Interface1.class);\n         Assert.assertEquals(iface.get(), 2);\n     }\n+\n+    @Test\n+    public void testOverrideModulesLazilyWithStageDevelopment()\n+            throws Exception\n+    {\n+        Bootstrap bootstrap = new Bootstrap()\n+            .overrideModulesWith(new Module()\n+            {\n+                @Override\n+                public void configure(Binder binder)\n+                {\n+                    binder.bind(Interface1.class).to(Implementation2.class);\n+                }\n+            })\n+            .addModules(new Module()\n+            {\n+                @Override\n+                public void configure(Binder binder)\n+                {\n+                    binder.bind(Interface1.class).to(Implementation1.class);\n+                }\n+            });\n+\n+        Interface1 iface = bootstrap.initialize(Stage.DEVELOPMENT).getInstance(Interface1.class);\n+        Assert.assertEquals(iface.get(), 2);\n+    }\n }"
  }
]
