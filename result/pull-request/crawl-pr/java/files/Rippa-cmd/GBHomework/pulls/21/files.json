[
  {
    "sha": "b35ee79cb25d9291887a0cbf4ce6d17ac76fb2de",
    "filename": "src/ru/geekbrains/module2/lesson7/clientside/Client.java",
    "status": "modified",
    "additions": 67,
    "deletions": 11,
    "changes": 78,
    "blob_url": "https://github.com/Rippa-cmd/GBHomework/blob/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/clientside/Client.java",
    "raw_url": "https://github.com/Rippa-cmd/GBHomework/raw/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/clientside/Client.java",
    "contents_url": "https://api.github.com/repos/Rippa-cmd/GBHomework/contents/src/ru/geekbrains/module2/lesson7/clientside/Client.java?ref=7bacf7631afd89df864fbf4b63f0c58762d66f9c",
    "patch": "@@ -5,10 +5,7 @@\n import java.awt.*;\n import java.awt.event.WindowAdapter;\n import java.awt.event.WindowEvent;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.EOFException;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.Socket;\n \n /**\n@@ -18,6 +15,7 @@\n \n     private final String SERVER_ADDR = \"localhost\";\n     private final int SERVER_PORT = 8081;\n+    private final int LOG_MESSAGE_SIZE = 100;\n \n     private JTextField msgInputField;\n     private JTextArea chatArea;\n@@ -26,7 +24,14 @@\n     private DataInputStream in;\n     private DataOutputStream out;\n \n+    private File file;\n+    private BufferedWriter writer;\n+    private BufferedReader reader;\n+\n     private boolean isBanned = false;\n+    private boolean isAuthorized = false;\n+\n+    private String login = \"\";\n \n     public Client() {\n         try {\n@@ -45,12 +50,24 @@ public void openConnection() throws IOException {\n             try {\n                 while (true) {\n                     String strFromServer = in.readUTF();\n-                    if (strFromServer.equals(\"/banned\")) {\n-                        isBanned = true;\n-                        continue;\n-                    } else if (strFromServer.equals(\"/unbanned\")) {\n-                        isBanned = false;\n-                        continue;\n+                    if (!isAuthorized) {\n+                        if (strFromServer.equals(\"/banned\")) {\n+                            isBanned = true;\n+                            continue;\n+                        } else if (strFromServer.equals(\"/unbanned\")) {\n+                            isBanned = false;\n+                            continue;\n+                        }\n+\n+                        // Если сервер дал добро на вход, запускаем логирование\n+                        if (strFromServer.startsWith(\"/login\")) {\n+                            isAuthorized = true;\n+                            login = strFromServer.substring(7);\n+                            startLogger();\n+                            continue;\n+                        }\n+                    } else {\n+                        messageLogger(strFromServer);\n                     }\n                     chatArea.append(strFromServer + \"\\n\");\n                 }\n@@ -62,6 +79,40 @@ public void openConnection() throws IOException {\n         }).start();\n     }\n \n+    // Запускает ридеры и райтеры, если есть что в логах, выводит последние 100 сообщений\n+    public void startLogger() throws IOException {\n+        file = new File(login + \"_log.txt\");\n+        writer = new BufferedWriter(new FileWriter(file, true));\n+        reader = new BufferedReader(new FileReader(file));\n+        LineNumberReader lineNumberReader = new LineNumberReader(new FileReader(file));\n+\n+        while (lineNumberReader.readLine() != null) {\n+        }\n+        int count = lineNumberReader.getLineNumber() - 1;\n+        if (count > LOG_MESSAGE_SIZE) {\n+            count -= LOG_MESSAGE_SIZE;\n+            for (; count > 0; count--) {\n+                reader.readLine();\n+            }\n+        }\n+        String logMsg;\n+        chatArea.append(\"\\t========== Log history of last \" + LOG_MESSAGE_SIZE + \" messages ==========\\n\");\n+        while ((logMsg = reader.readLine()) != null) {\n+            if (!logMsg.startsWith(\"\\t\"))         // Пропуск системных сообщений\n+                chatArea.append(logMsg + \"\\n\");\n+        }\n+        chatArea.append(\"\\t========== End of log history ==========\\n\");\n+        reader.close();\n+        lineNumberReader.close();\n+    }\n+\n+    // Записывает в логи сообщения, игнорируя системные\n+    public void messageLogger(String message) throws IOException {\n+        if (!message.startsWith(\"\\t\")) {\n+            writer.write(message + \"\\n\");\n+            writer.flush();\n+        }\n+    }\n \n     // Метод отправки сообщения\n     public void sendMessage() {\n@@ -81,7 +132,7 @@ public void sendMessage() {\n                 }\n             }\n         } else {\n-            chatArea.append(\"\\tYou are banned\\n\");\n+            JOptionPane.showMessageDialog(null, \"You are banned!\");\n         }\n     }\n \n@@ -102,6 +153,11 @@ public void closeConnection() {\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n+        try {\n+            writer.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n     }\n \n     // Графическая часть"
  },
  {
    "sha": "e173f5a3196e65fbdd24038a0d84b4ffb667d17b",
    "filename": "src/ru/geekbrains/module2/lesson7/serverside/interfaces/AuthService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/Rippa-cmd/GBHomework/blob/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/interfaces/AuthService.java",
    "raw_url": "https://github.com/Rippa-cmd/GBHomework/raw/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/interfaces/AuthService.java",
    "contents_url": "https://api.github.com/repos/Rippa-cmd/GBHomework/contents/src/ru/geekbrains/module2/lesson7/serverside/interfaces/AuthService.java?ref=7bacf7631afd89df864fbf4b63f0c58762d66f9c",
    "patch": "@@ -3,11 +3,18 @@\n public interface AuthService {\n     void start();\n     void stop();\n+\n     String getNicknameByLoginAndPassword(String login, String password);\n \n     // Для проверки занятости регестрируемого ника\n     boolean isNicknameBusy(String nickname);\n \n+    // Для проверки занятости регестрируемого логина\n+    boolean isLoginBusy(String nickname);\n+\n     // Добавление новой учетной записи\n-    void addEntryList(String[] logPassNick);\n+    boolean addEntry(String[] logPassNick);\n+\n+    // Заменяет ник в БД на новый\n+    void nickChanger(String oldNick, String newNick);\n }"
  },
  {
    "sha": "dda5409ec40d3ed129509c6461f51e90961019f2",
    "filename": "src/ru/geekbrains/module2/lesson7/serverside/service/BaseAuthService.java",
    "status": "modified",
    "additions": 75,
    "deletions": 28,
    "changes": 103,
    "blob_url": "https://github.com/Rippa-cmd/GBHomework/blob/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/service/BaseAuthService.java",
    "raw_url": "https://github.com/Rippa-cmd/GBHomework/raw/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/service/BaseAuthService.java",
    "contents_url": "https://api.github.com/repos/Rippa-cmd/GBHomework/contents/src/ru/geekbrains/module2/lesson7/serverside/service/BaseAuthService.java?ref=7bacf7631afd89df864fbf4b63f0c58762d66f9c",
    "patch": "@@ -2,70 +2,117 @@\n \n import ru.geekbrains.module2.lesson7.serverside.interfaces.AuthService;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n \n /**\n  * Класс аутентификации пользователей, хранящий необходимую для этой операции информацию о пользователях\n  */\n public class BaseAuthService implements AuthService {\n \n-    private List<Entry> entryList;\n+    private Statement statement = null;\n+    private ResultSet set = null;\n+    PreparedStatement preparedStatement = null;\n \n     // Добавление нового пользователя\n     @Override\n-    public void addEntryList(String[] logPassNick) {\n-        entryList.add(new Entry(logPassNick[1], logPassNick[2], logPassNick[3]));\n-    }\n-\n-    // Заполнение \"базы данных\" пользователями\n-    public BaseAuthService() {\n-        entryList = new ArrayList<>();\n-        entryList.add(new Entry(\"login1\", \"pass1\", \"nick1\"));\n-        entryList.add(new Entry(\"login2\", \"pass2\", \"nick2\"));\n-        entryList.add(new Entry(\"login3\", \"pass3\", \"nick3\"));\n+    public boolean addEntry(String[] logPassNick) {\n+        try {\n+            preparedStatement = Singleton.getConnection().prepareStatement(\"INSERT INTO users (login, password, nick) VALUES (?, ?, ?)\");\n+            preparedStatement.setString(1, logPassNick[1]);\n+            preparedStatement.setString(2, logPassNick[2]);\n+            preparedStatement.setString(3, logPassNick[3]);\n+            preparedStatement.executeUpdate();\n+            return true;\n+        } catch (SQLException | ClassNotFoundException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n     }\n \n     @Override\n     public void start() {\n+        try {\n+            statement = Singleton.getConnection().createStatement();\n+        } catch (SQLException | ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n         System.out.println(\"AuthService started\");\n     }\n \n     @Override\n     public void stop() {\n+        try {\n+            if (statement != null)\n+                statement.close();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n         System.out.println(\"AuthService stopped\");\n     }\n \n     // Получение ника по логину и паролю\n     @Override\n     public String getNicknameByLoginAndPassword(String login, String password) {\n-        for (Entry e : entryList) {\n-            if (e.login.equals(login) && e.password.equals(password))\n-                return e.nickname;\n+        try {\n+\n+            // Сделал через prepared для игнорирования спец символов (',\" и тд)\n+            preparedStatement = Singleton.getConnection().prepareStatement(\"select nick from users where login = ? and password = ?\");\n+            preparedStatement.setString(1, login);\n+            preparedStatement.setString(2, password);\n+            set = preparedStatement.executeQuery();\n+            if (set.next()) {\n+                return set.getString(1);\n+            }\n+        } catch (SQLException | ClassNotFoundException e) {\n+            e.printStackTrace();\n         }\n         return null;\n     }\n \n+    // Заменяет ник в БД на новый\n+    public void nickChanger(String oldNick, String newNick) {\n+        try {\n+            preparedStatement = Singleton.getConnection().prepareStatement(\"update users set nick = ? where nick = ?\");\n+            preparedStatement.setString(1, newNick);\n+            preparedStatement.setString(2, oldNick);\n+            preparedStatement.executeUpdate();\n+        } catch (SQLException | ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n     // Занят ли ник\n     @Override\n     public boolean isNicknameBusy(String nickname) {\n-        for (Entry e : entryList) {\n-            if (e.nickname.equals(nickname))\n-                return true;\n+        try {\n+            set = statement.executeQuery(\"select nick from users\");\n+            while (set.next()) {\n+                if (set.getString(1).equals(nickname))\n+                    return true;\n+            }\n+\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n         }\n         return false;\n     }\n \n-    // Создание нового пользователя\n-    private class Entry {\n-        private String login;\n-        private String password;\n-        private String nickname;\n+    //Занят ли логин\n+    @Override\n+    public boolean isLoginBusy(String login) {\n+        try {\n+            set = statement.executeQuery(\"select login from users\");\n+            while (set.next()) {\n+                if (set.getString(1).equals(login))\n+                    return true;\n+            }\n \n-        public Entry(String login, String password, String nickname) {\n-            this.login = login;\n-            this.password = password;\n-            this.nickname = nickname;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n         }\n+        return false;\n     }\n }"
  },
  {
    "sha": "f7c952cae91bcffef182ead4eb5d503983ea9584",
    "filename": "src/ru/geekbrains/module2/lesson7/serverside/service/ClientHandler.java",
    "status": "modified",
    "additions": 38,
    "deletions": 12,
    "changes": 50,
    "blob_url": "https://github.com/Rippa-cmd/GBHomework/blob/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/service/ClientHandler.java",
    "raw_url": "https://github.com/Rippa-cmd/GBHomework/raw/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/service/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/Rippa-cmd/GBHomework/contents/src/ru/geekbrains/module2/lesson7/serverside/service/ClientHandler.java?ref=7bacf7631afd89df864fbf4b63f0c58762d66f9c",
    "patch": "@@ -56,6 +56,7 @@ public ClientHandler(Server server, Socket socket) {\n                             break;\n                         }\n                     } catch (InterruptedException ignored) {\n+                        closeConnection();\n                     }\n                 }\n             }).start();\n@@ -88,8 +89,9 @@ private void authentication() throws IOException, InterruptedException {\n                             if (!server.isNickBusy(name)) {\n                                 sendMessage(\"\\tYou are in! Your nickname is: \" + name);\n                                 nickname = name;\n-                                server.subscribe(this);\n                                 server.broadcastMessage(\"\\tHello, \" + nickname);\n+                                server.subscribe(this);\n+                                sendMessage(\"/login \" + logpass[1]);\n                                 return;\n                             }\n                             sendMessage(\"\\tThis user is already in\");\n@@ -110,7 +112,7 @@ private void authentication() throws IOException, InterruptedException {\n                     }\n                 } else if (str.startsWith(\"/signup \")) {\n                     if (signUp(str)) return;\n-                }\n+                } else sendMessage(\"\\tWrong command, write /help for more info\");\n             } else sendMessage(\"\\tWrong command, write /help for more info\");\n         }\n     }\n@@ -120,11 +122,13 @@ private boolean signUp(String message) {\n         String[] logPassNick = message.split(\" \");\n         if (logPassNick.length == 4) {\n             if (!server.getAuthService().isNicknameBusy(logPassNick[3])) {\n-                server.getAuthService().addEntryList(logPassNick);\n-                nickname = logPassNick[3];\n-                server.subscribe(this);\n-                server.broadcastMessage(\"\\tHello, \" + nickname);\n-                return true;\n+                if (!server.getAuthService().isLoginBusy(logPassNick[1])) {\n+                    server.getAuthService().addEntry(logPassNick);\n+                    nickname = logPassNick[3];\n+                    server.subscribe(this);\n+                    server.broadcastMessage(\"\\tHello, \" + nickname);\n+                    return true;\n+                } else sendMessage(\"\\tLogin \" + logPassNick[1] + \" is busy\");\n             } else\n                 sendMessage(\"\\tNickname \" + logPassNick[3] + \" is busy\");\n         } else {\n@@ -148,6 +152,8 @@ private void readMessage() throws IOException {\n                     preparePrivateMessage(message);\n                 if (message.trim().equals(\"/list\"))\n                     server.list(this);\n+                if (message.startsWith(\"/changeNick\"))\n+                    changeNick(message);\n                 continue;\n             }\n             if (!message.trim().isEmpty()) {\n@@ -156,24 +162,44 @@ private void readMessage() throws IOException {\n         }\n     }\n \n-    //Побготовка личного сообщения\n+    //Позволяет пользователю сменить ник\n+    private void changeNick(String message) {\n+        String[] newNick = message.split(\" \");\n+        if (newNick.length > 2) {\n+            sendMessage(\"\\tNick can't contains spaces\");\n+            return;\n+        }\n+        if (newNick.length < 2) {\n+            sendMessage(\"\\tNick can't be empty\");\n+            return;\n+        }\n+        if (!server.getAuthService().isNicknameBusy(newNick[1])) {\n+            server.getAuthService().nickChanger(nickname, newNick[1]);\n+            sendMessage(\"\\t\" + nickname + \" changed his nickname to \" + newNick[1]);\n+            server.unsubscribe(this);\n+            nickname = newNick[1];\n+            server.subscribe(this);\n+        } else sendMessage(\"\\tNick is already busy\");\n+    }\n+\n+    //Подготовка личного сообщения\n     private void preparePrivateMessage(String message) {\n         String[] str = message.split(\" \", 3);\n         if (!str[0].equals(\"/w\")) {\n-            sendMessage(\"Invalid command\");\n+            sendMessage(\"\\tInvalid command\");\n             return;\n         }\n         if (str.length < 3) {\n             if (str.length == 1) {\n-                sendMessage(\"Empty nickname\");\n+                sendMessage(\"\\tEmpty nickname\");\n             } else\n-                sendMessage(\"Empty message\");\n+                sendMessage(\"\\tEmpty message\");\n             return;\n         }\n         if (server.isNickBusy(str[1]))\n             server.privateMessage(this, str[1], str[2]);\n         else\n-            sendMessage(\"Invalid nickname\");\n+            sendMessage(\"\\tInvalid nickname\");\n     }\n \n     //Отправка сообщения клиенту"
  },
  {
    "sha": "82387b14ece28149ff5cda2202c174a55655c6c8",
    "filename": "src/ru/geekbrains/module2/lesson7/serverside/service/Server.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/Rippa-cmd/GBHomework/blob/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/service/Server.java",
    "raw_url": "https://github.com/Rippa-cmd/GBHomework/raw/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/service/Server.java",
    "contents_url": "https://api.github.com/repos/Rippa-cmd/GBHomework/contents/src/ru/geekbrains/module2/lesson7/serverside/service/Server.java?ref=7bacf7631afd89df864fbf4b63f0c58762d66f9c",
    "patch": "@@ -78,8 +78,11 @@ public synchronized void list(ClientHandler from) {\n                 list.append(client.getNickname()).append(\", \");\n         }\n         int length = list.length();\n-        list.deleteCharAt(length - 1).deleteCharAt(length - 2);\n-        from.sendMessage(\"List of online users: \" + list.toString());\n+        if (length > 0) {\n+            list.deleteCharAt(length - 1).deleteCharAt(length - 2);\n+            from.sendMessage(\"\\tList of online users: \" + list.toString());\n+        } else\n+            from.sendMessage(\"\\tYou are only one\");\n     }\n \n     // Подписка пользователя"
  },
  {
    "sha": "7bb171a0c5eec8382ce1fdcbbe5ccbfc190ef2e6",
    "filename": "src/ru/geekbrains/module2/lesson7/serverside/service/Singleton.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Rippa-cmd/GBHomework/blob/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/service/Singleton.java",
    "raw_url": "https://github.com/Rippa-cmd/GBHomework/raw/7bacf7631afd89df864fbf4b63f0c58762d66f9c/src/ru/geekbrains/module2/lesson7/serverside/service/Singleton.java",
    "contents_url": "https://api.github.com/repos/Rippa-cmd/GBHomework/contents/src/ru/geekbrains/module2/lesson7/serverside/service/Singleton.java?ref=7bacf7631afd89df864fbf4b63f0c58762d66f9c",
    "patch": "@@ -0,0 +1,28 @@\n+package ru.geekbrains.module2.lesson7.serverside.service;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+\n+/**\n+ * Класс для установки соединения с базой данных\n+ */\n+public final class Singleton {\n+    private static final String DRIVER = \"com.mysql.cj.jdbc.Driver\";\n+    private static final String DB = \"jdbc:mysql://localhost/lesso1\";\n+    private static final String USER = \"root\";\n+    private static final String PASSWORD = \"root\";\n+\n+    private static Connection connection;\n+\n+    public static Connection getConnection() throws SQLException, ClassNotFoundException {\n+        if (connection == null)\n+            initConnection();\n+        return connection;\n+    }\n+\n+    private synchronized static void initConnection() throws ClassNotFoundException, SQLException {\n+        Class.forName(DRIVER);\n+        connection = DriverManager.getConnection(DB, USER, PASSWORD);\n+    }\n+}"
  }
]
