[
  {
    "sha": "4a227d22d2fa6826e98b431195481d09b088c2b2",
    "filename": ".github/workflows/maven.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/YuliyaMuraveva/poster_manager/blob/71f158295c67a335363d62e74c792447d5c408bb/.github/workflows/maven.yml",
    "raw_url": "https://github.com/YuliyaMuraveva/poster_manager/raw/71f158295c67a335363d62e74c792447d5c408bb/.github/workflows/maven.yml",
    "contents_url": "https://api.github.com/repos/YuliyaMuraveva/poster_manager/contents/.github/workflows/maven.yml?ref=71f158295c67a335363d62e74c792447d5c408bb",
    "patch": "@@ -5,9 +5,9 @@ name: Java CI with Maven\n \n on:\n   push:\n-    branches: [ master ]\n+    branches: [ master, layers ]\n   pull_request:\n-    branches: [ master ]\n+    branches: [ master, layers ]\n \n jobs:\n   build:"
  },
  {
    "sha": "f216fda3d86d8533de28bdfe822128bb17cd6762",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/YuliyaMuraveva/poster_manager/blob/71f158295c67a335363d62e74c792447d5c408bb/pom.xml",
    "raw_url": "https://github.com/YuliyaMuraveva/poster_manager/raw/71f158295c67a335363d62e74c792447d5c408bb/pom.xml",
    "contents_url": "https://api.github.com/repos/YuliyaMuraveva/poster_manager/contents/pom.xml?ref=71f158295c67a335363d62e74c792447d5c408bb",
    "patch": "@@ -27,6 +27,12 @@\n             <version>5.4.2</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-junit-jupiter</artifactId>\n+            <version>3.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "5117225dda63bacbe7248cdb92b87ea3dd5620ab",
    "filename": "src/main/java/ru/netology/domain/Movie.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/YuliyaMuraveva/poster_manager/blob/71f158295c67a335363d62e74c792447d5c408bb/src/main/java/ru/netology/domain/Movie.java",
    "raw_url": "https://github.com/YuliyaMuraveva/poster_manager/raw/71f158295c67a335363d62e74c792447d5c408bb/src/main/java/ru/netology/domain/Movie.java",
    "contents_url": "https://api.github.com/repos/YuliyaMuraveva/poster_manager/contents/src/main/java/ru/netology/domain/Movie.java?ref=71f158295c67a335363d62e74c792447d5c408bb",
    "patch": "@@ -4,7 +4,7 @@\n import lombok.Data;\n \n @AllArgsConstructor\n-\n+@Data\n public class Movie {\n     private int id;\n     private String name;"
  },
  {
    "sha": "85a99a15814c27c5c816bee7074948991a7fa795",
    "filename": "src/main/java/ru/netology/manager/PosterManager.java",
    "status": "modified",
    "additions": 40,
    "deletions": 39,
    "changes": 79,
    "blob_url": "https://github.com/YuliyaMuraveva/poster_manager/blob/71f158295c67a335363d62e74c792447d5c408bb/src/main/java/ru/netology/manager/PosterManager.java",
    "raw_url": "https://github.com/YuliyaMuraveva/poster_manager/raw/71f158295c67a335363d62e74c792447d5c408bb/src/main/java/ru/netology/manager/PosterManager.java",
    "contents_url": "https://api.github.com/repos/YuliyaMuraveva/poster_manager/contents/src/main/java/ru/netology/manager/PosterManager.java?ref=71f158295c67a335363d62e74c792447d5c408bb",
    "patch": "@@ -1,53 +1,54 @@\n package ru.netology.manager;\n \n import ru.netology.domain.Movie;\n+import ru.netology.repository.PosterRepository;\n \n public class PosterManager {\n-    private Movie[] poster = new Movie[0];\n-\n-    /* add new movie */\n-    public void add(Movie newMovie) {\n-        int length = poster.length + 1;\n-        Movie[] newPoster = new Movie[length];\n-        for (int i = 0; i < poster.length; i++) {\n-            newPoster[i] = poster[i];\n+    private int filmQuantity = 10;\n+    private PosterRepository repository;\n+\n+    public PosterManager(PosterRepository repository) {\n+        this.repository = repository;\n+    }\n+\n+    public PosterManager(int filmQuantity) {\n+        this.filmQuantity = filmQuantity;\n+    }\n+\n+    public void add(Movie movie) {\n+        repository.save(movie);\n+    }\n+\n+    public Movie[] getAll() {\n+        Movie[] poster = repository.findAll();\n+        Movie[] result = new Movie[poster.length];\n+        for (int i = 0; i < result.length; i++) {\n+            int index = result.length - 1 - i;\n+            result[i] = poster[index];\n         }\n-        newPoster[newPoster.length - 1] = newMovie;\n-        poster = newPoster;\n-    }\n-//\n-//    /* get all movie */\n-//    public Movie[] getAll() {\n-//        Movie[] result = new Movie[poster.length];\n-//        for (int i = 0; i < result.length; i++) {\n-//            int index = result.length - 1 - i;\n-//            result[i] = poster[index];\n-//        }\n-//        return result;\n-//    }\n-//\n-//    /* delete movie from list */\n-//    public void removeById(int id) {\n-//        int length = poster.length - 1;\n-//        Movie[] newPoster = new Movie[length];\n-//        int index = 0;\n-//        for (Movie movie : poster) {\n-//            if (movie.getId() != id) {\n-//                newPoster[index] = poster[index];\n-//                index++;\n-//            }\n-//        }\n-//        poster = newPoster;\n-//    }\n-\n-    /* get last movie*/\n-    public Movie[] getLast(int quantity) {\n-        quantity = Math.min(quantity, poster.length);\n+        return result;\n+    }\n+\n+    public Movie[] getLast() {\n+        Movie[] poster = repository.findAll();\n+        int quantity = Math.min(filmQuantity, poster.length);\n         Movie[] result = new Movie[quantity];\n         for (int i = 0; i < quantity; i++) {\n             int index = poster.length - 1 - i;\n             result[i] = poster[index];\n         }\n         return result;\n     }\n+\n+    public Movie[] getById(int id) {\n+       return repository.findById(id);\n+    }\n+\n+    public void removeById(int id) {\n+        repository.removeById(id);\n+    }\n+\n+    public void removeAll() {\n+        repository.removeAll();\n+    }\n }"
  },
  {
    "sha": "0a554906983ac10847bc0108327cbdbf122d4afe",
    "filename": "src/main/java/ru/netology/repository/PosterRepository.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/YuliyaMuraveva/poster_manager/blob/71f158295c67a335363d62e74c792447d5c408bb/src/main/java/ru/netology/repository/PosterRepository.java",
    "raw_url": "https://github.com/YuliyaMuraveva/poster_manager/raw/71f158295c67a335363d62e74c792447d5c408bb/src/main/java/ru/netology/repository/PosterRepository.java",
    "contents_url": "https://api.github.com/repos/YuliyaMuraveva/poster_manager/contents/src/main/java/ru/netology/repository/PosterRepository.java?ref=71f158295c67a335363d62e74c792447d5c408bb",
    "patch": "@@ -0,0 +1,48 @@\n+package ru.netology.repository;\n+\n+import ru.netology.domain.Movie;\n+\n+public class PosterRepository {\n+    private Movie[] poster = new Movie[0];\n+\n+    public Movie[] findAll() {\n+        return poster;\n+    }\n+\n+    public void save(Movie newMovie) {\n+        int length = poster.length + 1;\n+        Movie[] newPoster = new Movie[length];\n+        for (int i = 0; i < poster.length; i++) {\n+            newPoster[i] = poster[i];\n+        }\n+        newPoster[newPoster.length - 1] = newMovie;\n+        poster = newPoster;\n+    }\n+\n+    public Movie[] findById(int id) {\n+        Movie[] movieFind = new Movie[1];\n+        for (Movie movie : poster) {\n+            if (movie.getId() == id) {\n+                movieFind[0] = movie;\n+            }\n+        }\n+        return movieFind;\n+    }\n+\n+    public void removeById(int id) {\n+        int length = poster.length - 1;\n+        Movie[] newPoster = new Movie[length];\n+        int index = 0;\n+        for (Movie movie : poster) {\n+            if (movie.getId() != id) {\n+                newPoster[index] = movie;\n+                index++;\n+            }\n+        }\n+        poster = newPoster;\n+    }\n+\n+    public void removeAll() {\n+        poster = new Movie[0];\n+    }\n+}"
  },
  {
    "sha": "7395c75d4500d668970604b8b961e5899a849feb",
    "filename": "src/test/java/ru/netology/manager/PosterManagerTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 18,
    "changes": 43,
    "blob_url": "https://github.com/YuliyaMuraveva/poster_manager/blob/71f158295c67a335363d62e74c792447d5c408bb/src/test/java/ru/netology/manager/PosterManagerTest.java",
    "raw_url": "https://github.com/YuliyaMuraveva/poster_manager/raw/71f158295c67a335363d62e74c792447d5c408bb/src/test/java/ru/netology/manager/PosterManagerTest.java",
    "contents_url": "https://api.github.com/repos/YuliyaMuraveva/poster_manager/contents/src/test/java/ru/netology/manager/PosterManagerTest.java?ref=71f158295c67a335363d62e74c792447d5c408bb",
    "patch": "@@ -2,13 +2,22 @@\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n import ru.netology.domain.Movie;\n+import ru.netology.repository.PosterRepository;\n \n import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n \n-class PosterManagerTest {\n-    private PosterManager manager = new PosterManager();\n-    private int quantity = 10;\n+@ExtendWith(MockitoExtension.class)\n+public class PosterManagerTest {\n+    @Mock\n+    private PosterRepository repository;\n+    @InjectMocks\n+    private PosterManager manager;\n     private Movie first = new Movie(1, \"first\", \"Action\", \"www.firstUrl.com\");\n     private Movie second = new Movie(2, \"second\", \"Comedy\", \"www.secondUrl.com\");\n     private Movie third = new Movie(3, \"third\", \"Cartoon\", \"www.thirdUrl.com\");\n@@ -21,31 +30,29 @@\n     private Movie tenth = new Movie(10, \"tenth\", \"Western\", \"www.tenthUrl.com\");\n     private Movie eleventh = new Movie(11, \"eleventh\", \"Documentary\", \"www.eleventhUrl.com\");\n \n-    @BeforeEach\n-    public void setUp() {\n-        manager.add(first);\n-        manager.add(second);\n-        manager.add(third);\n-        manager.add(fourth);\n-        manager.add(fifth);\n-        manager.add(sixth);\n-        manager.add(seventh);\n-        manager.add(eighth);\n-        manager.add(ninth);\n+    @Test\n+    void getAll() {\n+        Movie[] returned = new Movie[]{first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh};\n+        doReturn(returned).when(repository).findAll();\n+        Movie[] actual = manager.getAll();\n+        Movie[] expected = new Movie[]{eleventh, tenth, ninth, eighth, seventh, sixth, fifth, fourth, third, second, first};\n+        assertArrayEquals(expected, actual);\n     }\n \n     @Test\n     void getLastWithQuantityMoreThanInList() {\n-        Movie[] actual = manager.getLast(quantity);\n+        Movie[] returned = new Movie[]{first, second, third, fourth, fifth, sixth, seventh, eighth, ninth};\n+        doReturn(returned).when(repository).findAll();\n+        Movie[] actual = manager.getLast();\n         Movie[] expected = new Movie[]{ninth, eighth, seventh, sixth, fifth, fourth, third, second, first};\n         assertArrayEquals(expected, actual);\n     }\n \n     @Test\n     void getLastWithQuantityLessThanInList() {\n-        manager.add(tenth);\n-        manager.add(eleventh);\n-        Movie[] actual = manager.getLast(quantity);\n+        Movie[] returned = new Movie[]{first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh};\n+        doReturn(returned).when(repository).findAll();\n+        Movie[] actual = manager.getLast();\n         Movie[] expected = new Movie[]{eleventh, tenth, ninth, eighth, seventh, sixth, fifth, fourth, third, second};\n         assertArrayEquals(expected, actual);\n     }"
  },
  {
    "sha": "a66a6e31057f86170ed7da3f868f29aaf2fb8de0",
    "filename": "src/test/java/ru/netology/manager/PosterManagerTestEmpty.java",
    "status": "removed",
    "additions": 0,
    "deletions": 27,
    "changes": 27,
    "blob_url": "https://github.com/YuliyaMuraveva/poster_manager/blob/80ad369369d3c0aaf4ff3fd0c2a7d8cc10147bae/src/test/java/ru/netology/manager/PosterManagerTestEmpty.java",
    "raw_url": "https://github.com/YuliyaMuraveva/poster_manager/raw/80ad369369d3c0aaf4ff3fd0c2a7d8cc10147bae/src/test/java/ru/netology/manager/PosterManagerTestEmpty.java",
    "contents_url": "https://api.github.com/repos/YuliyaMuraveva/poster_manager/contents/src/test/java/ru/netology/manager/PosterManagerTestEmpty.java?ref=80ad369369d3c0aaf4ff3fd0c2a7d8cc10147bae",
    "patch": "@@ -1,27 +0,0 @@\n-package ru.netology.manager;\n-\n-import org.junit.jupiter.api.Test;\n-import ru.netology.domain.Movie;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class PosterManagerTestEmpty {\n-    private PosterManager manager = new PosterManager();\n-    private int quantity = 10;\n-    private Movie first = new Movie(1, \"first\", \"Action\", \"www.firstUrl.com\");\n-\n-    @Test\n-    void addToEmpty() {\n-        manager.add(first);\n-        Movie[] actual = manager.getLast(quantity);\n-        Movie[] expected = new Movie[]{first};\n-        assertArrayEquals(expected, actual);\n-    }\n-\n-    @Test\n-    void getLastEmpty() {\n-        Movie[] actual = manager.getLast(quantity);\n-        Movie[] expected = new Movie[]{};\n-        assertArrayEquals(expected, actual);\n-    }\n-}"
  },
  {
    "sha": "48dafe2c993e56842752dd17d0022c4516e4d0db",
    "filename": "src/test/java/ru/netology/repository/PosterRepositoryTest.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/YuliyaMuraveva/poster_manager/blob/71f158295c67a335363d62e74c792447d5c408bb/src/test/java/ru/netology/repository/PosterRepositoryTest.java",
    "raw_url": "https://github.com/YuliyaMuraveva/poster_manager/raw/71f158295c67a335363d62e74c792447d5c408bb/src/test/java/ru/netology/repository/PosterRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/YuliyaMuraveva/poster_manager/contents/src/test/java/ru/netology/repository/PosterRepositoryTest.java?ref=71f158295c67a335363d62e74c792447d5c408bb",
    "patch": "@@ -0,0 +1,54 @@\n+package ru.netology.repository;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import ru.netology.domain.Movie;\n+import ru.netology.manager.PosterManager;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PosterRepositoryTest {\n+    private PosterRepository repository = new PosterRepository();\n+    private Movie first = new Movie(1, \"first\", \"Action\", \"www.firstUrl.com\");\n+    private Movie second = new Movie(2, \"second\", \"Comedy\", \"www.secondUrl.com\");\n+    private Movie third = new Movie(3, \"third\", \"Cartoon\", \"www.thirdUrl.com\");\n+    private Movie fourth = new Movie(4, \"fourth\", \"Horror\", \"www.fourthUrl.com\");\n+\n+    @BeforeEach\n+    public void setUp() {\n+        repository.save(first);\n+        repository.save(second);\n+        repository.save(third);\n+    }\n+\n+    @Test\n+    void shouldFindAll() {\n+        repository.save(fourth);\n+        Movie[] actual = repository.findAll();\n+        Movie[] expected = new Movie[]{first, second, third, fourth};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void findById() {\n+        Movie[] actual = repository.findById(2);\n+        Movie[] expected = new Movie[]{second};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void removeById() {\n+        repository.removeById(2);\n+        Movie[] actual = repository.findAll();\n+        Movie[] expected = new Movie[]{first, third};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void removeAll() {\n+        repository.removeAll();\n+        Movie[] actual = repository.findAll();\n+        Movie[] expected = new Movie[]{};\n+        assertArrayEquals(expected, actual);\n+    }\n+}\n\\ No newline at end of file"
  }
]
