[
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/KlochkovDm/Homework/blob/e0ab203d61c1e199550c91a42bb4298f96a1d35a/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/KlochkovDm/Homework/raw/e0ab203d61c1e199550c91a42bb4298f96a1d35a/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/KlochkovDm/Homework/contents/.idea/uiDesigner.xml?ref=e0ab203d61c1e199550c91a42bb4298f96a1d35a",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Palette2\">\n+    <group name=\"Swing\">\n+      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Button\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"RadioButton\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"CheckBox\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Label\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n+          <preferred-size width=\"-1\" height=\"20\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+    </group>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "3538b3c65f3ea44d4c949f66c3a01b4d19911050",
    "filename": "src/main/java/ru/geekbrains/lessons/lesson1/lesson1.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/KlochkovDm/Homework/blob/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson1/lesson1.java",
    "raw_url": "https://github.com/KlochkovDm/Homework/raw/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson1/lesson1.java",
    "contents_url": "https://api.github.com/repos/KlochkovDm/Homework/contents/src/main/java/ru/geekbrains/lessons/lesson1/lesson1.java?ref=e0ab203d61c1e199550c91a42bb4298f96a1d35a",
    "patch": "@@ -1,4 +1,4 @@\n-package ru.geekbrains.lessons;\n+package ru.geekbrains.lessons.lesson1;\n \n public class lesson1 {\n     // Домашняя работа. Урок 1",
    "previous_filename": "src/main/java/ru/geekbrains/lessons/lesson1.java"
  },
  {
    "sha": "ee2f1c44fcd09bc3aac73e3d074d13889b7a3a58",
    "filename": "src/main/java/ru/geekbrains/lessons/lesson2/lesson2.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/KlochkovDm/Homework/blob/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson2/lesson2.java",
    "raw_url": "https://github.com/KlochkovDm/Homework/raw/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson2/lesson2.java",
    "contents_url": "https://api.github.com/repos/KlochkovDm/Homework/contents/src/main/java/ru/geekbrains/lessons/lesson2/lesson2.java?ref=e0ab203d61c1e199550c91a42bb4298f96a1d35a",
    "patch": "@@ -1,4 +1,4 @@\n-package ru.geekbrains.lessons;\n+package ru.geekbrains.lessons.lesson2;\n \n import java.util.Arrays;\n \n@@ -83,7 +83,7 @@ private static boolean checkBalance (int arr []) {\n         for (int i : arr) {\n             left += i;\n             if (left  == sum) return true;\n-            if (left > sum) return false;\n+            // if (left > sum) return false;\n         } return false;\n \n     }",
    "previous_filename": "src/main/java/ru/geekbrains/lessons/lesson2.java"
  },
  {
    "sha": "10892e38d9e2b70699bd101d0b3875c0d272de77",
    "filename": "src/main/java/ru/geekbrains/lessons/lesson3/TicTacToe.java",
    "status": "added",
    "additions": 295,
    "deletions": 0,
    "changes": 295,
    "blob_url": "https://github.com/KlochkovDm/Homework/blob/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson3/TicTacToe.java",
    "raw_url": "https://github.com/KlochkovDm/Homework/raw/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson3/TicTacToe.java",
    "contents_url": "https://api.github.com/repos/KlochkovDm/Homework/contents/src/main/java/ru/geekbrains/lessons/lesson3/TicTacToe.java?ref=e0ab203d61c1e199550c91a42bb4298f96a1d35a",
    "patch": "@@ -0,0 +1,295 @@\n+package ru.geekbrains.lessons.lesson3;\n+\n+import java.sql.SQLOutput;\n+import java.util.Locale;\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class TicTacToe {\n+\n+\n+    private static final char DOT_HUMAN = 'X';\n+    private static final char DOT_AI = 'O';\n+    private static final char DOT_EMPTY= '.';\n+\n+    private static char [][] field;\n+    private static int fieldSizeX;\n+    private static int fieldSizeY;\n+    private static int winLineSize =4;\n+\n+    private static final Scanner SCANNER = new Scanner(System.in);\n+    private static final Random RANDOM = new Random();\n+\n+    private static int scoreHuman = 0;\n+    private static int scoreAi = 0;\n+\n+    public static void main(String[] args) {\n+\n+        while (true) {\n+            initField();\n+            printField();\n+            while (true) {\n+                humanTurn();\n+                printField();\n+                if (gameCheck(DOT_HUMAN, \"HUMAN WINS!!!\")) {\n+                    break;\n+                }\n+                aiTurn();\n+                printField();\n+                if (gameCheck(DOT_AI, \"AI WINS!!!\")) {\n+                    break;\n+                }\n+            }\n+            System.out.printf(\"SCORE IS: HUMAN AI\\n            %d   %d\\n\", scoreHuman,scoreAi);\n+            System.out.println(\"Do you want to play again? >> Y or N\");\n+            if (!SCANNER.next().toLowerCase().equals(\"y\")) break;\n+        }\n+    }\n+\n+    private static boolean gameCheck(char dot, String s) {\n+        if (checkWin(dot)) {\n+            if (dot == DOT_HUMAN) scoreHuman++;\n+            else scoreAi++;\n+            System.out.println(s);\n+            return true;\n+        }\n+        if (checkDraw()){\n+            System.out.println(\"DRAW!\");\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+\n+\n+    private static boolean checkWin(char c) {\n+        int rowX=0;\n+        int rowY=0;\n+        int diagonalPositive=0;\n+        int diagonalNegative=0;\n+        for (int y = 0; y < fieldSizeY; y++) {\n+            for (int x = 0; x < fieldSizeX; x++) {\n+                for (int i = 1; i < winLineSize; i++) {\n+\n+                    if ((x + i < fieldSizeX) && (field[y][x] == c) && (field[y][x+i] == field[y][x])) {\n+                        rowX++;}\n+                    if ((y + i < fieldSizeY) && (field[y][x] == c && field[y + i][x] == field[y][x])) {\n+                        rowY++;}\n+                    if ((x+i< fieldSizeX && y+i < fieldSizeY) && (field[y][x] == c && field[y][x] == field[y+i][x+i])) {\n+                        diagonalPositive++;}\n+                    if ((x-i+1 >= 0 && y - i+1 >= 0 ) && (field[y][x] == c && field[y][x]== field[y-i+1][x-i+1])) {\n+                        diagonalNegative++;}\n+                }\n+                if (rowX >= winLineSize || rowY >= winLineSize || diagonalPositive >= winLineSize || diagonalNegative >= winLineSize) return true;\n+            }\n+        }return false;\n+    }\n+\n+    private static int [] winOpportunity(char c) {\n+        int [] winTurn = new int[2];\n+        int [] noWinTurn = {-1,-1};\n+        int rowX=0;\n+        int rowY=0;\n+        int diagonalPositive=0;\n+        int diagonalNegative=0;\n+        for (int y = 0; y < fieldSizeY; y++) {\n+            for (int x = 0; x < fieldSizeX; x++) {\n+                for (int i = 0; i < winLineSize; i++) {\n+\n+                    if ((x + i < fieldSizeX) && (field[y][x] == c) && (field[y][x+i] == field[y][x])) {\n+                        rowX++;\n+                        if(rowX == winLineSize-1) {\n+                            if (isCellValid(x-1,y) && isCellEmpty(x-1,y)) {\n+                                winTurn[0] = y;\n+                                winTurn[1] = x-1;\n+                                return winTurn;\n+                                }\n+                            if (isCellValid(x+winLineSize-1,y) && isCellEmpty(x+winLineSize-1,y)){\n+                                winTurn[0] = y;\n+                                winTurn[1] = x+winLineSize-1;\n+                                return winTurn;\n+                                }\n+                        }\n+                    }\n+\n+                    if ((y + i < fieldSizeY) && (field[y][x] == c && field[y + i][x] == field[y][x])) {\n+                        rowY++;\n+                        if(rowY == winLineSize-1) {\n+                            if (isCellValid(x,y-1) && isCellEmpty(x,y-1)){\n+                                winTurn[0] = y-1;\n+                                winTurn[1] = x;\n+                                return winTurn;\n+                                }\n+                            if (isCellValid(x,y+winLineSize-1) && isCellEmpty(x,y+winLineSize-1)){\n+                                winTurn[0] = y+winLineSize-1;\n+                                winTurn[1] = x;\n+                                return winTurn;\n+                                }\n+                        }\n+                    }\n+\n+                    if ((x + i < fieldSizeX && y + i < fieldSizeY) && (field[y][x] == c && field[y + i][x + i] == field[y][x])) {\n+                        diagonalPositive++;\n+                        if(diagonalPositive == winLineSize-1) {\n+                            if (isCellValid(x-1,y-1) && isCellEmpty(x-1,y-1)){\n+                                winTurn[0] = y-1;\n+                                winTurn[1] = x-1;\n+                                return winTurn;\n+                                }\n+                            if (isCellValid(x+winLineSize-1,y+winLineSize-1) && isCellEmpty(x+winLineSize-1,y+winLineSize-1)){\n+                                winTurn[0] = y+winLineSize-1;\n+                                winTurn[1] = x+winLineSize-1;\n+                                return winTurn;\n+                                }\n+                        }\n+                    }\n+\n+                    if ((x-i >= 0 && y - i >= 0 ) && (field[y][x] == c && field[y-i][x-i] == field[y][x])) {\n+                        diagonalNegative++;\n+                        if(diagonalNegative == winLineSize-1) {\n+                            if (isCellValid(x+1,y-1) && isCellEmpty(x+1,y-1)){\n+                                winTurn[0] = y-1;\n+                                winTurn[1] = x+1;\n+                                return winTurn;\n+                                }\n+                            if (isCellValid(x-winLineSize+1,y+winLineSize-1) && isCellEmpty(x-winLineSize+1,y+winLineSize-1)){\n+                                winTurn[0] = y+winLineSize-1;\n+                                winTurn[1] = x-winLineSize+1;\n+                                return winTurn;\n+                                }\n+                        }\n+                    }\n+                }\n+            }\n+        } return noWinTurn;\n+    }\n+\n+\n+\n+   /*  Метод проверки для 4х символов\n+\n+        private static boolean checkWin(char c) {\n+\n+        for (int y = 0; y < fieldSizeY; y++) {\n+            for (int x = 0; x < fieldSizeX; x++) {\n+                if ((x+3<fieldSizeX) && (field[y][x] == c && field[y][x+1] == c && field[y][x + 2] == c && field[y][x + 3] == c)) return true;\n+                if ((y+3<fieldSizeY) && (field[y][x] == c && field[y+1][x] == c && field[y+2][x] == c && field[y+3][x] == c)) return true;\n+                if ((x+3<fieldSizeX && y+3<fieldSizeY) && (field[y][x] == c && field[y+1][x+1] == c && field[y + 2][x + 2] == c && field[y + 3][x + 3] == c)) return true;\n+                if ((x+3<fieldSizeX && y+3<fieldSizeY) && (field[y][x+3] == c && field[y+1][x+2] == c && field[y+2][x+1] == c && field[y+3][x] == c)) return true;\n+            }\n+        } return false;\n+    }\n+\n+\n+         hor\n+        if (field[0][0] == c && field[0][1] == c && field[0][2] == c) return true;\n+        if (field[1][0] == c && field[1][1] == c && field[1][2] == c) return true;\n+        if (field[2][0] == c && field[2][1] == c && field[2][2] == c) return true;\n+\n+        // ver\n+        if (field[0][0] == c && field[1][0] == c && field[2][0] == c) return true;\n+        if (field[0][1] == c && field[1][1] == c && field[2][1] == c) return true;\n+        if (field[0][2] == c && field[1][2] == c && field[2][2] == c) return true;\n+\n+        // dia\n+        if (field[0][0] == c && field[1][1] == c && field[2][2] == c) return true;\n+        if (field[0][2] == c && field[1][1] == c && field[2][0] == c) return true;\n+        return false;\n+*/\n+    private static boolean checkDraw() {\n+        for (int y = 0; y < fieldSizeY; y++) {\n+            for (int x = 0; x < fieldSizeX; x++){\n+                if (isCellEmpty(x,y)) return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static void aiTurn(){\n+\n+        int x;\n+        int y;\n+        int winTurn [] = new int[2];\n+         winTurn= winOpportunity(DOT_AI);\n+        if(!(winTurn[0]==-1 || winTurn[1]==-1)) {\n+            y=winTurn[0];\n+            x=winTurn[1];\n+            field[y][x] = DOT_AI;}\n+\n+        winTurn = winOpportunity(DOT_HUMAN);\n+        if(!(winTurn[0]==-1 || winTurn[1]==-1)) {\n+            y=winTurn[0];\n+            x=winTurn[1];\n+            field[y][x] = DOT_AI;}\n+        else {\n+            do {\n+                x =  RANDOM.nextInt(fieldSizeX);\n+                y = RANDOM.nextInt(fieldSizeY);\n+                } while (!isCellEmpty(x,y));\n+            field[y][x] = DOT_AI;}\n+    }\n+\n+\n+\n+\n+\n+\n+    private static void humanTurn() {\n+        int x;\n+        int y;\n+        do {\n+            System.out.println(\"Введите координаты X и Y через пробел >>>>>\");\n+            x = SCANNER.nextInt() - 1;\n+            y = SCANNER.nextInt() - 1;\n+        } while (!isCellValid(x,y) || !isCellEmpty(x,y));\n+        field[y][x] = DOT_HUMAN;\n+    }\n+\n+    private static boolean isCellValid(int x, int y) {\n+        return x>=0 && y>=0 && x < fieldSizeX && y < fieldSizeY;\n+    }\n+\n+    private static boolean isCellEmpty(int x, int y) {\n+         return field [y][x] == DOT_EMPTY;\n+    }\n+\n+\n+    private static void initField() {\n+        fieldSizeX = 5;\n+        fieldSizeY = 5;\n+        field = new char [fieldSizeY][fieldSizeX];\n+        for (int y = 0; y < fieldSizeY; y++) {\n+            for (int x = 0; x < fieldSizeX; x++) {\n+                field[y][x] = DOT_EMPTY;\n+            }\n+        }\n+    }\n+\n+    private static void printField (){\n+\n+        System.out.print(\"+\");\n+        for (int i = 0; i < fieldSizeX * 2 + 1; i++)\n+            System.out.print((i % 2 == 0) ? \"-\" : i / 2 + 1);\n+        System.out.println();\n+        for (int y = 0; y < fieldSizeY; y++) {\n+            System.out.print(y + 1 + \"|\");\n+            for (int x = 0; x < fieldSizeX; x++) {\n+                System.out.print(field[y][x] + \"|\");\n+            }\n+            System.out.println();\n+        }\n+        for (int i = 0; i <= fieldSizeX * 2 + 1; i++)\n+            System.out.print(\"-\");\n+        System.out.println();\n+    }\n+\n+    static void printArr(char [][] arr) {\n+        for (int i = 0; i < arr.length; i++) {\n+            for (int j = 0; j < arr[0].length; j++) {\n+                System.out.print(arr[i][j] + \"  \");\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "4c1a6d6d9b7d909b2d99c635c8bed3a48397ee1a",
    "filename": "src/main/java/ru/geekbrains/lessons/lesson4/Employee.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/KlochkovDm/Homework/blob/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson4/Employee.java",
    "raw_url": "https://github.com/KlochkovDm/Homework/raw/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson4/Employee.java",
    "contents_url": "https://api.github.com/repos/KlochkovDm/Homework/contents/src/main/java/ru/geekbrains/lessons/lesson4/Employee.java?ref=e0ab203d61c1e199550c91a42bb4298f96a1d35a",
    "patch": "@@ -0,0 +1,41 @@\n+package ru.geekbrains.lessons.lesson4;\n+\n+public class Employee {\n+\n+    private String name;\n+    private String position;\n+    private String email;\n+    private String phone;\n+    private int salary;\n+    private int age;\n+\n+    public Employee() {}\n+\n+    public Employee(String name, String position, String email, String phone, int salary, int age) {\n+        this.name = name;\n+        this.position = position;\n+        this.email = email;\n+        this.phone = phone;\n+        this.salary = salary;\n+        this.age = age;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+    public String getInfo () {\n+        return this.name + \" \" + this.position+ \" \" + this.email+ \" \" + this.phone+ \" \" + this.salary+ \" \" + this.age;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Employee{\" +\n+                \"name='\" + name + '\\'' +\n+                \", position='\" + position + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", phone='\" + phone + '\\'' +\n+                \", salary=\" + salary +\n+                \", age=\" + age +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "c9c997f908f3e0cbcd18c6e8b6efe978623e0c38",
    "filename": "src/main/java/ru/geekbrains/lessons/lesson4/EmployeeData.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/KlochkovDm/Homework/blob/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson4/EmployeeData.java",
    "raw_url": "https://github.com/KlochkovDm/Homework/raw/e0ab203d61c1e199550c91a42bb4298f96a1d35a/src/main/java/ru/geekbrains/lessons/lesson4/EmployeeData.java",
    "contents_url": "https://api.github.com/repos/KlochkovDm/Homework/contents/src/main/java/ru/geekbrains/lessons/lesson4/EmployeeData.java?ref=e0ab203d61c1e199550c91a42bb4298f96a1d35a",
    "patch": "@@ -0,0 +1,33 @@\n+package ru.geekbrains.lessons.lesson4;\n+\n+public class EmployeeData {\n+\n+    public static void main(String[] args) {\n+\n+\n+      Employee[] EmployeeArr = {\n+        new Employee(\"Ivanov Ivan\", \"Engineer\", \"ii@mailbox.com\", \"8123456789\", 30000, 30),\n+        new Employee(\"Petrov Petr\", \"Engineer\", \"pp@mailbox.com\", \"8987654321\", 35000, 35),\n+        new Employee(\"Dmitriev Dmitriy\", \"Sales Manager\", \"dd@mailbox.com\", \"8741852963\", 40000, 40),\n+        new Employee(\"Mikhailov Mikhail\", \"Chief Engineer\", \"mm@mailbox.com\", \"8369258147\", 45000, 45),\n+        new Employee(\"Valeryev Valery\", \"Chief Executive\", \"vv@mailbox.com\", \"8147258369\", 50000, 50)\n+      };\n+\n+      olderThan40(EmployeeArr);\n+\n+      for (Employee e : EmployeeArr) {\n+          if (e.getAge() >40) {\n+                  System.out.println(e.getInfo());\n+          }\n+      }\n+\n+    }\n+\n+    private static void olderThan40 (Employee [] arr) {\n+        for (int i = 0; i < arr.length ; i++) {\n+          if (arr[i].getAge() > 40){\n+              System.out.println(arr[i]);\n+          }\n+        }\n+    }\n+}"
  }
]
