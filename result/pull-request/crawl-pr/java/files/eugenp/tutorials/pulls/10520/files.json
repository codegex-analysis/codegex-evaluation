[
  {
    "sha": "67ee1822b7bac23d6cf9afda3badd3f50ae76808",
    "filename": "spring-5-reactive-2/src/test/java/com/baeldung/backpressure/BackpressureServiceTest.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/eugenp/tutorials/blob/47b0f9a8517a8e0daa12b10e9c80e2128d5fa43b/spring-5-reactive-2/src/test/java/com/baeldung/backpressure/BackpressureServiceTest.java",
    "raw_url": "https://github.com/eugenp/tutorials/raw/47b0f9a8517a8e0daa12b10e9c80e2128d5fa43b/spring-5-reactive-2/src/test/java/com/baeldung/backpressure/BackpressureServiceTest.java",
    "contents_url": "https://api.github.com/repos/eugenp/tutorials/contents/spring-5-reactive-2/src/test/java/com/baeldung/backpressure/BackpressureServiceTest.java?ref=47b0f9a8517a8e0daa12b10e9c80e2128d5fa43b",
    "patch": "@@ -0,0 +1,82 @@\n+package com.baeldung.backpressure;\n+\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Flux;\n+import reactor.test.StepVerifier;\n+\n+public class BackpressureServiceTest {\n+\n+    @Test\n+    public void whenLimitRateSet_thenSplitIntoChunks() throws InterruptedException {\n+        Flux<Integer> limit$ = Flux.range(1, 25);\n+\n+        limit$.limitRate(10);\n+        limit$.subscribe(\n+            value -> System.out.println(value),\n+            err -> err.printStackTrace(),\n+            () -> System.out.println(\"Finished!!\"),\n+            subscription -> subscription.request(15)\n+        );\n+\n+        StepVerifier.create(limit$)\n+            .expectSubscription()\n+            .thenRequest(15)\n+            .expectNext(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n+            .expectNext(11, 12, 13, 14, 15)\n+            .thenRequest(10)\n+            .expectNext(16, 17, 18, 19, 20, 21, 22, 23, 24, 25)\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    public void whenRequestingChunks10_thenMessagesAreReceived() {\n+        Flux<Integer> request$ = Flux.range(1, 50);\n+\n+        request$.subscribe(\n+            System.out::println,\n+            err -> err.printStackTrace(),\n+            () -> System.out.println(\"All 50 items have been successfully processed!!!\"),\n+            subscription -> {\n+                for (int i = 0; i < 5; i++) {\n+                    System.out.println(\"Requesting the next 10 elements!!!\");\n+                    subscription.request(10);\n+                }\n+            }\n+        );\n+\n+        StepVerifier.create(request$)\n+            .expectSubscription()\n+            .thenRequest(10)\n+            .expectNext(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n+            .thenRequest(10)\n+            .expectNext(11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n+            .thenRequest(10)\n+            .expectNext(21, 22, 23, 24, 25, 26, 27 , 28, 29 ,30)\n+            .thenRequest(10)\n+            .expectNext(31, 32, 33, 34, 35, 36, 37 , 38, 39 ,40)\n+            .thenRequest(10)\n+            .expectNext(41, 42, 43, 44, 45, 46, 47 , 48, 49 ,50)\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    public void whenCancel_thenSubscriptionFinished() {\n+        Flux<Integer> cancel$ = Flux.range(1, 10).log();\n+\n+        cancel$.subscribe(new BaseSubscriber<Integer>() {\n+            @Override\n+            protected void hookOnNext(Integer value) {\n+                request(3);\n+                System.out.println(value);\n+                cancel();\n+            }\n+        });\n+\n+        StepVerifier.create(cancel$)\n+            .expectNext(1, 2, 3)\n+            .thenCancel()\n+            .verify();\n+    }\n+}\n+"
  }
]
