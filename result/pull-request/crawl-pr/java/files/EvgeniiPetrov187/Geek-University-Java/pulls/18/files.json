[
  {
    "sha": "8dee146bf9f7b8572b62c8cfefcda297b2f55138",
    "filename": ".gitignore",
    "status": "removed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/1db64a34de9ca405685ef303d95173caa0d73c04/.gitignore",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/1db64a34de9ca405685ef303d95173caa0d73c04/.gitignore",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/.gitignore?ref=1db64a34de9ca405685ef303d95173caa0d73c04",
    "patch": "@@ -1 +0,0 @@\n-nogit.txt"
  },
  {
    "sha": "6850b6cd12eaf0de7ab3296935b7110d3384be6f",
    "filename": "FirstApp.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/FirstApp.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/FirstApp.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/FirstApp.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,73 @@\n+package Metodichka.lesson1;\n+\n+public class FirstApp {\n+    public static void main (String [] args){\n+        System.out.println(Summe(2,2, 3, 5));\n+        //Написать метод, вычисляющий выражение a * (b + (c / d)) и возвращающий результат\n+\n+        System.out.println(Strait(7,4));\n+        // Написать метод, принимающий на вход два целых числа и проверяющий,\n+        // что их сумма лежит в пределах от 10 до 20 (включительно), если да –\n+        // вернуть true, в противном случае – false\n+\n+        Question(-5);\n+        // Написать метод, которому в качестве параметра передается целое число, метод\n+        // должен напечатать в консоль, положительное ли число передали или отрицательное.\n+        // Замечание: ноль считаем положительным числом.\n+\n+\n+        System.out.println(Negat(7));\n+        // Написать метод, которому в качестве параметра передается целое число.\n+        // Метод должен вернуть true, если число отрицательное, и вернуть false если положительное.\n+\n+        Name(\"Виктор\");\n+        // Написать метод, которому в качестве параметра передается строка, обозначающая имя.\n+        // Метод должен вывести в консоль сообщение «Привет, указанное_имя!».\n+\n+        Year(2020);\n+        //* Написать метод, который определяет, является ли год високосным, и выводит сообщение в консоль.\n+        // Каждый 4-й год является високосным, кроме каждого 100-го, при этом каждый 400-й – високосный.\n+    }\n+\n+    public static float Summe (float a, float b, float c, float d) {\n+        return a * (b + c / d);\n+    }\n+\n+\n+    public static boolean Strait (int a, int b){\n+        if ((a + b) >= 10 && (a + b) <= 20){\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    public static void Question (int a){\n+        if (a >= 0){\n+            System.out.println(\"Число \" + a + \" положительное\");\n+        } else {\n+            System.out.println(\"Число \" + a + \" отрицательное\");\n+        }\n+    }\n+\n+    public static boolean Negat (int a){\n+        if (a < 0) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+    public static void Name (String name){\n+        System.out.println(\"Привет, \" + name + \"!\");\n+    }\n+\n+\n+    public static void Year (int year){\n+        if ((year % 100) != 0 || (year % 400) == 0  && (year % 4) == 0){\n+            System.out.println(year + \"-й год является Високосным\");\n+        } else {\n+            System.out.println(year + \"-й год не является Високосным\");\n+        }\n+    }\n+    }\n+"
  },
  {
    "sha": "c75e9eaabdcd7a7e7e2f54a72ef8d98bc92b2f55",
    "filename": "Lesson4.java",
    "status": "added",
    "additions": 300,
    "deletions": 0,
    "changes": 300,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson4.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson4.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson4.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,300 @@\n+package Lesson4;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class Lesson4 {\n+\n+    public static final char emptyPlace = '_';\n+    public static final char myTurn = 'X';\n+    public static final char aiTurn = 'O';\n+    public static char[][] myMap;\n+    public static Random ai = new Random();\n+    public static Scanner scanner = new Scanner(System.in);\n+    public static int mapSize = finalSize(); // Выбор размера карты\n+    public static int score = Score(mapSize); // Подсчёт очков\n+    public static int comp = Difficulty(); // Выбор сложности\n+\n+    // 1.Полностью разобраться с кодом, попробовать переписать с нуля,\n+    // стараясь не подглядывать в методичку.\n+\n+    public static void main (String [] args) {\n+        battleField();//инициализация карты\n+        paintMap(); // прорисовка поля\n+        while (true) {\n+            manTurn(); //Ход человека\n+            paintMap(); // прорисовка поля\n+            if (winner(myTurn)) { //проверка победы\n+                System.out.println(\"Победил игрок\");\n+                break;\n+            }\n+            if (draw()) { //проверка ничьи\n+                System.out.println(\"Ничья\");\n+                break;\n+            }\n+            if (comp == 1)\n+                compTurn(); // Ход компьютера низкая сложность\n+            if (comp == 2)\n+                blockCompTurn(); // Ход компьютера высокая сложность\n+            paintMap(); // прорисовка поля\n+            if (winner(aiTurn)) { //проверка победы\n+                System.out.println(\"Победил искусственный интеллект\");\n+                break;\n+            }\n+            if (draw()) {//проверка ничьи\n+                System.out.println(\"Ничья\");\n+                break;\n+            }\n+        }\n+    }\n+\n+    // Для задания 3. Выбор размера карты\n+    private static int finalSize(){\n+            int x = -1;\n+            for (int i = 0; ; i++) {\n+                System.out.println(\"Введите размер карты: 3 или 5\");\n+                try {\n+                    x = scanner.nextInt();\n+                } catch (NoSuchElementException | IllegalStateException e){\n+                    System.out.println(\"Введите числа\");\n+                    scanner = new Scanner(System.in);\n+                }\n+                if ((x == 3) || (x == 5))\n+                    break;\n+            }\n+            return x;\n+        }\n+\n+        // Для задания 3. Подсчёт очков\n+        private static int Score(int size) {\n+            if (size > 3) {\n+                size--;\n+            }\n+            return size;\n+        }\n+\n+    // Для задания 4. Выбор сложности\n+    private static int Difficulty(){\n+        int x = -1;\n+        for (int i = 0; ; i++) {\n+            System.out.println(\"Выберите сложность: 1 - Дружок(легко) или 2 - Демон(сложно)\");\n+            try {\n+                x = scanner.nextInt();\n+            } catch (NoSuchElementException | IllegalStateException e){\n+                System.out.println(\"Введите числа 1 или 2\");\n+                scanner = new Scanner(System.in);\n+            }\n+            if ((x == 1) || (x == 2))\n+                break;\n+        }\n+        return x;\n+    }\n+\n+\n+    private static void battleField () { //инициализация карты\n+        myMap = new char[mapSize][mapSize];\n+        for (int i = 0; i < mapSize; i++) {\n+            for (int j = 0; j < mapSize; j++) {\n+                myMap[i][j] = emptyPlace;\n+            }\n+        }\n+    }\n+\n+    private static void paintMap (){ // прорисовка поля\n+        for (int i = 0; i < mapSize; i++){\n+            for (int j = 0; j< mapSize; j++) {\n+                System.out.print(myMap[i][j]+\" \");\n+            }\n+                System.out.println();\n+        }\n+    }\n+\n+    private static void manTurn () { // Ход игрока\n+        int x = -1;\n+        int y = -1;\n+        for (int i = 0; ; i++) {\n+            System.out.println(\"Введите координаты х и у:\");\n+            try {\n+                x = scanner.nextInt() - 1;\n+                y = scanner.nextInt() - 1;\n+            } catch (NoSuchElementException | IllegalStateException e){\n+                System.out.println(\"Введите числа\");\n+                scanner = new Scanner(System.in);\n+            }\n+                if ((x >= 0 && x < mapSize) && (y >= 0 && y < mapSize) && (myMap[x][y] == emptyPlace)) {\n+                    myMap[x][y] = myTurn;\n+                    break;\n+                }\n+        }\n+    }\n+    private static void compTurn() { // Ход компьютера Дружок\n+        System.out.println(\"Ход компьютера\");\n+        int x;\n+        int y;\n+        for (int i = 0; ; i++) {\n+            x = ai.nextInt(mapSize-1);\n+            y = ai.nextInt(mapSize-1);\n+            if (myMap[x][y] == emptyPlace) {\n+                myMap[x][y] = aiTurn;\n+                break;\n+            }\n+        }\n+    }\n+    // 4. *** Доработать искусственный интеллект, чтобы он мог блокировать ходы игрока.\n+    private static void blockCompTurn() { // Ход компьютера Демон\n+        System.out.println(\"Ход компьютера\");\n+        int count = 0;\n+        for (int k = 0; k < 50; k++) {\n+            for (int i = 0; i < mapSize; i++) {\n+                for (int j = 0; j < mapSize; j++) {\n+                    if ((myMap[i][j] == emptyPlace) && (j > 0) && (j+1 < mapSize) && (myMap[i][j-1] == myTurn) && (myMap[i][j+1] == myTurn)) {\n+                        myMap[i][j] = aiTurn; // block center between right left\n+                        count++;\n+                        break;\n+                    } else if ((myMap[i][j] == emptyPlace) && (i > 0) && (i+1 < mapSize) && (myMap[i+1][j] == myTurn) && (myMap[i-1][j] == myTurn)) {\n+                        myMap[i][j] = aiTurn; // block center between up down\n+                        count++;\n+                        break;\n+                    } else if ((myMap[i][j] == emptyPlace) && (j+2 < mapSize) && (myMap[i][j+1] == myTurn) && (myMap[i][j+2] == myTurn)) {\n+                        myMap[i][j] = aiTurn; // block right\n+                        count++;\n+                        break;\n+                    } else if ((myMap[i][j] == emptyPlace) && (j-2 >= 0) && (myMap[i][j-1] == myTurn) && (myMap[i][j-2] == myTurn)) {\n+                        myMap[i][j] = aiTurn; // block left\n+                        count++;\n+                        break;\n+                    } else if ((myMap[i][j] == emptyPlace) && (i+2 < mapSize) && (myMap[i+1][j] == myTurn) && (myMap[i+2][j] == myTurn)) {\n+                        myMap[i][j] = aiTurn; // block down\n+                        count++;\n+                        break;\n+                    } else if ((myMap[i][j] == emptyPlace) && (i-2 >= 0) && (myMap[i-1][j] == myTurn) && (myMap[i-2][j] == myTurn)) {\n+                        myMap[i][j] = aiTurn; // block up\n+                        count++;\n+                        break;\n+                    } else if ((j+2+i < mapSize) && (myMap[j+i][j] == emptyPlace) && (myMap[j+1+i][j+1] == myTurn) && (myMap[j+2+i][j+2] == myTurn)){\n+                       myMap[j][j+i] = aiTurn; // block diag up left plus i\n+                       count++;\n+                       break;\n+                    } else if ((j+2 < mapSize) && (j-i >= 0) && (myMap[j-i][j] == emptyPlace) && (myMap[j+1-i][j+1] == myTurn) && (myMap[j+2-i][j+2] == myTurn)){\n+                        myMap[j-i][j] = aiTurn; // block diag up left minus i\n+                        count++;\n+                        break;\n+                    } else if ((j+i < mapSize) && (myMap[j+i][j] == emptyPlace) && (j-2 >= 0) && ((j-2+i) >= 0) && ((j-1+i) < mapSize) && (myMap[j-1+i][j-1] == myTurn) && (myMap[j-2+i][j-2] == myTurn)) {\n+                        myMap[j+i][j] = aiTurn; // block diag right down plus i\n+                        count++;\n+                        break;\n+                    } else if ((j-2-i >= 0) && (myMap[j-i][j] == emptyPlace) && (j-2 >= 0) && ((j-2-i) >= 0) && ((j-1-i) < mapSize) && (myMap[j-1-i][j-1] == myTurn) && (myMap[j-2-i][j-2] == myTurn)){\n+                        myMap[j-i][j] = aiTurn; // block diag right down minus i\n+                        count++;\n+                        break;\n+                    } else if ((mapSize-j-3+i >= 0) && (mapSize-j-1+i < mapSize) && (myMap[mapSize-j-1+i][j] == emptyPlace) && (j+2 < mapSize) && (myMap[mapSize-j-2+i][j+1] == myTurn) && (myMap[mapSize-j-3+i][j+2] == myTurn)){\n+                        myMap[mapSize-j-1+i][j] = aiTurn; // block diag left down plus i\n+                        count++;\n+                        break;\n+                    } else if ((mapSize-j-3-i >= 0) && (myMap[mapSize-j-1-i][j] == emptyPlace) && (j+2 < mapSize) && (myMap[mapSize-j-2-i][j+1] == myTurn) && (myMap[mapSize-j-3-i][j+2] == myTurn)){\n+                        myMap[mapSize-j-1-i][j] = aiTurn; // block diag left down minus i\n+                        count++;\n+                        break;\n+                    } else if ((j+2+i < mapSize) && (myMap[j+i][mapSize-1-j] == emptyPlace) && (mapSize-j-3 >= 0) && (myMap[j+1+i][mapSize-j-2] == myTurn) && (myMap[j+2+i][mapSize-j-3] == myTurn)) {\n+                        myMap[j+i][mapSize-1-j] = aiTurn; // block diag right up plus i\n+                        count++;\n+                        break;\n+                    } else if ((j+2-i < mapSize) && (j-i >= 0)&& (mapSize-j-3 >= 0) && (myMap[j-i][mapSize-1-j] == emptyPlace) && (myMap[j+1-i][mapSize-j-2] == myTurn) && (myMap[j+2-i][mapSize-j-3] == myTurn)) {\n+                        myMap[j-i][mapSize-1-j] = aiTurn; // block diag right up minus i\n+                        count++;\n+                        break;\n+                    } else if ((i > 0) && (i < mapSize-1 ) && (myMap[i][i] == emptyPlace)){\n+                            myMap[i][i] = aiTurn; // game in center\n+                            count++;\n+                            break;\n+                    } else if ((k == 49) && (myMap[i][j] == emptyPlace)){\n+                        myMap[i][j] = aiTurn; // last hope\n+                        count++;\n+                        break;\n+                    }\n+                }\n+\n+            if (count == 1)\n+                break;\n+            }\n+\n+            int x = 0;\n+            int y = 0;\n+            x = ai.nextInt(mapSize-1);\n+            y = ai.nextInt(mapSize-1);\n+            if (count == 1)\n+                break;\n+             else if (myMap[x][y] == emptyPlace){\n+                myMap[x][y] = aiTurn;\n+                break;\n+            }\n+        }\n+    }\n+\n+    // 2. Переделать проверку победы, чтобы она не была реализована просто набором условий,\n+    // например, с использованием циклов.\n+    // 3. * Попробовать переписать логику проверки победы, чтобы она работала для поля 5х5\n+    // и количества фишек 4. Очень желательно не делать это просто набором условий для\n+    // каждой из возможных ситуаций;\n+    private static boolean winner(char result) { // Проверка победы для любого размера карты и подсчёт очков\n+        for (int i = 0; i < mapSize; i++){\n+            int pointHorizont = 0;\n+            int pointVertical = 0;\n+            int pointDiagPlus = 0;\n+            int pointDiagMinus = 0;\n+            int pointDiagBackPlus = 0;\n+            int pointDiagBackMinus = 0;\n+            for (int j = 0; j < mapSize; j++) {\n+                if (myMap[i][j] == result)\n+                    pointHorizont++;\n+                if (pointHorizont == score)\n+                    return true;\n+                if (myMap[j][i] == result)\n+                    pointVertical++;\n+                if (pointVertical == score)\n+                    return true;\n+                if (((i+j) < mapSize) && (myMap[j][j+i] == result))\n+                    pointDiagPlus++;\n+                if (pointDiagPlus == score)\n+                    return true;\n+                if (((j-i) >= 0) && (myMap[j][j-i] == result))\n+                    pointDiagMinus++;\n+                if (pointDiagMinus == score)\n+                    return true;\n+                if ((mapSize-1-j+i < mapSize) && (myMap[j][mapSize-1-j+i] == result))\n+                    pointDiagBackPlus++;\n+                if (pointDiagBackPlus == score)\n+                    return true;\n+                if ((mapSize-1-j-i >= 0) && (myMap[j][mapSize-1-j-i] == result))\n+                    pointDiagBackMinus++;\n+                if (pointDiagBackMinus == score)\n+                    return true;\n+                if (myMap[i][j] != result)\n+                    pointHorizont = 0;\n+                if (myMap[j][i] != result)\n+                    pointVertical = 0;\n+                if (((i+j) < mapSize) && (myMap[j][j+i] != result))\n+                    pointDiagPlus = 0;\n+                if (((j-i) >= 0) && (myMap[j][j-i] != result))\n+                    pointDiagMinus = 0;\n+                if ((mapSize-1-j+i < mapSize) && (myMap[j][mapSize-1-j+i] != result))\n+                    pointDiagBackPlus = 0;\n+                if ((mapSize-1-j-i >= 0) && (myMap[j][mapSize-1-j-i] != result))\n+                    pointDiagBackMinus = 0;\n+                }\n+            }\n+        return false;\n+    }\n+\n+    private static boolean draw(){ // проверка ничьи\n+        for (int i = 0; i < mapSize; i++) {\n+            for (int j = 0; j < mapSize; j++) {\n+                if (myMap[i][j] == emptyPlace) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+}"
  },
  {
    "sha": "ab0b8856e60f46a3f72a775111d9333938d06a72",
    "filename": "Lesson5/Main.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson5/Main.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson5/Main.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson5/Main.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,23 @@\n+package Lesson5;\n+\n+public class Main {\n+    public static void main (String [] args){\n+\n+        //4. Создать массив из 5 сотрудников.\n+        Person[] personArray = new Person[5];\n+        personArray[0] = new Person(\"Василий Рябинов\", \"Директор\", \"1970vasr@mail.ru\", \"89136332941\", 230000, 50);\n+        personArray[1] = new Person(\"Елена Демидова\", \"Секретарь\", \"1999lena@mail.ru\", \"89136889981\", 30000, 21);\n+        personArray[2] = new Person(\"Виктор Королёв\", \"Системный администратор\", \"1985korol@mail.ru\", \"89136889999\", 60000, 35);\n+        personArray[3] = new Person(\"Ирина Демидова\", \"Финансовый директор\", \"1965ivd@mail.ru\", \"89139995566\", 130000, 55);\n+        personArray[4] = new Person(\"Дядя Ваня\", \"Водитель\", \"1960volga@mail.ru\", \"89089119110\", 40000, 60);\n+\n+        //5. С помощью цикла вывести информацию только о сотрудниках старше 40 лет.\n+        for (int i = 0; i < personArray.length; i++){\n+            if (personArray[i].age > 40) {\n+                Person worker = personArray[i];\n+                worker.PrintPerson();\n+                System.out.println();\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "0c73e4cc4365b1c8211087b4b9059cf94447b571",
    "filename": "Lesson5/Person.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson5/Person.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson5/Person.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson5/Person.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,43 @@\n+package Lesson5;\n+\n+import com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;\n+\n+    //1. Создать класс \"Сотрудник\" с полями: ФИО, должность, email, телефон, зарплата, возраст.\n+public class Person {\n+    public final String name;\n+    public final String place;\n+    public final String eMail;\n+    public final String phoneNumber;\n+    public final double money;\n+    public final int age;\n+\n+    public Person(String name, String place, String eMail, String phoneNumber, double money, int age){\n+        this.name = name;\n+        this.place = place;\n+        this.eMail = eMail;\n+        this.phoneNumber = phoneNumber;\n+        this.money = money;\n+        this.age = age;\n+    }\n+    //2. Конструктор класса должен заполнять эти поля при создании объекта.\n+    public Person() {\n+        this.name = \"Максим Иванов\";\n+        this.place = \"Программист\";\n+        this.eMail = \"30max@mail.ru\";\n+        this.phoneNumber = \"89997777777\";\n+        this.money = 50000;\n+        this.age = 30;\n+    }\n+\n+    //3. Внутри класса «Сотрудник» написать метод, который выводит информацию об объекте в консоль.\n+    public void PrintPerson() {\n+        System.out.println(\"Имя: \" + this.name);\n+        System.out.println(\"Возраст: \" + this.age);\n+        System.out.println(\"Должность: \" + this.place);\n+        System.out.println(\"Электронная почта: \" + this.eMail);\n+        System.out.println(\"Номер телефона: \" + this.phoneNumber);\n+        System.out.println(\"Зарплата: \" + this.money);\n+    }\n+\n+\n+}"
  },
  {
    "sha": "fd7d5ce93273f9cb29e0eb2d35d7801dc04f25a3",
    "filename": "Lesson6/Animals.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Animals.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Animals.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson6/Animals.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,82 @@\n+//1. Создать классы Собака и Кот с наследованием от класса Животное.\n+public abstract class Animals {\n+    private String name;\n+    private int age;\n+    private int run;\n+    private int swim;\n+    private String type;\n+    public static int count;// К заданию 4.\n+\n+\n+    public Animals(String name, int age, int run, int swim) {\n+        this.name = name;\n+        this.age = age;\n+        this.run = run;\n+        this.swim = swim;\n+\n+    }\n+        public Animals(){\n+        this.name = \"Геракл\";\n+        this.age = 3;\n+        this.run = 100;\n+        this.swim = 10;\n+        this.type = \"Животное\";\n+        count++;\n+    }\n+\n+    // К заданию 3.\n+    void running(int run){\n+        if (this.run == 0){\n+            System.out.println(age + \"-летний(-яя) \" + type + \" \" + name + \" не умеет бегать\");\n+        } else if (run > this.run){\n+            System.out.println(age + \"-летний(-яя) \" + type +\" \" + name + \" не может пробежать \" + run + \" метров\");\n+        }  else {\n+            System.out.println(age + \"-летний(-яя) \" + type +\" \" + name + \" пробежал(-а) \" + run + \" метров\");\n+        }\n+    }\n+\n+    // К заданию 3.\n+    void swimming(int swim){\n+        if (this.swim == 0) {\n+            System.out.println(age + \"-летний(-яя) \" + type + \" \" + name + \" не умеет плавать\");\n+        } else if (swim > this.swim){\n+            System.out.println(age + \"-летний(-яя) \" + type +\" \" + name + \" не может проплыть \" + swim + \" метров\");\n+        } else {\n+            System.out.println(age + \"-летний(-яя) \" + type +\" \" + name + \" проплыл(-а) \" + swim + \" метров\");\n+        }\n+    }\n+\n+    abstract void voice();\n+\n+    public void setType(String type){\n+        this.type = type;\n+    }\n+    public String getType(){\n+        return type;\n+    }\n+    public void setName(String name){\n+        this.name = name;\n+    }\n+    public String getName(){\n+        return name;\n+    }\n+    public void setAge(int age){\n+        this.age = age;\n+    }\n+    public int getAge(){\n+        return age;\n+    }\n+    public void setRun(int run){\n+        this.run = run;\n+    }\n+    public int getRun(){\n+        return run;\n+    }\n+    public void setSwim(int swim){\n+        this.swim = swim;\n+    }\n+    public int getSwim(){\n+        return swim;\n+    }\n+\n+}"
  },
  {
    "sha": "963e3b33f092d2f06c0b22ff4ae75688fd5d61e1",
    "filename": "Lesson6/Cat.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Cat.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Cat.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson6/Cat.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,18 @@\n+//1. Создать классы Собака и Кот с наследованием от класса Животное.\n+public class Cat extends Animals {\n+    public static int cats = 0;// К заданию 4.\n+    public Cat(String name, int age, int run, int swim) {\n+        super();\n+        setName(name);\n+        setRun(run);\n+        setAge(age);\n+        setSwim(swim);\n+        setType(\"Кот\");\n+        cats++;\n+    }\n+    @Override\n+    void voice(){\n+        System.out.println(getType() + \" \" + getName() + \" мяукает\");\n+    }\n+\n+}"
  },
  {
    "sha": "fc94812c20d87ec6bea7c714b783876f1db4495f",
    "filename": "Lesson6/Dog.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Dog.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Dog.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson6/Dog.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,18 @@\n+//1. Создать классы Собака и Кот с наследованием от класса Животное.\n+public class Dog extends Animals {\n+    public static int dogs = 0;// К заданию 4.\n+    public Dog(String name, int age, int run, int swim) {\n+        super();\n+        setName(name);\n+        setRun(run);\n+        setAge(age);\n+        setSwim(swim);\n+        setType(\"Собака\");\n+        dogs++;\n+    }\n+    @Override\n+    void voice(){\n+        System.out.println(getType() + \" \" + getName() + \" лает\");\n+    }\n+\n+}"
  },
  {
    "sha": "3669da67eb24f247996dedfac15f0f98fcb656e9",
    "filename": "Lesson6/Main.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Main.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Main.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson6/Main.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,59 @@\n+public class Main {\n+\n+\n+\n+    public static void main (String [] args){\n+\n+        // 3.У каждого животного есть ограничения на действия (бег: кот 200 м.,\n+        // собака 500 м.; плавание: кот не умеет плавать, собака 10 м.).\n+        Rabbit croch = new Rabbit(\"Крош\", 5 ,1000, 0);\n+        Turtle leo = new Turtle(\"Леонардо\", 45, 0, 100);\n+        Cat tom = new Cat(\"Том\", 3, 200, 0);\n+        Dog spot = new Dog(\"Спот\", 4,500,10);\n+        Dog iran = new Dog(\"Иран\", 5,500,10);\n+\n+\n+        // 2. Все животные могут бежать и плыть. В качестве параметра каждому методу\n+        // передается длина препятствия. Результатом выполнения действия будет печать в консоль.\n+        // (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');\n+        spot.running(600);\n+        spot.swimming(100);\n+        spot.voice();\n+        System.out.println();\n+\n+        iran.running(450);\n+        iran.swimming(10);\n+        iran.voice();\n+        System.out.println();\n+\n+        croch.running(100);\n+        croch.swimming(150);\n+        croch.voice();\n+        System.out.println();\n+\n+        tom.running(150);\n+        tom.swimming(40);\n+        tom.voice();\n+        System.out.println();\n+\n+        leo.running(10);\n+        leo.swimming(120);\n+        leo.voice();\n+        System.out.println();\n+\n+        // 4.* Добавить подсчет созданных котов, собак и животных.\n+        int zoo = Animals.count;\n+        int dogs = Dog.dogs;\n+        int cats = Cat.cats;\n+        int turtles = Turtle.turtles;\n+        int rabbits = Rabbit.rabbits;\n+        System.out.println(\"У нас есть \"+ zoo + \" животных из них собак: \" + dogs + \", кошек: \" + cats + \", черепах: \" + turtles + \", кроликов: \" + rabbits);\n+\n+\n+\n+\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "5c4063c54fc5091282e0b7bbbcfda9cfcb6fc123",
    "filename": "Lesson6/Rabbit.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Rabbit.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Rabbit.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson6/Rabbit.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,19 @@\n+//1. Создать классы Собака и Кот с наследованием от класса Животное.\n+public class Rabbit extends Animals {\n+    public static int rabbits = 0;// К заданию 4.\n+    public Rabbit(String name, int age, int run, int swim) {\n+        super();\n+        setName(name);\n+        setRun(run);\n+        setAge(age);\n+        setSwim(swim);\n+        setType(\"Кролик\");\n+        rabbits++;\n+    }\n+    @Override\n+    void voice(){\n+        System.out.println(getType() + \" \" + getName() + \" не издаёт звуков\");\n+    }\n+\n+}\n+"
  },
  {
    "sha": "cf0d6dfa7b4b3a56b71546f5612630ed9b02e5d0",
    "filename": "Lesson6/Turtle.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Turtle.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson6/Turtle.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson6/Turtle.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,18 @@\n+//1. Создать классы Собака и Кот с наследованием от класса Животное.\n+public class Turtle extends Animals {\n+    public static int turtles = 0;// К заданию 4.\n+    public Turtle(String name, int age, int run, int swim) {\n+        super();\n+        setName(name);\n+        setRun(run);\n+        setAge(age);\n+        setSwim(swim);\n+        setType(\"Черепаха\");\n+        turtles++;\n+    }\n+    @Override\n+    void voice(){\n+        System.out.println(getType() + \" \" + getName() + \" не издаёт звуков\");\n+    }\n+\n+}"
  },
  {
    "sha": "8173a56cee5a4e6c6b0642c967d9c84e695b0496",
    "filename": "Lesson7/Bowl.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson7/Bowl.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson7/Bowl.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson7/Bowl.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,43 @@\n+package Lesson7;\n+\n+public class Bowl {\n+    private  String bowlName;\n+    private int content;\n+    Bowl(String bowlName, int content){\n+        this.content = content;\n+        this.bowlName = bowlName;\n+    }\n+\n+    public void info(){\n+        if (content == 0){\n+            System.out.println(\"Миска \" + bowlName + \" пуста\");\n+        } else {\n+        System.out.println(\"В миске \" + bowlName + \" осталось \" + content + \" грамм еды\");\n+        }\n+    }\n+\n+    public void foodDecrease(int portion){\n+        if (content >= portion){\n+        content -= portion;\n+        }\n+    }\n+\n+    // 6. Добавить в тарелку метод, с помощью которого можно было бы добавлять еду в тарелку.\n+    public void fillBowl(int food){\n+        content +=food;\n+        System.out.println(\"Добавлено в миску \" + bowlName + \" \" + food + \" грамм еды\");\n+    }\n+\n+    public void setContent(int content) {\n+        this.content = content;\n+    }\n+    public int getContent() {\n+        return content;\n+    }\n+    public void setBowlName(String bowlName){\n+        this.bowlName = bowlName;\n+    }\n+    public String getBowlName(){\n+        return bowlName;\n+    }\n+}"
  },
  {
    "sha": "a8ea60ab47f48dd51d952e5e4ed4d574bb3f3ef4",
    "filename": "Lesson7/Cat.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson7/Cat.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson7/Cat.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson7/Cat.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,59 @@\n+package Lesson7;\n+\n+public class Cat {\n+    private String name;\n+    private int wantToEat;\n+    private int fullness;\n+\n+    Cat(String name, int wantToEat){\n+        this.name = name;\n+        this.wantToEat = wantToEat;\n+    }\n+\n+    Cat(){\n+        this.name = \"Васька\";\n+        this.wantToEat = 100;\n+        this.fullness = 0;\n+    }\n+\n+    public void eat(Bowl bowl){\n+        if (this.fullness == 100) {     // 3. Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту удалось покушать (хватило еды), сытость = true.\n+            System.out.println(\"Кот \" + name + \" уже сыт\");\n+        } else if (this.fullness < 100 && bowl.getContent() >= wantToEat) {     //2. Сделать так, чтобы в тарелке с едой не могло получиться отрицательного количества еды (например, в миске 10 еды, а кот пытается покушать 15-20).\n+            System.out.println(\"Кот \" + name + \" хочет съесть \"+ wantToEat + \" грамм еды\");\n+            if (100 - this.fullness < wantToEat){\n+                wantToEat = 100 -this.fullness;\n+                System.out.println(\"Но кот \" + name + \" может съесть только \" + wantToEat + \" грамм еды\");\n+            }\n+            bowl.foodDecrease(wantToEat);\n+            this.fullness += wantToEat;\n+            System.out.println(\"Кот \" + name + \" съел \" + wantToEat + \" грамм еды из миски \" + bowl.getBowlName());\n+        } else if (bowl.getContent() < wantToEat) {     //4. Считаем, что если коту мало еды в тарелке, то он её просто не трогает, то есть не может быть наполовину сыт (это сделано для упрощения логики программы).\n+            System.out.println(\"Кот \" + name + \" хочет съесть \"+ wantToEat + \" грамм еды\");\n+            System.out.println(\"В миске \"+ bowl.getBowlName() + \" не хватает еды. Нужно ещё \" + (wantToEat - bowl.getContent()) + \" грамм\");\n+        }\n+    }\n+\n+    public void catFullness(){\n+        System.out.println(\"Кот \"+ name + \" сыт на \" + this.fullness + \"%\");\n+    }\n+\n+    public void setWantToEat(int wantToEat) {\n+        this.wantToEat = wantToEat;\n+    }\n+    public int getWantToEat() {\n+        return wantToEat;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+    public void setFullness(int fullness) {\n+        this.fullness = fullness;\n+    }\n+    public int getFullness() {\n+        return fullness;\n+    }\n+}"
  },
  {
    "sha": "22c395d15069e78c072e4af8b0a32369ff80f50a",
    "filename": "Lesson7/Main.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson7/Main.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson7/Main.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson7/Main.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,52 @@\n+package Lesson7;\n+\n+import java.util.ArrayList;\n+\n+public class Main {\n+    public static void main (String [] args){\n+        //  5.Создать массив котов и тарелку с едой, попросить всех котов покушать из этой тарелки\n+        //  и потом вывести информацию о сытости котов в консоль.\n+        Cat[] cats = new Cat[3];\n+        cats[0] = new Cat(\"Моисей\", 30);\n+        cats[1] = new Cat(\"Барсик\", 50);\n+        cats[2] = new Cat(\"Васька\", 40);\n+\n+        Bowl bowl = new Bowl(\"Стандарт\",120);\n+        Bowl bigBowl = new Bowl(\"Супер\",200);\n+\n+        // 1. Расширить задачу про котов и тарелки с едой.\n+        CatEat(cats, bowl);\n+\n+        Catfullness(cats);\n+\n+        CatEat(cats, bowl);\n+\n+        bowl.fillBowl(30);\n+        System.out.println();\n+\n+        CatEat(cats, bigBowl);\n+\n+        CatEat(cats, bigBowl);\n+\n+        CatEat(cats, bowl);\n+\n+        Catfullness(cats);\n+\n+        bowl.info();\n+\n+        bigBowl.info();\n+    }\n+\n+    public static void CatEat (Cat[] cats, Bowl bowl){\n+        for (Cat cat : cats) {\n+            cat.eat(bowl);\n+        }\n+        System.out.println();\n+    }\n+    public static void Catfullness(Cat[] cats){\n+        for (Cat cat : cats) {\n+            cat.catFullness();\n+        }\n+        System.out.println();\n+    }\n+}"
  },
  {
    "sha": "2d107411d974ce7563271fe2f83a18b4f11ceb35",
    "filename": "Lesson8/Main.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson8/Main.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson8/Main.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson8/Main.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,10 @@\n+package Lesson8;\n+\n+import javax.swing.*;\n+\n+public class Main {\n+    public static void main (String [] args){\n+        MyWindow myWindow = new MyWindow();\n+\n+    }\n+}"
  },
  {
    "sha": "4931ed25b73185a4adf8e80a23cfa020ab8e62f7",
    "filename": "Lesson8/MyWindow.java",
    "status": "added",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson8/MyWindow.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Lesson8/MyWindow.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Lesson8/MyWindow.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,158 @@\n+package Lesson8;\n+\n+import javax.swing.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class MyWindow extends JFrame {\n+\n+    private final JTextField text;\n+    private char operation;\n+    private double tempNumber = 0;\n+    private boolean firstDigit = true;\n+\n+    public MyWindow(){\n+        setTitle(\"Calculator\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setBounds(300, 300, 170, 300);\n+\n+        JPanel jPanel = new JPanel();\n+\n+        text = new JTextField(13);\n+        text.setEditable(false);\n+        jPanel.add(text);\n+\n+        JButton[] digits = new JButton[10]; // кнопки цифр\n+        for (int i = 1; i < digits.length; i++){\n+            digits[i] = new JButton(\"\" + i);\n+            digits[i].addActionListener(new ActionListener() {\n+                @Override\n+                public void actionPerformed(ActionEvent e) {\n+                    Action(e);\n+                }\n+            });\n+            jPanel.add(digits[i]);\n+        }\n+\n+        JButton zero = new JButton(\"0\"); // кнопка ноль\n+        zero.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                Action(e);\n+            }\n+        });\n+        jPanel.add(zero);\n+\n+        JButton[] otherButtons = new JButton[6]; // математические действия\n+        otherButtons[0] = new JButton(\"+\");\n+        otherButtons[1] = new JButton(\"-\");\n+        otherButtons[2] = new JButton(\"*\");\n+        otherButtons[3] = new JButton(\"/\");\n+        otherButtons[4] = new JButton(\".\"); // 2) Добавить написание точки\n+        otherButtons[5] = new JButton(\"^2\"); // *4) Добавить возведение в квадрат\n+        for (int i = 0; i < otherButtons.length; i++) {\n+            otherButtons[i].addActionListener(new ActionListener() {\n+                @Override\n+                public void actionPerformed(ActionEvent e) {\n+                    ActionMath(e);\n+                }\n+            });\n+            jPanel.add(otherButtons[i]);\n+        }\n+\n+        JButton equals = new JButton(\"=\"); // кнопка равно\n+        jPanel.add(equals);\n+        equals.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                calculate(e);\n+            }\n+        });\n+\n+        JButton cancel = new JButton(\"C\"); // кнопка сброса калькулятора\n+        jPanel.add(cancel);\n+        cancel.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                text.setText(\"\");\n+            }\n+        });\n+\n+        add(jPanel);\n+\n+        setVisible(true);\n+    }\n+\n+    public void Action(ActionEvent event){\n+        text.setText(text.getText() + event.getActionCommand());\n+    }\n+\n+    public void ActionMath(ActionEvent event) { // математические действия\n+        if (text.getText().length() > 0) {\n+            if ((text.getText().charAt(text.getText().length() - 1) == '+') ||\n+                    (text.getText().charAt(text.getText().length() - 1) == '-') ||\n+                    (text.getText().charAt(text.getText().length() - 1) == '*') ||\n+                    (text.getText().charAt(text.getText().length() - 1) == '/') ||\n+                    (text.getText().charAt(text.getText().length() - 1) == '.'))\n+                text.setText(\"Только один знак!\");\n+                // 3) Добавить проверку что знаки не должны идти друг за другом\n+                // (либо не позволить это делать вовсе),\n+                // например 23++1 - недопустимо, 23 +1 - допустимо\n+            else\n+                text.setText(text.getText() + event.getActionCommand());\n+        }\n+    }\n+\n+    public void calculate(ActionEvent e){ // действия кнопки равно\n+        String numbers = text.getText();\n+        String number = \"\";\n+        for (int i = 0; i < numbers.length(); i++) {\n+            if (numbers.charAt(i) == '+' || numbers.charAt(i) == '-' || numbers.charAt(i) == '*' || numbers.charAt(i) == '/' || numbers.charAt(i) == '^') {\n+                double digit = Double.parseDouble(number);\n+                if (numbers.charAt(i) == numbers.charAt(i-1)){\n+                    continue; // Альтернатива для задания 3: при двух знаках подряд выполняет действие последнего\n+                }\n+                if (numbers.charAt(numbers.length()-1) == numbers.charAt(i)){\n+                    break;  // Если после знака не написать цифру\n+                }\n+                if (firstDigit) {\n+                    tempNumber += digit;\n+                    firstDigit = false;\n+                } else {\n+                    if (operation == '+') {\n+                        tempNumber += digit;\n+                    } else if (operation == '-') {\n+                        tempNumber -= digit;\n+                    } else if (operation == '*') {\n+                        tempNumber *= digit; // 1) Добавить операции умножить/разделить\n+                    } else if (operation == '/') {\n+                        tempNumber /= digit; // 1) Добавить операции умножить/разделить\n+                    } else if (operation == '^') {\n+                        tempNumber = tempNumber * tempNumber;\n+                    }\n+                }\n+                operation = numbers.charAt(i);\n+                number = \"\";\n+                continue;\n+            }\n+            number += numbers.charAt(i);\n+        }\n+\n+        double digit = Double.parseDouble(number);\n+        if (operation == '+') {\n+            tempNumber += digit;\n+        } else if (operation == '-') {\n+            tempNumber -= digit;\n+        } else if (operation == '*') {\n+            tempNumber *= digit;\n+        } else if (operation == '/') {\n+            tempNumber /= digit;\n+        } else if (operation == '^') {\n+            tempNumber = tempNumber * tempNumber;\n+        }\n+\n+        firstDigit = true;\n+        text.setText(String.valueOf(tempNumber));\n+        tempNumber = 0;\n+    }\n+}"
  },
  {
    "sha": "155601b7ce45c0f93d1c5f53f0c493628512feee",
    "filename": "Level2_lesson1/Ability.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Ability.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Ability.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/Ability.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,11 @@\n+package lesson1;\n+\n+public interface Ability {\n+    void goJump(int jump);\n+    void goRun(int run);\n+\n+    //4*. У препятствий есть длина (для дорожки) или высота (для стены),\n+    // а участников ограничения на бег и прыжки. Если участник не смог пройти одно из препятствий,\n+    // то дальше по списку он препятствий не идет.\n+    boolean isParticipant ();\n+}"
  },
  {
    "sha": "a1b4d2b3ac3828bea0cfc070146fe8cec646364d",
    "filename": "Level2_lesson1/Cat.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Cat.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Cat.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/Cat.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,86 @@\n+package lesson1;\n+\n+// 1. Создайте три класса Человек, Кот, Робот, которые не наследуются от одного класса.\n+// Эти классы должны уметь бегать и прыгать (методы просто выводят информацию о действии в консоль).\n+public class Cat implements Ability{\n+    private String name;\n+    private int maxRun;\n+    private int maxJump;\n+    private boolean isParticipant = true;\n+\n+    public Cat(String name, int maxRun, int maxJump) {\n+        this.name = name;\n+        this.maxRun = maxRun;\n+        this.maxJump = maxJump;\n+    }\n+\n+    public Cat() {\n+        this.name = \"Барсик\";\n+        this.maxRun = 3;\n+        this.maxJump = 2;\n+    }\n+\n+    @Override\n+    public void goJump(int wall){\n+        if (maxJump <= 0){\n+            System.out.println(name + \" не умеет прыгать\");\n+        }\n+        else if (maxJump >= wall){\n+            System.out.println(name + \" преодолел припятствие стена высотой \" + wall + \" м.\");\n+        } else {\n+            System.out.println(name + \" не может перепрыгнуть через стену высотой \"+ wall + \" м.\");\n+            System.out.println(name + \" выбывает из соревнований\");\n+            this.isParticipant = false;\n+        }\n+    }\n+\n+    @Override\n+    public void goRun(int track){\n+        if (maxRun <= 0){\n+            System.out.println(name + \" не умеет бегать\");\n+        }\n+        else if (maxRun >= track){\n+            System.out.println(name + \" преодолел припятствие беговая дорожка длиной \" + track + \" км.\");\n+        } else {\n+            System.out.println(name + \" не может пробежать дорожку длиной \"+ track + \" км.\");\n+            System.out.println(name + \" выбывает из соревнований\");\n+            this.isParticipant = false;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isParticipant() {\n+        return isParticipant;\n+    }\n+\n+    public void setMaxJump(int maxJump) {\n+        this.maxJump = maxJump;\n+    }\n+\n+    public int getMaxJump() {\n+        return maxJump;\n+    }\n+\n+    public void setMaxRun(int maxJump) {\n+        this.maxRun = maxRun;\n+    }\n+\n+    public int getMaxRun() {\n+        return maxRun;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setIsParticipant(boolean isParticipant) {\n+        this.isParticipant = isParticipant;\n+    }\n+    public boolean getIsParticipant(){\n+        return isParticipant;\n+    }\n+}"
  },
  {
    "sha": "3d9ddb0462d3c1439610f2f564b53da79f5ab37b",
    "filename": "Level2_lesson1/DayOfWeek.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/DayOfWeek.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/DayOfWeek.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/DayOfWeek.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,22 @@\n+package lesson1;\n+\n+    // 5*. Задание с перечислениями. Прикрелено в материалах урока\n+public enum DayOfWeek {\n+    MONDAY( 8),\n+    TUESDAY( 8),\n+    WEDNESDAY( 8),\n+    THURSDAY( 8),\n+    FRIDAY( 8),\n+    SATURDAY(0),\n+    SUNDAY( 0);\n+    private final int workHours;\n+\n+\n+    DayOfWeek(int workHours){\n+        this.workHours = workHours;\n+    }\n+\n+    public int getWorkHours() {\n+        return workHours;\n+    }\n+}"
  },
  {
    "sha": "18d6460d1282f09e2adfd9f20c3af81dd1e99e68",
    "filename": "Level2_lesson1/Human.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Human.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Human.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/Human.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,81 @@\n+package lesson1;\n+\n+// 1. Создайте три класса Человек, Кот, Робот, которые не наследуются от одного класса.\n+// Эти классы должны уметь бегать и прыгать (методы просто выводят информацию о действии в консоль).\n+public class Human implements Ability{\n+    private String name;\n+    private int maxRun;\n+    private int maxJump;\n+    private boolean isParticipant = true;\n+\n+    public Human(String name, int maxRun, int maxJump) {\n+        this.name = name;\n+        this.maxRun = maxRun;\n+        this.maxJump = maxJump;\n+    }\n+\n+    public Human () {\n+        this.name = \"Егор\";\n+        this.maxRun = 5;\n+        this.maxJump = 2;\n+    }\n+\n+    @Override\n+    public void goJump(int wall){\n+        if (maxJump <= 0){\n+            System.out.println(name + \" не умеет прыгать\");\n+        }\n+        else if (maxJump >= wall){\n+            System.out.println(name + \" преодолел припятствие стена высотой \" + wall + \" м.\");\n+        } else {\n+            System.out.println(name + \" не может перепрыгнуть через стену высотой \"+ wall + \" м.\");\n+            System.out.println(name + \" выбывает из соревнований\");\n+            this.isParticipant = false;\n+        }\n+    }\n+\n+    @Override\n+    public void goRun(int track){\n+        if (maxRun <= 0){\n+            System.out.println(name + \" не умеет бегать\");\n+        }\n+        else if (maxRun >= track){\n+            System.out.println(name + \" преодолел припятствие беговая дорожка длиной \" + track + \" км.\");\n+        } else {\n+            System.out.println(name + \" не может пробежать дорожку длиной \"+ track + \" км.\");\n+            System.out.println(name + \" выбывает из соревнований\");\n+            this.isParticipant = false;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isParticipant() {\n+        return isParticipant;\n+    }\n+\n+    public void setMaxJump(int maxJump) {\n+        this.maxJump = maxJump;\n+    }\n+    public int getMaxJump() {\n+        return maxJump;\n+    }\n+    public void setMaxRun(int maxJump) {\n+        this.maxRun = maxRun;\n+    }\n+    public int getMaxRun() {\n+        return maxRun;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setIsParticipant(boolean isParticipant) {\n+        this.isParticipant = isParticipant;\n+    }\n+    public boolean getIsParticipant(){\n+        return isParticipant;\n+    }\n+}"
  },
  {
    "sha": "6bc6f9852a4649dc336717b065e0be0b177407b5",
    "filename": "Level2_lesson1/Main.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Main.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Main.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/Main.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,54 @@\n+package lesson1;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+\n+        Ability[] participants = {\n+                new Human(\"Вася\", 15, 3),\n+                new Robot(\"C3PO\", 40, 1),\n+                new Cat(\"Том\", 3, 3)\n+        };\n+\n+        Movable[] stages = {\n+                new Track(3),\n+                new Wall(2),\n+                new Track(10),\n+                new Wall(3)\n+        };\n+\n+        // 3. Создайте два массива: с участниками и препятствиями,\n+        // и заставьте всех участников пройти этот набор препятствий.\n+        for (Movable stage : stages) {\n+            stage.info();\n+            for (Ability player : participants) {\n+                if (player.isParticipant()) {\n+                    stage.movement(player);\n+                }\n+            }\n+        }\n+\n+        System.out.println();\n+        // 5*. Задание с перечислениями. Прикрелено в материалах урока\n+        howLongWork(DayOfWeek.THURSDAY);\n+    }\n+\n+    public static void howLongWork(DayOfWeek someday) {\n+        int howLongWork = 0;\n+        boolean work = false;\n+        for (DayOfWeek day : DayOfWeek.values()) {\n+            if (day.equals(someday)){\n+                work = true;\n+                if (day.getWorkHours() == 0){\n+                    System.out.println(\"Сегодня выходной\");\n+                    break;\n+                }\n+            }\n+            if (work)\n+                howLongWork += day.getWorkHours();\n+        }\n+        if (howLongWork != 0)\n+        System.out.println(\"До конца недели осталось работать \" + howLongWork + \" часов\");\n+    }\n+}\n+\n+"
  },
  {
    "sha": "7db00e954d3b34d824580f467c5d85414ac10f74",
    "filename": "Level2_lesson1/Movable.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Movable.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Movable.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/Movable.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,6 @@\n+package lesson1;\n+\n+public interface Movable {\n+    void movement(Ability player);\n+    void info ();\n+}"
  },
  {
    "sha": "740360f7aa94e151ab1f539dcbe0486fc840bdbd",
    "filename": "Level2_lesson1/Robot.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Robot.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Robot.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/Robot.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,87 @@\n+package lesson1;\n+\n+// 1. Создайте три класса Человек, Кот, Робот, которые не наследуются от одного класса.\n+// Эти классы должны уметь бегать и прыгать (методы просто выводят информацию о действии в консоль).\n+public class Robot implements Ability{\n+    private String name;\n+    private int maxRun;\n+    private int maxJump;\n+    private boolean isParticipant = true;\n+\n+    public Robot(String name, int maxRun, int maxJump) {\n+        this.name = name;\n+        this.maxRun = maxRun;\n+        this.maxJump = maxJump;\n+    }\n+\n+    public Robot() {\n+        this.name = \"R2D2\";\n+        this.maxRun = 50;\n+        this.maxJump = 0;\n+    }\n+\n+    @Override\n+    public void goJump(int wall){\n+        if (maxJump <= 0){\n+            System.out.println(name + \" не умеет прыгать\");\n+        }\n+        else if (maxJump >= wall){\n+            System.out.println(name + \" преодолел припятствие стена высотой \" + wall + \" м.\");\n+        } else {\n+            System.out.println(name + \" не может перепрыгнуть через стену высотой \"+ wall + \" м.\");\n+            System.out.println(name + \" выбывает из соревнований\");\n+            this.isParticipant = false;\n+        }\n+    }\n+\n+    @Override\n+    public void goRun(int track){\n+        if (maxRun <= 0){\n+            System.out.println(name + \" не умеет бегать\");\n+        }\n+        else if (maxRun >= track){\n+            System.out.println(name + \" преодолел припятствие беговая дорожка длиной \" + track + \" км.\");\n+        } else {\n+            System.out.println(name + \" не может пробежать дорожку длиной \"+ track + \" км.\");\n+            System.out.println(name + \" выбывает из соревнований\");\n+            this.isParticipant = false;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isParticipant() {\n+        return isParticipant;\n+    }\n+\n+\n+    public void setMaxJump(int maxJump) {\n+        this.maxJump = maxJump;\n+    }\n+\n+    public int getMaxJump() {\n+        return maxJump;\n+    }\n+\n+    public void setMaxRun(int maxJump) {\n+        this.maxRun = maxRun;\n+    }\n+\n+    public int getMaxRun() {\n+        return maxRun;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setIsParticipant(boolean isParticipant) {\n+        this.isParticipant = isParticipant;\n+    }\n+    public boolean getIsParticipant(){\n+        return isParticipant;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "53b6fa0909616b46c1a85788c9d6e6acfcf2fca5",
    "filename": "Level2_lesson1/Track.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Track.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Track.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/Track.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,31 @@\n+package lesson1;\n+\n+// 2. Создайте два класса: беговая дорожка и стена, при прохождении через которые,\n+// участники должны выполнять соответствующие действия (бежать или прыгать),\n+// результат выполнения печатаем в консоль (успешно пробежал, не смог пробежать и т.д.).\n+public class Track implements Movable{\n+    private int trackLength;\n+\n+    public Track(int trackLength){\n+        this.trackLength = trackLength;\n+    }\n+\n+    @Override\n+    public void movement(Ability player) {\n+        player.goRun(trackLength);\n+    }\n+\n+    @Override\n+    public void info(){\n+        System.out.println(\"Дорожка имеет длину \" + trackLength + \" км.\");\n+    }\n+\n+    public void setTrackLength(int trackLength) {\n+        this.trackLength = trackLength;\n+    }\n+\n+    public int getTrackLength() {\n+        return trackLength;\n+    }\n+\n+}"
  },
  {
    "sha": "9f2d3bdf287aa6b1c633f11dae0600e9e4a70b01",
    "filename": "Level2_lesson1/Wall.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Wall.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson1/Wall.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson1/Wall.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,32 @@\n+package lesson1;\n+\n+    // 2. Создайте два класса: беговая дорожка и стена, при прохождении через которые,\n+    // участники должны выполнять соответствующие действия (бежать или прыгать),\n+    // результат выполнения печатаем в консоль (успешно пробежал, не смог пробежать и т.д.).\n+public class Wall implements Movable{\n+    private int wallHeight;\n+\n+    public Wall(int wallHeight){\n+        this.wallHeight = wallHeight;\n+    }\n+\n+    @Override\n+    public void movement(Ability player) {\n+        player.goJump(wallHeight);\n+    }\n+\n+    @Override\n+    public void info(){\n+        System.out.println(\"Стена имеет высоту \" + wallHeight + \" м.\");\n+    }\n+\n+    public void setWallHeight (int wallHeight){\n+        this.wallHeight = wallHeight;\n+    }\n+\n+    public int getWallHeight() {\n+        return wallHeight;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "67a2500aa37671c6ccb6fc98cc3fdcda38b9a041",
    "filename": "Level2_lesson2/Main.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson2/Main.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson2/Main.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson2/Main.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,74 @@\n+package level2lesson2;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        String[][] sampleOne = new String[][]{\n+                {\"9\", \"7\", \"6\", \"8\"},\n+                {\"2\", \"4\", \"6\", \"7\"},\n+                {\"2\", \"5\", \"7\", \"7\"},\n+                {\"4\", \"2\", \"2\"}\n+        };\n+\n+        String[][] sampleTwo = new String[][]{\n+                {\"9\", \"7\", \"6\", \"8\"},\n+                {\"2\", \"4\", \"6\", \"7\"},\n+                {\"2\", \"5\", \"7\", \"7\"},\n+                {\"4\", \"p\", \"2\", \"8\"}\n+        };\n+\n+\n+        /* 3. В методе main() вызвать полученный метод, обработать возможные исключения\n+        MySizeArrayException и MyArrayDataException, и вывести результат расчета.\n+         */\n+        try {\n+            getMistake(sampleOne); // Метод с неправильным размером массива\n+        } catch (MyArrayDataException e){\n+            e.printStackTrace();\n+            System.out.println(\"Данные введены неверно\");\n+        } catch (MyArraySizeException e){\n+            e.printStackTrace();\n+            System.out.println(\"Неправильный массив\");\n+        }\n+\n+        /* 3. В методе main() вызвать полученный метод, обработать возможные исключения\n+        MySizeArrayException и MyArrayDataException, и вывести результат расчета.\n+         */\n+        try {\n+            getMistake(sampleTwo); // Метод с неправильным значением элемента массива\n+        } catch (MyArrayDataException e){\n+            e.printStackTrace();\n+            System.out.println(\"Данные введены неверно\");\n+        } catch (MyArraySizeException e){\n+            e.printStackTrace();\n+            System.out.println(\"Неправильный массив\");\n+        }\n+\n+        System.out.println(\"End\");\n+    }\n+\n+    /* 1. Напишите метод, на вход которого подаётся двумерный строковый массив размером 4х4,\n+    при подаче массива другого размера необходимо бросить исключение MyArraySizeException.\n+     */\n+    public static void getMistake(String[][] array) throws MyArraySizeException, MyArrayDataException {\n+        int result = 0;\n+        for (int i = 0; i < array.length; i++) {\n+            for (int j = 0; j < array[i].length; j++) {\n+                if (array.length != 4 || array[i].length != 4) {\n+                    throw new MyArraySizeException(\"Ваш массив \" + array.length + \"x\" + array[i].length + \". Должен быть 4х4.\");\n+                }\n+                try {\n+                    result += Integer.parseInt(array[i][j]);\n+                } catch (NumberFormatException e) {\n+                    throw new MyArrayDataException(\"Введите число в строке номер \" + (i + 1) + \", столбце номер \" + (j + 1));\n+                    /* 2. Далее метод должен пройтись по всем элементам массива, преобразовать в int,\n+                     и просуммировать. Если в каком-то элементе массива преобразование не удалось\n+                     (например, в ячейке лежит символ или текст вместо числа), должно быть брошено\n+                     исключение MyArrayDataException, с детализацией в какой именно ячейке лежат\n+                     неверные данные. */\n+                }\n+            }\n+        }\n+        System.out.println(\"Сумма всех элементов равна \" + result);\n+    }\n+}\n+"
  },
  {
    "sha": "bceb437dbcb13038ac4d4edbf85babf879b5d679",
    "filename": "Level2_lesson2/MyArrayDataException.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson2/MyArrayDataException.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson2/MyArrayDataException.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson2/MyArrayDataException.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,10 @@\n+package level2lesson2;\n+\n+public class MyArrayDataException extends IllegalArgumentException {\n+    private String number;\n+\n+    public MyArrayDataException(String number){\n+        super(number);\n+        this.number = number;\n+    }\n+}"
  },
  {
    "sha": "1c28c88dd5263c69a5476f51840cdb224fd20636",
    "filename": "Level2_lesson2/MyArraySizeException.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson2/MyArraySizeException.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson2/MyArraySizeException.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson2/MyArraySizeException.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,9 @@\n+package level2lesson2;\n+\n+public class MyArraySizeException extends IndexOutOfBoundsException {\n+    private String index;\n+    public MyArraySizeException(String index){\n+    super(index);\n+    this.index = index;\n+    }\n+}"
  },
  {
    "sha": "893f94e5feccb817d8eb5121b37a68c43014ace4",
    "filename": "Level2_lesson3/Main.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson3/Main.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson3/Main.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson3/Main.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,105 @@\n+package Level2_lesson3;\n+\n+import java.util.*;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+\n+        //1. Создать массив с набором слов (10-20 слов, должны встречаться повторяющиеся).\n+        List<String> list = new ArrayList<>();\n+        list.add(\"Велосипед\");\n+        list.add(\"Мотоцикл\");\n+        list.add(\"Мопед\");\n+        list.add(\"Автомобиль\");\n+        list.add(\"Квадроцикл\");\n+        list.add(\"Автомобиль\");\n+        list.add(\"Лыжи\");\n+        list.add(\"Велосипед\");\n+        list.add(\"Самокат\");\n+        list.add(\"Мотоцикл\");\n+        list.add(\"Велосипед\");\n+        list.add(\"Автомобиль\");\n+        list.add(\"Санки\");\n+        list.add(\"Лыжи\");\n+        list.add(\"Мопед\");\n+\n+        // Найти и вывести список уникальных слов, из которых состоит массив (дубликаты не считаем).\n+        findUnicum(list);\n+\n+        // Посчитать сколько раз встречается каждое слово.\n+        findHowMuch(list);\n+\n+\n+        //В этот телефонный справочник с помощью метода add()\n+        // можно добавлять записи.\n+        add(\"Виктор\", \"89126446166\");\n+        add(\"Григорий\", \"89127761676\");\n+        add(\"Евгений\", \"89126789166\");\n+        add(\"Виктор\", \"89126449966\");\n+        add(\"Владимир\", \"89126454446\");\n+        add(\"Виктор\", \"89156475232\");\n+\n+        //С помощью метода get() искать номер телефона по фамилии.\n+        // Следует учесть, что под одной фамилией может быть несколько телефонов (в случае однофамильцев),\n+        // тогда при запросе такой фамилии должны выводиться все телефоны.\n+        get(\"Виктор\");\n+        get(\"Владимир\");\n+    }\n+\n+    /**\n+     * Метод возвращает в консоль количество упоминаний слова в коллекции List\n+     * @param list List<String>\n+     *\n+     */\n+    public static void findHowMuch(List<String> list){\n+        Set<String> unicum = new HashSet<>();\n+        for (int i = 0; i < list.size(); i++)\n+            unicum.add(list.get(i));\n+        for (String transport : unicum) {\n+            int count = 0;\n+            for (int i = 0; i < list.size(); i++) {\n+                if (transport.equals(list.get(i))) {\n+                    count++;\n+                }\n+            }\n+            System.out.println(\"Слово \" + transport + \" встречается \" + count + \" раз\");\n+        }\n+        System.out.println();\n+    }\n+\n+    /**\n+     * Метод возвращает в консоль уникальные слова из коллекции List\n+     * @param list List<String>\n+     *\n+     */\n+    public static void findUnicum(List<String> list) {\n+        Set<String> unicum = new HashSet<>();\n+        for (int i = 0; i < list.size(); i++)\n+            unicum.add(list.get(i));\n+        System.out.println(\"Уникальные слова: \" + unicum);\n+        System.out.println();\n+    }\n+\n+    public static List<TelefonNumber> catalog = new ArrayList<>();// каталог абонентов\n+\n+    /**\n+     * Метод записывает данные в коллекцию List\n+     * @param name String\n+     * @param number String\n+     */\n+    public static void add(String name, String number){\n+        TelefonNumber person = new TelefonNumber(name, number);\n+        catalog.add(person);\n+    }\n+    /**\n+     * Метод возвращает номер телефона абонента из коллекции\n+     * @param name String\n+     *\n+     */\n+    public static void get(String name) {\n+        for (int i = 0; i < catalog.size(); i++){\n+            if (name.equals(catalog.get(i).getName()))\n+        System.out.println(\"Абонент \"+ name + \" имеет телефонный номер \" + catalog.get(i).getNumber());\n+        }\n+    }\n+}"
  },
  {
    "sha": "6f7f505f85a00003ed6507743c2cd19cc1aa3a3a",
    "filename": "Level2_lesson3/TelefonNumber.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/blob/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson3/TelefonNumber.java",
    "raw_url": "https://github.com/EvgeniiPetrov187/Geek-University-Java/raw/f15d606f64f3e8b31a08e982d665e6672147062c/Level2_lesson3/TelefonNumber.java",
    "contents_url": "https://api.github.com/repos/EvgeniiPetrov187/Geek-University-Java/contents/Level2_lesson3/TelefonNumber.java?ref=f15d606f64f3e8b31a08e982d665e6672147062c",
    "patch": "@@ -0,0 +1,29 @@\n+package Level2_lesson3;\n+\n+// 2. Написать простой класс Телефонный Справочник, который хранит в себе список\n+// фамилий и телефонных номеров.\n+public class TelefonNumber {\n+    private String name;\n+    private String number;\n+\n+    public TelefonNumber(String name, String number) {\n+        this.name = name;\n+        this.number = number;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getNumber() {\n+        return number;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setNumber(String number) {\n+        this.number = number;\n+    }\n+}\n\\ No newline at end of file"
  }
]
