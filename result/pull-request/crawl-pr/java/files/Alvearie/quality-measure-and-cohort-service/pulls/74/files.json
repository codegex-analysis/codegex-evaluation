[
  {
    "sha": "64ed5d91bf435630fe788dae5a0f5fd776ca91c3",
    "filename": "cohort-cli/src/main/java/com/ibm/cohort/cli/MeasureCLI.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-cli/src/main/java/com/ibm/cohort/cli/MeasureCLI.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-cli/src/main/java/com/ibm/cohort/cli/MeasureCLI.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-cli/src/main/java/com/ibm/cohort/cli/MeasureCLI.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -31,6 +31,7 @@\n import com.ibm.cohort.engine.measure.RestFhirMeasureResolutionProvider;\n import com.ibm.cohort.engine.measure.ZipResourceResolutionProvider;\n import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceOptions;\n+import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceOptions.DefineReturnOptions;\n import com.ibm.cohort.fhir.client.config.FhirClientBuilder;\n \n import ca.uhn.fhir.parser.IParser;\n@@ -74,9 +75,9 @@\n \t\t\t\t\"--include-evaluated-resources\" }, description = \"Include evaluated resources on measure report. Defaults to false.\")\n \t\tprivate boolean includeEvaluatedResources = false;\n \t\t\n-\t\t@Parameter(names = { \"-i\",\n-\t\t\t\t\"--include-define-results\" }, description = \"Include results for evaluated define statements on measure report. Defaults to false.\")\n-\t\tprivate boolean includeDefineResults = false;\n+\t\t@Parameter(names = { \"-o\",\n+\t\t\t\t\"--define-return-option\" }, description = \"Specify define return option for evaluated define statements on measure report. Defaults to NONE.  Valid options are (ALL|BOOLEAN|NONE).\")\n+\t\tprivate DefineReturnOptions defineReturnOption = DefineReturnOptions.NONE;\n \n \t\tpublic void validate() {\n \t\t\tboolean resourceSpecified = resourceId != null;\n@@ -157,7 +158,7 @@ public MeasureEvaluator runWithArgs(String[] args, PrintStream out) throws Excep\n \t\t\tfor( String contextId : arguments.contextIds ) {\n \t\t\t\tout.println(\"Evaluating: \" + contextId);\n \t\t\t\t// Reports only returned for measures where patient is in initial population\n-\t\t\t\tList<MeasureReport> reports = evaluator.evaluatePatientMeasures(contextId, measureContexts, new MeasureEvidenceOptions(arguments.includeEvaluatedResources, arguments.includeDefineResults));\n+\t\t\t\tList<MeasureReport> reports = evaluator.evaluatePatientMeasures(contextId, measureContexts, new MeasureEvidenceOptions(arguments.includeEvaluatedResources, arguments.defineReturnOption));\n \n \t\t\t\tfor (MeasureReport report : reports) {\n \t\t\t\t\tif (arguments.reportFormat == ReportFormat.TEXT) {"
  },
  {
    "sha": "f36d357d5c79dee645b4de3aa6864b59fd1dad58",
    "filename": "cohort-cli/src/main/java/com/ibm/cohort/cli/input/MeasureContextProvider.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-cli/src/main/java/com/ibm/cohort/cli/input/MeasureContextProvider.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-cli/src/main/java/com/ibm/cohort/cli/input/MeasureContextProvider.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-cli/src/main/java/com/ibm/cohort/cli/input/MeasureContextProvider.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -13,11 +13,11 @@\n import java.util.stream.Collectors;\n \n import org.hl7.fhir.r4.model.Identifier;\n-import org.opencds.cqf.r4.builders.IdentifierBuilder;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.ibm.cohort.cli.ParameterHelper;\n import com.ibm.cohort.engine.measure.MeasureContext;\n+import com.ibm.cohort.engine.r4.builder.IdentifierBuilder;\n \n public class MeasureContextProvider {\n \tpublic static List<MeasureContext> getMeasureContexts(File input) throws IOException {"
  },
  {
    "sha": "2f9e7e0c1225e83bae4ede6e3690dcf9aef1ac95",
    "filename": "cohort-cli/src/test/java/com/ibm/cohort/cli/MeasureCLITest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-cli/src/test/java/com/ibm/cohort/cli/MeasureCLITest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-cli/src/test/java/com/ibm/cohort/cli/MeasureCLITest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-cli/src/test/java/com/ibm/cohort/cli/MeasureCLITest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -30,6 +30,7 @@\n import org.junit.Test;\n import org.opencds.cqf.common.evaluation.MeasurePopulationType;\n \n+import com.beust.jcommander.ParameterException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.ibm.cohort.engine.helpers.CanonicalHelper;\n import com.ibm.cohort.engine.measure.BaseMeasureTest;\n@@ -582,6 +583,19 @@ public void testMissingRequiredArguments() throws Exception {\n \t\t\t\t\"-f\", \"JSON\"\n \t\t}, out);\n \t}\n+\t\n+\t@Test(expected = ParameterException.class)\n+\tpublic void testInvalidDefineOptionArguments() throws Exception {\n+\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\t\tPrintStream out = new PrintStream(baos);\n+\t\tMeasureCLI cli = new MeasureCLI();\n+\t\tcli.runWithArgs(new String[]{\n+\t\t\t\t\"-d\", \"something\",\n+\t\t\t\t\"-c\", \"1234\",\n+\t\t\t\t\"-r\", \"1234567\",\n+\t\t\t\t\"-o\", \"FUN\"\n+\t\t}, out);\n+\t}\n \n \t@Test(expected = IllegalArgumentException.class)\n \tpublic void testExclusiveArgumentsBothSpecified() throws Exception {"
  },
  {
    "sha": "cd60f446e278638227cc15b0afcf051fc813df07",
    "filename": "cohort-engine-api-web/src/main/java/com/ibm/cohort/engine/api/service/CohortEngineRestHandler.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine-api-web/src/main/java/com/ibm/cohort/engine/api/service/CohortEngineRestHandler.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine-api-web/src/main/java/com/ibm/cohort/engine/api/service/CohortEngineRestHandler.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine-api-web/src/main/java/com/ibm/cohort/engine/api/service/CohortEngineRestHandler.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -22,7 +22,6 @@\n import javax.ws.rs.core.Response.ResponseBuilder;\n \n import org.hl7.fhir.r4.model.Identifier;\n-import org.opencds.cqf.r4.builders.IdentifierBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -32,6 +31,7 @@\n import com.ibm.cohort.engine.api.service.model.MeasureParameterInfoList;\n import com.ibm.cohort.engine.api.service.model.MeasuresEvaluation;\n import com.ibm.cohort.engine.api.service.model.ServiceErrorList;\n+import com.ibm.cohort.engine.r4.builder.IdentifierBuilder;\n import com.ibm.cohort.fhir.client.config.IBMFhirServerConfig;\n import com.ibm.watson.common.service.base.ServiceBaseConstants;\n import com.ibm.watson.common.service.base.ServiceBaseUtility;"
  },
  {
    "sha": "50d0a5470199fdfc53f42908146a36cf8e50f5a7",
    "filename": "cohort-engine/pom.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/pom.xml",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/pom.xml",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/pom.xml?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -56,10 +56,6 @@\n \t\t\t<groupId>org.opencds.cqf</groupId>\n \t\t\t<artifactId>common</artifactId>\n \t\t</dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.opencds.cqf</groupId>\n-\t\t\t<artifactId>r4</artifactId>\n-\t\t</dependency>\n \n \t\t<dependency>\n \t\t\t<groupId>org.apache.commons</groupId>"
  },
  {
    "sha": "5d114fd6542a2834b4f7978606390f42c40daecc",
    "filename": "cohort-engine/src/main/java/ca/uhn/fhir/jpa/api/dao/DaoRegistry.java",
    "status": "removed",
    "additions": 0,
    "deletions": 21,
    "changes": 21,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/767f284b1b239d1601d7d31ecee5c2b98af19877/cohort-engine/src/main/java/ca/uhn/fhir/jpa/api/dao/DaoRegistry.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/767f284b1b239d1601d7d31ecee5c2b98af19877/cohort-engine/src/main/java/ca/uhn/fhir/jpa/api/dao/DaoRegistry.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/ca/uhn/fhir/jpa/api/dao/DaoRegistry.java?ref=767f284b1b239d1601d7d31ecee5c2b98af19877",
    "patch": "@@ -1,21 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2020, 2020\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package ca.uhn.fhir.jpa.api.dao;\n-\n-/**\n- * Provide a placeholder for the HAPI DaoRegistry so that we can exclude the\n- * real one and all of its many dependencies from the classpath. This gets\n- * loaded by the cqf-ruler MeasureEvaluation class, but is never used for our\n- * use case at execution time, so it is safe to remove.\n- */\n-public class DaoRegistry {\n-\n-\tpublic boolean isResourceTypeSupported(String theResourceType) {\n-\t\tthrow new UnsupportedOperationException(\n-\t\t\t\t\"You reached an execution point that should not occur. This implementation of the HAPI DaoRegistry exists only to satisfy the ClassLoader. The real implementation was excluded from the classpath to eliminate a large number of unnecessary dependencies.\");\n-\t}\n-\n-}"
  },
  {
    "sha": "98bbcd87194400521573125df3d0fd49798a423a",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/CqlEngineWrapper.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/CqlEngineWrapper.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/CqlEngineWrapper.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/CqlEngineWrapper.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -12,7 +12,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import java.util.stream.Collectors;\n \n import org.apache.commons.lang3.tuple.Pair;\n@@ -34,6 +33,8 @@\n import org.opencds.cqf.cql.engine.retrieve.RetrieveProvider;\n import org.opencds.cqf.cql.engine.terminology.TerminologyProvider;\n \n+import com.ibm.cohort.engine.cdm.CDMConstants;\n+import com.ibm.cohort.engine.cqfruler.CDMContext;\n import com.ibm.cohort.fhir.client.config.FhirClientBuilder;\n import com.ibm.cohort.fhir.client.config.FhirClientBuilderFactory;\n import com.ibm.cohort.fhir.client.config.FhirServerConfig;\n@@ -49,7 +50,7 @@\n public class CqlEngineWrapper {\n \n \tpublic static final List<String> SUPPORTED_MODELS = Arrays.asList(\"http://hl7.org/fhir\",\n-\t\t\t\"http://hl7.org/fhir/us/core\", \"http://hl7.org/fhir/us/qicore\", \"http://ibm.com/fhir/cdm\");\n+\t\t\t\"http://hl7.org/fhir/us/core\", \"http://hl7.org/fhir/us/qicore\", CDMConstants.BASE_URL);\n \n \t/*\n \t * Wrap the ModelResolver around a static ThreadLocal to prevent\n@@ -217,7 +218,7 @@ protected void evaluateExpressionByExpression(final String libraryName, final St\n \t\tfor (String contextId : contextIds) {\n \t\t\tcallback.onContextBegin(contextId);\n \n-\t\t\tContext context = new Context(library);\n+\t\t\tContext context = new CDMContext(library);\n \t\t\tfor (Map.Entry<String, DataProvider> e : dataProviders.entrySet()) {\n \t\t\t\tcontext.registerDataProvider(e.getKey(), e.getValue());\n \t\t\t}"
  },
  {
    "sha": "680e2afcf2ef1c61a89fafe79d70e253ab14b53c",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/cdm/CDMConstants.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cdm/CDMConstants.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cdm/CDMConstants.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/cdm/CDMConstants.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.cohort.engine.cdm;\n+\n+public class CDMConstants {\n+\t\n+\tprivate CDMConstants() {}\n+\t\n+\tprivate static final String STRUCTURE_DEFINITION = \"/StructureDefinition/\";\n+\t\n+\tpublic static final String BASE_URL = \"http://ibm.com/fhir/cdm\";\n+\t\n+\tpublic static final String CARE_GAP = \"care-gap\";\n+\tpublic static final String CDM_CODE_SYSTEM_MEASURE_POPULATION_TYPE = BASE_URL + \"/CodeSystem/measure-population-type\";\n+\t\n+\tpublic static final String EVIDENCE = \"measure-report-evidence\";\n+\tpublic static final String EVIDENCE_URL = BASE_URL + STRUCTURE_DEFINITION + EVIDENCE;\n+\t\n+\tpublic static final String EVIDENCE_TEXT = \"measure-report-evidence-text\";\n+\tpublic static final String EVIDENCE_TEXT_URL = BASE_URL + STRUCTURE_DEFINITION + EVIDENCE_TEXT;\n+\t\n+\tpublic static final String EVIDENCE_VALUE = \"measure-report-evidence-value\";\n+\tpublic static final String EVIDENCE_VALUE_URL = BASE_URL + STRUCTURE_DEFINITION + EVIDENCE_VALUE;\n+\t\n+\t\n+}"
  },
  {
    "sha": "5da90314ad5682984a44d4e05f5f9d06845514a3",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/CDMContext.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/CDMContext.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/CDMContext.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/CDMContext.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.cohort.engine.cqfruler;\n+\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+import org.cqframework.cql.elm.execution.Library;\n+import org.cqframework.cql.elm.execution.VersionedIdentifier;\n+import org.opencds.cqf.cql.engine.execution.Context;\n+\n+/**\n+ * \n+ * This class extends the base context with the purpose of removing the limit on the number of items stored in the expression cache.  \n+ * As this is expected to cleared between measure executions per patient, storing all of the define results shouldn't break the bank on memory.\n+ *\n+ */\n+public class CDMContext extends Context {\n+\n+    private Map<VersionedIdentifier, Map<String, Object>> expressions = new LinkedHashMap<VersionedIdentifier, Map<String, Object>>(10, 0.9f, true) {\n+\t\tprivate static final long serialVersionUID = 2837966863351097165L;\n+\t};\n+    \n+    private Map<String, Object> constructNoEvictLibraryExpressionHashMap() {\n+        return new LinkedHashMap<>(15, 0.9f, true);\n+    }\n+    \n+\t@Override\n+\tpublic boolean isExpressionInCache(VersionedIdentifier libraryId, String name) {\n+        if (!this.expressions.containsKey(libraryId)) {\n+            this.expressions.put(libraryId, constructNoEvictLibraryExpressionHashMap());\n+        }\n+\n+        return this.expressions.get(libraryId).containsKey(name);\n+    }\n+\t\n+\t@Override\n+\tpublic void addExpressionToCache(VersionedIdentifier libraryId, String name, Object result) {\n+        if (!this.expressions.containsKey(libraryId)) {\n+            this.expressions.put(libraryId, constructNoEvictLibraryExpressionHashMap());\n+        }\n+\n+        this.expressions.get(libraryId).put(name, result);\n+    }\n+\n+\t@Override\n+\tpublic Object getExpressionResultFromCache(VersionedIdentifier libraryId, String name) {\n+\t\tthis.expressions.computeIfAbsent(libraryId, x -> constructNoEvictLibraryExpressionHashMap());\n+\t\t\n+        return this.expressions.get(libraryId).get(name);\n+    }\n+\t\n+\tpublic void clearExpressionCache() {\n+\t\texpressions.clear();\n+\t}\n+\n+\tpublic CDMContext(Library library) {\n+\t\tsuper(library);\n+\t}\n+\t\n+\tpublic Set<VersionedIdentifier> getLibrariesInCache() {\n+\t\treturn expressions.keySet();\n+\t}\n+\t\n+\tpublic Set<Entry<VersionedIdentifier, Map<String, Object>>> getEntriesInCache() {\n+\t\treturn expressions.entrySet();\n+\t}\n+}"
  },
  {
    "sha": "f27aa1934aa1d85c7842e7cb7c6feed71b8d8731",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/MeasureEvaluation.java",
    "status": "added",
    "additions": 503,
    "deletions": 0,
    "changes": 503,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/MeasureEvaluation.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/MeasureEvaluation.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/MeasureEvaluation.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,503 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ * \n+ * Originated from org.opencds.cqf.r4.evaluation.MeasureEvaluation\n+ */\n+\n+package com.ibm.cohort.engine.cqfruler;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.cqframework.cql.elm.execution.ExpressionDef;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.ListResource;\n+import org.hl7.fhir.r4.model.ListResource.ListEntryComponent;\n+import org.hl7.fhir.r4.model.Measure;\n+import org.hl7.fhir.r4.model.MeasureReport;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.Resource;\n+import org.opencds.cqf.common.evaluation.MeasurePopulationType;\n+import org.opencds.cqf.common.evaluation.MeasureScoring;\n+import org.opencds.cqf.cql.engine.data.DataProvider;\n+import org.opencds.cqf.cql.engine.execution.Context;\n+import org.opencds.cqf.cql.engine.runtime.Interval;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.ibm.cohort.engine.r4.builder.MeasureReportBuilder;\n+\n+public class MeasureEvaluation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(MeasureEvaluation.class);\n+\n+    private DataProvider provider;\n+    private Interval measurementPeriod;\n+\n+    public MeasureEvaluation(DataProvider provider, Interval measurementPeriod) {\n+        this.provider = provider;\n+        this.measurementPeriod = measurementPeriod;\n+    }\n+\n+    public MeasureReport evaluatePatientMeasure(Measure measure, Context context, String patientId) {\n+    \treturn evaluatePatientMeasure(measure, context, patientId, false);\n+    }\n+    \n+    public MeasureReport evaluatePatientMeasure(Measure measure, Context context, String patientId, boolean includeEvaluatedResources) {\n+        logger.info(\"Generating individual report\");\n+\n+        if (patientId == null) {\n+            throw new IllegalArgumentException(\"Must provide patient id\");\n+        }\n+\n+        Iterable<Object> patientRetrieve = provider.retrieve(\"Patient\", \"id\", patientId, \"Patient\", null, null, null,\n+                null, null, null, null, null);\n+        Patient patient = null;\n+        if (patientRetrieve.iterator().hasNext()) {\n+            patient = (Patient) patientRetrieve.iterator().next();\n+        }\n+\n+        boolean isSingle = true;\n+        return evaluate(measure, context,\n+                patient == null ? Collections.emptyList() : Collections.singletonList(patient),\n+                MeasureReport.MeasureReportType.INDIVIDUAL, isSingle, includeEvaluatedResources);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Iterable<Resource> evaluateCriteria(Context context, Patient patient,\n+            Measure.MeasureGroupPopulationComponent pop) {\n+        if (pop == null || !pop.hasCriteria()) {\n+            return Collections.emptyList();\n+        }\n+\n+        context.setContextValue(\"Patient\", patient.getIdElement().getIdPart());\n+\n+        ExpressionDef populationExpressionDef = context.resolveExpressionRef(pop.getCriteria().getExpression());\n+        Object result = populationExpressionDef.evaluate(context);\n+        \n+        if (result == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (result instanceof Boolean) {\n+            if (((Boolean) result)) {\n+                return Collections.singletonList(patient);\n+            } else {\n+                return Collections.emptyList();\n+            }\n+        }\n+\n+        return (Iterable<Resource>) result;\n+    }\n+\n+    private boolean evaluatePopulationCriteria(Context context, Patient patient,\n+            Measure.MeasureGroupPopulationComponent criteria, Map<String, Resource> population,\n+            Map<String, Patient> populationPatients, Measure.MeasureGroupPopulationComponent exclusionCriteria,\n+            Map<String, Resource> exclusionPopulation, Map<String, Patient> exclusionPatients) {\n+        \n+    \tboolean inPopulation = false;\n+        if (criteria != null) {\n+            for (Resource resource : evaluateCriteria(context, patient, criteria)) {\n+                inPopulation = true;\n+                population.put(resource.getIdElement().getIdPart(), resource);\n+            }\n+        }\n+\n+        if (inPopulation) {\n+            // Are they in the exclusion?\n+            if (exclusionCriteria != null) {\n+                for (Resource resource : evaluateCriteria(context, patient, exclusionCriteria)) {\n+                    inPopulation = false;\n+                    exclusionPopulation.put(resource.getIdElement().getIdPart(), resource);\n+                    population.remove(resource.getIdElement().getIdPart());\n+                }\n+            }\n+        }\n+\n+        if (inPopulation && populationPatients != null) {\n+            populationPatients.put(patient.getIdElement().getIdPart(), patient);\n+        }\n+        if (!inPopulation && exclusionPatients != null) {\n+            exclusionPatients.put(patient.getIdElement().getIdPart(), patient);\n+        }\n+\n+        return inPopulation;\n+    }\n+\n+    private void addPopulationCriteriaReport(MeasureReport report,\n+            MeasureReport.MeasureReportGroupComponent reportGroup,\n+            Measure.MeasureGroupPopulationComponent populationCriteria, int populationCount,\n+            Iterable<Patient> patientPopulation) {\n+        if (populationCriteria != null) {\n+            MeasureReport.MeasureReportGroupPopulationComponent populationReport = new MeasureReport.MeasureReportGroupPopulationComponent();\n+            populationReport.setCode(populationCriteria.getCode());\n+            if (report.getType() == MeasureReport.MeasureReportType.SUBJECTLIST && patientPopulation != null) {\n+                ListResource subjectList = new ListResource();\n+                subjectList.setId(UUID.randomUUID().toString());\n+                populationReport.setSubjectResults(new Reference().setReference(\"#\" + subjectList.getId()));\n+                for (Patient patient : patientPopulation) {\n+                    ListResource.ListEntryComponent entry = new ListResource.ListEntryComponent()\n+                            .setItem(new Reference()\n+                                    .setReference(patient.getIdElement().getIdPart().startsWith(\"Patient/\")\n+                                            ? patient.getIdElement().getIdPart()\n+                                            : String.format(\"Patient/%s\", patient.getIdElement().getIdPart()))\n+                                    .setDisplay(patient.getNameFirstRep().getNameAsSingleString()));\n+                    subjectList.addEntry(entry);\n+                }\n+                report.addContained(subjectList);\n+            }\n+            populationReport.setCount(populationCount);\n+            reportGroup.addPopulation(populationReport);\n+        }\n+    }\n+\n+    private MeasureReport evaluate(Measure measure, Context context, List<Patient> patients,\n+            MeasureReport.MeasureReportType type, boolean isSingle, boolean includeEvaluatedResources) {\n+        MeasureReportBuilder reportBuilder = new MeasureReportBuilder();\n+        reportBuilder.buildStatus(\"complete\");\n+        reportBuilder.buildType(type);\n+        reportBuilder.buildMeasureReference(\n+                measure.getIdElement().getResourceType() + \"/\" + measure.getIdElement().getIdPart());\n+        if (type == MeasureReport.MeasureReportType.INDIVIDUAL && !patients.isEmpty()) {\n+            IdType patientId = patients.get(0).getIdElement();\n+            reportBuilder.buildPatientReference(patientId.getResourceType() + \"/\" + patientId.getIdPart());\n+        }\n+        reportBuilder.buildPeriod(measurementPeriod);\n+\n+        MeasureReport report = reportBuilder.build();\n+\n+        Map<String, Resource> resources = new HashMap<>();\n+        Map<String, Set<String>> codeToResourceMap = new HashMap<>();\n+\n+        MeasureScoring measureScoring = MeasureScoring.fromCode(measure.getScoring().getCodingFirstRep().getCode());\n+        if (measureScoring == null) {\n+            throw new RuntimeException(\"Measure scoring is required in order to calculate.\");\n+        }\n+\n+        List<Measure.MeasureSupplementalDataComponent> sde = new ArrayList<>();\n+        Map<String, Map<String, Integer>> sdeAccumulators = null;\n+        for (Measure.MeasureGroupComponent group : measure.getGroup()) {\n+            MeasureReport.MeasureReportGroupComponent reportGroup = new MeasureReport.MeasureReportGroupComponent();\n+            reportGroup.setId(group.getId());\n+            report.getGroup().add(reportGroup);\n+\n+            // Declare variables to avoid a hash lookup on every patient\n+            // TODO: Isn't quite right, there may be multiple initial populations for a\n+            // ratio measure...\n+            Measure.MeasureGroupPopulationComponent initialPopulationCriteria = null;\n+            Measure.MeasureGroupPopulationComponent numeratorCriteria = null;\n+            Measure.MeasureGroupPopulationComponent numeratorExclusionCriteria = null;\n+            Measure.MeasureGroupPopulationComponent denominatorCriteria = null;\n+            Measure.MeasureGroupPopulationComponent denominatorExclusionCriteria = null;\n+            Measure.MeasureGroupPopulationComponent denominatorExceptionCriteria = null;\n+            Measure.MeasureGroupPopulationComponent measurePopulationCriteria = null;\n+            Measure.MeasureGroupPopulationComponent measurePopulationExclusionCriteria = null;\n+//            // TODO: Isn't quite right, there may be multiple measure observations...\n+            Measure.MeasureGroupPopulationComponent measureObservationCriteria = null;\n+\n+            Map<String, Resource> initialPopulation = null;\n+            Map<String, Resource> numerator = null;\n+            Map<String, Resource> numeratorExclusion = null;\n+            Map<String, Resource> denominator = null;\n+            Map<String, Resource> denominatorExclusion = null;\n+            Map<String, Resource> denominatorException = null;\n+            Map<String, Resource> measurePopulation = null;\n+            Map<String, Resource> measurePopulationExclusion = null;\n+            Map<String, Resource> measureObservation = null;\n+\n+            Map<String, Patient> initialPopulationPatients = null;\n+            Map<String, Patient> numeratorPatients = null;\n+            Map<String, Patient> numeratorExclusionPatients = null;\n+            Map<String, Patient> denominatorPatients = null;\n+            Map<String, Patient> denominatorExclusionPatients = null;\n+            Map<String, Patient> denominatorExceptionPatients = null;\n+            Map<String, Patient> measurePopulationPatients = null;\n+            Map<String, Patient> measurePopulationExclusionPatients = null;\n+\n+            for (Measure.MeasureGroupPopulationComponent pop : group.getPopulation()) {\n+                MeasurePopulationType populationType = MeasurePopulationType\n+                        .fromCode(pop.getCode().getCodingFirstRep().getCode());\n+                if (populationType != null) {\n+                    switch (populationType) {\n+                        case INITIALPOPULATION:\n+                            initialPopulationCriteria = pop;\n+                            initialPopulation = new HashMap<>();\n+                            if (type == MeasureReport.MeasureReportType.SUBJECTLIST) {\n+                                initialPopulationPatients = new HashMap<>();\n+                            }\n+                            break;\n+                        case NUMERATOR:\n+                            numeratorCriteria = pop;\n+                            numerator = new HashMap<>();\n+                            if (type == MeasureReport.MeasureReportType.SUBJECTLIST) {\n+                                numeratorPatients = new HashMap<>();\n+                            }\n+                            break;\n+                        case NUMERATOREXCLUSION:\n+                            numeratorExclusionCriteria = pop;\n+                            numeratorExclusion = new HashMap<>();\n+                            if (type == MeasureReport.MeasureReportType.SUBJECTLIST) {\n+                                numeratorExclusionPatients = new HashMap<>();\n+                            }\n+                            break;\n+                        case DENOMINATOR:\n+                            denominatorCriteria = pop;\n+                            denominator = new HashMap<>();\n+                            if (type == MeasureReport.MeasureReportType.SUBJECTLIST) {\n+                                denominatorPatients = new HashMap<>();\n+                            }\n+                            break;\n+                        case DENOMINATOREXCLUSION:\n+                            denominatorExclusionCriteria = pop;\n+                            denominatorExclusion = new HashMap<>();\n+                            if (type == MeasureReport.MeasureReportType.SUBJECTLIST) {\n+                                denominatorExclusionPatients = new HashMap<>();\n+                            }\n+                            break;\n+                        case DENOMINATOREXCEPTION:\n+                            denominatorExceptionCriteria = pop;\n+                            denominatorException = new HashMap<>();\n+                            if (type == MeasureReport.MeasureReportType.SUBJECTLIST) {\n+                                denominatorExceptionPatients = new HashMap<>();\n+                            }\n+                            break;\n+                        case MEASUREPOPULATION:\n+                            measurePopulationCriteria = pop;\n+                            measurePopulation = new HashMap<>();\n+                            if (type == MeasureReport.MeasureReportType.SUBJECTLIST) {\n+                                measurePopulationPatients = new HashMap<>();\n+                            }\n+                            break;\n+                        case MEASUREPOPULATIONEXCLUSION:\n+                            measurePopulationExclusionCriteria = pop;\n+                            measurePopulationExclusion = new HashMap<>();\n+                            if (type == MeasureReport.MeasureReportType.SUBJECTLIST) {\n+                                measurePopulationExclusionPatients = new HashMap<>();\n+                            }\n+                            break;\n+                        case MEASUREOBSERVATION:\n+                            measureObservationCriteria = pop;\n+                            measureObservation = new HashMap<>();\n+                            break;\n+                    }\n+                }\n+            }\n+\n+            sdeAccumulators = new HashMap<>();\n+            sde = measure.getSupplementalData();\n+            \n+            switch (measureScoring) {\n+                case PROPORTION:\n+                case RATIO: {\n+\n+                    // For each patient in the initial population\n+                    for (Patient patient : patients) {\n+                        // Are they in the initial population?\n+                        boolean inInitialPopulation = evaluatePopulationCriteria(context, patient,\n+                                initialPopulationCriteria, initialPopulation, initialPopulationPatients, null, null,\n+                                null);\n+                        populateResourceMap(context, MeasurePopulationType.INITIALPOPULATION, resources,\n+                                codeToResourceMap, includeEvaluatedResources);\n+\n+                        if (inInitialPopulation) {\n+                            // Are they in the denominator?\n+                            boolean inDenominator = evaluatePopulationCriteria(context, patient, denominatorCriteria,\n+                                    denominator, denominatorPatients, denominatorExclusionCriteria,\n+                                    denominatorExclusion, denominatorExclusionPatients);\n+                            populateResourceMap(context, MeasurePopulationType.DENOMINATOR, resources,\n+                                    codeToResourceMap, includeEvaluatedResources);\n+\n+                            if (inDenominator) {\n+                                // Are they in the numerator?\n+                                boolean inNumerator = evaluatePopulationCriteria(context, patient, numeratorCriteria,\n+                                        numerator, numeratorPatients, numeratorExclusionCriteria, numeratorExclusion,\n+                                        numeratorExclusionPatients);\n+                                populateResourceMap(context, MeasurePopulationType.NUMERATOR, resources,\n+                                        codeToResourceMap, includeEvaluatedResources);\n+\n+                                if (!inNumerator && inDenominator && (denominatorExceptionCriteria != null)) {\n+                                    // Are they in the denominator exception?\n+                                    boolean inException = false;\n+                                    for (Resource resource : evaluateCriteria(context, patient,\n+                                            denominatorExceptionCriteria)) {\n+                                        inException = true;\n+                                        denominatorException.put(resource.getIdElement().getIdPart(), resource);\n+                                        denominator.remove(resource.getIdElement().getIdPart());\n+                                        populateResourceMap(context, MeasurePopulationType.DENOMINATOREXCEPTION,\n+                                                resources, codeToResourceMap, includeEvaluatedResources);\n+                                    }\n+                                    if (inException) {\n+                                        if (denominatorExceptionPatients != null) {\n+                                            denominatorExceptionPatients.put(patient.getIdElement().getIdPart(),\n+                                                    patient);\n+                                        }\n+                                        if (denominatorPatients != null) {\n+                                            denominatorPatients.remove(patient.getIdElement().getIdPart());\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        MeasureSupplementalDataEvaluation.populateSDEAccumulators(measure, context, patient, sdeAccumulators, sde);\n+                    }\n+\n+                    // Calculate actual measure score, Count(numerator) / Count(denominator)\n+                    if (denominator != null && numerator != null && denominator.size() > 0) {\n+                        reportGroup.setMeasureScore(new Quantity(numerator.size() / (double) denominator.size()));\n+                    }\n+\n+                    break;\n+                }\n+                case CONTINUOUSVARIABLE: {\n+\n+                    // For each patient in the patient list\n+                    for (Patient patient : patients) {\n+\n+                        // Are they in the initial population?\n+                        boolean inInitialPopulation = evaluatePopulationCriteria(context, patient,\n+                                initialPopulationCriteria, initialPopulation, initialPopulationPatients, null, null,\n+                                null);\n+                        populateResourceMap(context, MeasurePopulationType.INITIALPOPULATION, resources,\n+                                codeToResourceMap, includeEvaluatedResources);\n+\n+                        if (inInitialPopulation) {\n+                            // Are they in the measure population?\n+                            boolean inMeasurePopulation = evaluatePopulationCriteria(context, patient,\n+                                    measurePopulationCriteria, measurePopulation, measurePopulationPatients,\n+                                    measurePopulationExclusionCriteria, measurePopulationExclusion,\n+                                    measurePopulationExclusionPatients);\n+\n+                            if (inMeasurePopulation) {\n+                                for (Resource resource : measurePopulation.values()) {\n+                                    Resource observation = ObservationMeasureEvaluation.evaluateObservationCriteria(context, patient, resource, measureObservationCriteria, report);\n+                                    measureObservation.put(resource.getIdElement().getIdPart(), observation);\n+                                    report.addContained(observation);\n+                                    report.getEvaluatedResource().add(new Reference(\"#\" + observation.getId()));\n+                                }\n+                            }\n+                        }\n+                        MeasureSupplementalDataEvaluation.populateSDEAccumulators(measure, context, patient, sdeAccumulators,sde);\n+                    }\n+\n+                    break;\n+                }\n+                case COHORT: {\n+\n+                    // For each patient in the patient list\n+                    for (Patient patient : patients) {\n+                        evaluatePopulationCriteria(context, patient,\n+                                initialPopulationCriteria, initialPopulation, initialPopulationPatients, null, null,\n+                                null);\n+                        populateResourceMap(context, MeasurePopulationType.INITIALPOPULATION, resources,\n+                                codeToResourceMap, includeEvaluatedResources);\n+                        MeasureSupplementalDataEvaluation.populateSDEAccumulators(measure, context, patient, sdeAccumulators, sde);\n+                    }\n+\n+                    break;\n+                }\n+                \n+            }\n+\n+            // Add population reports for each group\n+            addPopulationCriteriaReport(report, reportGroup, initialPopulationCriteria,\n+                    initialPopulation != null ? initialPopulation.size() : 0,\n+                    initialPopulationPatients != null ? initialPopulationPatients.values() : null);\n+            addPopulationCriteriaReport(report, reportGroup, numeratorCriteria,\n+                    numerator != null ? numerator.size() : 0,\n+                    numeratorPatients != null ? numeratorPatients.values() : null);\n+            addPopulationCriteriaReport(report, reportGroup, numeratorExclusionCriteria,\n+                    numeratorExclusion != null ? numeratorExclusion.size() : 0,\n+                    numeratorExclusionPatients != null ? numeratorExclusionPatients.values() : null);\n+            addPopulationCriteriaReport(report, reportGroup, denominatorCriteria,\n+                    denominator != null ? denominator.size() : 0,\n+                    denominatorPatients != null ? denominatorPatients.values() : null);\n+            addPopulationCriteriaReport(report, reportGroup, denominatorExclusionCriteria,\n+                    denominatorExclusion != null ? denominatorExclusion.size() : 0,\n+                    denominatorExclusionPatients != null ? denominatorExclusionPatients.values() : null);\n+            addPopulationCriteriaReport(report, reportGroup, denominatorExceptionCriteria,\n+                    denominatorException != null ? denominatorException.size() : 0,\n+                    denominatorExceptionPatients != null ? denominatorExceptionPatients.values() : null);\n+            addPopulationCriteriaReport(report, reportGroup, measurePopulationCriteria,\n+                    measurePopulation != null ? measurePopulation.size() : 0,\n+                    measurePopulationPatients != null ? measurePopulationPatients.values() : null);\n+            addPopulationCriteriaReport(report, reportGroup, measurePopulationExclusionCriteria,\n+                    measurePopulationExclusion != null ? measurePopulationExclusion.size() : 0,\n+                    measurePopulationExclusionPatients != null ? measurePopulationExclusionPatients.values() : null);\n+            // TODO: Measure Observations...\n+        }\n+\n+        for (Entry<String, Set<String>> entry : codeToResourceMap.entrySet()) {\n+            ListResource list = new ListResource();\n+            \n+            for (String element : entry.getValue()) {\n+                ListResource.ListEntryComponent comp = new ListEntryComponent();\n+                comp.setItem(new Reference('#' + element));\n+                list.addEntry(comp);\n+            }\n+\n+            if (!list.isEmpty()) {\n+                list.setId(UUID.randomUUID().toString());\n+                list.setTitle(entry.getKey());\n+                resources.put(list.getId(), list);\n+            }\n+        }\n+\n+        if (!resources.isEmpty()) {\n+            List<Reference> evaluatedResourceIds = new ArrayList<>();\n+            resources.forEach((key, resource) -> {\n+                evaluatedResourceIds.add(new Reference(resource.getId()));\n+            });\n+            report.setEvaluatedResource(evaluatedResourceIds);\n+        }\n+        if (sdeAccumulators.size() > 0) {\n+            report = MeasureSupplementalDataEvaluation.processAccumulators(report, sdeAccumulators, sde, isSingle, patients);\n+        }\n+\n+        return report;\n+    }\n+\n+    private void populateResourceMap(Context context, MeasurePopulationType type, Map<String, Resource> resources,\n+            Map<String, Set<String>> codeToResourceMap, boolean includeEvaluatedResources) {\n+        if (context.getEvaluatedResources().isEmpty()) {\n+            return;\n+        }\n+\n+        if(!includeEvaluatedResources) {\n+        \treturn;\n+        }\n+        \n+        if (!codeToResourceMap.containsKey(type.toCode())) {\n+            codeToResourceMap.put(type.toCode(), new HashSet<>());\n+        }\n+\n+        Set<String> codeHashSet = codeToResourceMap.get((type.toCode()));\n+\n+        for (Object o : context.getEvaluatedResources()) {\n+            if (o instanceof Resource) {\n+                Resource r = (Resource) o;\n+                String id = (r.getIdElement().getResourceType() != null ? (r.getIdElement().getResourceType() + \"/\")\n+                        : \"\") + r.getIdElement().getIdPart();\n+                if (!codeHashSet.contains(id)) {\n+                    codeHashSet.add(id);\n+                }\n+\n+                if (!resources.containsKey(id)) {\n+                    resources.put(id, r);\n+                }\n+            }\n+        }\n+\n+        context.clearEvaluatedResources();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0ef707bbbd6d92dbcc1b99d6f0f593abc67c9444",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/MeasureSupplementalDataEvaluation.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/MeasureSupplementalDataEvaluation.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/MeasureSupplementalDataEvaluation.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/MeasureSupplementalDataEvaluation.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,145 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ * \n+ * Originated from org.opencds.cqf.r4.evaluation.MeasureEvaluation\n+ */\n+\n+package com.ibm.cohort.engine.cqfruler;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.hl7.fhir.r4.model.CanonicalType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Extension;\n+import org.hl7.fhir.r4.model.IntegerType;\n+import org.hl7.fhir.r4.model.Measure;\n+import org.hl7.fhir.r4.model.MeasureReport;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.opencds.cqf.cql.engine.execution.Context;\n+import org.opencds.cqf.cql.engine.runtime.Code;\n+\n+public class MeasureSupplementalDataEvaluation {\n+\t\n+\tprivate MeasureSupplementalDataEvaluation() {}\n+\t\n+\tpublic static void populateSDEAccumulators(Measure measure, Context context, Patient patient,\n+\t\t\tMap<String, Map<String, Integer>> sdeAccumulators,\n+\t\t\tList<Measure.MeasureSupplementalDataComponent> sde) {\n+\t\tcontext.setContextValue(\"Patient\", patient.getIdElement().getIdPart());\n+\t\tList<Object> sdeList = sde.stream()\n+\t\t\t\t.map(sdeItem -> context.resolveExpressionRef(sdeItem.getCriteria().getExpression()).evaluate(context))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tif (!sdeList.isEmpty()) {\n+\t\t\tfor (int i = 0; i < sdeList.size(); i++) {\n+\t\t\t\tObject sdeListItem = sdeList.get(i);\n+\t\t\t\tif (null != sdeListItem) {\n+\t\t\t\t\tString sdeAccumulatorKey = sde.get(i).getCode().getText();\n+\t\t\t\t\tif (null == sdeAccumulatorKey || sdeAccumulatorKey.length() < 1) {\n+\t\t\t\t\t\tsdeAccumulatorKey = sde.get(i).getCriteria().getExpression();\n+\t\t\t\t\t}\n+\t\t\t\t\tMap<String, Integer> sdeItemMap = sdeAccumulators.get(sdeAccumulatorKey);\n+\t\t\t\t\tString code = \"\";\n+\n+\t\t\t\t\tswitch (sdeListItem.getClass().getSimpleName()) {\n+\t\t\t\t\tcase \"Code\":\n+\t\t\t\t\t\tcode = ((Code) sdeListItem).getCode();\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"ArrayList\":\n+\t\t\t\t\t\tif (((ArrayList<?>) sdeListItem).isEmpty()) {\n+\t\t\t\t\t\t\tcode = ((Coding) ((ArrayList<?>) sdeListItem).get(0)).getCode();\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (null == code) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (null != sdeItemMap && null != sdeItemMap.get(code)) {\n+\t\t\t\t\t\tInteger sdeItemValue = sdeItemMap.get(code);\n+\t\t\t\t\t\tsdeItemValue++;\n+\t\t\t\t\t\tsdeItemMap.put(code, sdeItemValue);\n+\t\t\t\t\t\tsdeAccumulators.get(sdeAccumulatorKey).put(code, sdeItemValue);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (null == sdeAccumulators.get(sdeAccumulatorKey)) {\n+\t\t\t\t\t\t\tHashMap<String, Integer> newSDEItem = new HashMap<>();\n+\t\t\t\t\t\t\tnewSDEItem.put(code, 1);\n+\t\t\t\t\t\t\tsdeAccumulators.put(sdeAccumulatorKey, newSDEItem);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tsdeAccumulators.get(sdeAccumulatorKey).put(code, 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static MeasureReport processAccumulators(MeasureReport report,\n+\t\t\tMap<String, Map<String, Integer>> sdeAccumulators,\n+\t\t\tList<Measure.MeasureSupplementalDataComponent> sde, boolean isSingle, List<Patient> patients) {\n+\t\tList<Reference> newRefList = new ArrayList<>();\n+\t\tsdeAccumulators.forEach((sdeKey, sdeAccumulator) -> {\n+\t\t\tsdeAccumulator.forEach((sdeAccumulatorKey, sdeAccumulatorValue) -> {\n+\t\t\t\tObservation obs = new Observation();\n+\t\t\t\tobs.setStatus(Observation.ObservationStatus.FINAL);\n+\t\t\t\tobs.setId(UUID.randomUUID().toString());\n+\t\t\t\tCoding valueCoding = new Coding();\n+\t\t\t\tif (sdeKey.equalsIgnoreCase(\"sde-sex\")) {\n+\t\t\t\t\tvalueCoding.setCode(sdeAccumulatorKey);\n+\t\t\t\t} else {\n+\t\t\t\t\tString coreCategory = sdeKey.substring(sdeKey.lastIndexOf('-'));\n+\t\t\t\t\tpatients.forEach((pt) -> {\n+\t\t\t\t\t\tpt.getExtension().forEach((ptExt) -> {\n+\t\t\t\t\t\t\tif (ptExt.getUrl().contains(coreCategory)) {\n+\t\t\t\t\t\t\t\tString code = ((Coding) ptExt.getExtension().get(0).getValue()).getCode();\n+\t\t\t\t\t\t\t\tif (code.equalsIgnoreCase(sdeAccumulatorKey)) {\n+\t\t\t\t\t\t\t\t\tvalueCoding\n+\t\t\t\t\t\t\t\t\t\t\t.setSystem(((Coding) ptExt.getExtension().get(0).getValue()).getSystem());\n+\t\t\t\t\t\t\t\t\tvalueCoding.setCode(code);\n+\t\t\t\t\t\t\t\t\tvalueCoding\n+\t\t\t\t\t\t\t\t\t\t\t.setDisplay(((Coding) ptExt.getExtension().get(0).getValue()).getDisplay());\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t\tCodeableConcept obsCodeableConcept = new CodeableConcept();\n+\t\t\t\tExtension obsExtension = new Extension()\n+\t\t\t\t\t\t.setUrl(\"http://hl7.org/fhir/StructureDefinition/cqf-measureInfo\");\n+\t\t\t\tExtension extExtMeasure = new Extension().setUrl(\"measure\")\n+\t\t\t\t\t\t.setValue(new CanonicalType(\"http://hl7.org/fhir/us/cqfmeasures/\" + report.getMeasure()));\n+\t\t\t\tobsExtension.addExtension(extExtMeasure);\n+\t\t\t\tExtension extExtPop = new Extension().setUrl(\"populationId\").setValue(new StringType(sdeKey));\n+\t\t\t\tobsExtension.addExtension(extExtPop);\n+\t\t\t\tobs.addExtension(obsExtension);\n+\t\t\t\tobs.setValue(new IntegerType(sdeAccumulatorValue));\n+\t\t\t\tif (!isSingle) {\n+\t\t\t\t\tvalueCoding.setCode(sdeAccumulatorKey);\n+\t\t\t\t\tobsCodeableConcept.setCoding(Collections.singletonList(valueCoding));\n+\t\t\t\t\tobs.setCode(obsCodeableConcept);\n+\t\t\t\t} else {\n+\t\t\t\t\tobs.setCode(new CodeableConcept().setText(sdeKey));\n+\t\t\t\t\tobsCodeableConcept.setCoding(Collections.singletonList(valueCoding));\n+\t\t\t\t\tobs.setValue(obsCodeableConcept);\n+\t\t\t\t}\n+\t\t\t\tnewRefList.add(new Reference(\"#\" + obs.getId()));\n+\t\t\t\treport.addContained(obs);\n+\t\t\t});\n+\t\t});\n+\t\tnewRefList.addAll(report.getEvaluatedResource());\n+\t\treport.setEvaluatedResource(newRefList);\n+\t\treturn report;\n+\t}\n+}"
  },
  {
    "sha": "c98fb6f8aaa0db7b20e3fb664a0585fb576ea3cc",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/ObservationMeasureEvaluation.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/ObservationMeasureEvaluation.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/ObservationMeasureEvaluation.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/cqfruler/ObservationMeasureEvaluation.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ * \n+ * Originated from org.opencds.cqf.r4.evaluation.MeasureEvaluation\n+ */\n+\n+package com.ibm.cohort.engine.cqfruler;\n+\n+import java.lang.reflect.Field;\n+import java.util.LinkedHashMap;\n+import java.util.UUID;\n+\n+import org.cqframework.cql.elm.execution.ExpressionDef;\n+import org.cqframework.cql.elm.execution.FunctionDef;\n+import org.hl7.fhir.r4.model.CanonicalType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Extension;\n+import org.hl7.fhir.r4.model.Measure;\n+import org.hl7.fhir.r4.model.MeasureReport;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Resource;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.opencds.cqf.cql.engine.execution.Context;\n+import org.opencds.cqf.cql.engine.execution.Variable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ObservationMeasureEvaluation {\n+\t\n+\tprivate ObservationMeasureEvaluation() {}\n+\t\n+\tprivate static final Logger logger = LoggerFactory.getLogger(ObservationMeasureEvaluation.class);\n+\n+\tprivate static void clearExpressionCache(Context context) {\n+        // Hack to clear expression cache\n+        // See cqf-ruler github issue #153\n+        try {\n+            Field privateField = Context.class.getDeclaredField(\"expressions\");\n+            privateField.setAccessible(true);\n+            @SuppressWarnings(\"unchecked\")\n+\t\t\tLinkedHashMap<String, Object> expressions = (LinkedHashMap<String, Object>) privateField.get(context);\n+            expressions.clear();\n+\n+        } catch (Exception e) {\n+            logger.warn(\"Error resetting expression cache\", e);\n+        }\n+    }\n+\t\n+\tpublic static Resource evaluateObservationCriteria(Context context, Patient patient, Resource resource, Measure.MeasureGroupPopulationComponent pop, MeasureReport report) {\n+        if (pop == null || !pop.hasCriteria()) {\n+            return null;\n+        }\n+\n+        context.setContextValue(\"Patient\", patient.getIdElement().getIdPart());\n+\n+        clearExpressionCache(context);\n+\n+        String observationName = pop.getCriteria().getExpression();\n+        ExpressionDef ed = context.resolveExpressionRef(observationName);\n+        if (!(ed instanceof FunctionDef)) {\n+            throw new IllegalArgumentException(String.format(\"Measure observation %s does not reference a function definition\", observationName));\n+        }\n+\n+        Object result = null;\n+        context.pushWindow();\n+        try {\n+            context.push(new Variable().withName(((FunctionDef)ed).getOperand().get(0).getName()).withValue(resource));\n+            result = ed.getExpression().evaluate(context);\n+        }\n+        finally {\n+            context.popWindow();\n+        }\n+\n+        if (result instanceof Resource) {\n+            return (Resource)result;\n+        }\n+\n+        Observation obs = new Observation();\n+        obs.setStatus(Observation.ObservationStatus.FINAL);\n+        obs.setId(UUID.randomUUID().toString());\n+        CodeableConcept cc = new CodeableConcept();\n+        cc.setText(observationName);\n+        obs.setCode(cc);\n+        Extension obsExtension = new Extension().setUrl(\"http://hl7.org/fhir/StructureDefinition/cqf-measureInfo\");\n+        Extension extExtMeasure = new Extension()\n+                .setUrl(\"measure\")\n+                .setValue(new CanonicalType(\"http://hl7.org/fhir/us/cqfmeasures/\" + report.getMeasure()));\n+        obsExtension.addExtension(extExtMeasure);\n+        Extension extExtPop = new Extension()\n+                .setUrl(\"populationId\")\n+                .setValue(new StringType(observationName));\n+        obsExtension.addExtension(extExtPop);\n+        obs.addExtension(obsExtension);\n+        return obs;\n+    }\n+}"
  },
  {
    "sha": "ceac22464b28372e2dea87e23d09fe90a820b03e",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/measure/CDMMeasureEvaluation.java",
    "status": "modified",
    "additions": 111,
    "deletions": 19,
    "changes": 130,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/CDMMeasureEvaluation.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/CDMMeasureEvaluation.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/CDMMeasureEvaluation.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -9,25 +9,35 @@\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n \n+import org.cqframework.cql.elm.execution.VersionedIdentifier;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.Extension;\n import org.hl7.fhir.r4.model.Measure;\n import org.hl7.fhir.r4.model.MeasureReport;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.Type;\n import org.hl7.fhir.r4.model.codesystems.MeasureScoring;\n import org.opencds.cqf.common.evaluation.MeasurePopulationType;\n import org.opencds.cqf.cql.engine.data.DataProvider;\n import org.opencds.cqf.cql.engine.execution.Context;\n import org.opencds.cqf.cql.engine.runtime.Interval;\n-import org.opencds.cqf.r4.evaluation.MeasureEvaluation;\n+\n+import com.ibm.cohort.engine.cdm.CDMConstants;\n+import com.ibm.cohort.engine.cqfruler.CDMContext;\n+import com.ibm.cohort.engine.cqfruler.MeasureEvaluation;\n+import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceHelper;\n+import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceOptions;\n+import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceOptions.DefineReturnOptions;\n \n /**\n  * Implementation of measure evaluation logic for the IBM Common Data Model IG\n  * Patient Quality Measure profile.\n  */\n public class CDMMeasureEvaluation {\n \n-\tpublic static final String CARE_GAP = \"care-gap\";\n-\tpublic static final String CDM_CODE_SYSTEM_MEASURE_POPULATION_TYPE = \"http://ibm.com/fhir/cdm/CodeSystem/measure-population-type\";\n-\n \t/**\n \t * Helper for collecting and indexing the various standard population types from\n \t * base FHIR and their count values so that they can easily be referenced in the\n@@ -87,10 +97,7 @@ public static StandardReportResults fromMeasureReportGroup(\n \tprivate MeasureEvaluation evaluation;\n \n \tpublic CDMMeasureEvaluation(DataProvider provider, Interval measurementPeriod) {\n-\t\t// The DaoRegistry parameter is only used for practitioner and subject-list type\n-\t\t// measures, so we can safely null it out right now. It is based on HAPI JPA\n-\t\t// ResourceProvider interface that we won't be able to use with IBM FHIR.\n-\t\tevaluation = new MeasureEvaluation(provider, /* daoRegistry= */null, measurementPeriod);\n+\t\tevaluation = new MeasureEvaluation(provider, measurementPeriod);\n \t}\n \n \t/**\n@@ -102,8 +109,10 @@ public CDMMeasureEvaluation(DataProvider provider, Interval measurementPeriod) {\n \t * @param patientId Patient ID of the patient to evaluate\n \t * @return MeasureReport with population components filled out.\n \t */\n-\tpublic MeasureReport evaluatePatientMeasure(Measure measure, Context context, String patientId) {\n-\t\tMeasureReport report = evaluation.evaluatePatientMeasure(measure, context, patientId);\n+\tpublic MeasureReport evaluatePatientMeasure(Measure measure, Context context, String patientId, MeasureEvidenceOptions evidenceOptions) {\n+\t\tcontext.setExpressionCaching(true);\n+\t\t\n+\t\tMeasureReport report = evaluation.evaluatePatientMeasure(measure, context, patientId, evidenceOptions.isIncludeEvaluatedResources());\n \n \t\tMeasureScoring scoring = MeasureScoring.fromCode(measure.getScoring().getCodingFirstRep().getCode());\n \t\tswitch (scoring) {\n@@ -117,7 +126,7 @@ public MeasureReport evaluatePatientMeasure(Measure measure, Context context, St\n \t\t\t\tboolean evaluateCareGaps = isEligibleForCareGapEvaluation(reportGroup);\n \n \t\t\t\tfor (Measure.MeasureGroupPopulationComponent pop : group.getPopulation()) {\n-\t\t\t\t\tif (pop.getCode().hasCoding(CDM_CODE_SYSTEM_MEASURE_POPULATION_TYPE, CARE_GAP)) {\n+\t\t\t\t\tif (pop.getCode().hasCoding(CDMConstants.CDM_CODE_SYSTEM_MEASURE_POPULATION_TYPE, CDMConstants.CARE_GAP)) {\n \t\t\t\t\t\tBoolean result = Boolean.FALSE;\n \t\t\t\t\t\tif (evaluateCareGaps) {\n \t\t\t\t\t\t\tresult = evaluateCriteria(context, pop.getCriteria().getExpression());\n@@ -135,9 +144,99 @@ public MeasureReport evaluatePatientMeasure(Measure measure, Context context, St\n \t\tdefault:\n \t\t\t// no customizations needed\n \t\t}\n+\t\t\n+\t\tif(context instanceof CDMContext) {\n+\t\t\tCDMContext defineContext = (CDMContext) context;\n+\t\t\t\n+\t\t\t// Grab the define results from the expression cache\n+\t\t\taddDefineEvaluationToReport(report, defineContext, evidenceOptions.getDefineReturnOption());\n+\t\t\t\n+\t\t\tdefineContext.clearExpressionCache();\n+\t\t}\n \n \t\treturn report;\n \t}\n+\t\n+\tprotected static void addDefineEvaluationToReport(MeasureReport report, CDMContext defineContext, DefineReturnOptions defineOption) {\n+\t\tif(DefineReturnOptions.NONE == defineOption) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tfor(Entry<VersionedIdentifier, Map<String, Object>> libraryCache : defineContext.getEntriesInCache()) {\n+\t\t\tfor(Entry<String, Object> defineResult : libraryCache.getValue().entrySet()) {\n+\t\t\t\t\n+\t\t\t\tList<Type> values = MeasureEvidenceHelper.getFhirTypes(defineResult.getValue());\n+\t\t\t\t\n+\t\t\t\tif (shouldAddDefineResult(defineOption, values)) {\n+\t\t\t\t\t\n+\t\t\t\t\tExtension evidence = new Extension();\n+\t\t\t\t\tevidence.setUrl(CDMConstants.EVIDENCE_URL);\n+\t\t\t\t\t\n+\t\t\t\t\tStringType key = new StringType(MeasureEvidenceHelper.createEvidenceKey(libraryCache.getKey(), defineResult.getKey()));\n+\t\t\t\t\t\n+\t\t\t\t\tExtension textExtension = new Extension();\n+\t\t\t\t\ttextExtension.setUrl(CDMConstants.EVIDENCE_TEXT_URL);\n+\t\t\t\t\ttextExtension.setValue(key);\n+\t\t\t\t\t\n+\t\t\t\t\tevidence.addExtension(textExtension);\n+\t\t\t\t\t\n+\t\t\t\t\tfor(Type value : values) {\n+\t\t\t\t\t\tExtension valueExtension = new Extension();\n+\t\t\t\t\t\tvalueExtension.setUrl(CDMConstants.EVIDENCE_VALUE_URL);\n+\t\t\t\t\t\tvalueExtension.setValue(value);\n+\t\t\t\t\t\tevidence.addExtension(valueExtension);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treport.addExtension(evidence);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprivate static boolean shouldAddDefineResult(DefineReturnOptions defineOption, List<Type> values) {\n+\t\tif(!values.isEmpty()) {\n+\t\t\tif(DefineReturnOptions.ALL == defineOption) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if(DefineReturnOptions.BOOLEAN == defineOption\n+\t\t\t\t\t&& values.size() == 1\n+\t\t\t\t\t&& values.get(0) instanceof BooleanType) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn false;\n+\t}\n+\t\n+\tprotected static void addBooleanDefineEvaluationToReport(MeasureReport report, CDMContext defineContext) {\n+\t\tfor(Entry<VersionedIdentifier, Map<String, Object>> libraryCache : defineContext.getEntriesInCache()) {\n+\t\t\tfor(Entry<String, Object> defineResult : libraryCache.getValue().entrySet()) {\n+\t\t\t\t\n+\t\t\t\tType value = MeasureEvidenceHelper.getFhirType(defineResult.getValue());\n+\t\t\t\t\n+\t\t\t\tif (value instanceof BooleanType) {\n+\t\t\t\t\t\n+\t\t\t\t\tExtension evidence = new Extension();\n+\t\t\t\t\tevidence.setUrl(CDMConstants.EVIDENCE_URL);\n+\t\t\t\t\t\n+\t\t\t\t\tStringType key = new StringType(MeasureEvidenceHelper.createEvidenceKey(libraryCache.getKey(), defineResult.getKey()));\n+\t\t\t\t\t\n+\t\t\t\t\tExtension textExtension = new Extension();\n+\t\t\t\t\ttextExtension.setUrl(CDMConstants.EVIDENCE_TEXT_URL);\n+\t\t\t\t\ttextExtension.setValue(key);\n+\t\t\t\t\t\n+\t\t\t\t\tevidence.addExtension(textExtension);\n+\t\t\t\t\t\n+\t\t\t\t\tExtension valueExtension = new Extension();\n+\t\t\t\t\tvalueExtension.setUrl(CDMConstants.EVIDENCE_VALUE_URL);\n+\t\t\t\t\tvalueExtension.setValue(value);\n+\t\t\t\t\tevidence.addExtension(valueExtension);\n+\t\t\t\t\t\n+\t\t\t\t\treport.addExtension(evidence);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n \n \t/**\n \t * Given the results in a report group determine whether or not the patient is\n@@ -172,13 +271,6 @@ private boolean isEligibleForCareGapEvaluation(MeasureReport.MeasureReportGroupC\n \t *         true/false when list result and count > 0.\n \t */\n \tprivate Boolean evaluateCriteria(Context context, String expression) {\n-\t\t// TODO: Determine why the OSS implementation clears the expression cache after\n-\t\t// each evaluation. That seems to be generally a bad thing unless\n-\t\t// the population components are coming from different libraries with\n-\t\t// potentially overlapping define names, but we _know_ that isn't happening\n-\t\t// because we are following the Davinci spec where there is only one Library\n-\t\t// entry point.\n-\n \t\tObject result = context.resolveExpressionRef(expression).evaluate(context);\n \t\tif (result == null) {\n \t\t\tresult = Collections.emptyList();\n@@ -187,7 +279,7 @@ private Boolean evaluateCriteria(Context context, String expression) {\n \t\tif (result instanceof Boolean) {\n \t\t\treturn (Boolean) result;\n \t\t} else if (result instanceof List) {\n-\t\t\treturn ((List<?>) result).size() > 0;\n+\t\t\treturn !((List<?>) result).isEmpty();\n \t\t} else {\n \t\t\tthrow new IllegalArgumentException(String\n \t\t\t\t\t.format(\"Criteria expression '%s' did not evaluate to a boolean or list result.\", expression));"
  },
  {
    "sha": "de613ef9b387684fff8a2b736b9395e39a02cdf7",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/measure/MeasureEvaluator.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/MeasureEvaluator.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/MeasureEvaluator.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/MeasureEvaluator.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -130,7 +130,7 @@ public MeasurementPeriodStrategy getMeasurementPeriodStrategy() {\n \tpublic List<MeasureReport> evaluatePatientMeasures(String patientId, List<MeasureContext> measureContexts) {\n \t\treturn evaluatePatientMeasures(patientId, measureContexts, new MeasureEvidenceOptions());\n \t}\n-\n+\t\n \tpublic MeasureReport evaluatePatientMeasure(MeasureContext context, String patientId, MeasureEvidenceOptions evidenceOptions) {\n \t\tMeasureReport measureReport = null;\n \n@@ -149,8 +149,7 @@ public MeasureReport evaluatePatientMeasure(String measureId, String patientId,\n \t}\n \t\n \tpublic MeasureReport evaluatePatientMeasure(String measureId, String patientId, Map<String, Object> parameters) {\n-\t\tMeasure measure = MeasureHelper.loadMeasure(measureId, getMeasureResolutionProvider());\n-\t\treturn evaluatePatientMeasure(measure, patientId, parameters, new MeasureEvidenceOptions());\n+\t\treturn evaluatePatientMeasure(measureId, patientId, parameters, new MeasureEvidenceOptions());\n \t}\n \n \tpublic MeasureReport evaluatePatientMeasure(Identifier identifier, String version, String patientId, Map<String, Object> parameters, MeasureEvidenceOptions evidenceOptions) {\n@@ -202,7 +201,7 @@ public MeasureReport evaluatePatientMeasure(Measure measure, String patientId, S\n \t\t}\n \n \t\tCDMMeasureEvaluation evaluation = new CDMMeasureEvaluation(seed.getDataProvider(), seed.getMeasurementPeriod());\n-\t\treturn evaluation.evaluatePatientMeasure(measure, seed.getContext(), patientId);\n+\t\treturn evaluation.evaluatePatientMeasure(measure, seed.getContext(), patientId, evidenceOptions);\n \t}\n \n \tprivate Object toCqlObject(Type type) {"
  },
  {
    "sha": "3d033427e58ea5f82f1862b3e4ce717e8ccc34d1",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceHelper.java",
    "status": "added",
    "additions": 120,
    "deletions": 0,
    "changes": 120,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceHelper.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceHelper.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceHelper.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,120 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.cohort.engine.measure.evidence;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.cqframework.cql.elm.execution.VersionedIdentifier;\n+import org.hl7.fhir.r4.model.Annotation;\n+import org.hl7.fhir.r4.model.Attachment;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.DecimalType;\n+import org.hl7.fhir.r4.model.DomainResource;\n+import org.hl7.fhir.r4.model.IntegerType;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.RelatedArtifact;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.Type;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MeasureEvidenceHelper {\n+\t\n+\tprivate static final Logger logger = LoggerFactory.getLogger(MeasureEvidenceHelper.class);\n+\n+\tprivate static final String LIBRARY_CONCAT = \"_\";\n+\tprivate static final String DEFINE_CONCAT = \".\";\n+\t\n+\tpublic static String createEvidenceKey(VersionedIdentifier libraryId, String defineName) {\n+\t\treturn new StringBuilder()\n+\t\t\t\t.append(libraryId.getId())\n+\t\t\t\t.append(LIBRARY_CONCAT)\n+\t\t\t\t.append(libraryId.getVersion())\n+\t\t\t\t.append(DEFINE_CONCAT)\n+\t\t\t\t.append(defineName)\n+\t\t\t\t.toString();\n+\t}\n+\t\n+\tpublic static List<Type> getFhirTypes(Object value) {\n+\t\tList<Type> types = new ArrayList<>();\n+\t\t\n+\t\tif(value instanceof Iterable) {\n+\t\t\tfor(Object item : (Iterable<?>)value) {\n+\t\t\t\tif(item instanceof Iterable) {\n+\t\t\t\t\ttypes.addAll(getFhirTypes(item));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tType type = getFhirType(item);\n+\t\t\t\t\t\n+\t\t\t\t\tif(type != null) {\n+\t\t\t\t\t\ttypes.add(type);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tType type = getFhirType(value);\n+\t\t\t\n+\t\t\tif(type != null) {\n+\t\t\t\ttypes.add(type);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn types;\n+\t}\n+\t\n+\tpublic static Type getFhirType(Object value) {\n+\t\t\n+\t\tif(value instanceof Boolean) {\n+\t\t\treturn new BooleanType((Boolean)value);\n+\t\t}\n+\t\telse if(value instanceof String) {\n+\t\t\treturn new StringType((String)value);\n+\t\t}\n+\t\telse if(value instanceof Double) {\n+\t\t\treturn new DecimalType((Double)value);\n+\t\t}\n+\t\telse if(value instanceof Date) {\n+\t\t\treturn new DateTimeType((Date)value);\n+\t\t}\n+\t\telse if(value instanceof Integer) {\n+\t\t\treturn new IntegerType((Integer)value);\n+\t\t}\n+\t\telse if(value instanceof DomainResource) {\n+\t\t\treturn new Reference((DomainResource)value);\n+\t\t}\n+\t\telse if(value instanceof CodeableConcept) {\n+\t\t\treturn (CodeableConcept)value;\n+\t\t}\n+\t\telse if(value instanceof Annotation) {\n+\t\t\treturn (Annotation)value;\n+\t\t}\n+\t\telse if(value instanceof Attachment) {\n+\t\t\treturn (Attachment)value;\n+\t\t}\n+\t\telse if(value instanceof Period) {\n+\t\t\treturn (Period)value;\n+\t\t}\n+\t\telse if(value instanceof Quantity) {\n+\t\t\treturn (Quantity)value;\n+\t\t}\n+\t\telse if(value instanceof RelatedArtifact) {\n+\t\t\treturn (RelatedArtifact)value;\n+\t\t}\n+\t\telse {\n+\t\t\tlogger.warn(\"Unsupported exception type: {}\", value);\n+\t\t\treturn null; \n+\t\t}\n+\t\t\n+\t}\n+}"
  },
  {
    "sha": "fb8afbbbdcda5ca7e64ceb2fb1d8c835012e93e9",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceOptions.java",
    "status": "modified",
    "additions": 18,
    "deletions": 12,
    "changes": 30,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceOptions.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceOptions.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceOptions.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -8,36 +8,42 @@\n \n public class MeasureEvidenceOptions {\n \tprivate boolean includeEvaluatedResources = false;\n-\tprivate boolean includeDefineEvaluation = false;\n+\tprivate DefineReturnOptions defineReturnOption = DefineReturnOptions.NONE;\n+\t\n+\tpublic enum DefineReturnOptions {\n+\t\tALL,\n+\t\tBOOLEAN,\n+\t\tNONE\n+\t}\n \t\n \tpublic MeasureEvidenceOptions() {}\n \t\n-\tpublic MeasureEvidenceOptions(boolean includeEvaluatedResources, boolean includeDefineEvaluation) {\n+\tpublic MeasureEvidenceOptions(boolean includeEvaluatedResources, DefineReturnOptions defineReturnOption) {\n \t\tthis.includeEvaluatedResources = includeEvaluatedResources;\n-\t\tthis.includeDefineEvaluation = includeDefineEvaluation;\n+\t\tthis.defineReturnOption = defineReturnOption;\n \t}\n-\n+\t\n \tpublic boolean isIncludeEvaluatedResources() {\n \t\treturn includeEvaluatedResources;\n \t}\n \n \tpublic void setIncludeEvaluatedResources(boolean includeEvaluatedResources) {\n \t\tthis.includeEvaluatedResources = includeEvaluatedResources;\n \t}\n-\n-\tpublic boolean isIncludeDefineEvaluation() {\n-\t\treturn includeDefineEvaluation;\n+\t\n+\tpublic DefineReturnOptions getDefineReturnOption() {\n+\t\treturn defineReturnOption;\n \t}\n \n-\tpublic void setIncludeDefineEvaluation(boolean includeDefineEvaluation) {\n-\t\tthis.includeDefineEvaluation = includeDefineEvaluation;\n+\tpublic void setDefineReturnOption(DefineReturnOptions defineReturnOption) {\n+\t\tthis.defineReturnOption = defineReturnOption;\n \t}\n-\n+\t\n \t@Override\n \tpublic int hashCode() {\n \t\tfinal int prime = 31;\n \t\tint result = 1;\n-\t\tresult = prime * result + (includeDefineEvaluation ? 1231 : 1237);\n+\t\tresult = prime * result + ((defineReturnOption == null) ? 0 : defineReturnOption.hashCode());\n \t\tresult = prime * result + (includeEvaluatedResources ? 1231 : 1237);\n \t\treturn result;\n \t}\n@@ -51,7 +57,7 @@ public boolean equals(Object obj) {\n \t\tif (getClass() != obj.getClass())\n \t\t\treturn false;\n \t\tMeasureEvidenceOptions other = (MeasureEvidenceOptions) obj;\n-\t\tif (includeDefineEvaluation != other.includeDefineEvaluation)\n+\t\tif (defineReturnOption != other.defineReturnOption)\n \t\t\treturn false;\n \t\tif (includeEvaluatedResources != other.includeEvaluatedResources)\n \t\t\treturn false;"
  },
  {
    "sha": "e729f6cb6b7c8bff03f9f8c4eca54b305883d52b",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/measure/seed/MeasureEvaluationSeeder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/seed/MeasureEvaluationSeeder.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/seed/MeasureEvaluationSeeder.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/measure/seed/MeasureEvaluationSeeder.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -23,6 +23,7 @@\n import org.opencds.cqf.cql.engine.terminology.TerminologyProvider;\n \n import com.google.common.annotations.VisibleForTesting;\n+import com.ibm.cohort.engine.cqfruler.CDMContext;\n import com.ibm.cohort.engine.measure.LibraryHelper;\n \n public class MeasureEvaluationSeeder {\n@@ -142,7 +143,7 @@ protected Context createContext(\n \n \t@VisibleForTesting\n \tprotected Context createDefaultContext(org.cqframework.cql.elm.execution.Library library) {\n-\t\treturn new Context(library);\n+\t\treturn new CDMContext(library);\n \t}\n \n \t@VisibleForTesting"
  },
  {
    "sha": "1453f4983057ac024d9fb7d2631955fe33f0be60",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/r4/builder/IdentifierBuilder.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/r4/builder/IdentifierBuilder.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/r4/builder/IdentifierBuilder.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/r4/builder/IdentifierBuilder.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ * \n+ * Originated from org.opencds.cqf.r4.builders.IdentifierBuilder  \n+ */\n+\n+package com.ibm.cohort.engine.r4.builder;\n+\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.opencds.cqf.common.builders.BaseBuilder;\n+\n+public class IdentifierBuilder extends BaseBuilder<Identifier> {\n+\n+    public IdentifierBuilder() {\n+        super(new Identifier());\n+    }\n+\n+    public IdentifierBuilder buildUse(Identifier.IdentifierUse use) {\n+        complexProperty.setUse(use);\n+        return this;\n+    }\n+\n+    public IdentifierBuilder buildUse(String use) throws FHIRException {\n+        complexProperty.setUse(Identifier.IdentifierUse.fromCode(use));\n+        return this;\n+    }\n+\n+    public IdentifierBuilder buildType(CodeableConcept type) {\n+        complexProperty.setType(type);\n+        return this;\n+    }\n+\n+    public IdentifierBuilder buildSystem(String system) {\n+        complexProperty.setSystem(system);\n+        return this;\n+    }\n+\n+    public IdentifierBuilder buildValue(String value) {\n+        complexProperty.setValue(value);\n+        return this;\n+    }\n+\n+    public IdentifierBuilder buildPeriod(Period period) {\n+        complexProperty.setPeriod(period);\n+        return this;\n+    }\n+\n+    public IdentifierBuilder buildAssigner(Reference assigner) {\n+        complexProperty.setAssigner(assigner);\n+        return this;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3fc243873654acd9f9777eb79dc5fcc9ded366c6",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/r4/builder/MeasureReportBuilder.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/r4/builder/MeasureReportBuilder.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/r4/builder/MeasureReportBuilder.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/r4/builder/MeasureReportBuilder.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ * \n+ * Originated from org.opencds.cqf.r4.builders.MeasureReportBuilder  \n+ */\n+\n+package com.ibm.cohort.engine.r4.builder;\n+\n+import java.util.Date;\n+\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.MeasureReport;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.opencds.cqf.common.builders.BaseBuilder;\n+import org.opencds.cqf.cql.engine.runtime.DateTime;\n+import org.opencds.cqf.cql.engine.runtime.Interval;\n+\n+import com.ibm.cohort.annotations.Generated;\n+\n+public class MeasureReportBuilder extends BaseBuilder<MeasureReport> {\n+    public MeasureReportBuilder() {\n+        super(new MeasureReport());\n+    }\n+\n+    @Generated\n+    public MeasureReportBuilder buildStatus(String status) {\n+        try {\n+            this.complexProperty.setStatus(MeasureReport.MeasureReportStatus.fromCode(status));\n+        } catch (FHIRException e) {\n+            // default to complete\n+            this.complexProperty.setStatus(MeasureReport.MeasureReportStatus.COMPLETE);\n+        }\n+        return this;\n+    }\n+\n+    @Generated\n+    public MeasureReportBuilder buildType(MeasureReport.MeasureReportType type) {\n+        this.complexProperty.setType(type);\n+        return this;\n+    }\n+\n+    @Generated\n+    public MeasureReportBuilder buildType(String type) {\n+        this.complexProperty.setType(MeasureReport.MeasureReportType.fromCode(type));\n+        return this;\n+    }\n+\n+    @Generated\n+    public MeasureReportBuilder buildMeasureReference(String measureRef) {\n+        this.complexProperty.setMeasure(measureRef);\n+        return this;\n+    }\n+\n+    @Generated\n+    public MeasureReportBuilder buildPatientReference(String patientRef) {\n+        this.complexProperty.setSubject(new Reference(patientRef));\n+        return this;\n+    }\n+\n+    @Generated\n+    public MeasureReportBuilder buildPeriod(Interval period) {\n+        Object start = period.getStart();\n+        if (start instanceof DateTime) {\n+            this.complexProperty\n+                    .setPeriod(new Period().setStart(Date.from(((DateTime) start).getDateTime().toInstant()))\n+                            .setEnd(Date.from(((DateTime) period.getEnd()).getDateTime().toInstant())));\n+        } else if (start instanceof Date) {\n+            this.complexProperty\n+                    .setPeriod(new Period().setStart((Date) period.getStart()).setEnd((Date) period.getEnd()));\n+        }\n+\n+        return this;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "98ab70dcf17bd7713860530657f974546af94ef8",
    "filename": "cohort-engine/src/main/java/com/ibm/cohort/engine/translation/InJVMCqlTranslationProvider.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/translation/InJVMCqlTranslationProvider.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/main/java/com/ibm/cohort/engine/translation/InJVMCqlTranslationProvider.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/main/java/com/ibm/cohort/engine/translation/InJVMCqlTranslationProvider.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -82,7 +82,7 @@ public Library translate(InputStream cql, List<Options> options, LibraryFormat t\n \t\t\t\toptionsList.toArray(new Options[optionsList.size()]));\n \n \t\tLOG.debug(\"Translated CQL contains {} errors\", translator.getErrors().size());\n-\t\tif (translator.getErrors().size() > 0) {\n+\t\tif (!translator.getErrors().isEmpty()) {\n \t\t\tthrow new Exception(\"CQL translation contained errors: \" + String.join(\"\\n\",\n \t\t\t\t\ttranslator.getErrors().stream().map(x -> x.toString()).collect(Collectors.toList())));\n \t\t}"
  },
  {
    "sha": "94c8722d3e13d528a11edad80686661d9a347878",
    "filename": "cohort-engine/src/test/java/com/ibm/cohort/engine/CqlEngineWrapperTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/CqlEngineWrapperTest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/CqlEngineWrapperTest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/java/com/ibm/cohort/engine/CqlEngineWrapperTest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -230,9 +230,6 @@ public void testSimplestHTTPRequestSettings() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore\n-\t// This test fails with \"ConceptRef evaluate not supported message\" due to a bug in the Engine.\n-\t// see https://github.com/DBCG/cql_engine/issues/421\n \tpublic void testConditionClinicalStatusActiveIsMatched() throws Exception {\n \n \t\tPatient patient = getPatient(\"123\", Enumerations.AdministrativeGender.FEMALE, null);\n@@ -344,7 +341,6 @@ public void testNumCallsUsingPerDefineMethod() throws Exception {\n \t}\n \n \t@Test\n-\t// @Ignore // This isn't working right now due to weirdness in the CqlEngine\n \tpublic void testNumCallsWithParamsUsingEngineWrapperMethod() throws Exception {\n \t\tPatient patient = getPatient(\"123\", Enumerations.AdministrativeGender.FEMALE, \"1978-05-06\");\n "
  },
  {
    "sha": "ebfce28a03626ca453dbeca3a7909f4836b3d72d",
    "filename": "cohort-engine/src/test/java/com/ibm/cohort/engine/measure/BaseMeasureTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/BaseMeasureTest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/BaseMeasureTest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/BaseMeasureTest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -32,6 +32,7 @@\n import org.opencds.cqf.common.evaluation.MeasurePopulationType;\n \n import com.ibm.cohort.engine.BaseFhirTest;\n+import com.ibm.cohort.engine.cdm.CDMConstants;\n import com.ibm.cohort.fhir.client.config.FhirClientBuilder;\n import com.ibm.cohort.fhir.client.config.FhirClientBuilderFactory;\n import com.ibm.cohort.fhir.client.config.FhirServerConfig;\n@@ -166,8 +167,8 @@ public Measure getCareGapMeasure(String measureName, Library library,\n \t\tfor (String expression : careGapExpressions) {\n \t\t\tMeasure.MeasureGroupPopulationComponent pop = new Measure.MeasureGroupPopulationComponent();\n \t\t\tpop.setId(expression);\n-\t\t\tpop.setCode(new CodeableConcept(new Coding(CDMMeasureEvaluation.CDM_CODE_SYSTEM_MEASURE_POPULATION_TYPE,\n-\t\t\t\t\tCDMMeasureEvaluation.CARE_GAP, \"Care Gap\")));\n+\t\t\tpop.setCode(new CodeableConcept(new Coding(CDMConstants.CDM_CODE_SYSTEM_MEASURE_POPULATION_TYPE,\n+\t\t\t\t\tCDMConstants.CARE_GAP, \"Care Gap\")));\n \t\t\tpop.setCriteria(new Expression().setLanguage(\"text/cql+identifier\").setExpression(expression));\n \t\t\tmeasure.getGroupFirstRep().addPopulation(pop);\n \t\t}"
  },
  {
    "sha": "0cb9f8f1b973dd3ec95ce815afa96a6228041357",
    "filename": "cohort-engine/src/test/java/com/ibm/cohort/engine/measure/CDMMeasureEvaluationTest.java",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/CDMMeasureEvaluationTest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/CDMMeasureEvaluationTest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/CDMMeasureEvaluationTest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,138 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.cohort.engine.measure;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.cqframework.cql.elm.execution.Library;\n+import org.cqframework.cql.elm.execution.VersionedIdentifier;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.DomainResource;\n+import org.hl7.fhir.r4.model.Extension;\n+import org.hl7.fhir.r4.model.MeasureReport;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.Type;\n+import org.junit.Test;\n+\n+import com.ibm.cohort.engine.cdm.CDMConstants;\n+import com.ibm.cohort.engine.cqfruler.CDMContext;\n+import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceHelper;\n+import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceOptions.DefineReturnOptions;\n+\n+public class CDMMeasureEvaluationTest {\n+\t@Test\n+\tpublic void testDefinesOnMeasureReport() {\n+\t\tMeasureReport report = new MeasureReport();\n+\t\t\n+\t\tMap<VersionedIdentifier, Map<String, Object>> expectedResults = setupTestExpectedResultsContext();\n+\t\tCDMContext defineContext = setupTestDefineContext(expectedResults);\n+\t\t\n+\t\tCDMMeasureEvaluation.addDefineEvaluationToReport(report, defineContext, DefineReturnOptions.ALL);\n+\t\t\n+\t\tassertEquals(5, report.getExtension().size());\n+\t\t\n+\t\tint index = 0;\n+\t\tfor(Entry<VersionedIdentifier, Map<String, Object>> expectedLibraryResults : expectedResults.entrySet()) {\n+\t\t\tfor(Entry<String, Object> defineResult : expectedLibraryResults.getValue().entrySet()) {\n+\t\t\t\tExtension extension = report.getExtension().get(index++);\n+\t\t\t\t\n+\t\t\t\tassertEquals(MeasureEvidenceHelper.createEvidenceKey(expectedLibraryResults.getKey(), defineResult.getKey()), extension.getExtensionByUrl(CDMConstants.EVIDENCE_TEXT_URL).getValue().primitiveValue());\n+\t\t\t\t\n+\t\t\t\t//hack because Type does not return equals for 2 identical objects :(\n+\t\t\t\tType returnType = extension.getExtensionByUrl(CDMConstants.EVIDENCE_VALUE_URL).getValue();\n+\t\t\t\t\n+\t\t\t\tif(defineResult.getValue() instanceof Boolean) {\n+\t\t\t\t\tassertTrue(returnType.isBooleanPrimitive());\n+\t\t\t\t\tassertEquals(defineResult.getValue(), ((BooleanType)returnType).booleanValue());\n+\t\t\t\t}\n+\t\t\t\telse if(defineResult.getValue() instanceof String) {\n+\t\t\t\t\tassertTrue(returnType.isPrimitive());\n+\t\t\t\t\tassertEquals(defineResult.getValue(), returnType.primitiveValue());\n+\t\t\t\t}\n+\t\t\t\telse if(defineResult.getValue() instanceof DomainResource) {\n+\t\t\t\t\tassertTrue(returnType instanceof Reference);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBooleanDefinesOnMeasureReport() {\n+\t\tMeasureReport report = new MeasureReport();\n+\t\tCDMContext defineContext = setupTestDefineContext(setupTestExpectedResultsContext());\n+\t\t\n+\t\tCDMMeasureEvaluation.addDefineEvaluationToReport(report, defineContext, DefineReturnOptions.BOOLEAN);\n+\t\t\n+\t\tassertEquals(3, report.getExtension().size());\n+\t\t\n+\t\tfor(Extension extension : report.getExtension()) {\n+\t\t\tType returnType = extension.getExtensionByUrl(CDMConstants.EVIDENCE_VALUE_URL).getValue();\n+\t\t\t\n+\t\t\tassertTrue(returnType instanceof BooleanType);\n+\t\t}\n+\t}\n+\t\n+\tprivate CDMContext setupTestDefineContext(Map<VersionedIdentifier, Map<String, Object>> expectedResults) {\n+\t\tLibrary library = new Library();\n+\t\tCDMContext defineContext = new CDMContext(library);\n+\t\t\t\t\t\t\n+\t\tfor(Entry<VersionedIdentifier, Map<String, Object>> expectedLibraryResults : expectedResults.entrySet()) {\n+\t\t\tfor(Entry<String, Object> defineResult : expectedLibraryResults.getValue().entrySet()) {\n+\t\t\t\tdefineContext.addExpressionToCache(expectedLibraryResults.getKey(), defineResult.getKey(), defineResult.getValue());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn defineContext;\n+\t}\n+\t\n+\tprivate Map<VersionedIdentifier, Map<String, Object>> setupTestExpectedResultsContext() {\n+\t\tVersionedIdentifier libraryId1 = new VersionedIdentifier();\n+\t\tlibraryId1.setId(\"LibraryName1\");\n+\t\tlibraryId1.setVersion(MeasureEvaluatorTest.DEFAULT_VERSION);\n+\t\t\n+\t\tVersionedIdentifier libraryId2 = new VersionedIdentifier();\n+\t\tlibraryId2.setId(\"LibraryName2\");\n+\t\tlibraryId2.setVersion(MeasureEvaluatorTest.DEFAULT_VERSION);\n+\t\t\n+\t\tString define1 = \"Define 1\";\n+\t\tString define2 = \"Define 2\";\n+\t\tString define3 = \"Define 3\";\n+\t\t\n+\t\tboolean boolVal1 = true;\n+\t\tboolean boolVal2 = false;\n+\t\tString stringVal = \"Hello\";\n+\t\tPatient patientRef = new Patient();\n+\t\t\n+\t\tMap<VersionedIdentifier, Map<String, Object>> expectedResults = new HashMap<>();\n+\t\t\n+\t\tMap<String, Object> library1ExpectedResults = Stream.of(\n+\t\t\t\t  new AbstractMap.SimpleEntry<>(define1, boolVal1), \n+\t\t\t\t  new AbstractMap.SimpleEntry<>(define2, boolVal2)\n+\t\t).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+\t\tMap<String, Object> library2ExpectedResults = Stream.of(\n+\t\t\t\t  new AbstractMap.SimpleEntry<>(define1, patientRef), \n+\t\t\t\t  new AbstractMap.SimpleEntry<>(define2, stringVal),\n+\t\t\t\t  new AbstractMap.SimpleEntry<>(define3, boolVal1)\n+\t\t).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\t\t\n+\t\texpectedResults.put(libraryId1, library1ExpectedResults);\n+\t\texpectedResults.put(libraryId2, library2ExpectedResults);\n+\t\t\n+\t\t\n+\t\treturn expectedResults;\n+\t}\n+}"
  },
  {
    "sha": "64e5bb1a445a4a1f5a24d9197b2b725f86709166",
    "filename": "cohort-engine/src/test/java/com/ibm/cohort/engine/measure/MeasureEvaluatorTest.java",
    "status": "modified",
    "additions": 171,
    "deletions": 57,
    "changes": 228,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/MeasureEvaluatorTest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/MeasureEvaluatorTest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/MeasureEvaluatorTest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -10,6 +10,7 @@\n import static com.github.tomakehurst.wiremock.client.WireMock.urlMatching;\n import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n@@ -24,9 +25,12 @@\n import org.hl7.fhir.r4.model.Address;\n import org.hl7.fhir.r4.model.CanonicalType;\n import org.hl7.fhir.r4.model.CapabilityStatement;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n import org.hl7.fhir.r4.model.Enumerations.AdministrativeGender;\n import org.hl7.fhir.r4.model.Extension;\n import org.hl7.fhir.r4.model.IntegerType;\n+import org.hl7.fhir.r4.model.HumanName;\n import org.hl7.fhir.r4.model.Library;\n import org.hl7.fhir.r4.model.Measure;\n import org.hl7.fhir.r4.model.MeasureReport;\n@@ -40,7 +44,9 @@\n import org.opencds.cqf.cql.engine.exception.InvalidOperatorArgument;\n \n import com.ibm.cohort.engine.LibraryFormat;\n+import com.ibm.cohort.engine.cdm.CDMConstants;\n import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceOptions;\n+import com.ibm.cohort.engine.measure.evidence.MeasureEvidenceOptions.DefineReturnOptions;\n import com.ibm.cohort.engine.measure.parameter.UnsupportedFhirTypeException;\n \n public class MeasureEvaluatorTest extends BaseMeasureTest {\n@@ -79,7 +85,7 @@ public void elm_in_initial_population___cohort_evaluated_correctly() throws Exce\n \t\tverify(1, getRequestedFor(urlMatching(\"/Library\\\\?url=http.*\")));\n \t\tverify(1, getRequestedFor(urlEqualTo(\"/Library?name%3Aexact=\" + library.getName() + \"&version=1.0.0\")));\n \t}\n-\n+\t\n \t@Test\n \tpublic void elm_and_cql_in_initial_population___cohort_evaluated_correctly() throws Exception {\n \t\tCapabilityStatement metadata = getCapabilityStatement();\n@@ -305,58 +311,6 @@ public void id_based_library_link___successfully_loaded_and_evaluated() throws E\n \t\t\n \t\tverify(1, getRequestedFor(urlEqualTo(\"/Library/\" + library.getId())));\n \t}\n-\t\n-\t@Test\n-\tpublic void in_populations_evaluated_resources_returned() throws Exception {\n-\t\tCapabilityStatement metadata = getCapabilityStatement();\n-\t\tmockFhirResourceRetrieval(\"/metadata\", metadata);\n-\n-\t\tPatient patient = getPatient(\"123\", AdministrativeGender.MALE, \"1970-10-10\");\n-\t\tmockFhirResourceRetrieval(patient);\n-\n-\t\tLibrary library = mockLibraryRetrieval(\"TestAdultMales\", DEFAULT_VERSION, \"cql/fhir-measure/test-adult-males.cql\");\n-\n-\t\texpressionsByPopulationType.clear();\n-\t\texpressionsByPopulationType.put(MeasurePopulationType.INITIALPOPULATION, INITIAL_POPULATION);\n-\t\texpressionsByPopulationType.put(MeasurePopulationType.DENOMINATOR, DENOMINATOR);\n-\t\texpressionsByPopulationType.put(MeasurePopulationType.NUMERATOR, NUMERATOR);\n-\n-\t\tMeasure measure = getProportionMeasure(\"ProportionMeasureName\", library, expressionsByPopulationType);\n-\t\tmockFhirResourceRetrieval(measure);\n-\n-\t\tMeasureReport report = evaluator.evaluatePatientMeasure(measure.getId(), patient.getId(), null, new MeasureEvidenceOptions(true, true));\n-\n-\t\tassertNotNull(report);\n-\n-\t\tassertTrue(!report.getEvaluatedResource().isEmpty());\n-\t}\n-\n-\t@Test\n-\tpublic void in_populations_no_evaluated_resources_returned() throws Exception {\n-\t\tCapabilityStatement metadata = getCapabilityStatement();\n-\t\tmockFhirResourceRetrieval(\"/metadata\", metadata);\n-\n-\t\tPatient patient = getPatient(\"123\", AdministrativeGender.MALE, \"1970-10-10\");\n-\t\tmockFhirResourceRetrieval(patient);\n-\n-\t\tLibrary library = mockLibraryRetrieval(\"TestAdultMales\", DEFAULT_VERSION, \"cql/fhir-measure/test-adult-males.cql\");\n-\n-\t\texpressionsByPopulationType.clear();\n-\t\texpressionsByPopulationType.put(MeasurePopulationType.INITIALPOPULATION, INITIAL_POPULATION);\n-\t\texpressionsByPopulationType.put(MeasurePopulationType.DENOMINATOR, DENOMINATOR);\n-\t\texpressionsByPopulationType.put(MeasurePopulationType.NUMERATOR, NUMERATOR);\n-\n-\t\tMeasure measure = getProportionMeasure(\"ProportionMeasureName\", library, expressionsByPopulationType);\n-\t\tmockFhirResourceRetrieval(measure);\n-\n-\t\tMeasureReport report = evaluator.evaluatePatientMeasure(measure.getId(), patient.getId(), null, new MeasureEvidenceOptions());\n-\t\tassertNotNull(report);\n-\n-\t\tassertTrue(!report.getEvaluatedResource().isEmpty());\n-\t\t\n-\t\t// When this functionality is implemented, this is what we want to be returned\n-//\t\tassertTrue(report.getEvaluatedResource().isEmpty());\n-\t}\n \n \t@Test\n \tpublic void measure_default_valid() throws Exception {\n@@ -386,8 +340,6 @@ public void measure_default_valid() throws Exception {\n \n \t\tMeasureReport report = evaluator.evaluatePatientMeasure(measure.getId(), patient.getId(), null, new MeasureEvidenceOptions());\n \t\tassertNotNull(report);\n-\n-\t\tassertTrue(!report.getEvaluatedResource().isEmpty());\n \t}\n \n \t@Test(expected = InvalidOperatorArgument.class)\n@@ -480,16 +432,178 @@ protected void assertPopulationExpectations(Measure measure, MeasureReport repor\n \n \t\tassertEquals(2, careGapPopulations.size());\n \t\tfor (MeasureReport.MeasureReportGroupPopulationComponent pop : careGapPopulations) {\n-\t\t\tassertEquals(CDMMeasureEvaluation.CDM_CODE_SYSTEM_MEASURE_POPULATION_TYPE,\n+\t\t\tassertEquals(CDMConstants.CDM_CODE_SYSTEM_MEASURE_POPULATION_TYPE,\n \t\t\t\t\tpop.getCode().getCodingFirstRep().getSystem());\n-\t\t\tassertEquals(CDMMeasureEvaluation.CARE_GAP, pop.getCode().getCodingFirstRep().getCode());\n+\t\t\tassertEquals(CDMConstants.CARE_GAP, pop.getCode().getCodingFirstRep().getCode());\n \t\t\tassertTrue(pop.getId().startsWith(\"CareGap\")); // this is part of the test fixture and may not match\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// production behavior\n \t\t\tassertEquals(pop.getId(), expectations.get(pop.getId()).intValue(), pop.getCount());\n \t\t}\n \t}\n \t\n+\n \tprotected RelatedArtifact asRelation(Library library) {\n \t\treturn new RelatedArtifact().setType(RelatedArtifact.RelatedArtifactType.DEPENDSON).setResource( library.getUrl() + \"|\" + library.getVersion() );\n \t}\n+\t\n+\tprivate Library setupDefineReturnLibrary() throws Exception {\n+\t\tLibrary fhirHelpers = mockLibraryRetrieval(\"FHIRHelpers\", DEFAULT_VERSION, \"cql/fhir-measure/FHIRHelpers.cql\");\n+\t\tLibrary library2 = mockLibraryRetrieval(\"TestAdultMales2\", DEFAULT_VERSION, \"cql/fhir-measure/test-adult-males2.cql\");\n+\t\tLibrary library3 = mockLibraryRetrieval(\"TestAdultMales3\", DEFAULT_VERSION, \"cql/fhir-measure/test-adult-males3.cql\");\n+\t\tLibrary library = mockLibraryRetrieval(\"TestAdultMales\", DEFAULT_VERSION, \"cql/fhir-measure/test-adult-males.cql\");\n+\n+\t\tlibrary.addRelatedArtifact(asRelation(fhirHelpers));\n+\t\tlibrary.addRelatedArtifact(asRelation(library2));\n+\t\tlibrary.addRelatedArtifact(asRelation(library3));\n+\t\t\n+\t\treturn library;\n+\t}\n+\t\n+\t@Test\n+\tpublic void in_populations_defines_returned() throws Exception {\n+\t\tCapabilityStatement metadata = getCapabilityStatement();\n+\t\tmockFhirResourceRetrieval(\"/metadata\", metadata);\n+\n+\t\tPatient patient = getPatient(\"123\", AdministrativeGender.MALE, \"1970-10-10\");\n+\t\t\n+\t\t//Add 2 names to test list\n+\t\tHumanName name1 = new HumanName();\n+\t\tname1.setFamily(\"Jones\");\n+\t\tHumanName name2 = new HumanName();\n+\t\tname2.setFamily(\"Smith\");\n+\t\tpatient.setName(Arrays.asList(name1, name2));\n+\t\t\n+\t\t// Add marital status to test codeable concept\n+\t\tCodeableConcept maritalStatus = new CodeableConcept();\n+\t\tCoding maritalCoding = new Coding();\n+\t\tmaritalCoding.setCode(\"M\");\n+\t\tmaritalCoding.setSystem(\"http://terminology.hl7.org/CodeSystem/v3-MaritalStatus\");\n+\t\tmaritalCoding.setDisplay(\"Married\");\n+\t\t\n+\t\tmaritalStatus.setCoding(Arrays.asList(maritalCoding));\n+\t\tmaritalStatus.setText(\"Married\");\n+\t\t\n+\t\tpatient.setMaritalStatus(maritalStatus);\n+\t\t\n+\t\tmockFhirResourceRetrieval(patient);\n+\t\tLibrary library = setupDefineReturnLibrary();\n+\t\t\n+\t\texpressionsByPopulationType.clear();\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.INITIALPOPULATION, INITIAL_POPULATION);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.DENOMINATOR, DENOMINATOR);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.NUMERATOR, NUMERATOR);\n+\n+\t\tMeasure measure = getProportionMeasure(\"ProportionMeasureName\", library, expressionsByPopulationType);\n+\t\tmockFhirResourceRetrieval(measure);\n+\n+\t\tMeasureReport report = evaluator.evaluatePatientMeasure(measure.getId(), patient.getId(), null, new MeasureEvidenceOptions(true, DefineReturnOptions.ALL));\n+\t\t\n+\t\tassertNotNull(report);\n+\t\t\n+\t\tassertFalse(report.getEvaluatedResource().isEmpty());\n+\t\t\n+\t\tList<Extension> returnedExtensions = report.getExtensionsByUrl(CDMConstants.EVIDENCE_URL);\n+\t\tassertFalse(returnedExtensions.isEmpty());\n+\t\tassertEquals(30, returnedExtensions.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void in_populations_evaluated_define_only_returned() throws Exception {\n+\t\tCapabilityStatement metadata = getCapabilityStatement();\n+\t\tmockFhirResourceRetrieval(\"/metadata\", metadata);\n+\n+\t\tPatient patient = getPatient(\"123\", AdministrativeGender.MALE, \"1970-10-10\");\n+\t\tmockFhirResourceRetrieval(patient);\n+\n+\t\tLibrary library = setupDefineReturnLibrary();\n+\t\t\n+\t\texpressionsByPopulationType.clear();\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.INITIALPOPULATION, INITIAL_POPULATION);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.DENOMINATOR, DENOMINATOR);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.NUMERATOR, NUMERATOR);\n+\n+\t\tMeasure measure = getProportionMeasure(\"ProportionMeasureName\", library, expressionsByPopulationType);\n+\t\tmockFhirResourceRetrieval(measure);\n+\n+\t\tMeasureReport report = evaluator.evaluatePatientMeasure(measure.getId(), patient.getId(), null, new MeasureEvidenceOptions(false, DefineReturnOptions.ALL));\n+\t\tassertNotNull(report);\n+\t\t\n+\t\tassertTrue(report.getEvaluatedResource().isEmpty());\n+\t\tassertFalse(report.getExtensionsByUrl(CDMConstants.EVIDENCE_URL).isEmpty());\n+\t}\n+\t\n+\t@Test\n+\tpublic void in_populations_evaluated_boolean_define_only_returned() throws Exception {\n+\t\tCapabilityStatement metadata = getCapabilityStatement();\n+\t\tmockFhirResourceRetrieval(\"/metadata\", metadata);\n+\n+\t\tPatient patient = getPatient(\"123\", AdministrativeGender.MALE, \"1970-10-10\");\n+\t\tmockFhirResourceRetrieval(patient);\n+\n+\t\tLibrary library = setupDefineReturnLibrary();\n+\t\t\n+\t\texpressionsByPopulationType.clear();\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.INITIALPOPULATION, INITIAL_POPULATION);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.DENOMINATOR, DENOMINATOR);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.NUMERATOR, NUMERATOR);\n+\n+\t\tMeasure measure = getProportionMeasure(\"ProportionMeasureName\", library, expressionsByPopulationType);\n+\t\tmockFhirResourceRetrieval(measure);\n+\n+\t\tMeasureReport report = evaluator.evaluatePatientMeasure(measure.getId(), patient.getId(), null, new MeasureEvidenceOptions(false, DefineReturnOptions.BOOLEAN));\n+\t\tassertNotNull(report);\n+\t\t\n+\t\tassertTrue(report.getEvaluatedResource().isEmpty());\n+\t\tassertFalse(report.getExtensionsByUrl(CDMConstants.EVIDENCE_URL).isEmpty());\n+\t}\n+\t\n+\t@Test\n+\tpublic void in_populations_evaluated_resources_returned() throws Exception {\n+\t\tCapabilityStatement metadata = getCapabilityStatement();\n+\t\tmockFhirResourceRetrieval(\"/metadata\", metadata);\n+\n+\t\tPatient patient = getPatient(\"123\", AdministrativeGender.MALE, \"1970-10-10\");\n+\t\tmockFhirResourceRetrieval(patient);\n+\n+\t\tLibrary library = setupDefineReturnLibrary();\n+\t\t\n+\t\texpressionsByPopulationType.clear();\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.INITIALPOPULATION, INITIAL_POPULATION);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.DENOMINATOR, DENOMINATOR);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.NUMERATOR, NUMERATOR);\n+\n+\t\tMeasure measure = getProportionMeasure(\"ProportionMeasureName\", library, expressionsByPopulationType);\n+\t\tmockFhirResourceRetrieval(measure);\n+\n+\t\tMeasureReport report = evaluator.evaluatePatientMeasure(measure.getId(), patient.getId(), null, new MeasureEvidenceOptions(true, DefineReturnOptions.NONE));\n+\t\tassertNotNull(report);\n+\t\t\n+\t\tassertFalse(report.getEvaluatedResource().isEmpty());\n+\t\tassertEquals(null, report.getExtensionByUrl(CDMConstants.EVIDENCE_URL));\n+\t}\n+\t\n+\t@Test\n+\tpublic void in_populations_no_evaluated_resources_returned() throws Exception {\n+\t\tCapabilityStatement metadata = getCapabilityStatement();\n+\t\tmockFhirResourceRetrieval(\"/metadata\", metadata);\n+\n+\t\tPatient patient = getPatient(\"123\", AdministrativeGender.MALE, \"1970-10-10\");\n+\t\tmockFhirResourceRetrieval(patient);\n+\n+\t\tLibrary library = setupDefineReturnLibrary();\n+\t\t\n+\t\texpressionsByPopulationType.clear();\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.INITIALPOPULATION, INITIAL_POPULATION);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.DENOMINATOR, DENOMINATOR);\n+\t\texpressionsByPopulationType.put(MeasurePopulationType.NUMERATOR, NUMERATOR);\n+\n+\t\tMeasure measure = getProportionMeasure(\"ProportionMeasureName\", library, expressionsByPopulationType);\n+\t\tmockFhirResourceRetrieval(measure);\n+\n+\t\tMeasureReport report = evaluator.evaluatePatientMeasure(measure.getId(), patient.getId(), null, new MeasureEvidenceOptions());\n+\t\tassertNotNull(report);\n+\t\t\n+\t\tassertTrue(report.getEvaluatedResource().isEmpty());\n+\t\tassertEquals(null, report.getExtensionByUrl(CDMConstants.EVIDENCE_URL));\n+\t}\n }"
  },
  {
    "sha": "b06260a5ef3e62ce222b5f9f42d3f44216472ea8",
    "filename": "cohort-engine/src/test/java/com/ibm/cohort/engine/measure/MeasureHelperTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/MeasureHelperTest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/MeasureHelperTest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/MeasureHelperTest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -16,10 +16,10 @@\n import org.hl7.fhir.r4.model.Measure;\n import org.junit.Before;\n import org.junit.Test;\n-import org.opencds.cqf.r4.builders.IdentifierBuilder;\n \n import com.github.tomakehurst.wiremock.client.MappingBuilder;\n import com.github.tomakehurst.wiremock.matching.EqualToPattern;\n+import com.ibm.cohort.engine.r4.builder.IdentifierBuilder;\n import com.ibm.cohort.fhir.client.config.FhirClientBuilder;\n import com.ibm.cohort.fhir.client.config.FhirClientBuilderFactory;\n "
  },
  {
    "sha": "e7be7c5c6f34553f0a865d7f2c301f38b00d7fbc",
    "filename": "cohort-engine/src/test/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceHelperTest.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceHelperTest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceHelperTest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/java/com/ibm/cohort/engine/measure/evidence/MeasureEvidenceHelperTest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.cohort.engine.measure.evidence;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.AbstractMap;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.cqframework.cql.elm.execution.VersionedIdentifier;\n+import org.hl7.fhir.r4.model.Annotation;\n+import org.hl7.fhir.r4.model.Attachment;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.DecimalType;\n+import org.hl7.fhir.r4.model.IntegerType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.RelatedArtifact;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.Type;\n+import org.junit.Test;\n+\n+import com.ibm.cohort.engine.measure.MeasureEvaluatorTest;\n+\n+public class MeasureEvidenceHelperTest {\n+\t\n+\tprivate static final Map<Object, Class<?>> EXPECTED_CONVERSIONS = Stream.of(\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(\"idea\", StringType.class), \n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(Boolean.FALSE, BooleanType.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(3.5, DecimalType.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(new Date(), DateTimeType.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(3, IntegerType.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(new Patient(), Reference.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(new CodeableConcept(), CodeableConcept.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(new Annotation(), Annotation.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(new Attachment(), Attachment.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(new Period(), Period.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(new RelatedArtifact(), RelatedArtifact.class),\n+\t\t\t\t\t  new AbstractMap.SimpleEntry<>(new Quantity(), Quantity.class)\n+\t\t\t).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\t\n+\t@Test\n+\tpublic void testFhirType() {\n+\t\tfor(Entry<Object, Class<?>> entry : EXPECTED_CONVERSIONS.entrySet()) {\n+\t\t\tassertEquals(entry.getValue(), MeasureEvidenceHelper.getFhirType(entry.getKey()).getClass());\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void testFhirTypes() {\n+\t\tSet<Object> objects = EXPECTED_CONVERSIONS.keySet();\n+\t\t\n+\t\tList<Type> types = MeasureEvidenceHelper.getFhirTypes(objects);\n+\t\t\n+\t\tassertEquals(EXPECTED_CONVERSIONS.values().size(), types.size());\n+\t\tassertTrue(EXPECTED_CONVERSIONS.values().containsAll(types.stream().map(x -> x.getClass()).collect(Collectors.toSet())));\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testMeasureEvidenceKey() {\n+\t\tString libraryName1 = \"LibraryName1\";\n+\t\tString libraryName2 = \"LibraryName2\";\n+\t\t\n+\t\tVersionedIdentifier libraryId1 = new VersionedIdentifier();\n+\t\tlibraryId1.setId(libraryName1);\n+\t\tlibraryId1.setVersion(MeasureEvaluatorTest.DEFAULT_VERSION);\n+\t\t\n+\t\tVersionedIdentifier libraryId2 = new VersionedIdentifier();\n+\t\tlibraryId2.setId(libraryName2);\n+\t\tlibraryId2.setVersion(MeasureEvaluatorTest.DEFAULT_VERSION);\n+\t\t\n+\t\tString define1 = \"define1\";\n+\t\tString define2 = \"define2\";\n+\t\t\n+\t\tassertEquals(libraryName1 + \"_\" + MeasureEvaluatorTest.DEFAULT_VERSION + \".\" + define1, MeasureEvidenceHelper.createEvidenceKey(libraryId1, define1));\n+\t\tassertEquals(libraryName1 + \"_\" + MeasureEvaluatorTest.DEFAULT_VERSION + \".\" + define2, MeasureEvidenceHelper.createEvidenceKey(libraryId1, define2));\n+\t\tassertEquals(libraryName2 + \"_\" + MeasureEvaluatorTest.DEFAULT_VERSION + \".\" + define1, MeasureEvidenceHelper.createEvidenceKey(libraryId2, define1));\n+\t\tassertEquals(libraryName2 + \"_\" + MeasureEvaluatorTest.DEFAULT_VERSION + \".\" + define2, MeasureEvidenceHelper.createEvidenceKey(libraryId2, define2));\n+\t}\n+}"
  },
  {
    "sha": "a61b92de7d3af1ec9e02d380a10feda6cdebe348",
    "filename": "cohort-engine/src/test/java/com/ibm/cohort/engine/r4/builder/IdentifierBuilderTest.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/r4/builder/IdentifierBuilderTest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/r4/builder/IdentifierBuilderTest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/java/com/ibm/cohort/engine/r4/builder/IdentifierBuilderTest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.cohort.engine.r4.builder;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Date;\n+\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Identifier.IdentifierUse;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.junit.Test;\n+\n+public class IdentifierBuilderTest {\n+\n+\t@Test\n+\tpublic void testBuilder() {\n+\t\tString system = \"TEST SYSTEM\";\n+\t\tString code = \"TEST CODE\";\n+\t\tString display = \"TEST DISPLAY\";\n+\t\tString value = \"TEST VALUE\";\n+\t\t\n+\t\tCoding coding = new Coding(system, code, display);\n+\t\tCodeableConcept type = new CodeableConcept(coding);\n+\t\t\n+\t\tPeriod period = new Period();\n+\t\tperiod.setStart(new Date());\n+\t\tperiod.setEnd(new Date());\n+\t\t\n+\t\tReference assigner = new Reference(\"TEST REFERENCE\");\n+\t\t\n+\t\tIdentifier identifier = new IdentifierBuilder()\n+\t\t\t\t.buildUse(IdentifierUse.OFFICIAL)\n+\t\t\t\t.buildSystem(system)\n+\t\t\t\t.buildType(type)\n+\t\t\t\t.buildPeriod(period)\n+\t\t\t\t.buildValue(value)\n+\t\t\t\t.buildAssigner(assigner)\n+\t\t\t\t.build();\n+\t\t\n+\t\tassertEquals(IdentifierUse.OFFICIAL, identifier.getUse());\n+\t\tassertEquals(system, identifier.getSystem());\n+\t\tassertEquals(type, identifier.getType());\n+\t\tassertEquals(period, identifier.getPeriod());\n+\t\tassertEquals(value, identifier.getValue());\n+\t\tassertEquals(assigner, identifier.getAssigner());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testStringUse() {\n+\t\tIdentifier identifier = new IdentifierBuilder()\n+\t\t\t\t.buildUse(\"official\")\n+\t\t\t\t.build();\n+\t\t\n+\t\tassertEquals(IdentifierUse.OFFICIAL, identifier.getUse());\n+\t}\n+\t\n+\t@Test(expected = FHIRException.class)\n+\tpublic void testInvalidStringUse() {\n+\t\tnew IdentifierBuilder()\n+\t\t\t\t.buildUse(\"super fake identifier use\")\n+\t\t\t\t.build();\n+\t}\n+}"
  },
  {
    "sha": "fbbe145bc3dbfe613e0482b3998ee3ebb4b46a38",
    "filename": "cohort-engine/src/test/java/com/ibm/cohort/engine/r4/builder/MeasureReportBuilderTest.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/r4/builder/MeasureReportBuilderTest.java",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/java/com/ibm/cohort/engine/r4/builder/MeasureReportBuilderTest.java",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/java/com/ibm/cohort/engine/r4/builder/MeasureReportBuilderTest.java?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright IBM Copr. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.cohort.engine.r4.builder;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Date;\n+\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.MeasureReport;\n+import org.hl7.fhir.r4.model.MeasureReport.MeasureReportStatus;\n+import org.hl7.fhir.r4.model.MeasureReport.MeasureReportType;\n+import org.junit.Test;\n+import org.opencds.cqf.cql.engine.runtime.DateTime;\n+import org.opencds.cqf.cql.engine.runtime.Interval;\n+\n+public class MeasureReportBuilderTest {\n+\t@Test\n+\tpublic void testBuilder() {\n+\t\tString measureRef = \"MEASURE REF\";\n+\t\tString patientRef = \"PATIENT REF\";\n+\t\tMeasureReportStatus status = MeasureReportStatus.ERROR;\n+\t\tMeasureReportType type = MeasureReportType.INDIVIDUAL;\n+\t\t\n+\t\tDate startDate = new Date();\n+\t\tDate endDate = new Date();\n+\t\t\n+\t\tInterval interval = new Interval(DateTime.fromJavaDate(startDate), true,\n+\t\t\t\t\t\t\t\t\t\tDateTime.fromJavaDate(endDate), true);\n+\t\t\n+\t\tMeasureReport report = new MeasureReportBuilder()\n+\t\t\t\t.buildMeasureReference(measureRef)\n+\t\t\t\t.buildPatientReference(patientRef)\n+\t\t\t\t.buildPeriod(interval)\n+\t\t\t\t.buildStatus(status.toCode())\n+\t\t\t\t.buildType(type)\n+\t\t\t\t.build();\n+\t\t\n+\t\tassertEquals(measureRef, report.getMeasure());\n+\t\tassertEquals(patientRef, report.getSubject().getReference());\n+\t\tassertEquals(startDate, report.getPeriod().getStart());\n+\t\tassertEquals(endDate, report.getPeriod().getEnd());\n+\t\tassertEquals(status, report.getStatus());\n+\t\tassertEquals(type, report.getType());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidTypeString() {\n+\t\tMeasureReport report = new MeasureReportBuilder()\n+\t\t\t\t.buildType(MeasureReportType.INDIVIDUAL.toCode())\n+\t\t\t\t.build();\n+\t\t\n+\t\tassertEquals(MeasureReportType.INDIVIDUAL, report.getType());\n+\t}\n+\t\n+\t@Test(expected = FHIRException.class)\n+\tpublic void testInvalidTypeString() {\n+\t\tnew MeasureReportBuilder()\n+\t\t\t\t.buildType(\"fake type\")\n+\t\t\t\t.build();\n+\t}\n+\t\n+\t@Test\n+\tpublic void testInvalidStatus() {\n+\t\tMeasureReport report = new MeasureReportBuilder()\n+\t\t\t\t.buildStatus(\"fake status\")\n+\t\t\t\t.build();\n+\t\t\n+\t\tassertEquals(MeasureReportStatus.COMPLETE, report.getStatus());\n+\t}\n+}"
  },
  {
    "sha": "f8daec13724725e2c4383206ea58d466ea0c2623",
    "filename": "cohort-engine/src/test/resources/cql/fhir-measure/FHIRHelpers.cql",
    "status": "added",
    "additions": 269,
    "deletions": 0,
    "changes": 269,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/resources/cql/fhir-measure/FHIRHelpers.cql",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/resources/cql/fhir-measure/FHIRHelpers.cql",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/resources/cql/fhir-measure/FHIRHelpers.cql?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -0,0 +1,269 @@\n+library FHIRHelpers version '1.0.0'\n+\n+using FHIR version '4.0.0'\n+\n+define function ToInterval(period FHIR.Period):\n+    if period is null then\n+        null\n+    else\n+        Interval[period.\"start\".value, period.\"end\".value]\n+\n+define function ToQuantity(quantity FHIR.Quantity):\n+    if quantity is null then\n+        null\n+    else\n+        System.Quantity { value: quantity.value.value, unit: quantity.unit.value }\n+\n+define function ToInterval(range FHIR.Range):\n+    if range is null then\n+        null\n+    else\n+        Interval[ToQuantity(range.low), ToQuantity(range.high)]\n+\n+define function ToCode(coding FHIR.Coding):\n+    if coding is null then\n+        null\n+    else\n+        System.Code {\n+          code: coding.code.value,\n+          system: coding.system.value,\n+          version: coding.version.value,\n+          display: coding.display.value\n+        }\n+\n+define function ToConcept(concept FHIR.CodeableConcept):\n+    if concept is null then\n+        null\n+    else\n+        System.Concept {\n+            codes: concept.coding C return ToCode(C),\n+            display: concept.text.value\n+        }\n+\n+define function ToString(value FHIR.uuid): value.value\n+define function ToString(value FHIR.TestScriptRequestMethodCode): value.value\n+define function ToString(value FHIR.SortDirection): value.value\n+define function ToString(value FHIR.BiologicallyDerivedProductStatus): value.value\n+define function ToString(value FHIR.UnitsOfTime): value.value\n+define function ToString(value FHIR.AddressType): value.value\n+define function ToString(value FHIR.AllergyIntoleranceCategory): value.value\n+define function ToString(value FHIR.IssueSeverity): value.value\n+define function ToString(value FHIR.CareTeamStatus): value.value\n+define function ToString(value FHIR.EncounterStatus): value.value\n+define function ToString(value FHIR.StructureDefinitionKind): value.value\n+define function ToString(value FHIR.PublicationStatus): value.value\n+define function ToString(value FHIR.FHIRVersion): value.value\n+define function ToString(value FHIR.CarePlanActivityKind): value.value\n+define function ToString(value FHIR.StructureMapSourceListMode): value.value\n+define function ToString(value FHIR.RequestStatus): value.value\n+define function ToString(value FHIR.strandType): value.value\n+define function ToString(value FHIR.QuestionnaireResponseStatus): value.value\n+define function ToString(value FHIR.SearchComparator): value.value\n+define function ToString(value FHIR.ChargeItemStatus): value.value\n+define function ToString(value FHIR.ActionParticipantType): value.value\n+define function ToString(value FHIR.AllergyIntoleranceType): value.value\n+define function ToString(value FHIR.CarePlanActivityStatus): value.value\n+define function ToString(value FHIR.InvoiceStatus): value.value\n+define function ToString(value FHIR.ClaimProcessingCodes): value.value\n+define function ToString(value FHIR.RequestResourceType): value.value\n+define function ToString(value FHIR.ParticipationStatus): value.value\n+define function ToString(value FHIR.DeviceNameType): value.value\n+define function ToString(value FHIR.DocumentMode): value.value\n+define function ToString(value FHIR.AssertionOperatorType): value.value\n+define function ToString(value FHIR.DaysOfWeek): value.value\n+define function ToString(value FHIR.IssueType): value.value\n+define function ToString(value FHIR.canonical): value.value\n+define function ToString(value FHIR.StructureMapContextType): value.value\n+define function ToString(value FHIR.FamilyHistoryStatus): value.value\n+define function ToString(value FHIR.status): value.value\n+define function ToString(value FHIR.ExtensionContextType): value.value\n+define function ToString(value FHIR.AssertionResponseTypes): value.value\n+define function ToString(value FHIR.RequestIntent): value.value\n+define function ToString(value FHIR.string): value.value\n+define function ToString(value FHIR.ActionRequiredBehavior): value.value\n+define function ToString(value FHIR.GraphCompartmentUse): value.value\n+define function ToString(value FHIR.orientationType): value.value\n+define function ToString(value FHIR.AccountStatus): value.value\n+define function ToString(value FHIR.IdentifierUse): value.value\n+define function ToString(value FHIR.StructureMapTargetListMode): value.value\n+define function ToString(value FHIR.ExposureState): value.value\n+define function ToString(value FHIR.TestReportParticipantType): value.value\n+define function ToString(value FHIR.BindingStrength): value.value\n+define function ToString(value FHIR.RequestPriority): value.value\n+define function ToString(value FHIR.ParticipantRequired): value.value\n+define function ToString(value FHIR.XPathUsageType): value.value\n+define function ToString(value FHIR.id): value.value\n+define function ToString(value FHIR.FilterOperator): value.value\n+define function ToString(value FHIR.NamingSystemType): value.value\n+define function ToString(value FHIR.ContractResourceStatusCodes): value.value\n+define function ToString(value FHIR.ResearchSubjectStatus): value.value\n+define function ToString(value FHIR.StructureMapTransform): value.value\n+define function ToString(value FHIR.ResponseType): value.value\n+define function ToDecimal(value FHIR.decimal): value.value\n+define function ToString(value FHIR.AggregationMode): value.value\n+define function ToString(value FHIR.sequenceType): value.value\n+define function ToString(value FHIR.SystemRestfulInteraction): value.value\n+define function ToString(value FHIR.AdverseEventActuality): value.value\n+define function ToString(value FHIR.SubscriptionChannelType): value.value\n+define function ToString(value FHIR.AssertionDirectionType): value.value\n+define function ToString(value FHIR.CarePlanIntent): value.value\n+define function ToString(value FHIR.AllergyIntoleranceCriticality): value.value\n+define function ToString(value FHIR.PropertyRepresentation): value.value\n+define function ToString(value FHIR.TriggerType): value.value\n+define function ToString(value FHIR.CompositionStatus): value.value\n+define function ToString(value FHIR.AppointmentStatus): value.value\n+define function ToString(value FHIR.MessageSignificanceCategory): value.value\n+define function ToString(value FHIR.ListMode): value.value\n+define function ToString(value FHIR.ResearchElementType): value.value\n+define function ToString(value FHIR.ObservationStatus): value.value\n+define function ToString(value FHIR.ResourceType): value.value\n+define function ToBoolean(value FHIR.boolean): value.value\n+define function ToString(value FHIR.StructureMapGroupTypeMode): value.value\n+define function ToString(value FHIR.SupplyRequestStatus): value.value\n+define function ToString(value FHIR.EncounterLocationStatus): value.value\n+define function ToString(value FHIR.ConditionalDeleteStatus): value.value\n+define function ToString(value FHIR.url): value.value\n+define function ToString(value FHIR.uri): value.value\n+define function ToString(value FHIR.Use): value.value\n+define function ToString(value FHIR.MedicationRequestStatus): value.value\n+define function ToString(value FHIR.IdentityAssuranceLevel): value.value\n+define function ToString(value FHIR.DeviceMetricColor): value.value\n+define function ToTime(value FHIR.time): value.value\n+define function ToString(value FHIR.ConditionalReadStatus): value.value\n+define function ToString(value FHIR.AllergyIntoleranceSeverity): value.value\n+define function ToString(value FHIR.FinancialResourceStatusCodes): value.value\n+define function ToString(value FHIR.OperationKind): value.value\n+define function ToString(value FHIR.SubscriptionStatus): value.value\n+define function ToString(value FHIR.GoalLifecycleStatus): value.value\n+define function ToString(value FHIR.ObservationDataType): value.value\n+define function ToString(value FHIR.DocumentReferenceStatus): value.value\n+define function ToString(value FHIR.repositoryType): value.value\n+define function ToString(value FHIR.LocationStatus): value.value\n+define function ToString(value FHIR.NoteType): value.value\n+define function ToString(value FHIR.TestReportStatus): value.value\n+define function ToString(value FHIR.CodeSystemContentMode): value.value\n+define function ToString(value FHIR.FHIRDeviceStatus): value.value\n+define function ToString(value FHIR.ContactPointSystem): value.value\n+define function ToString(value FHIR.SlotStatus): value.value\n+define function ToString(value FHIR.PropertyType): value.value\n+define function ToString(value FHIR.TypeDerivationRule): value.value\n+define function ToString(value FHIR.GuidanceResponseStatus): value.value\n+define function ToString(value FHIR.RelatedArtifactType): value.value\n+define function ToString(value FHIR.oid): value.value\n+define function ToString(value FHIR.CompartmentType): value.value\n+define function ToString(value FHIR.MedicationRequestIntent): value.value\n+define function ToString(value FHIR.InvoicePriceComponentType): value.value\n+define function ToString(value FHIR.DeviceMetricCalibrationState): value.value\n+define function ToString(value FHIR.GroupType): value.value\n+define function ToString(value FHIR.EnableWhenBehavior): value.value\n+define function ToString(value FHIR.TaskIntent): value.value\n+define function ToString(value FHIR.ImmunizationEvaluationStatusCodes): value.value\n+define function ToString(value FHIR.ExampleScenarioActorType): value.value\n+define function ToString(value FHIR.ProvenanceEntityRole): value.value\n+define function ToString(value FHIR.SpecimenStatus): value.value\n+define function ToString(value FHIR.RestfulCapabilityMode): value.value\n+define function ToString(value FHIR.DetectedIssueSeverity): value.value\n+define function ToString(value FHIR.VisionEyes): value.value\n+define function ToString(value FHIR.ConsentDataMeaning): value.value\n+define function ToString(value FHIR.messageheaderResponseRequest): value.value\n+define function ToString(value FHIR.GuidePageGeneration): value.value\n+define function ToString(value FHIR.DocumentRelationshipType): value.value\n+define function ToString(value FHIR.VariableType): value.value\n+define function ToString(value FHIR.TestReportResult): value.value\n+define function ToString(value FHIR.ConceptMapGroupUnmappedMode): value.value\n+define function ToDateTime(value FHIR.instant): value.value\n+define function ToDateTime(value FHIR.dateTime): value.value\n+define function ToDate(value FHIR.date): value.value\n+define function ToInteger(value FHIR.positiveInt): value.value\n+define function ToString(value FHIR.ClinicalImpressionStatus): value.value\n+define function ToString(value FHIR.EligibilityResponsePurpose): value.value\n+define function ToString(value FHIR.NarrativeStatus): value.value\n+define function ToString(value FHIR.ImagingStudyStatus): value.value\n+define function ToString(value FHIR.EndpointStatus): value.value\n+define function ToString(value FHIR.BiologicallyDerivedProductCategory): value.value\n+define function ToString(value FHIR.ResourceVersionPolicy): value.value\n+define function ToString(value FHIR.ActionCardinalityBehavior): value.value\n+define function ToString(value FHIR.GroupMeasure): value.value\n+define function ToString(value FHIR.NamingSystemIdentifierType): value.value\n+define function ToString(value FHIR.ImmunizationStatusCodes): value.value\n+define function ToString(value FHIR.MedicationStatusCodes): value.value\n+define function ToString(value FHIR.DiscriminatorType): value.value\n+define function ToString(value FHIR.StructureMapInputMode): value.value\n+define function ToString(value FHIR.LinkageType): value.value\n+define function ToString(value FHIR.ReferenceHandlingPolicy): value.value\n+define function ToString(value FHIR.ResearchStudyStatus): value.value\n+define function ToString(value FHIR.AuditEventOutcome): value.value\n+define function ToString(value FHIR.SpecimenContainedPreference): value.value\n+define function ToString(value FHIR.ActionRelationshipType): value.value\n+define function ToString(value FHIR.ConstraintSeverity): value.value\n+define function ToString(value FHIR.EventCapabilityMode): value.value\n+define function ToString(value FHIR.CodeSearchSupport): value.value\n+define function ToString(value FHIR.ObservationRangeCategory): value.value\n+define function ToString(value FHIR.UDIEntryType): value.value\n+define function ToString(value FHIR.DeviceMetricCategory): value.value\n+define function ToString(value FHIR.TestReportActionResult): value.value\n+define function ToString(value FHIR.CapabilityStatementKind): value.value\n+define function ToString(value FHIR.EventTiming): value.value\n+define function ToString(value FHIR.SearchParamType): value.value\n+define function ToString(value FHIR.ActionGroupingBehavior): value.value\n+define function ToString(value FHIR.StructureMapModelMode): value.value\n+define function ToString(value FHIR.TaskStatus): value.value\n+define function ToString(value FHIR.BiologicallyDerivedProductStorageScale): value.value\n+define function ToString(value FHIR.GraphCompartmentRule): value.value\n+define function ToString(value FHIR.SlicingRules): value.value\n+define function ToString(value FHIR.ExplanationOfBenefitStatus): value.value\n+define function ToString(value FHIR.GuideParameterCode): value.value\n+define function ToString(value FHIR.CatalogEntryRelationType): value.value\n+define function ToString(value FHIR.LinkType): value.value\n+define function ToString(value FHIR.ConceptMapEquivalence): value.value\n+define function ToString(value FHIR.AuditEventAction): value.value\n+define function ToString(value FHIR.SearchModifierCode): value.value\n+define function ToString(value FHIR.EventStatus): value.value\n+define function ToString(value FHIR.OperationParameterUse): value.value\n+define function ToString(value FHIR.ConsentProvisionType): value.value\n+define function ToString(value FHIR.ActionConditionKind): value.value\n+define function ToString(value FHIR.qualityType): value.value\n+define function ToString(value FHIR.AdministrativeGender): value.value\n+define function ToString(value FHIR.QuestionnaireItemType): value.value\n+define function ToString(value FHIR.DeviceMetricCalibrationType): value.value\n+define function ToString(value FHIR.EvidenceVariableType): value.value\n+define function ToString(value FHIR.code): value.value\n+define function ToString(value FHIR.ActionSelectionBehavior): value.value\n+define function ToString(value FHIR.SupplyDeliveryStatus): value.value\n+define function ToString(value FHIR.DiagnosticReportStatus): value.value\n+define function ToString(value FHIR.FlagStatus): value.value\n+define function ToString(value FHIR.SPDXLicense): value.value\n+define function ToString(value FHIR.ListStatus): value.value\n+define function ToString(value FHIR.base64Binary): value.value\n+define function ToString(value FHIR.DeviceUseStatementStatus): value.value\n+define function ToString(value FHIR.AuditEventAgentNetworkType): value.value\n+define function ToString(value FHIR.ExpressionLanguage): value.value\n+define function ToString(value FHIR.AddressUse): value.value\n+define function ToString(value FHIR.ContactPointUse): value.value\n+define function ToString(value FHIR.DeviceMetricOperationalStatus): value.value\n+define function ToString(value FHIR.ContributorType): value.value\n+define function ToString(value FHIR.ReferenceVersionRules): value.value\n+define function ToString(value FHIR.MeasureReportStatus): value.value\n+define function ToString(value FHIR.SearchEntryMode): value.value\n+define function ToInteger(value FHIR.unsignedInt): value.value\n+define function ToString(value FHIR.NameUse): value.value\n+define function ToString(value FHIR.LocationMode): value.value\n+define function ToInteger(value FHIR.integer): value.value\n+define function ToString(value FHIR.FHIRSubstanceStatus): value.value\n+define function ToString(value FHIR.QuestionnaireItemOperator): value.value\n+define function ToString(value FHIR.HTTPVerb): value.value\n+define function ToString(value FHIR.EpisodeOfCareStatus): value.value\n+define function ToString(value FHIR.RemittanceOutcome): value.value\n+define function ToString(value FHIR.markdown): value.value\n+define function ToString(value FHIR.EligibilityRequestPurpose): value.value\n+define function ToString(value FHIR.QuantityComparator): value.value\n+define function ToString(value FHIR.MeasureReportType): value.value\n+define function ToString(value FHIR.ActionPrecheckBehavior): value.value\n+define function ToString(value FHIR.SampledDataDataType): value.value\n+define function ToString(value FHIR.CompositionAttestationMode): value.value\n+define function ToString(value FHIR.TypeRestfulInteraction): value.value\n+define function ToString(value FHIR.CodeSystemHierarchyMeaning): value.value\n+define function ToString(value FHIR.vConfidentialityClassification): value.value\n+define function ToString(value FHIR.ContractResourcePublicationStatusCodes): value.value\n+define function ToString(value FHIR.VisionBase): value.value\n+define function ToString(value FHIR.BundleType): value.value"
  },
  {
    "sha": "9d7cb645fa3b9afc40bc9f187299507e57587dc9",
    "filename": "cohort-engine/src/test/resources/cql/fhir-measure/test-adult-males.cql",
    "status": "modified",
    "additions": 79,
    "deletions": 9,
    "changes": 88,
    "blob_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/blob/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/resources/cql/fhir-measure/test-adult-males.cql",
    "raw_url": "https://github.com/Alvearie/quality-measure-and-cohort-service/raw/937acbdde31906f23f496f45390b21a50baf5a01/cohort-engine/src/test/resources/cql/fhir-measure/test-adult-males.cql",
    "contents_url": "https://api.github.com/repos/Alvearie/quality-measure-and-cohort-service/contents/cohort-engine/src/test/resources/cql/fhir-measure/test-adult-males.cql?ref=937acbdde31906f23f496f45390b21a50baf5a01",
    "patch": "@@ -1,21 +1,91 @@\n library \"TestAdultMales\" version '1.0.0'\n using \"FHIR\" version '4.0.0'\n \n+include \"FHIRHelpers\" version '1.0.0'\n+include \"TestAdultMales2\" version '1.0.0'\n+include \"TestAdultMales3\" version '1.0.0'\n+\n+codesystem \"MaritalStatus\": 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus'\n+\n+code \"Married\": 'M' from \"MaritalStatus\" display 'Married'\n+\n parameter MeasurementPeriod Interval<DateTime>\n \n context Patient\n \n-define \"Over 18\":\n-\tAgeInYears() >= 18\n-\t\n define \"Initial Population\":\n-\t\"Over 18\"\n+\t\"TestAdultMales2\".\"Over 18\"\n \n-define \"Denominator\":\n-\t\"Initial Population\"\n+define \"Last Names\":\n+\tPatient.name.family.value\n+\t\n+define \"PatientMarried\":\n+\tPatient.maritalStatus\n \n+define \"Denominator\":\n+\texists (\"Last Names\" L\n+\t   where L = 'Jones')\n+\tand \"PatientMarried\" ~ \"Married\"\n+\t\n define \"Numerator\":\n-\t\"Male\" \n-\n+\t\"TestAdultMales3\".Male and \"Male\" and \"Male2\" and \"Male3\" and \"Male4\" and \"Male5\" and \"Male6\" and \"Male7\" and \"Male8\" and \"Male9\" and \"Male10\" and \"Male11\" and \"Male12\" and \"Male13\" and \"Male14\" and \"Male15\" and \"Male16\" and \"Male17\" and \"Male18\" and \"Male19\" and \"Male20\" \t\n+\t\n define \"Male\":\n-\tPatient.gender.value = 'male'\n\\ No newline at end of file\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male2\":\n+\tPatient.gender.value = 'male'\t\n+\t\n+define \"Male3\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male4\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male5\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male6\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male7\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male8\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male9\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male10\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male11\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male12\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male13\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male14\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male15\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male16\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male17\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male18\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male19\":\n+\tPatient.gender.value = 'male'\n+\t\n+define \"Male20\":\n+\tPatient.gender.value = 'male'"
  }
]
