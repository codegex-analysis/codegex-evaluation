[
  {
    "sha": "4849390a1f8019e04594e2ac67d9f13a3f0286bc",
    "filename": ".github/ISSUE-TEMPLATE.md",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/.github/ISSUE-TEMPLATE.md",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/.github/ISSUE-TEMPLATE.md",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/.github/ISSUE-TEMPLATE.md?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "previous_filename": ".github/ISSUE_TEMPLATE.md"
  },
  {
    "sha": "91129006256649fba2d7111548e315f6bd967f06",
    "filename": ".github/PULL-REQUEST-TEMPLATE.md",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/.github/PULL-REQUEST-TEMPLATE.md",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/.github/PULL-REQUEST-TEMPLATE.md",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/.github/PULL-REQUEST-TEMPLATE.md?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "previous_filename": ".github/PULL_REQUEST_TEMPLATE.md"
  },
  {
    "sha": "9b5363c4b00125a1a21fcd8b7ccc855b166e35e6",
    "filename": ".mvn/wrapper/MavenWrapperDownloader.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/.mvn/wrapper/MavenWrapperDownloader.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/.mvn/wrapper/MavenWrapperDownloader.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/.mvn/wrapper/MavenWrapperDownloader.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -79,11 +79,9 @@ public static void main(String args[]) {\n         System.out.println(\"- Downloading from: : \" + url);\n \n         File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n-        if(!outputFile.getParentFile().exists()) {\n-            if(!outputFile.getParentFile().mkdirs()) {\n-                System.out.println(\n-                        \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n-            }\n+        if (!outputFile.getParentFile().exists() && !outputFile.getParentFile().mkdirs()) {\n+            System.out.println(\n+                    \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n         }\n         System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n         try {"
  },
  {
    "sha": "0c6619e6feadca47c2e4d4b54be1d91f02912cc1",
    "filename": "README.md",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/README.md",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/README.md",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/README.md?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -1,10 +1,9 @@\n-# ![logo](https://github.com/CorfuDB/CorfuDB/blob/master/resources/corfu.png \"Corfu\")               \n+# ![logo](https://github.com/CorfuDB/CorfuDB/blob/master/resources/corfu.png \"Corfu\")\n \n [![Join the chat at https://gitter.im/CorfuDB/CorfuDB](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/CorfuDB/CorfuDB?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n-\n-[![Build Status](https://travis-ci.org/CorfuDB/CorfuDB.svg?branch=master)](https://travis-ci.org/CorfuDB/CorfuDB) \n [![codecov](https://codecov.io/gh/CorfuDB/CorfuDB/branch/master/graph/badge.svg)](https://codecov.io/gh/CorfuDB/CorfuDB)\n-\n+[![Github Actions](https://github.com/CorfuDB/CorfuDB/actions/workflows/pull_request.yml/badge.svg)](https://github.com/CorfuDB/CorfuDB/actions)\n+[![Codacy Badge](https://api.codacy.com/project/badge/Grade/83bcbf63024b4937999c9b0348672abf)](https://app.codacy.com/gh/CorfuDB/CorfuDB?utm_source=github.com&utm_medium=referral&utm_content=CorfuDB/CorfuDB&utm_campaign=Badge_Grade_Settings)\n \n Corfu is a consistency platform designed around the abstraction\n of a shared log. CorfuDB objects are in-memory, highly available\n@@ -64,10 +63,11 @@ To build Corfu, you will need the Java JDK 8 as well as Apache Maven\n 3.3 or later to invoke the build system.\n \n On Linux (Debian/Ubuntu), run:\n+\n ```bash\n-$ sudo add-apt-repository ppa:webupd8team/java\n-$ sudo apt-get update\n-$ sudo apt-get install oracle-java8-installer\n+sudo add-apt-repository ppa:webupd8team/java\n+sudo apt-get update\n+sudo apt-get install oracle-java8-installer\n ```\n \n Your major release number of Debian/Ubuntu will determine whether the"
  },
  {
    "sha": "c516f534172d4daf174c6421310e43c962f7e112",
    "filename": "Security.md",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/Security.md",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/Security.md",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/Security.md?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -86,7 +86,7 @@ In addition to generating a key pair, this command also creates a self-signed ce\n For example, the following command generates a private/public key pair, creates a self-signed certificate and stores them in a key store protected by the given password.\n \n ```bash\n-$ keytool -genkeypair -keystore s1.jks -keyalg RSA -keysize 2048 -alias s1 -storepass test123\n+keytool -genkeypair -keystore s1.jks -keyalg RSA -keysize 2048 -alias s1 -storepass test123\n ```\n \n The given key store password is then saved in a file. The permissions to this plain-text password file is then set such that it can only be read by members of the appropriate group."
  },
  {
    "sha": "d55a2495e1db4371fa47318f97934185ce09c21c",
    "filename": "annotationProcessor/src/main/java/org/corfudb/annotations/ObjectAnnotationProcessor.java",
    "status": "modified",
    "additions": 10,
    "deletions": 11,
    "changes": 21,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/annotationProcessor/src/main/java/org/corfudb/annotations/ObjectAnnotationProcessor.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/annotationProcessor/src/main/java/org/corfudb/annotations/ObjectAnnotationProcessor.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/annotationProcessor/src/main/java/org/corfudb/annotations/ObjectAnnotationProcessor.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -314,17 +314,16 @@ public void generateProxy(TypeElement classElement)\n                         if (methodSet.stream().noneMatch(y -> {\n                             // If this method is present in the parent, we need to check\n                             // the parameters\n-                            if (y.method.getSimpleName().equals(x.getSimpleName())) {\n-                                if (y.method.getParameters().size() == x.getParameters().size()) {\n-                                    // If there are generics, assume a match for now\n-                                    // TODO: Properly handle generics\n-                                    if (x.getParameters().stream().anyMatch(p ->\n-                                        p.asType().getKind() == TypeKind.TYPEVAR)) {\n-                                        return true;\n-                                    } else {\n-                                        // Otherwise the method name will match\n-                                        return x.toString().equals(y.method.toString());\n-                                    }\n+                            if (y.method.getSimpleName().equals(x.getSimpleName())\n+                                    && y.method.getParameters().size() == x.getParameters().size()) {\n+                                // If there are generics, assume a match for now\n+                                // TODO: Properly handle generics\n+                                if (x.getParameters().stream().anyMatch(p ->\n+                                    p.asType().getKind() == TypeKind.TYPEVAR)) {\n+                                    return true;\n+                                } else {\n+                                    // Otherwise the method name will match\n+                                    return x.toString().equals(y.method.toString());\n                                 }\n                             }\n                             return false;"
  },
  {
    "sha": "5d8c6684cdebe648b5bb7cfa256b03ffec2cb529",
    "filename": "cmdlets/src/main/clojure/org/corfudb/shell.clj",
    "status": "modified",
    "additions": 18,
    "deletions": 11,
    "changes": 29,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/cmdlets/src/main/clojure/org/corfudb/shell.clj",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/cmdlets/src/main/clojure/org/corfudb/shell.clj",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/cmdlets/src/main/clojure/org/corfudb/shell.clj?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -8,6 +8,8 @@\n (import org.corfudb.runtime.clients.SequencerClient)\n (import org.corfudb.runtime.clients.LogUnitClient)\n (import org.corfudb.runtime.clients.ManagementClient)\n+(import org.corfudb.util.NodeLocator)\n+(import org.corfudb.runtime.CorfuRuntime$CorfuRuntimeParameters)\n (use 'clojure.reflect)\n \n (defn -class-starts-with [obj name] (if (nil? obj) false (.. (.. (.. obj (getClass)) (getName)) (startsWith name))))\n@@ -114,19 +116,24 @@ The variable *r holds the last runtime obtrained, and *o holds the last router o\n   ([endpoint] (get-router endpoint nil))\n   ([endpoint opts] (do\n     (cond\n-      (nil? opts) (def *o (new NettyClientRouter (get-host endpoint) (get-port endpoint)))\n+      (nil? opts)\n+        (def *o (new NettyClientRouter (get-host endpoint) (get-port endpoint)))\n       (.. opts (get \"--enable-tls\"))\n         (def *o (new NettyClientRouter\n-          (get-host endpoint)\n-          (get-port endpoint)\n-          (.. opts (get \"--enable-tls\"))\n-          (.. opts (get \"--keystore\"))\n-          (.. opts (get \"--keystore-password-file\"))\n-          (.. opts (get \"--truststore\"))\n-          (.. opts (get \"--truststore-password-file\"))\n-          (.. opts (get \"--enable-sasl-plain-text-auth\"))\n-          (.. opts (get \"--sasl-plain-text-username-file\"))\n-          (.. opts (get \"--sasl-plain-text-password-file\"))))\n+           (-> (NodeLocator/builder)\n+                         (.host (get-host endpoint))\n+                         (.port (get-port endpoint))\n+                         (.build))\n+          (-> (CorfuRuntime$CorfuRuntimeParameters/builder)\n+              (.tls-enabled (.. opts (get \"--enable-tls\")))\n+              (.keystore (.. opts (get \"--keystore\")))\n+              (.ks-password-file (.. opts (get \"--keystore-password-file\")))\n+              (.truststore (.. opts (get \"--truststore\")))\n+              (.ts-password-file (.. opts (get \"--truststore-password-file\")))\n+              (.sasl-plain-text-enabled (.. opts (get \"--enable-sasl-plain-text-auth\")))\n+              (.username-file (.. opts (get \"--sasl-plain-text-username-file\")))\n+              (.password-file (.. opts (get \"--sasl-plain-text-password-file\")))\n+              (.build))))\n       :else (def *o (new NettyClientRouter (get-host endpoint) (get-port endpoint))))\n     (add-client (new org.corfudb.runtime.clients.LayoutHandler))\n     (add-client (new org.corfudb.runtime.clients.LogUnitHandler))"
  },
  {
    "sha": "b010d512c33c5ab12ff6332071a2110a59e21c47",
    "filename": "generator/src/main/java/org/corfudb/generator/LongevityRun.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/generator/src/main/java/org/corfudb/generator/LongevityRun.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/generator/src/main/java/org/corfudb/generator/LongevityRun.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/generator/src/main/java/org/corfudb/generator/LongevityRun.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -83,21 +83,24 @@ public static void main(String[] args) {\n         String configurationString = cmd.hasOption(CORFU_ENDPOINT) ?\n                 cmd.getOptionValue(CORFU_ENDPOINT) : \"localhost:9000\";\n \n-        boolean checkPoint = cmd.hasOption(CHECKPOINT) ?\n-                true : false;\n+        boolean checkPoint = cmd.hasOption(CHECKPOINT);\n \n         switch (timeUnitValue) {\n             case \"s\":\n                 longevity = Duration.ofSeconds(amountTimeValue).toMillis();\n                 break;\n+\n             case \"m\":\n                 longevity = Duration.ofMinutes(amountTimeValue).toMillis();\n                 break;\n+\n             case \"h\":\n                 longevity = Duration.ofHours(amountTimeValue).toMillis();\n                 break;\n+\n             default:\n                 longevity = Duration.ofHours(1).toMillis();\n+                break;\n         }\n \n         LongevityApp la = new LongevityApp(longevity, 10, configurationString, checkPoint);"
  },
  {
    "sha": "bd5579718778fca7b09e5eaadb3fd8674ce15780",
    "filename": "infrastructure/Dockerfile",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/Dockerfile",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/Dockerfile",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/Dockerfile?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -5,6 +5,6 @@ WORKDIR /app\n \n RUN apk add --update iptables sudo\n \n-ADD target/${CORFU_JAR} /app/corfu.jar\n+COPY target/${CORFU_JAR} /app/corfu.jar\n \n CMD java -cp *.jar org.corfudb.infrastructure.CorfuServer"
  },
  {
    "sha": "0663e7cce05f198504091ab8977973fdb48061d1",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServerCache.java",
    "status": "modified",
    "additions": 3,
    "deletions": 17,
    "changes": 20,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServerCache.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServerCache.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServerCache.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -4,13 +4,10 @@\n import com.github.benmanes.caffeine.cache.LoadingCache;\n import com.github.benmanes.caffeine.cache.RemovalCause;\n import com.google.common.annotations.VisibleForTesting;\n-import io.micrometer.core.instrument.Gauge;\n import io.micrometer.core.instrument.Meter;\n import io.micrometer.core.instrument.Tags;\n import io.micrometer.core.instrument.Timer;\n import io.micrometer.core.instrument.binder.cache.CaffeineCacheMetrics;\n-import java.util.Optional;\n-import java.util.function.Supplier;\n import lombok.extern.slf4j.Slf4j;\n import org.corfudb.common.metrics.micrometer.MeterRegistryProvider;\n import org.corfudb.common.util.Memory;\n@@ -19,6 +16,9 @@\n import org.corfudb.protocols.wireprotocol.ILogData;\n import org.corfudb.protocols.wireprotocol.LogData;\n \n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n import static java.lang.Math.toIntExact;\n \n /**\n@@ -42,11 +42,8 @@\n     private final int MAX_STREAM_THRESHOLD = 20;\n \n     private final Optional<Timer> readTimer;\n-    private final Optional<Gauge> loadTime;\n     String loadTimeName = \"logunit.cache.load_time\";\n-    private final Optional<Gauge> hitRatio;\n     String hitRatioName = \"logunit.cache.hit_ratio\";\n-    private final Optional<Gauge> weight;\n     String weightName = \"logunit.cache.weight\";\n \n     public LogUnitServerCache(LogUnitServerConfig config, StreamLog streamLog) {\n@@ -61,17 +58,6 @@ public LogUnitServerCache(LogUnitServerConfig config, StreamLog streamLog) {\n \n         MeterRegistryProvider.getInstance().ifPresent(registry ->\n                 CaffeineCacheMetrics.monitor(registry, dataCache, \"logunit.read_cache\"));\n-        hitRatio = MeterRegistryProvider.getInstance().map(registry ->\n-                Gauge.builder(hitRatioName,\n-                dataCache, cache -> cache.stats().hitRate()).register(registry));\n-        loadTime = MeterRegistryProvider.getInstance().map(registry ->\n-                Gauge.builder(loadTimeName,\n-                        dataCache, cache -> cache.stats().totalLoadTime())\n-                        .register(registry));\n-        weight = MeterRegistryProvider.getInstance().map(registry ->\n-                Gauge.builder(weightName,\n-                        dataCache, cache -> cache.stats().evictionWeight())\n-                        .register(registry));\n \n         readTimer = MeterRegistryProvider.getInstance().map(registry ->\n                 Timer.builder(\"logunit.read.timer\").register(registry));"
  },
  {
    "sha": "7c4965fb77a99861fa11d83e37d537ee5cccbc12",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServer.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServer.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServer.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -600,18 +600,19 @@ public void tokenRequest(@Nonnull RequestMsg req,\n         switch (tokenRequest.getRequestType()) {\n             case TK_QUERY:\n                 handleTokenQuery(req, ctx, r);\n-                return;\n+                break;\n \n             case TK_RAW:\n                 handleRawToken(req, ctx, r);\n-                return;\n+                break;\n \n             case TK_TX:\n                 handleTxToken(req, ctx, r);\n-                return;\n+                break;\n \n             default:\n                 handleAllocation(req, ctx, r);\n+                break;\n         }\n     }\n "
  },
  {
    "sha": "7c95f9c1ac0f83b729b7184db481474ae2137873",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServerCache.java",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServerCache.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServerCache.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServerCache.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -1,7 +1,6 @@\n package org.corfudb.infrastructure;\n \n import io.micrometer.core.instrument.DistributionSummary;\n-import io.micrometer.core.instrument.Gauge;\n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n@@ -88,7 +87,6 @@\n      * @param cacheSize cache size\n      */\n     private final Optional<DistributionSummary> evictionsPerTrimCall;\n-    private final Optional<Gauge> windowSize;\n \n     public SequencerServerCache(int cacheSize, long maxConflictNewSequencer) {\n         this.cacheSize = cacheSize;\n@@ -111,10 +109,6 @@ public SequencerServerCache(int cacheSize, long maxConflictNewSequencer) {\n                         .publishPercentileHistogram()\n                         .baseUnit(\"eviction\")\n                         .register(registry));\n-        windowSize = MeterRegistryProvider.getInstance().map(registry ->\n-                Gauge.builder(windowSizeName,\n-                        conflictKeys, HashMap::size).register(registry));\n-\n     }\n \n     /**"
  },
  {
    "sha": "e22f7179e78a9fcbac3b4919fc4fa3b441abe3db",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -498,12 +498,11 @@ public synchronized void setServerEpoch(long serverEpoch, IServerRouter r) {\n             dataStore.put(SERVER_EPOCH_RECORD, serverEpoch);\n             r.setServerEpoch(serverEpoch);\n             getServers().forEach(s -> s.sealServerWithEpoch(serverEpoch));\n-        } else if (serverEpoch == lastEpoch) {\n-            // Setting to the same epoch, don't need to do anything.\n-        } else {\n+        } else if (lastEpoch > serverEpoch){\n             // Regressing, throw an exception.\n             throw new WrongEpochException(lastEpoch);\n         }\n+        // If both epochs are same then no need to do anything.\n     }\n \n     public void setLayoutInHistory(Layout layout) {"
  },
  {
    "sha": "f08bb97c066f536f6af238e9c193450643be1785",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/log/LogMetadata.java",
    "status": "modified",
    "additions": 22,
    "deletions": 23,
    "changes": 45,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/log/LogMetadata.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/log/LogMetadata.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/log/LogMetadata.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -120,29 +120,28 @@ private void updateFromCheckpoint(LogData entry, boolean initialize) {\n             // 2. Update stream trim mark\n             // This is only required on initialization as on all other paths trim mark will be set by\n             // explicit trimming.\n-            if (initialize) {\n-                // The trim mark is part of the address space information and is also required\n-                // so clients can observe updates to streams that have been completely checkpointed.\n-                // For instance, an empty address space with a stream trim mark != -6, requires data to be\n-                // loaded from a checkpoint (vs. no data ever written to this stream).\n-\n-                // If we hit a checkpoint END record we can use this info to compute the stream trim mark,\n-                // i.e., last observed update to the stream that has already been checkpointed, hence\n-                // can be safely trimmed from the log.\n-                if (entry.getCheckpointType() == CheckpointEntry.CheckpointEntryType.END) {\n-                    streamsAddressSpaceMap.compute(streamId, (id, addressSpace) -> {\n-                        if (addressSpace == null) {\n-                            // If this entry still does not exist, means no updates have been observed for\n-                            // this stream yet. We can initialize the trim mark to the last observed update by the\n-                            // checkpoint. If further entries are observed they will be added to the address space.\n-                            return new StreamAddressSpace(lastUpdateToStream, Collections.EMPTY_SET);\n-                        }\n-                        // We will hold the maximum of these observed updates as the stream trim mark (highest\n-                        // checkpointed address), as this guarantees data is available in a checkpoint (safe trim mark).\n-                        addressSpace.setTrimMark(Long.max(addressSpace.getTrimMark(), lastUpdateToStream));\n-                        return addressSpace;\n-                    });\n-                }\n+\n+            // The trim mark is part of the address space information and is also required\n+            // so clients can observe updates to streams that have been completely checkpointed.\n+            // For instance, an empty address space with a stream trim mark != -6, requires data to be\n+            // loaded from a checkpoint (vs. no data ever written to this stream).\n+\n+            // If we hit a checkpoint END record we can use this info to compute the stream trim mark,\n+            // i.e., last observed update to the stream that has already been checkpointed, hence\n+            // can be safely trimmed from the log.\n+            if (initialize && entry.getCheckpointType() == CheckpointEntry.CheckpointEntryType.END) {\n+                streamsAddressSpaceMap.compute(streamId, (id, addressSpace) -> {\n+                    if (addressSpace == null) {\n+                        // If this entry still does not exist, means no updates have been observed for\n+                        // this stream yet. We can initialize the trim mark to the last observed update by the\n+                        // checkpoint. If further entries are observed they will be added to the address space.\n+                        return new StreamAddressSpace(lastUpdateToStream, Collections.EMPTY_SET);\n+                    }\n+                    // We will hold the maximum of these observed updates as the stream trim mark (highest\n+                    // checkpointed address), as this guarantees data is available in a checkpoint (safe trim mark).\n+                    addressSpace.setTrimMark(Long.max(addressSpace.getTrimMark(), lastUpdateToStream));\n+                    return addressSpace;\n+                });\n             }\n         }\n     }"
  },
  {
    "sha": "c5188cc6c1bdeee98e9ce37c7c01d5140a9fb03b",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -686,10 +686,8 @@ private void onStandbyClusterAddRemove(TopologyDescriptor discoveredTopology) {\n         log.debug(\"Standby Cluster has been added or removed from topology={}\", discoveredTopology);\n \n         // We only need to process new standby's if your role is of an ACTIVE cluster\n-        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n-            if (replicationManager != null && isLeader.get()) {\n-                replicationManager.processStandbyChange(discoveredTopology);\n-            }\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null && isLeader.get()) {\n+            replicationManager.processStandbyChange(discoveredTopology);\n         }\n \n         updateLocalTopology(discoveredTopology);"
  },
  {
    "sha": "dc3c7ea2cdb46a0e2e2fdff6c3510a597e12dfe3",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -32,7 +32,6 @@\n import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n-import java.util.UUID;\n import java.util.concurrent.LinkedBlockingQueue;\n \n /**\n@@ -77,8 +76,6 @@\n     @Getter\n     public ClusterManagerCallback clusterManagerCallback;\n \n-    private Thread thread;\n-\n     private CorfuRuntime corfuRuntime;\n \n     private CorfuStore corfuStore;\n@@ -111,7 +108,7 @@ public void start() {\n         corfuStore.subscribe(configStreamListener, CONFIG_NAMESPACE,\n                 Collections.singletonList(new TableSchema(CONFIG_TABLE_NAME,\n                         UuidMsg.class, UuidMsg.class, UuidMsg.class)), ts);\n-        thread = new Thread(clusterManagerCallback);\n+        Thread thread = new Thread(clusterManagerCallback);\n         thread.start();\n     }\n "
  },
  {
    "sha": "6367a064d4b07bc7f8df6b3ec7e9b3907bc88067",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -194,11 +194,6 @@\n      */\n     private final SnapshotSender snapshotSender;\n \n-    /**\n-     * Remote Cluster Descriptor to which this FSM drives the log replication\n-     */\n-    private final ClusterDescriptor remoteCluster;\n-\n     /**\n      * Ack Reader for Snapshot and Log Entry Syncs\n      */\n@@ -232,7 +227,7 @@ public LogReplicationFSM(CorfuRuntime runtime, LogReplicationConfig config, Clus\n      * @param dataSender application callback for snapshot and log entry sync messages\n      * @param logEntryReader log entry logreader implementation\n      * @param readProcessor read processor (for data transformation)\n-     * @param remoteCluster remote cluster descriptor\n+     * @param remoteCluster Remote Cluster Descriptor to which this FSM drives the log replication\n      * @param workers FSM executor service for state tasks\n      */\n     @VisibleForTesting\n@@ -242,7 +237,6 @@ public LogReplicationFSM(CorfuRuntime runtime, SnapshotReader snapshotReader, Da\n \n         this.snapshotReader = snapshotReader;\n         this.logEntryReader = logEntryReader;\n-        this.remoteCluster = remoteCluster;\n         this.ackReader = ackReader;\n \n         // Create transmitters to be used by the the sync states (Snapshot and LogEntry) to read and send data"
  },
  {
    "sha": "0a87db0e0aa43835bd59c871a8fc01371e8e4bad",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/TestDataSender.java",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/TestDataSender.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/TestDataSender.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/TestDataSender.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -29,12 +29,11 @@\n \n     @Override\n     public CompletableFuture<LogReplicationEntryMsg> send(LogReplicationEntryMsg message) {\n-        if (message != null && !message.getData().isEmpty()) {\n-            if (message.getMetadata().getEntryType().equals(LogReplicationEntryType.SNAPSHOT_MESSAGE) ||\n-                    message.getMetadata().getEntryType().equals(LogReplicationEntryType.LOG_ENTRY_MESSAGE)) {\n-                // Ignore, do not account Start and End Markers as messages\n-                entryQueue.add(message);\n-            }\n+        if (message != null && !message.getData().isEmpty() &&\n+                (message.getMetadata().getEntryType().equals(LogReplicationEntryType.SNAPSHOT_MESSAGE) ||\n+                    message.getMetadata().getEntryType().equals(LogReplicationEntryType.LOG_ENTRY_MESSAGE))) {\n+            // Ignore, do not account Start and End Markers as messages\n+            entryQueue.add(message);\n         }\n \n         CompletableFuture<LogReplicationEntryMsg> cf = new CompletableFuture<>();"
  },
  {
    "sha": "2f91bd25e763ef8d6a137d0c95a36ff9ade14857",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -493,6 +493,7 @@ public void processMessage(LogReplication.LogReplicationEntryMsg message) {\n \n             default:\n                 log.error(\"Wrong state {}.\", rxState);\n+                break;\n         }\n     }\n "
  },
  {
    "sha": "9a54bf2447a6c7ef0cae1c77fbd06cadb6a5149a",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -327,7 +327,7 @@ private void applyShadowStream(UUID streamId, long snapshot) {\n         // This variable reflects the minimum timestamp for all shadow streams in the current snapshot cycle.\n         // We seek up to this address, assuming that no trim should occur beyond this snapshot start\n         long currentMinShadowStreamTimestamp = logReplicationMetadataManager.getMinSnapshotSyncShadowStreamTs();\n-        OpaqueStream shadowOpaqueStream = new OpaqueStream(rt, rt.getStreamsView().get(shadowStreamId, options));\n+        OpaqueStream shadowOpaqueStream = new OpaqueStream(rt.getStreamsView().get(shadowStreamId, options));\n         shadowOpaqueStream.seek(currentMinShadowStreamTimestamp);\n         Stream shadowStream = shadowOpaqueStream.streamUpTo(snapshot);\n "
  },
  {
    "sha": "346d3f19af0d28fa7bb0fd80411e6514748cf1aa",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java",
    "status": "modified",
    "additions": 4,
    "deletions": 13,
    "changes": 17,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -1,11 +1,9 @@\n package org.corfudb.infrastructure.logreplication.replication.send.logreader;\n \n import com.google.common.annotations.VisibleForTesting;\n-import com.google.protobuf.ByteString;\n import com.google.protobuf.TextFormat;\n import io.micrometer.core.instrument.Counter;\n import io.micrometer.core.instrument.DistributionSummary;\n-import io.netty.buffer.ByteBuf;\n import lombok.Getter;\n import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n@@ -47,8 +45,6 @@\n  */\n public class StreamsLogEntryReader implements LogEntryReader {\n \n-    private CorfuRuntime rt;\n-\n     private final LogReplicationEntryType MSG_TYPE = LogReplicationEntryType.LOG_ENTRY_MESSAGE;\n \n     // Set of UUIDs for the corresponding streams\n@@ -85,8 +81,7 @@\n     private StreamIteratorMetadata currentProcessedEntryMetadata;\n \n     public StreamsLogEntryReader(CorfuRuntime runtime, LogReplicationConfig config) {\n-        this.rt = runtime;\n-        this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        runtime.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n         this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         this.currentProcessedEntryMetadata = new StreamIteratorMetadata(Address.NON_ADDRESS, false);\n         this.messageSizeDistributionSummary = configureMessageSizeDistributionSummary();\n@@ -103,7 +98,7 @@ public StreamsLogEntryReader(CorfuRuntime runtime, LogReplicationConfig config)\n         log.debug(\"Streams to replicate total={}, stream_names={}, stream_ids={}\", streamUUIDs.size(), streams, streamUUIDs);\n \n         //create an opaque stream for transaction stream\n-        txOpaqueStream = new TxOpaqueStream(rt);\n+        txOpaqueStream = new TxOpaqueStream(runtime);\n     }\n \n     private LogReplicationEntryMsg generateMessageWithOpaqueEntryList(\n@@ -178,11 +173,7 @@ private boolean checkValidSize(int currentMsgSize, int currentEntrySize) {\n \n         // If it exceeds the maximum size of this message, skip appending this entry,\n         // it will be processed with the next message;\n-        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n-            return false;\n-        }\n-\n-        return true;\n+        return currentEntrySize + currentMsgSize <= maxDataSizePerMsg;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n@@ -317,7 +308,7 @@ public StreamIteratorMetadata getCurrentProcessedEntryMetadata() {\n         public TxOpaqueStream(CorfuRuntime rt) {\n             //create an opaque stream for transaction stream\n             this.rt = rt;\n-            txStream = new OpaqueStream(rt, rt.getStreamsView().get(ObjectsView.TRANSACTION_STREAM_ID));\n+            txStream = new OpaqueStream(rt.getStreamsView().get(ObjectsView.TRANSACTION_STREAM_ID));\n             streamUpTo();\n         }\n "
  },
  {
    "sha": "055cb2d82ea88d2918168916ed28375a83003c69",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -1,6 +1,5 @@\n package org.corfudb.infrastructure.logreplication.replication.send.logreader;\n \n-import com.google.protobuf.ByteString;\n import com.google.protobuf.TextFormat;\n import io.micrometer.core.instrument.DistributionSummary;\n import lombok.Getter;\n@@ -291,7 +290,7 @@ public void reset(long ts) {\n                     .ignoreTrimmed(false)\n                     .cacheEntries(false)\n                     .build();\n-            Stream stream = (new OpaqueStream(rt, rt.getStreamsView().get(uuid, options))).streamUpTo(snapshot);\n+            Stream stream = (new OpaqueStream(rt.getStreamsView().get(uuid, options))).streamUpTo(snapshot);\n             iterator = stream.iterator();\n             maxVersion = 0;\n          }"
  },
  {
    "sha": "227c537074256d6cbf7340625cc50bcef9b374cb",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/utils/LogReplicationStreamNameTableManager.java",
    "status": "modified",
    "additions": 2,
    "deletions": 8,
    "changes": 10,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/utils/LogReplicationStreamNameTableManager.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/utils/LogReplicationStreamNameTableManager.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/utils/LogReplicationStreamNameTableManager.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -36,8 +36,6 @@\n \n     private ILogReplicationConfigAdapter logReplicationConfigAdapter;\n \n-    private final CorfuRuntime corfuRuntime;\n-\n     private String pluginConfigFilePath;\n \n     private CorfuStore corfuStore;\n@@ -49,8 +47,7 @@\n \n     public LogReplicationStreamNameTableManager(CorfuRuntime runtime, String pluginConfigFilePath) {\n         this.pluginConfigFilePath = pluginConfigFilePath;\n-        this.corfuRuntime = runtime;\n-        corfuStore = new CorfuStore(corfuRuntime);\n+        corfuStore = new CorfuStore(runtime);\n \n         initStreamNameFetcherPlugin();\n     }\n@@ -81,10 +78,7 @@ public LogReplicationStreamNameTableManager(CorfuRuntime runtime, String pluginC\n     public boolean isUpgraded() {\n         if (verifyTableExists(LOG_REPLICATION_PLUGIN_VERSION_TABLE)) {\n             openExistingTable(LOG_REPLICATION_PLUGIN_VERSION_TABLE);\n-            if (tableVersionMatchesPlugin()) {\n-                return false;\n-            }\n-            return true;\n+            return !tableVersionMatchesPlugin();\n         }\n         // TODO pankti: this may be the first time the replication server is initialized, so return false.\n         //  But what about a case if the user has deleted the table?"
  },
  {
    "sha": "54086079cf398162136a55fb15797d64352ca055",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/management/failuredetector/ClusterGraph.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/management/failuredetector/ClusterGraph.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/management/failuredetector/ClusterGraph.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/management/failuredetector/ClusterGraph.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -113,13 +113,11 @@ public ClusterGraph toSymmetric() {\n                     .forEach(adjNodeName -> {\n                         NodeConnectivity adjNode = graph.get(adjNodeName);\n \n-                        //If current node is not the local node and another node is unavailable we don't change\n+                        // If current node is not the local node and another node is unavailable we don't change\n                         // the adjacent node connectivity matrix, we leave it as is\n-                        if (adjNode.getType() == NodeConnectivityType.UNAVAILABLE) {\n-                            if (!isLocalNode(node)) {\n-                                newConnectivity.put(adjNodeName, node.getConnectionStatus(adjNodeName));\n-                                return;\n-                            }\n+                        if (adjNode.getType() == NodeConnectivityType.UNAVAILABLE && !isLocalNode(node)) {\n+                            newConnectivity.put(adjNodeName, node.getConnectionStatus(adjNodeName));\n+                            return;\n                         }\n \n                         //Get connection status for current node"
  },
  {
    "sha": "dacc6d51ddb4f73795ef015a0660df2ef3f7762f",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -120,30 +120,37 @@ public void handle(@Nonnull RequestMsg req, @Nonnull ChannelHandlerContext ctx,\n             case QUERY:\n                 handleQuery(req, ctx, r);\n                 break;\n+\n             case ADD_NODE:\n                 workflow = workflowFactory.getAddNode(getAddNodeRequest(msg.getAddNode()));\n                 dispatch(workflow, req, ctx, r, msg.getAddNode().getEndpoint());\n                 break;\n+\n             case REMOVE_NODE:\n                 workflow = workflowFactory.getRemoveNode(getRemoveNodeRequest(msg.getRemoveNode()));\n                 dispatch(workflow, req, ctx, r, msg.getRemoveNode().getEndpoint());\n                 break;\n+\n             case FORCE_REMOVE_NODE:\n                 workflow = workflowFactory.getForceRemove(getForceRemoveNodeRequest(msg.getForceRemoveNode()));\n                 dispatch(workflow, req, ctx, r, msg.getForceRemoveNode().getEndpoint());\n                 break;\n+\n             case HEAL_NODE:\n                 workflow = workflowFactory.getHealNode(getHealNodeRequest(msg.getHealNode()));\n                 dispatch(workflow, req, ctx, r, msg.getHealNode().getEndpoint());\n                 break;\n+\n             case RESTORE_REDUNDANCY_MERGE_SEGMENTS:\n                 workflow = workflowFactory.getRestoreRedundancy(\n                         getRestoreRedundancyMergeSegmentsRequest(msg.getRestoreRedundancyMergeSegments()));\n                 dispatch(workflow, req, ctx, r, msg.getRestoreRedundancyMergeSegments().getEndpoint());\n                 break;\n+\n             default:\n                 log.error(\"handle[{}]: Unknown orchestrator request type {}\",\n                         req.getHeader().getRequestId(), msg.getPayloadCase());\n+                break;\n         }\n     }\n "
  },
  {
    "sha": "451a144913d8a45fc33448ab1e3ad559768ef0a1",
    "filename": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/workflows/RestoreRedundancyMergeSegmentsWorkflow.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/workflows/RestoreRedundancyMergeSegmentsWorkflow.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/workflows/RestoreRedundancyMergeSegmentsWorkflow.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/workflows/RestoreRedundancyMergeSegmentsWorkflow.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -25,8 +25,6 @@\n public class RestoreRedundancyMergeSegmentsWorkflow implements IWorkflow {\n \n \n-    private final RestoreRedundancyMergeSegmentsRequest request;\n-\n     @Getter\n     private final UUID id;\n \n@@ -41,7 +39,6 @@\n     public RestoreRedundancyMergeSegmentsWorkflow(\n             RestoreRedundancyMergeSegmentsRequest request) {\n         this.id = UUID.randomUUID();\n-        this.request = request;\n         this.actions = ImmutableList.of(\n                 RestoreRedundancyMergeSegments.builder()\n                         .currentNode(request.getEndpoint())"
  },
  {
    "sha": "8361e4d68f9b770a428f3c0e7a005d6a3513afea",
    "filename": "infrastructure/src/test/java/org/corfudb/infrastructure/orchestrator/OrchestratorTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/test/java/org/corfudb/infrastructure/orchestrator/OrchestratorTest.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/infrastructure/src/test/java/org/corfudb/infrastructure/orchestrator/OrchestratorTest.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/infrastructure/src/test/java/org/corfudb/infrastructure/orchestrator/OrchestratorTest.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -71,7 +71,6 @@\n     private Orchestrator orchestrator;\n \n     // Additional objects that need to be mocked or spied on.\n-    private ServerContext mockServerContext;\n     private IServerRouter mockServerRouter;\n     private ChannelHandlerContext mockChannelHandlerContext;\n     private Orchestrator.WorkflowFactory workflowFactory;\n@@ -148,7 +147,7 @@ private void sendAndValidateWorkflowDispatch(RequestPayloadMsg payload, UUID exp\n      */\n     @Before\n     public void setup() {\n-        mockServerContext = mock(ServerContext.class);\n+        ServerContext mockServerContext = mock(ServerContext.class);\n         mockServerRouter = mock(IServerRouter.class);\n         mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n         workflowFactory = spy(new Orchestrator.WorkflowFactory());"
  },
  {
    "sha": "a68ce5b88c9c2594f4a495c67d33e6832bade538",
    "filename": "it/src/main/java/org/corfudb/universe/UniverseManager.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/it/src/main/java/org/corfudb/universe/UniverseManager.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/it/src/main/java/org/corfudb/universe/UniverseManager.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/it/src/main/java/org/corfudb/universe/UniverseManager.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -310,7 +310,7 @@ public void shutdown() {\n         }\n \n         private void checkMode(UniverseMode expected) {\n-            if (universeMode != expected) {\n+            if (!universeMode.equals(expected)) {\n                 String err = \"Invalid mode: \" + universeMode + \". Expected mode: \" + expected;\n                 throw new IllegalStateException(err);\n             }"
  },
  {
    "sha": "e096bc3d4275966fb91df2496aa2ea59b464cdc4",
    "filename": "it/src/main/java/org/corfudb/universe/group/cluster/vm/VmCorfuCluster.java",
    "status": "modified",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/it/src/main/java/org/corfudb/universe/group/cluster/vm/VmCorfuCluster.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/it/src/main/java/org/corfudb/universe/group/cluster/vm/VmCorfuCluster.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/it/src/main/java/org/corfudb/universe/group/cluster/vm/VmCorfuCluster.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -17,7 +17,6 @@\n import org.corfudb.universe.node.server.vm.VmCorfuServer;\n import org.corfudb.universe.node.server.vm.VmCorfuServerParams;\n import org.corfudb.universe.node.server.vm.VmCorfuServerParams.VmName;\n-import org.corfudb.universe.node.stress.vm.VmStress;\n import org.corfudb.universe.universe.vm.VmManager;\n import org.corfudb.universe.universe.vm.VmUniverseParams;\n \n@@ -60,18 +59,10 @@ protected Node buildServer(VmCorfuServerParams nodeParams) {\n                 .credentials(universeParams.getCredentials().getVmCredentials())\n                 .build();\n \n-        VmStress stress = VmStress.builder()\n-                .params(params)\n-                .universeParams(universeParams)\n-                .vmManager(vmManager)\n-                .commandHelper(commandHelper)\n-                .build();\n-\n         return VmCorfuServer.builder()\n                 .universeParams(universeParams)\n                 .params(params)\n                 .vmManager(vmManager)\n-                .stress(stress)\n                 .remoteOperationHelper(commandHelper)\n                 .loggingParams(loggingParams)\n                 .build();"
  },
  {
    "sha": "5ad7ed0c3c5432027d99382eaaa31a31b274e6f3",
    "filename": "it/src/main/java/org/corfudb/universe/node/server/CorfuServerParams.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/CorfuDB/CorfuDB/blob/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/it/src/main/java/org/corfudb/universe/node/server/CorfuServerParams.java",
    "raw_url": "https://github.com/CorfuDB/CorfuDB/raw/b2ab47904ceee9d3c3a7329c8c2663a6334ef766/it/src/main/java/org/corfudb/universe/node/server/CorfuServerParams.java",
    "contents_url": "https://api.github.com/repos/CorfuDB/CorfuDB/contents/it/src/main/java/org/corfudb/universe/node/server/CorfuServerParams.java?ref=b2ab47904ceee9d3c3a7329c8c2663a6334ef766",
    "patch": "@@ -8,6 +8,7 @@\n import lombok.Getter;\n import lombok.NonNull;\n import lombok.ToString;\n+import lombok.experimental.SuperBuilder;\n import org.corfudb.universe.node.Node.NodeParams;\n import org.corfudb.universe.node.Node.NodeType;\n import org.corfudb.universe.node.server.CorfuServer.Mode;\n@@ -20,7 +21,7 @@\n import java.util.Optional;\n import java.util.Set;\n \n-@Builder(builderMethodName = \"serverParamsBuilder\")\n+@SuperBuilder(builderMethodName = \"serverParamsBuilder\")\n @AllArgsConstructor\n @EqualsAndHashCode\n @ToString"
  }
]
