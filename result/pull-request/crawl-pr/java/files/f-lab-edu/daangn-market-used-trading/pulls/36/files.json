[
  {
    "sha": "81304ea46cc0b8ab7fb93a18f06321d5df02593a",
    "filename": "Dockerfile",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/Dockerfile",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/Dockerfile",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/Dockerfile?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -0,0 +1,7 @@\n+FROM openjdk:8-jdk-alpine\n+\n+ARG JAR_FILE=target/*.jar\n+COPY ${JAR_FILE} app.jar\n+\n+\n+ENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\n\\ No newline at end of file"
  },
  {
    "sha": "b6ea8201231fd40887a679adb37cbaf78673bbcf",
    "filename": "Jenkinsfile",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/Jenkinsfile",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/Jenkinsfile",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/Jenkinsfile?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -0,0 +1,52 @@\n+pipeline {\n+    agent any\n+\n+    tools {\n+        maven 'maven'\n+    }\n+\n+    stages {\n+\n+        stage('git clone') {\n+\n+            steps {\n+                checkout scm;\n+            }\n+        }\n+\n+        stage('maven build') {\n+            steps {\n+                sh \"mvn clean package -DskipTests=true\"\n+            }\n+        }\n+\n+\n+        stage('unit test') {\n+            steps {\n+                script {\n+                    sh 'mvn surefire:test'\n+                    junit '**/target/surefire-reports/TEST-*.xml'\n+                }\n+            }\n+        }\n+\n+        // Integration Test 추가 예정\n+\n+        stage('build docker image & deploy docker hub') {\n+            steps {\n+                script {\n+                    sh \"docker build -t ${DOCKER_IMAGE} .\"\n+                    sh \"docker push ${DOCKER_IMAGE}\"\n+                }\n+            }\n+        }\n+\n+        stage('deploy') {\n+            steps {\n+                script {\n+                    sh \"ssh -p ${DEPLOY_SERVER_PORT} ${DEPLOY_SERVER_IP} ${DEPLOY_SCRIPT_PATH}\"\n+                }\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "89cb0c835d99b3cc8e0259ea13611734a0b8ef6b",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/pom.xml",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/pom.xml",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/pom.xml?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -15,7 +15,7 @@\n     <description>daangn market API server</description>\n \n     <properties>\n-        <java.version>11</java.version>\n+        <java.version>1.8</java.version>\n     </properties>\n \n     <dependencies>\n@@ -45,7 +45,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation -->\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-validation</artifactId>\n@@ -85,6 +84,17 @@\n                 <groupId>org.springframework.boot</groupId>\n                 <artifactId>spring-boot-maven-plugin</artifactId>\n             </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <excludes>\n+                        <exclude>**/integrations/**/*Tests.java</exclude>\n+                        <exclude>**/integrations/**/*Test.java</exclude>\n+                    </excludes>\n+                </configuration>\n+            </plugin>\n         </plugins>\n     </build>\n "
  },
  {
    "sha": "e1d98a5519bfdc491458ad57cf52554dac354bf4",
    "filename": "src/main/java/com/ssibongee/daangnmarket/post/dto/PostRequest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/src/main/java/com/ssibongee/daangnmarket/post/dto/PostRequest.java",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/src/main/java/com/ssibongee/daangnmarket/post/dto/PostRequest.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/src/main/java/com/ssibongee/daangnmarket/post/dto/PostRequest.java?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -4,12 +4,14 @@\n import com.ssibongee.daangnmarket.post.domain.entity.Post;\n import com.ssibongee.daangnmarket.post.domain.entity.TradeStatus;\n import lombok.AllArgsConstructor;\n+import lombok.Builder;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import org.hibernate.validator.constraints.Length;\n \n import javax.validation.constraints.NotEmpty;\n \n+@Builder\n @Getter\n @NoArgsConstructor\n @AllArgsConstructor"
  },
  {
    "sha": "9636c32d5a16a1ced462f4555adfc2f62a251bd1",
    "filename": "src/test/java/com/ssibongee/daangnmarket/integrations/DaangnmarketApplicationTests.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/integrations/DaangnmarketApplicationTests.java",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/integrations/DaangnmarketApplicationTests.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/src/test/java/com/ssibongee/daangnmarket/integrations/DaangnmarketApplicationTests.java?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -1,4 +1,4 @@\n-package com.ssibongee.daangnmarket;\n+package com.ssibongee.daangnmarket.integrations;\n \n import org.junit.jupiter.api.Test;\n import org.springframework.boot.test.context.SpringBootTest;",
    "previous_filename": "src/test/java/com/ssibongee/daangnmarket/DaangnmarketApplicationTests.java"
  },
  {
    "sha": "16c34e5261be1e05eeaee5e6324d6f9d76e257b5",
    "filename": "src/test/java/com/ssibongee/daangnmarket/member/MemberServiceTest.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/member/MemberServiceTest.java",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/member/MemberServiceTest.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/src/test/java/com/ssibongee/daangnmarket/member/MemberServiceTest.java?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -1,4 +1,4 @@\n-package com.ssibongee.daangnmarket.service.member;\n+package com.ssibongee.daangnmarket.member;\n \n import com.ssibongee.daangnmarket.member.exception.MemberNotFoundException;\n import com.ssibongee.daangnmarket.member.dto.LocationAddressRequest;",
    "previous_filename": "src/test/java/com/ssibongee/daangnmarket/service/member/MemberServiceTest.java"
  },
  {
    "sha": "344f9c03308575af324569e6fbb0368e1d204d44",
    "filename": "src/test/java/com/ssibongee/daangnmarket/member/MemberValidationTest.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/member/MemberValidationTest.java",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/member/MemberValidationTest.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/src/test/java/com/ssibongee/daangnmarket/member/MemberValidationTest.java?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -1,4 +1,4 @@\n-package com.ssibongee.daangnmarket.domain.entity.member;\n+package com.ssibongee.daangnmarket.member;\n \n import com.ssibongee.daangnmarket.member.dto.MemberDto;\n import org.junit.jupiter.api.BeforeEach;",
    "previous_filename": "src/test/java/com/ssibongee/daangnmarket/domain/entity/member/MemberValidationTest.java"
  },
  {
    "sha": "d6867e29109554b31ea220d13bda6485991ad2bb",
    "filename": "src/test/java/com/ssibongee/daangnmarket/member/SessionLoginServiceTest.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/member/SessionLoginServiceTest.java",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/member/SessionLoginServiceTest.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/src/test/java/com/ssibongee/daangnmarket/member/SessionLoginServiceTest.java?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -1,4 +1,4 @@\n-package com.ssibongee.daangnmarket.service.member;\n+package com.ssibongee.daangnmarket.member;\n \n import com.ssibongee.daangnmarket.member.exception.MemberNotFoundException;\n import com.ssibongee.daangnmarket.member.dto.MemberDto;",
    "previous_filename": "src/test/java/com/ssibongee/daangnmarket/service/member/SessionLoginServiceTest.java"
  },
  {
    "sha": "d299913e977d2f646f323ffc4c249d9a13f7abc8",
    "filename": "src/test/java/com/ssibongee/daangnmarket/post/CategoryServiceTest.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/post/CategoryServiceTest.java",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/post/CategoryServiceTest.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/src/test/java/com/ssibongee/daangnmarket/post/CategoryServiceTest.java?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -0,0 +1,56 @@\n+package com.ssibongee.daangnmarket.post;\n+\n+import com.ssibongee.daangnmarket.post.domain.entity.Category;\n+import com.ssibongee.daangnmarket.post.domain.repository.CategoryRepository;\n+import com.ssibongee.daangnmarket.post.exception.CategoryNotFoundException;\n+import com.ssibongee.daangnmarket.post.service.TradeCategoryService;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith(MockitoExtension.class)\n+class CategoryServiceTest {\n+\n+    @InjectMocks\n+    private TradeCategoryService categoryService;\n+\n+    @Mock\n+    private CategoryRepository categoryRepository;\n+\n+    @Test\n+    @DisplayName(\"존재하지 않는 카테고리명을 조회할 경우 CategoryNotFoundException이 발생한다.\")\n+    void isNotExistCategoryFindByName() {\n+        // given\n+        when(categoryRepository.findCategoryByCategoryName(anyString())).thenReturn(Optional.empty());\n+\n+        // then\n+        assertThrows(CategoryNotFoundException.class, () -> {\n+            categoryService.findCategoryByName(anyString());\n+        });\n+    }\n+\n+    @Test\n+    @DisplayName(\"정상적으로 존재하는 카테고리명을 조회할 경우 성공적으로 조회한 Category 클래스를 반환한다.\")\n+    void isExistCategoryFindByName() {\n+        // given\n+        Category category = mock(Category.class);\n+        when(categoryRepository.findCategoryByCategoryName(anyString())).thenReturn(Optional.of(category));\n+\n+        // when\n+        Category findCategory = categoryService.findCategoryByName(anyString());\n+\n+        // then\n+        assertThat(findCategory).isNotNull();\n+        assertThat(findCategory).isEqualTo(category);\n+        verify(categoryRepository, times(1)).findCategoryByCategoryName(anyString());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "03a5e2e2a02d0f698d4084f8df1135e39e8fe3ea",
    "filename": "src/test/java/com/ssibongee/daangnmarket/post/PostServiceTest.java",
    "status": "added",
    "additions": 167,
    "deletions": 0,
    "changes": 167,
    "blob_url": "https://github.com/f-lab-edu/daangn-market-used-trading/blob/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/post/PostServiceTest.java",
    "raw_url": "https://github.com/f-lab-edu/daangn-market-used-trading/raw/396958aca9fee0a822169ae10bb38eba678aae2e/src/test/java/com/ssibongee/daangnmarket/post/PostServiceTest.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/daangn-market-used-trading/contents/src/test/java/com/ssibongee/daangnmarket/post/PostServiceTest.java?ref=396958aca9fee0a822169ae10bb38eba678aae2e",
    "patch": "@@ -0,0 +1,167 @@\n+package com.ssibongee.daangnmarket.post;\n+\n+import com.ssibongee.daangnmarket.member.domain.entity.Member;\n+import com.ssibongee.daangnmarket.member.exception.UnAuthorizedAccessException;\n+import com.ssibongee.daangnmarket.member.service.LoginService;\n+import com.ssibongee.daangnmarket.post.domain.entity.Category;\n+import com.ssibongee.daangnmarket.post.domain.entity.Post;\n+import com.ssibongee.daangnmarket.post.domain.repository.PostRepository;\n+import com.ssibongee.daangnmarket.post.dto.PostRequest;\n+import com.ssibongee.daangnmarket.post.exception.PostNotFoundException;\n+import com.ssibongee.daangnmarket.post.service.CategoryService;\n+import com.ssibongee.daangnmarket.post.service.TradePostService;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PostServiceTest {\n+\n+    @InjectMocks\n+    private TradePostService postService;\n+\n+    @Mock\n+    private PostRepository postRepository;\n+\n+    @Mock\n+    private CategoryService categoryService;\n+\n+    @Mock\n+    private LoginService loginService;\n+\n+    private Member member;\n+\n+    private Post post;\n+\n+    private Category category;\n+\n+    private PostRequest postRequest;\n+\n+    @BeforeEach\n+    void setUp() {\n+\n+        postRequest = PostRequest.builder()\n+                .title(\"노트북 맥북 프로 16인치 판매합니다.\")\n+                .content(\"노트북을 파는 글\")\n+                .category(\"디지털/가전\")\n+                .build();\n+\n+        member = Member.builder()\n+                .email(\"daangnmarket@admin.com\")\n+                .password(\"1q2w3e4r!\")\n+                .nickname(\"김당근\")\n+                .build();\n+\n+        post = postRequest.toEntity(member);\n+    }\n+\n+    @Test\n+    @DisplayName(\"게시글이 성공적으로 등록될 경우 데이터가 정상적으로 저장된다.\")\n+    void successToCreatePost() {\n+        // given\n+        when(categoryService.findCategoryByName(any())).thenReturn(category);\n+\n+        // when\n+        postService.createNewPost(postRequest, member);\n+\n+        // then\n+        verify(postRepository, times(1)).save(any(Post.class));\n+        verify(categoryService, times(1)).findCategoryByName(anyString());\n+    }\n+\n+    @Test\n+    @DisplayName(\"해당 아이디의 게시글이 존재하지 않으면 PostNotFoundException 예외를 발생시킨다.\")\n+    void isNotExistPostFindById() {\n+        // given\n+        when(postRepository.findPostById(any())).thenReturn(Optional.empty());\n+\n+        // then\n+        assertThrows(PostNotFoundException.class, () -> {\n+            Post findByPostId = postService.findPostById(1L);\n+        });\n+    }\n+\n+    @Test\n+    @DisplayName(\"해당 아이디의 게시글이 존재하는 경우 정상적으로 게시글을 조회한다.\")\n+    void isExistPostFindById() {\n+        // given\n+        when(postRepository.findPostById(any())).thenReturn(Optional.of(post));\n+\n+        // when\n+        Post findByPostId = postService.findPostById(post.getId());\n+\n+\n+        // then\n+        assertThat(findByPostId).isNotNull();\n+        assertThat(findByPostId.getId()).isEqualTo(post.getId());\n+        assertThat(findByPostId.getTitle()).isEqualTo(post.getTitle());\n+        assertThat(findByPostId.getContent()).isEqualTo(post.getContent());\n+    }\n+\n+    @Test\n+    @DisplayName(\"게시글이 성공적으로 업데이트 되는 경우 게시글 내용과 카테고리가 성공적으로 변경된다.\")\n+    void successToUpdatePost() {\n+        // given\n+        Post post = mock(Post.class);\n+        when(post.getAuthor()).thenReturn(member);\n+        when(categoryService.findCategoryByName(any())).thenReturn(category);\n+        when(loginService.getLoginMember()).thenReturn(member);\n+\n+        // when\n+        postService.updatePost(post, postRequest);\n+\n+        // then\n+        verify(post, times(1)).updatePost(postRequest);\n+        verify(post, times(1)).setCategory(category);\n+    }\n+\n+    @Test\n+    @DisplayName(\"작성자가 일치하지 않을 경우 게시글 업데이트가 실패하고 UnAuthorizedAccessException이 발생한다.\")\n+    void isUnAuthorizedMemberToUpdatePost() {\n+        // given\n+        Member member = mock(Member.class);\n+        when(loginService.getLoginMember()).thenReturn(member);\n+\n+        // then\n+        assertThrows(UnAuthorizedAccessException.class, () -> {\n+            postService.updatePost(post, postRequest);\n+        });\n+    }\n+\n+    @Test\n+    @DisplayName(\"작성자가 일치할 경우 게시글 삭제에 성공하고 게시글의 removed가 true로 변경된다.\")\n+    void successToRemovePost() {\n+        // given\n+        Post post = mock(Post.class);\n+        when(post.getRemoved()).thenReturn(true);\n+\n+        // when\n+        postService.removePost(post);\n+\n+        // then\n+        assertTrue(post.getRemoved());\n+    }\n+\n+    @Test\n+    @DisplayName(\"작성자가 일치하지 않을 경우 게시글이 삭제에 실패하고 UnAuthroizedAccessException이 발생한다.\")\n+    void isUnAuthorizedMemberToRemovePost() {\n+        // given\n+        Member member = mock(Member.class);\n+        when(loginService.getLoginMember()).thenReturn(member);\n+\n+        // then\n+        assertThrows(UnAuthorizedAccessException.class, () -> {\n+            postService.removePost(post);\n+        });\n+    }\n+}\n\\ No newline at end of file"
  }
]
