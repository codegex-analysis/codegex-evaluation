[
  {
    "sha": "2510e5acc7a2a3d2acc0134a9387eabeb9b2dcf4",
    "filename": "src/main/java/com/restaurant/eatenjoy/annotation/LoginOwnerId.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/annotation/LoginOwnerId.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/annotation/LoginOwnerId.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/annotation/LoginOwnerId.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -7,5 +7,5 @@\n \n @Target(ElementType.PARAMETER)\n @Retention(RetentionPolicy.RUNTIME)\n-public @interface CurrentLoginId {\n+public @interface LoginOwnerId {\n }",
    "previous_filename": "src/main/java/com/restaurant/eatenjoy/annotation/CurrentLoginId.java"
  },
  {
    "sha": "614521e377dabc06784617e1977bd727739bccc6",
    "filename": "src/main/java/com/restaurant/eatenjoy/annotation/LoginUserId.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/annotation/LoginUserId.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/annotation/LoginUserId.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/annotation/LoginUserId.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -0,0 +1,11 @@\n+package com.restaurant.eatenjoy.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target(ElementType.PARAMETER)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface LoginUserId {\n+}"
  },
  {
    "sha": "70b9c8986a7382ebbd77df93fb6b1e1b4b99b504",
    "filename": "src/main/java/com/restaurant/eatenjoy/config/WebConfig.java",
    "status": "modified",
    "additions": 9,
    "deletions": 4,
    "changes": 13,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/config/WebConfig.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/config/WebConfig.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/config/WebConfig.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -8,26 +8,31 @@\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n import com.restaurant.eatenjoy.util.interceptor.AuthorityInterceptor;\n-import com.restaurant.eatenjoy.util.resolver.CurrentLoginIdArgumentResolver;\n+import com.restaurant.eatenjoy.util.resolver.LoginOwnerIdArgumentResolver;\n+import com.restaurant.eatenjoy.util.resolver.LoginUserIdArgumentResolver;\n \n import lombok.RequiredArgsConstructor;\n \n @Configuration\n @RequiredArgsConstructor\n public class WebConfig implements WebMvcConfigurer {\n \n-\tprivate final CurrentLoginIdArgumentResolver currentLoginIdArgumentResolver;\n+\tprivate final LoginUserIdArgumentResolver loginUserIdArgumentResolver;\n+\n+\tprivate final LoginOwnerIdArgumentResolver loginOwnerIdArgumentResolver;\n \n \tprivate final AuthorityInterceptor authorityInterceptor;\n \n \t@Override\n \tpublic void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {\n-\t\tresolvers.add(currentLoginIdArgumentResolver);\n+\t\tresolvers.add(loginUserIdArgumentResolver);\n+\t\tresolvers.add(loginOwnerIdArgumentResolver);\n \t}\n \n \t@Override\n \tpublic void addInterceptors(InterceptorRegistry registry) {\n \t\tregistry.addInterceptor(authorityInterceptor)\n-\t\t\t.excludePathPatterns(\"/api/*/login\", \"/api/*/logout\", \"/api/users/check-mail-token\");\n+\t\t\t.excludePathPatterns(\"/api/*/login\", \"/api/*/logout\", \"/api/*/check-mail-token\");\n \t}\n+\n }"
  },
  {
    "sha": "c3d4c4938fb50e3350471ab8e3389ddfcce0e121",
    "filename": "src/main/java/com/restaurant/eatenjoy/controller/ExceptionAdvisor.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/controller/ExceptionAdvisor.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/controller/ExceptionAdvisor.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/controller/ExceptionAdvisor.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -37,14 +37,6 @@\n \t\treturn ResponseEntity.badRequest().body(createInvalidFields(fieldErrors));\n \t}\n \n-\tprivate List<InvalidField> createInvalidFields(List<FieldError> fieldErrors) {\n-\t\treturn fieldErrors.stream().map(fieldError -> InvalidField.builder().field(fieldError.getField())\n-\t\t\t.message(fieldError.getDefaultMessage())\n-\t\t\t.value(fieldError.getRejectedValue())\n-\t\t\t.build())\n-\t\t\t.collect(Collectors.toList());\n-\t}\n-\n \t@ExceptionHandler(NotFoundException.class)\n \tpublic ResponseEntity<String> processNotFoundError(NotFoundException exception) {\n \t\treturn ResponseEntity.status(HttpStatus.NOT_FOUND).body(exception.getMessage());\n@@ -61,6 +53,14 @@\n \t\treturn ResponseEntity.status(HttpStatus.FORBIDDEN).body(message);\n \t}\n \n+\tprivate List<InvalidField> createInvalidFields(List<FieldError> fieldErrors) {\n+\t\treturn fieldErrors.stream().map(fieldError -> InvalidField.builder().field(fieldError.getField())\n+\t\t\t.message(fieldError.getDefaultMessage())\n+\t\t\t.value(fieldError.getRejectedValue())\n+\t\t\t.build())\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n \t@Getter\n \t@Builder\n \tprivate static class InvalidField {"
  },
  {
    "sha": "b0d04fb74669a72a726c33f7be4abc88ce910bf6",
    "filename": "src/main/java/com/restaurant/eatenjoy/controller/OwnerController.java",
    "status": "modified",
    "additions": 47,
    "deletions": 1,
    "changes": 48,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/controller/OwnerController.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/controller/OwnerController.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/controller/OwnerController.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -3,16 +3,27 @@\n import javax.validation.Valid;\n \n import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.bind.annotation.RestController;\n \n+import com.restaurant.eatenjoy.annotation.Authority;\n+import com.restaurant.eatenjoy.annotation.LoginOwnerId;\n+import com.restaurant.eatenjoy.annotation.LoginUserId;\n import com.restaurant.eatenjoy.dto.LoginDto;\n+import com.restaurant.eatenjoy.dto.MailDto;\n import com.restaurant.eatenjoy.dto.OwnerDto;\n+import com.restaurant.eatenjoy.dto.OwnerInfoDto;\n+import com.restaurant.eatenjoy.dto.PasswordDto;\n+import com.restaurant.eatenjoy.dto.UpdatePasswordDto;\n import com.restaurant.eatenjoy.service.LoginService;\n import com.restaurant.eatenjoy.service.OwnerService;\n+import com.restaurant.eatenjoy.util.Role;\n \n import lombok.RequiredArgsConstructor;\n \n@@ -33,12 +44,47 @@ public void register(@RequestBody @Valid OwnerDto ownerDto) {\n \n \t@PostMapping(\"/login\")\n \tpublic void login(@RequestBody @Valid LoginDto loginDto) {\n-\t\tloginService.loginUser(loginDto);\n+\t\tloginService.loginOwner(loginDto);\n \t}\n \n \t@PostMapping(\"/logout\")\n \tpublic void logout() {\n \t\tloginService.logout();\n \t}\n \n+\t@GetMapping(\"/check-mail-token\")\n+\tpublic void checkMailToken(String email, String token) {\n+\t\townerService.certifyEmailToken(email, token);\n+\t}\n+\n+\t@GetMapping(\"/resend-mail\")\n+\tpublic void resendMail(@LoginUserId String loginId) {\n+\t\townerService.resendCertificationMail(loginId);\n+\t}\n+\n+\t@Authority(Role.OWNER)\n+\t@DeleteMapping(\"/my-infos\")\n+\tpublic void delete(@LoginOwnerId String loginId, @RequestBody @Valid PasswordDto passwordDto) {\n+\t\townerService.delete(loginId, passwordDto.getPassword());\n+\t\tloginService.logout();\n+\t}\n+\n+\t@Authority(Role.OWNER)\n+\t@PatchMapping(\"/my-infos/password\")\n+\tpublic void changePassword(@LoginOwnerId String loginId, @RequestBody @Valid UpdatePasswordDto passwordDto) {\n+\t\townerService.updatePassword(loginId, passwordDto);\n+\t}\n+\n+\t@Authority(Role.OWNER)\n+\t@GetMapping(\"/my-infos\")\n+\tpublic OwnerInfoDto userInfo(@LoginOwnerId String loginId) {\n+\t\treturn ownerService.getOwnerInfo(loginId);\n+\t}\n+\n+\t@Authority(Role.OWNER)\n+\t@PatchMapping(\"/my-infos/mail\")\n+\tpublic void changeMail(@LoginOwnerId String loginId, @RequestBody @Valid MailDto mailDto) {\n+\t\townerService.changeMail(loginId, mailDto);\n+\t}\n+\n }"
  },
  {
    "sha": "ebb319afa3e71a32a243452d770e49558e7db8c6",
    "filename": "src/main/java/com/restaurant/eatenjoy/controller/UserController.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/controller/UserController.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/controller/UserController.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/controller/UserController.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -13,7 +13,7 @@\n import org.springframework.web.bind.annotation.RestController;\n \n import com.restaurant.eatenjoy.annotation.Authority;\n-import com.restaurant.eatenjoy.annotation.CurrentLoginId;\n+import com.restaurant.eatenjoy.annotation.LoginUserId;\n import com.restaurant.eatenjoy.dto.LoginDto;\n import com.restaurant.eatenjoy.dto.PasswordDto;\n import com.restaurant.eatenjoy.dto.UpdatePasswordDto;\n@@ -57,32 +57,32 @@ public void checkMailToken(String email, String token) {\n \t}\n \n \t@GetMapping(\"/resend-mail\")\n-\tpublic void resendMail(@CurrentLoginId String loginId) {\n+\tpublic void resendMail(@LoginUserId String loginId) {\n \t\tuserService.resendCertificationMail(loginId);\n \t}\n \n \t@Authority(Role.USER)\n-\t@DeleteMapping(\"/my-info\")\n-\tpublic void delete(@CurrentLoginId String loginId, @RequestBody @Valid PasswordDto passwordDto) {\n+\t@DeleteMapping(\"/my-infos\")\n+\tpublic void delete(@LoginUserId String loginId, @RequestBody @Valid PasswordDto passwordDto) {\n \t\tuserService.delete(loginId, passwordDto.getPassword());\n \t\tloginService.logout();\n \t}\n \n \t@Authority(Role.USER)\n-\t@PatchMapping(\"/my-info/password\")\n-\tpublic void changePassword(@CurrentLoginId String loginId, @RequestBody @Valid UpdatePasswordDto passwordDto) {\n+\t@PatchMapping(\"/my-infos/password\")\n+\tpublic void changePassword(@LoginUserId String loginId, @RequestBody @Valid UpdatePasswordDto passwordDto) {\n \t\tuserService.updatePassword(loginId, passwordDto);\n \t}\n \n \t@Authority(Role.USER)\n-\t@GetMapping(\"/my-info\")\n-\tpublic UserInfoDto userInfo(@CurrentLoginId String loginId) {\n+\t@GetMapping(\"/my-infos\")\n+\tpublic UserInfoDto userInfo(@LoginUserId String loginId) {\n \t\treturn userService.getUserInfo(loginId);\n \t}\n \n \t@Authority(Role.USER)\n-\t@PatchMapping(\"/my-info\")\n-\tpublic void update(@CurrentLoginId String loginId, @RequestBody @Valid UpdateUserDto userDto) {\n+\t@PatchMapping(\"/my-infos\")\n+\tpublic void update(@LoginUserId String loginId, @RequestBody @Valid UpdateUserDto userDto) {\n \t\tuserService.update(loginId, userDto);\n \t}\n "
  },
  {
    "sha": "bfc1840e1d6d8d70a1afbff80ec90548108db428",
    "filename": "src/main/java/com/restaurant/eatenjoy/dao/OwnerDao.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/dao/OwnerDao.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/dao/OwnerDao.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/dao/OwnerDao.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -13,4 +13,15 @@\n \tboolean existsByEmail(String email);\n \n \tboolean existsByLoginIdAndPassword(@Param(\"loginId\") String loginId, @Param(\"password\") String password);\n+\n+\tvoid updateEmailCertified(String email);\n+\n+\tOwnerDto findByLoginId(String loginId);\n+\n+\tvoid deleteByLoginId(String loginId);\n+\n+\tvoid updatePassword(@Param(\"loginId\") String loginId, @Param(\"password\") String password);\n+\n+\tvoid updateMailByLoginId(OwnerDto ownerDto);\n+\n }"
  },
  {
    "sha": "9556f5a5b78fe7e1f9db6f6683b4956b83640249",
    "filename": "src/main/java/com/restaurant/eatenjoy/dto/MailDto.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/dto/MailDto.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/dto/MailDto.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/dto/MailDto.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -0,0 +1,23 @@\n+package com.restaurant.eatenjoy.dto;\n+\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Size;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+\n+@Getter\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class MailDto {\n+\n+\t@NotBlank(message = \"이메일을 입력해주세요.\")\n+\t@Size(max = 100, message = \"최대 100자리까지 입력 가능합니다.\")\n+\t@Email(message = \"이메일 형식이 유효하지 않습니다.\")\n+\tprivate String email;\n+\n+}"
  },
  {
    "sha": "7c4e2c2d3a1ef6f9fca7c3fe38f0ab6783151037",
    "filename": "src/main/java/com/restaurant/eatenjoy/dto/OwnerInfoDto.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/dto/OwnerInfoDto.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/dto/OwnerInfoDto.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/dto/OwnerInfoDto.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -0,0 +1,16 @@\n+package com.restaurant.eatenjoy.dto;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+@Getter\n+@Builder\n+public class OwnerInfoDto {\n+\n+\tprivate final Long id;\n+\n+\tprivate final String loginId;\n+\n+\tprivate final String email;\n+\n+}"
  },
  {
    "sha": "aee5b0531db835c726baad1d9feb3901c0261fec",
    "filename": "src/main/java/com/restaurant/eatenjoy/service/LoginService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/service/LoginService.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/service/LoginService.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/service/LoginService.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -10,8 +10,12 @@\n \n \tvoid logout();\n \n-\tString getLoginId();\n+\tString getLoginUserId();\n+\n+\tString getLoginOwnerId();\n \n \tvoid validateUserAuthority();\n \n+\tvoid validateOwnerAuthority();\n+\n }"
  },
  {
    "sha": "e1c346a1d94f2f4004e73f609699a633b7533128",
    "filename": "src/main/java/com/restaurant/eatenjoy/service/OwnerService.java",
    "status": "modified",
    "additions": 92,
    "deletions": 3,
    "changes": 95,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/service/OwnerService.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/service/OwnerService.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/service/OwnerService.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -4,12 +4,20 @@\n import java.util.UUID;\n \n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n \n import com.restaurant.eatenjoy.dao.MailTokenDao;\n import com.restaurant.eatenjoy.dao.OwnerDao;\n import com.restaurant.eatenjoy.dto.LoginDto;\n+import com.restaurant.eatenjoy.dto.MailDto;\n import com.restaurant.eatenjoy.dto.OwnerDto;\n+import com.restaurant.eatenjoy.dto.OwnerInfoDto;\n+import com.restaurant.eatenjoy.dto.UpdatePasswordDto;\n+import com.restaurant.eatenjoy.exception.AlreadyCertifiedException;\n+import com.restaurant.eatenjoy.exception.ConflictPasswordException;\n import com.restaurant.eatenjoy.exception.DuplicateValueException;\n+import com.restaurant.eatenjoy.exception.MailTokenNotFoundException;\n+import com.restaurant.eatenjoy.exception.NoMatchedPasswordException;\n import com.restaurant.eatenjoy.exception.UserNotFoundException;\n import com.restaurant.eatenjoy.util.Role;\n import com.restaurant.eatenjoy.util.encrypt.Encryptable;\n@@ -32,6 +40,7 @@\n \n \tprivate final MailTokenDao mailTokenDao;\n \n+\t@Transactional\n \tpublic void register(OwnerDto ownerDto) {\n \t\tvalidateLoginIdAndEmail(ownerDto);\n \n@@ -45,6 +54,71 @@ public void register(OwnerDto ownerDto) {\n \t\tsendCertificationMail(ownerDto, true);\n \t}\n \n+\tpublic void validateLoginIdAndPassword(LoginDto loginDto) {\n+\t\tif (!ownerDao.existsByLoginIdAndPassword(loginDto.getLoginId(), encryptable.encrypt(loginDto.getPassword()))) {\n+\t\t\tthrow new UserNotFoundException(\"아이디 또는 비밀번호가 일치하지 않습니다.\");\n+\t\t}\n+\t}\n+\n+\t@Transactional\n+\tpublic void certifyEmailToken(String email, String emailToken) {\n+\t\tvalidateEmailAndToken(email, emailToken);\n+\t\townerDao.updateEmailCertified(email);\n+\t}\n+\n+\tpublic void resendCertificationMail(String loginId) {\n+\t\tOwnerDto ownerDto = ownerDao.findByLoginId(loginId);\n+\t\tif (ownerDto.isCertified()) {\n+\t\t\tthrow new AlreadyCertifiedException(\"이미 메일 인증이 완료된 사용자 입니다.\");\n+\t\t}\n+\n+\t\tsendCertificationMail(OwnerDto.builder()\n+\t\t\t.loginId(loginId)\n+\t\t\t.email(ownerDto.getEmail())\n+\t\t\t.build(), false);\n+\t}\n+\n+\tpublic OwnerDto findByLoginId(String loginId) {\n+\t\treturn ownerDao.findByLoginId(loginId);\n+\t}\n+\n+\t@Transactional\n+\tpublic void delete(String loginId, String password) {\n+\t\tif (!ownerDao.existsByLoginIdAndPassword(loginId, encryptable.encrypt(password))) {\n+\t\t\tthrow new NoMatchedPasswordException(\"비밀번호가 일치하지 않습니다.\");\n+\t\t}\n+\n+\t\townerDao.deleteByLoginId(loginId);\n+\t}\n+\n+\t@Transactional\n+\tpublic void updatePassword(String loginId, UpdatePasswordDto passwordDto) {\n+\t\tvalidatePasswords(loginId, passwordDto);\n+\t\townerDao.updatePassword(loginId, encryptable.encrypt(passwordDto.getNewPassword()));\n+\t}\n+\n+\tpublic OwnerInfoDto getOwnerInfo(String loginId) {\n+\t\tOwnerDto ownerDto = findByLoginId(loginId);\n+\t\treturn OwnerInfoDto.builder()\n+\t\t\t.id(ownerDto.getId())\n+\t\t\t.loginId(ownerDto.getLoginId())\n+\t\t\t.email(ownerDto.getEmail())\n+\t\t\t.build();\n+\t}\n+\n+\t@Transactional\n+\tpublic void changeMail(String loginId, MailDto mailDto) {\n+\t\townerDao.updateMailByLoginId(OwnerDto.builder()\n+\t\t\t.loginId(loginId)\n+\t\t\t.email(mailDto.getEmail())\n+\t\t\t.build());\n+\n+\t\tOwnerDto findOwner = findByLoginId(loginId);\n+\t\tif (!findOwner.isCertified()) {\n+\t\t\tsendCertificationMail(findOwner, false);\n+\t\t}\n+\t}\n+\n \tprivate void validateLoginIdAndEmail(OwnerDto ownerDto) {\n \t\tif (ownerDao.existsByLoginId(ownerDto.getLoginId())) {\n \t\t\tthrow new DuplicateValueException(\"로그인 아이디가 이미 존재합니다.\");\n@@ -63,14 +137,29 @@ private void sendCertificationMail(OwnerDto ownerDto, boolean isRegister) {\n \t\t\t.subject(isRegister ? \"eat-enjoy, 회원가입 인증 안내\" : \"eat-enjoy, 메일 인증 안내\")\n \t\t\t.token(mailToken)\n \t\t\t.register(isRegister)\n+\t\t\t.role(Role.OWNER)\n \t\t\t.build());\n \n \t\tmailTokenDao.create(Role.OWNER, ownerDto.getEmail(), mailToken, MAIL_TOKEN_TIMEOUT_SECOND);\n \t}\n \n-\tpublic void validateLoginIdAndPassword(LoginDto loginDto) {\n-\t\tif (!ownerDao.existsByLoginIdAndPassword(loginDto.getLoginId(), encryptable.encrypt(loginDto.getPassword()))) {\n-\t\t\tthrow new UserNotFoundException(\"아이디 또는 비밀번호가 일치하지 않습니다.\");\n+\tprivate void validateEmailAndToken(String email, String emailToken) {\n+\t\tif (!ownerDao.existsByEmail(email)) {\n+\t\t\tthrow new UserNotFoundException(\"사용자를 찾을 수 없습니다.\");\n+\t\t}\n+\n+\t\tif (!emailToken.equals(mailTokenDao.findByRoleAndMail(Role.OWNER, email))) {\n+\t\t\tthrow new MailTokenNotFoundException(\"인증 토큰을 찾을 수 없습니다.\");\n+\t\t}\n+\t}\n+\n+\tprivate void validatePasswords(String loginId, UpdatePasswordDto passwordDto) {\n+\t\tif (!ownerDao.existsByLoginIdAndPassword(loginId, encryptable.encrypt(passwordDto.getOldPassword()))) {\n+\t\t\tthrow new NoMatchedPasswordException(\"기존 비밀번호가 유효하지 않습니다.\");\n+\t\t}\n+\n+\t\tif (passwordDto.getNewPassword().equals(passwordDto.getOldPassword())) {\n+\t\t\tthrow new ConflictPasswordException(\"신규 비밀번호가 기존 비밀번호와 일치합니다.\");\n \t\t}\n \t}\n "
  },
  {
    "sha": "989348584e7e379283e08879e903873b69a0f74a",
    "filename": "src/main/java/com/restaurant/eatenjoy/service/SessionLoginService.java",
    "status": "modified",
    "additions": 43,
    "deletions": 19,
    "changes": 62,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/service/SessionLoginService.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/service/SessionLoginService.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/service/SessionLoginService.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -7,6 +7,7 @@\n import org.springframework.stereotype.Service;\n \n import com.restaurant.eatenjoy.dto.LoginDto;\n+import com.restaurant.eatenjoy.dto.OwnerDto;\n import com.restaurant.eatenjoy.dto.UserDto;\n import com.restaurant.eatenjoy.exception.AuthorizationException;\n import com.restaurant.eatenjoy.exception.DuplicateValueException;\n@@ -18,7 +19,9 @@\n @RequiredArgsConstructor\n public class SessionLoginService implements LoginService {\n \n-\tprivate static final String LOGIN_ID = \"loginId\";\n+\tprivate static final String LOGIN_USER_ID = \"LOGIN_USER_ID\";\n+\n+\tprivate static final String LOGIN_OWNER_ID = \"LOGIN_OWNER_ID\";\n \n \tprivate final HttpSession httpSession;\n \n@@ -28,21 +31,12 @@\n \n \t@Override\n \tpublic void loginUser(LoginDto loginDto) {\n-\t\tlogin(loginDto, userService::validateLoginIdAndPassword);\n+\t\tlogin(LOGIN_USER_ID, loginDto, userService::validateLoginIdAndPassword);\n \t}\n \n \t@Override\n \tpublic void loginOwner(LoginDto loginDto) {\n-\t\tlogin(loginDto, ownerService::validateLoginIdAndPassword);\n-\t}\n-\n-\tprivate void login(LoginDto loginDto, Consumer<LoginDto> validator) {\n-\t\tif (httpSession.getAttribute(LOGIN_ID) != null) {\n-\t\t\tthrow new DuplicateValueException(\"이미 로그인이 되어 있습니다.\");\n-\t\t}\n-\n-\t\tvalidator.accept(loginDto);\n-\t\thttpSession.setAttribute(LOGIN_ID, loginDto.getLoginId());\n+\t\tlogin(LOGIN_OWNER_ID, loginDto, ownerService::validateLoginIdAndPassword);\n \t}\n \n \t@Override\n@@ -51,18 +45,18 @@ public void logout() {\n \t}\n \n \t@Override\n-\tpublic String getLoginId() {\n-\t\tObject loginId = httpSession.getAttribute(LOGIN_ID);\n-\t\tif (loginId == null) {\n-\t\t\tthrow new UnauthorizedException();\n-\t\t}\n+\tpublic String getLoginUserId() {\n+\t\treturn getLoginId(LOGIN_USER_ID);\n+\t}\n \n-\t\treturn (String) loginId;\n+\t@Override\n+\tpublic String getLoginOwnerId() {\n+\t\treturn getLoginId(LOGIN_OWNER_ID);\n \t}\n \n \t@Override\n \tpublic void validateUserAuthority() {\n-\t\tUserDto userDto = userService.findByLoginId(getLoginId());\n+\t\tUserDto userDto = userService.findByLoginId(getLoginUserId());\n \t\tif (userDto == null) {\n \t\t\tthrow new AuthorizationException();\n \t\t}\n@@ -72,4 +66,34 @@ public void validateUserAuthority() {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void validateOwnerAuthority() {\n+\t\tOwnerDto ownerDto = ownerService.findByLoginId(getLoginOwnerId());\n+\t\tif (ownerDto == null) {\n+\t\t\tthrow new AuthorizationException();\n+\t\t}\n+\n+\t\tif (!ownerDto.isCertified()) {\n+\t\t\tthrow new AuthorizationException(\"메일 인증이 되지 않았습니다.\");\n+\t\t}\n+\t}\n+\n+\tprivate void login(String sessionKey, LoginDto loginDto, Consumer<LoginDto> validator) {\n+\t\tif (httpSession.getAttribute(sessionKey) != null) {\n+\t\t\tthrow new DuplicateValueException(\"이미 로그인이 되어 있습니다.\");\n+\t\t}\n+\n+\t\tvalidator.accept(loginDto);\n+\t\thttpSession.setAttribute(sessionKey, loginDto.getLoginId());\n+\t}\n+\n+\tprivate String getLoginId(String sessionKey) {\n+\t\tObject loginId = httpSession.getAttribute(sessionKey);\n+\t\tif (loginId == null) {\n+\t\t\tthrow new UnauthorizedException();\n+\t\t}\n+\n+\t\treturn (String) loginId;\n+\t}\n+\n }"
  },
  {
    "sha": "d7fd41dd6c287e30b8b71e45567f67c0f8a03b2a",
    "filename": "src/main/java/com/restaurant/eatenjoy/service/UserService.java",
    "status": "modified",
    "additions": 44,
    "deletions": 43,
    "changes": 87,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/service/UserService.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/service/UserService.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/service/UserService.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -55,29 +55,6 @@ public void register(UserDto userDto) {\n \t\tsendCertificationMail(userDto, true);\n \t}\n \n-\tprivate void validateLoginIdAndEmail(UserDto userDto) {\n-\t\tif (userDao.existsByLoginId(userDto.getLoginId())) {\n-\t\t\tthrow new DuplicateValueException(\"로그인 아이디가 이미 존재합니다.\");\n-\t\t}\n-\n-\t\tif (userDao.existsByEmail(userDto.getEmail())) {\n-\t\t\tthrow new DuplicateValueException(\"이메일 주소가 이미 존재합니다.\");\n-\t\t}\n-\t}\n-\n-\tprivate void sendCertificationMail(UserDto userDto, boolean isRegister) {\n-\t\tString mailToken = UUID.randomUUID().toString();\n-\t\tmailService.send(MailMessage.builder()\n-\t\t\t.loginId(userDto.getLoginId())\n-\t\t\t.to(userDto.getEmail())\n-\t\t\t.subject(isRegister ? \"eat-enjoy, 회원가입 인증 안내\" : \"eat-enjoy, 메일 인증 안내\")\n-\t\t\t.token(mailToken)\n-\t\t\t.register(isRegister)\n-\t\t\t.build());\n-\n-\t\tmailTokenDao.create(Role.USER, userDto.getEmail(), mailToken, MAIL_TOKEN_TIMEOUT_SECOND);\n-\t}\n-\n \tpublic void validateLoginIdAndPassword(LoginDto loginDto) {\n \t\tif (!userDao.existsByLoginIdAndPassword(loginDto.getLoginId(), encryptable.encrypt(loginDto.getPassword()))) {\n \t\t\tthrow new UserNotFoundException(\"아이디 또는 비밀번호가 일치하지 않습니다.\");\n@@ -90,16 +67,6 @@ public void certifyEmailToken(String email, String emailToken) {\n \t\tuserDao.updateEmailCertified(email);\n \t}\n \n-\tprivate void validateEmailAndToken(String email, String emailToken) {\n-\t\tif (!userDao.existsByEmail(email)) {\n-\t\t\tthrow new UserNotFoundException(\"사용자를 찾을 수 없습니다.\");\n-\t\t}\n-\n-\t\tif (!emailToken.equals(mailTokenDao.findByRoleAndMail(Role.USER, email))) {\n-\t\t\tthrow new MailTokenNotFoundException(\"인증 토큰을 찾을 수 없습니다.\");\n-\t\t}\n-\t}\n-\n \tpublic void resendCertificationMail(String loginId) {\n \t\tUserDto userDto = userDao.findByLoginId(loginId);\n \t\tif (userDto.isCertified()) {\n@@ -131,16 +98,6 @@ public void updatePassword(String loginId, UpdatePasswordDto passwordDto) {\n \t\tuserDao.updatePassword(loginId, encryptable.encrypt(passwordDto.getNewPassword()));\n \t}\n \n-\tprivate void validatePasswords(String loginId, UpdatePasswordDto passwordDto) {\n-\t\tif (!userDao.existsByLoginIdAndPassword(loginId, encryptable.encrypt(passwordDto.getOldPassword()))) {\n-\t\t\tthrow new NoMatchedPasswordException(\"기존 비밀번호가 유효하지 않습니다.\");\n-\t\t}\n-\n-\t\tif (passwordDto.getNewPassword().equals(passwordDto.getOldPassword())) {\n-\t\t\tthrow new ConflictPasswordException(\"신규 비밀번호가 기존 비밀번호와 일치합니다.\");\n-\t\t}\n-\t}\n-\n \tpublic UserInfoDto getUserInfo(String loginId) {\n \t\tUserDto userDto = findByLoginId(loginId);\n \t\treturn UserInfoDto.builder()\n@@ -165,4 +122,48 @@ public void update(String loginId, UpdateUserDto userDto) {\n \t\t}\n \t}\n \n+\tprivate void validateLoginIdAndEmail(UserDto userDto) {\n+\t\tif (userDao.existsByLoginId(userDto.getLoginId())) {\n+\t\t\tthrow new DuplicateValueException(\"로그인 아이디가 이미 존재합니다.\");\n+\t\t}\n+\n+\t\tif (userDao.existsByEmail(userDto.getEmail())) {\n+\t\t\tthrow new DuplicateValueException(\"이메일 주소가 이미 존재합니다.\");\n+\t\t}\n+\t}\n+\n+\tprivate void sendCertificationMail(UserDto userDto, boolean isRegister) {\n+\t\tString mailToken = UUID.randomUUID().toString();\n+\t\tmailService.send(MailMessage.builder()\n+\t\t\t.loginId(userDto.getLoginId())\n+\t\t\t.to(userDto.getEmail())\n+\t\t\t.subject(isRegister ? \"eat-enjoy, 회원가입 인증 안내\" : \"eat-enjoy, 메일 인증 안내\")\n+\t\t\t.token(mailToken)\n+\t\t\t.register(isRegister)\n+\t\t\t.role(Role.USER)\n+\t\t\t.build());\n+\n+\t\tmailTokenDao.create(Role.USER, userDto.getEmail(), mailToken, MAIL_TOKEN_TIMEOUT_SECOND);\n+\t}\n+\n+\tprivate void validateEmailAndToken(String email, String emailToken) {\n+\t\tif (!userDao.existsByEmail(email)) {\n+\t\t\tthrow new UserNotFoundException(\"사용자를 찾을 수 없습니다.\");\n+\t\t}\n+\n+\t\tif (!emailToken.equals(mailTokenDao.findByRoleAndMail(Role.USER, email))) {\n+\t\t\tthrow new MailTokenNotFoundException(\"인증 토큰을 찾을 수 없습니다.\");\n+\t\t}\n+\t}\n+\n+\tprivate void validatePasswords(String loginId, UpdatePasswordDto passwordDto) {\n+\t\tif (!userDao.existsByLoginIdAndPassword(loginId, encryptable.encrypt(passwordDto.getOldPassword()))) {\n+\t\t\tthrow new NoMatchedPasswordException(\"기존 비밀번호가 유효하지 않습니다.\");\n+\t\t}\n+\n+\t\tif (passwordDto.getNewPassword().equals(passwordDto.getOldPassword())) {\n+\t\t\tthrow new ConflictPasswordException(\"신규 비밀번호가 기존 비밀번호와 일치합니다.\");\n+\t\t}\n+\t}\n+\n }"
  },
  {
    "sha": "39a0c424db73a2142eec8fdc14d94fce071e1463",
    "filename": "src/main/java/com/restaurant/eatenjoy/util/Role.java",
    "status": "modified",
    "additions": 18,
    "deletions": 1,
    "changes": 19,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/Role.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/Role.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/util/Role.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -1,5 +1,22 @@\n package com.restaurant.eatenjoy.util;\n \n+import java.util.function.Consumer;\n+\n+import com.restaurant.eatenjoy.service.LoginService;\n+\n public enum Role {\n-\tUSER, OWNER\n+\n+\tUSER(LoginService::validateUserAuthority),\n+\tOWNER(LoginService::validateOwnerAuthority);\n+\n+\tprivate final Consumer<LoginService> validator;\n+\n+\tRole(Consumer<LoginService> validator) {\n+\t\tthis.validator = validator;\n+\t}\n+\n+\tpublic void validate(LoginService loginService) {\n+\t\tvalidator.accept(loginService);\n+\t}\n+\n }"
  },
  {
    "sha": "25d2ff42ae95c31fcdba3dead06e79adec50b765",
    "filename": "src/main/java/com/restaurant/eatenjoy/util/interceptor/AuthorityInterceptor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 5,
    "changes": 6,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/interceptor/AuthorityInterceptor.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/interceptor/AuthorityInterceptor.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/util/interceptor/AuthorityInterceptor.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -29,11 +29,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n \t\t\treturn true;\n \t\t}\n \n-\t\tswitch (authority.value()) {\n-\t\t\tcase USER:\n-\t\t\t\tloginService.validateUserAuthority();\n-\t\t\t\tbreak;\n-\t\t}\n+\t\tauthority.value().validate(loginService);\n \n \t\treturn true;\n \t}"
  },
  {
    "sha": "89680eb010e53f21b2c27c4d8d8779ad748e0f6b",
    "filename": "src/main/java/com/restaurant/eatenjoy/util/mail/HtmlMailService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/mail/HtmlMailService.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/mail/HtmlMailService.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/util/mail/HtmlMailService.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -8,6 +8,7 @@\n import org.springframework.stereotype.Component;\n \n import com.restaurant.eatenjoy.exception.MailSendFailedException;\n+import com.restaurant.eatenjoy.util.Role;\n \n import lombok.RequiredArgsConstructor;\n \n@@ -27,6 +28,7 @@ public void send(MailMessage mailMessage) {\n \t\t\tmimeMessageHelper.setTo(mailMessage.getTo());\n \t\t\tmimeMessageHelper.setSubject(mailMessage.getSubject());\n \t\t\tmimeMessageHelper.setText(HTML_CONTENT.replace(\"LOGIN_ID\", mailMessage.getLoginId())\n+\t\t\t\t.replace(\"ROLE\", mailMessage.getRole() == Role.USER ? \"users\" : \"owners\")\n \t\t\t\t.replace(\"EMAIL\", mailMessage.getTo()).replace(\"TOKEN\", mailMessage.getToken())\n \t\t\t\t.replace(\"CONTENT\",\n \t\t\t\t\tmailMessage.isRegister() ? \"<b>eat-enjoy</b>에 가입해 주셔서 진심으로 감사드립니다.<br />\" : \"\"), true);\n@@ -48,7 +50,7 @@ private static String initializeHtmlContent() {\n \t\t\t+ \"\t\t아래 <b style=\\\"color: #02b875\\\">'메일 인증'</b> 버튼을 클릭하여 인증을 완료해 주세요.<br />\"\n \t\t\t+ \"\t\t감사합니다.</p>\"\n \t\t\t+ \"\t<a style=\\\"color: #FFF; text-decoration: none; text-align: center;\\\"\"\n-\t\t\t+ \"\thref=\\\"http://localhost:8080/api/users/check-mail-token?email=EMAIL&token=TOKEN\\\" target=\\\"_blank\\\">\"\n+\t\t\t+ \"\thref=\\\"http://localhost:8080/api/ROLE/check-mail-token?email=EMAIL&token=TOKEN\\\" target=\\\"_blank\\\">\"\n \t\t\t+ \"\t\t<p style=\\\"display: inline-block; width: 210px; height: 45px; margin: 30px 5px 40px; background: #02b875; line-height: 45px; vertical-align: middle; font-size: 16px;\\\">메일 인증</p></a>\"\n \t\t\t+ \"\t<div style=\\\"border-top: 1px solid #DDD; padding: 5px;\\\"></div>\\n</div>\\n</body>\\n</html>\";\n \t}"
  },
  {
    "sha": "a6e46948799969c2951b1edf5b8acbeacca409bd",
    "filename": "src/main/java/com/restaurant/eatenjoy/util/mail/MailMessage.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/mail/MailMessage.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/mail/MailMessage.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/util/mail/MailMessage.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -1,5 +1,7 @@\n package com.restaurant.eatenjoy.util.mail;\n \n+import com.restaurant.eatenjoy.util.Role;\n+\n import lombok.Builder;\n import lombok.Getter;\n \n@@ -19,4 +21,6 @@\n \n \tprivate final boolean register;\n \n+\tprivate final Role role;\n+\n }"
  },
  {
    "sha": "96b666868d5e4843207deafc67f7ffaf92434477",
    "filename": "src/main/java/com/restaurant/eatenjoy/util/resolver/LoginOwnerIdArgumentResolver.java",
    "status": "renamed",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/resolver/LoginOwnerIdArgumentResolver.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/resolver/LoginOwnerIdArgumentResolver.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/util/resolver/LoginOwnerIdArgumentResolver.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -7,26 +7,26 @@\n import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n import org.springframework.web.method.support.ModelAndViewContainer;\n \n-import com.restaurant.eatenjoy.annotation.CurrentLoginId;\n+import com.restaurant.eatenjoy.annotation.LoginOwnerId;\n import com.restaurant.eatenjoy.service.LoginService;\n \n import lombok.RequiredArgsConstructor;\n \n @Component\n @RequiredArgsConstructor\n-public class CurrentLoginIdArgumentResolver implements HandlerMethodArgumentResolver {\n+public class LoginOwnerIdArgumentResolver implements HandlerMethodArgumentResolver {\n \n \tprivate final LoginService loginService;\n \n \t@Override\n \tpublic boolean supportsParameter(MethodParameter parameter) {\n-\t\treturn parameter.hasParameterAnnotation(CurrentLoginId.class);\n+\t\treturn parameter.hasParameterAnnotation(LoginOwnerId.class);\n \t}\n \n \t@Override\n \tpublic Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,\n \t\t\tNativeWebRequest webRequest, WebDataBinderFactory binderFactory) {\n-\t\treturn loginService.getLoginId();\n+\t\treturn loginService.getLoginOwnerId();\n \t}\n \n }",
    "previous_filename": "src/main/java/com/restaurant/eatenjoy/util/resolver/CurrentLoginIdArgumentResolver.java"
  },
  {
    "sha": "2eeeebf25835c857ee1b371f645891d212c43267",
    "filename": "src/main/java/com/restaurant/eatenjoy/util/resolver/LoginUserIdArgumentResolver.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/resolver/LoginUserIdArgumentResolver.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/java/com/restaurant/eatenjoy/util/resolver/LoginUserIdArgumentResolver.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/java/com/restaurant/eatenjoy/util/resolver/LoginUserIdArgumentResolver.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -0,0 +1,32 @@\n+package com.restaurant.eatenjoy.util.resolver;\n+\n+import org.springframework.core.MethodParameter;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.bind.support.WebDataBinderFactory;\n+import org.springframework.web.context.request.NativeWebRequest;\n+import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n+import org.springframework.web.method.support.ModelAndViewContainer;\n+\n+import com.restaurant.eatenjoy.annotation.LoginUserId;\n+import com.restaurant.eatenjoy.service.LoginService;\n+\n+import lombok.RequiredArgsConstructor;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class LoginUserIdArgumentResolver implements HandlerMethodArgumentResolver {\n+\n+\tprivate final LoginService loginService;\n+\n+\t@Override\n+\tpublic boolean supportsParameter(MethodParameter parameter) {\n+\t\treturn parameter.hasParameterAnnotation(LoginUserId.class);\n+\t}\n+\n+\t@Override\n+\tpublic Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,\n+\t\t\tNativeWebRequest webRequest, WebDataBinderFactory binderFactory) {\n+\t\treturn loginService.getLoginUserId();\n+\t}\n+\n+}"
  },
  {
    "sha": "a45456d8eb3ea6c25995b7d082a109d9ccbc0d0a",
    "filename": "src/main/resources/mapper/OwnerMapper.xml",
    "status": "modified",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/resources/mapper/OwnerMapper.xml",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/main/resources/mapper/OwnerMapper.xml",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/main/resources/mapper/OwnerMapper.xml?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -25,4 +25,41 @@\n                        WHERE login_id = #{loginId}\n                          AND password = #{password})\n     </select>\n+\n+    <update id=\"updateEmailCertified\" parameterType=\"string\">\n+        UPDATE owner\n+           SET certified = 1\n+             , update_at = now()\n+         WHERE email = #{email}\n+    </update>\n+\n+    <select id=\"findByLoginId\" parameterType=\"string\" resultType=\"OwnerDto\">\n+        SELECT id\n+             , login_id AS loginId\n+             , email\n+             , certified\n+          FROM owner\n+         WHERE login_id = #{loginId}\n+    </select>\n+\n+    <delete id=\"deleteByLoginId\" parameterType=\"string\">\n+        DELETE\n+          FROM owner\n+         WHERE login_id = #{login_id}\n+    </delete>\n+\n+    <update id=\"updatePassword\">\n+        UPDATE owner\n+           SET password = #{password}\n+             , update_at = now()\n+         WHERE login_id = #{loginId}\n+    </update>\n+\n+    <update id=\"updateMailByLoginId\" parameterType=\"OwnerDto\">\n+        UPDATE owner\n+           SET certified = CASE WHEN email = #{email} THEN certified ELSE 0 END\n+             , email = #{email}\n+             , update_at = now()\n+         WHERE login_id = #{loginId}\n+    </update>\n </mapper>\n\\ No newline at end of file"
  },
  {
    "sha": "8486be2f642b043c2a82be1bf338e34664e82701",
    "filename": "src/test/java/com/restaurant/eatenjoy/service/OwnerServiceTest.java",
    "status": "modified",
    "additions": 199,
    "deletions": 3,
    "changes": 202,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/test/java/com/restaurant/eatenjoy/service/OwnerServiceTest.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/test/java/com/restaurant/eatenjoy/service/OwnerServiceTest.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/test/java/com/restaurant/eatenjoy/service/OwnerServiceTest.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -1,10 +1,8 @@\n package com.restaurant.eatenjoy.service;\n \n import static org.assertj.core.api.Assertions.*;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.ArgumentMatchers.*;\n import static org.mockito.BDDMockito.*;\n-import static org.mockito.Mockito.times;\n \n import java.time.Duration;\n \n@@ -18,8 +16,16 @@\n \n import com.restaurant.eatenjoy.dao.MailTokenDao;\n import com.restaurant.eatenjoy.dao.OwnerDao;\n+import com.restaurant.eatenjoy.dto.LoginDto;\n+import com.restaurant.eatenjoy.dto.MailDto;\n import com.restaurant.eatenjoy.dto.OwnerDto;\n+import com.restaurant.eatenjoy.dto.UpdatePasswordDto;\n+import com.restaurant.eatenjoy.exception.AlreadyCertifiedException;\n+import com.restaurant.eatenjoy.exception.ConflictPasswordException;\n import com.restaurant.eatenjoy.exception.DuplicateValueException;\n+import com.restaurant.eatenjoy.exception.MailTokenNotFoundException;\n+import com.restaurant.eatenjoy.exception.NoMatchedPasswordException;\n+import com.restaurant.eatenjoy.exception.UserNotFoundException;\n import com.restaurant.eatenjoy.util.Role;\n import com.restaurant.eatenjoy.util.encrypt.Encryptable;\n import com.restaurant.eatenjoy.util.mail.MailService;\n@@ -87,4 +93,194 @@ void successToRegisterAndSendMail() {\n \t\tthen(mailTokenDao).should(times(1)).create(eq(Role.OWNER), eq(TEST_MAIL), any(), eq(Duration.ofSeconds(86400)));\n \t}\n \n+\t@Test\n+\t@DisplayName(\"로그인 정보로 사용자를 찾지 못하면 UserNotFoundException 예외가 발생한다.\")\n+\tvoid failToLoginUserNotFound() {\n+\t\tgiven(ownerDao.existsByLoginIdAndPassword(eq(\"test\"), any())).willReturn(false);\n+\n+\t\tassertThatThrownBy(() -> ownerService.validateLoginIdAndPassword(LoginDto.builder()\n+\t\t\t.loginId(\"test\")\n+\t\t\t.password(\"1111\")\n+\t\t\t.build())).isInstanceOf(UserNotFoundException.class);\n+\n+\t\tthen(ownerDao).should(times(1)).existsByLoginIdAndPassword(eq(\"test\"), any());\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"로그인 정보로 사용자가 존재하면 정상이다.\")\n+\tvoid normalToLoginUserFound() {\n+\t\tgiven(ownerDao.existsByLoginIdAndPassword(eq(\"test\"), any())).willReturn(true);\n+\n+\t\townerService.validateLoginIdAndPassword(LoginDto.builder()\n+\t\t\t.loginId(\"test\")\n+\t\t\t.password(\"1234\")\n+\t\t\t.build());\n+\n+\t\tthen(ownerDao).should(times(1)).existsByLoginIdAndPassword(eq(\"test\"), any());\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"메일로 사용자를 찾을 수 없으면 메일 인증에 실패한다.\")\n+\tvoid failToCertifyEmailTokenUserNotFound() {\n+\t\tgiven(ownerDao.existsByEmail(TEST_MAIL)).willReturn(false);\n+\t\tassertThatThrownBy(() -> ownerService.certifyEmailToken(TEST_MAIL, \"1234\"))\n+\t\t\t.isInstanceOf(UserNotFoundException.class);\n+\t\tthen(ownerDao).should(times(1)).existsByEmail(TEST_MAIL);\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"인증 토큰이 일치하지 않으면 메일 인증에 실패한다.\")\n+\tvoid failToCertifyEmailTokenNotMatch() {\n+\t\tgiven(ownerDao.existsByEmail(TEST_MAIL)).willReturn(true);\n+\t\tgiven(mailTokenDao.findByRoleAndMail(eq(Role.OWNER), eq(TEST_MAIL))).willReturn(\"1111\");\n+\n+\t\tassertThatThrownBy(() -> ownerService.certifyEmailToken(TEST_MAIL, \"1234\"))\n+\t\t\t.isInstanceOf(MailTokenNotFoundException.class);\n+\n+\t\tthen(ownerDao).should(times(1)).existsByEmail(TEST_MAIL);\n+\t\tthen(mailTokenDao).should(times(1)).findByRoleAndMail(eq(Role.OWNER), eq(TEST_MAIL));\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"메일 인증에 성공한다.\")\n+\tvoid successToCertifyEmailToken() {\n+\t\tgiven(ownerDao.existsByEmail(TEST_MAIL)).willReturn(true);\n+\t\tgiven(mailTokenDao.findByRoleAndMail(eq(Role.OWNER), eq(TEST_MAIL))).willReturn(\"1234\");\n+\n+\t\townerService.certifyEmailToken(TEST_MAIL, \"1234\");\n+\n+\t\tthen(ownerDao).should(times(1)).existsByEmail(TEST_MAIL);\n+\t\tthen(mailTokenDao).should(times(1)).findByRoleAndMail(eq(Role.OWNER), eq(TEST_MAIL));\n+\t\tthen(ownerDao).should(times(1)).updateEmailCertified(TEST_MAIL);\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"인증을 완료하면 인증 메일을 재전송할 수 없다.\")\n+\tvoid failToResendMailCertified() {\n+\t\townerDto = OwnerDto.builder()\n+\t\t\t.loginId(\"test\")\n+\t\t\t.certified(true)\n+\t\t\t.build();\n+\n+\t\tgiven(ownerDao.findByLoginId(\"test\")).willReturn(ownerDto);\n+\n+\t\tassertThatThrownBy(() -> ownerService.resendCertificationMail(\"test\"))\n+\t\t\t.isInstanceOf(AlreadyCertifiedException.class);\n+\n+\t\tthen(ownerDao).should(times(1)).findByLoginId(\"test\");\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"인증 메일을 재전송한다.\")\n+\tvoid resendCertificationMail() {\n+\t\townerDto = OwnerDto.builder()\n+\t\t\t.loginId(\"test\")\n+\t\t\t.email(TEST_MAIL)\n+\t\t\t.certified(false)\n+\t\t\t.build();\n+\n+\t\tgiven(ownerDao.findByLoginId(\"test\")).willReturn(ownerDto);\n+\n+\t\townerService.resendCertificationMail(\"test\");\n+\n+\t\tthen(mailService).should(times(1)).send(any());\n+\t\tthen(mailTokenDao).should(times(1)).create(eq(Role.OWNER), eq(TEST_MAIL), any(), eq(Duration.ofSeconds(86400)));\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"비밀번호가 일치하지 않으면 회원탈퇴에 실패한다.\")\n+\tvoid failToMemberWithdrawalIfPasswordNotMatch() {\n+\t\tgiven(ownerDao.existsByLoginIdAndPassword(eq(\"test\"), any())).willReturn(false);\n+\t\tassertThatThrownBy(() -> ownerService.delete(\"test\", \"1234\"))\n+\t\t\t.isInstanceOf(NoMatchedPasswordException.class);\n+\t\tthen(ownerDao).should(times(1)).existsByLoginIdAndPassword(eq(\"test\"), any());\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"비밀번호가 일치하면 회원탈퇴에 성공한다.\")\n+\tvoid successToMemberWithdrawal() {\n+\t\tgiven(ownerDao.existsByLoginIdAndPassword(eq(\"test\"), any())).willReturn(true);\n+\t\townerService.delete(\"test\", \"1234\");\n+\t\tthen(ownerDao).should(times(1)).existsByLoginIdAndPassword(eq(\"test\"), any());\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"기존 비밀번호로 유효하지 않으면 비밀번호 업데이트에 실패한다.\")\n+\tvoid failToUpdatePasswordIfOldPasswordInvalid() {\n+\t\tgiven(ownerDao.existsByLoginIdAndPassword(eq(\"test\"), any())).willReturn(false);\n+\n+\t\tassertThatThrownBy(() -> ownerService.updatePassword(\"test\", UpdatePasswordDto.builder()\n+\t\t\t.oldPassword(\"1234\")\n+\t\t\t.newPassword(\"5678\")\n+\t\t\t.build()))\n+\t\t\t.isInstanceOf(NoMatchedPasswordException.class);\n+\n+\t\tthen(ownerDao).should(times(1)).existsByLoginIdAndPassword(eq(\"test\"), any());\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"신규 비밀번호가 기존 비밀번호와 일치할 경우 비밀번호 업데이트에 실패한다.\")\n+\tvoid failToUpdatePasswordIfNewPasswordEqualsOldPassword() {\n+\t\tgiven(ownerDao.existsByLoginIdAndPassword(eq(\"test\"), any())).willReturn(true);\n+\n+\t\tassertThatThrownBy(() -> ownerService.updatePassword(\"test\", UpdatePasswordDto.builder()\n+\t\t\t.oldPassword(\"1234\")\n+\t\t\t.newPassword(\"1234\")\n+\t\t\t.build()))\n+\t\t\t.isInstanceOf(ConflictPasswordException.class);\n+\n+\t\tthen(ownerDao).should(times(1)).existsByLoginIdAndPassword(eq(\"test\"), any());\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"비밀번호 업데이트에 성공한다.\")\n+\tvoid successToUpdatePassword() {\n+\t\tgiven(ownerDao.existsByLoginIdAndPassword(eq(\"test\"), any())).willReturn(true);\n+\n+\t\townerService.updatePassword(\"test\", UpdatePasswordDto.builder()\n+\t\t\t.oldPassword(\"1234\")\n+\t\t\t.newPassword(\"5678\")\n+\t\t\t.build());\n+\n+\t\tthen(ownerDao).should(times(1)).existsByLoginIdAndPassword(eq(\"test\"), any());\n+\t\tthen(ownerDao).should(times(1)).updatePassword(eq(\"test\"), any());\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"메일을 변경하면 인증 메일을 전송한다.\")\n+\tvoid sendCertificationMailIfMailChange() {\n+\t\tString changeMail = \"change@test.com\";\n+\t\tgiven(ownerDao.findByLoginId(\"test\")).willReturn(OwnerDto.builder()\n+\t\t\t.loginId(\"test\")\n+\t\t\t.email(changeMail)\n+\t\t\t.certified(false)\n+\t\t\t.build());\n+\n+\t\townerService.changeMail(\"test\", MailDto.builder()\n+\t\t\t.email(changeMail)\n+\t\t\t.build());\n+\n+\t\tthen(ownerDao).should(times(1)).findByLoginId(\"test\");\n+\t\tthen(mailService).should(times(1)).send(any());\n+\t\tthen(mailTokenDao).should(times(1)).create(eq(Role.OWNER), eq(changeMail), any(), eq(Duration.ofSeconds(86400)));\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"메일이 변경되지 않았으면 메일을 전송하지 않는다.\")\n+\tvoid notSendCertificationMailIfMailNotChange() {\n+\t\tgiven(ownerDao.findByLoginId(\"test\")).willReturn(OwnerDto.builder()\n+\t\t\t.loginId(\"test\")\n+\t\t\t.email(TEST_MAIL)\n+\t\t\t.certified(true)\n+\t\t\t.build());\n+\n+\t\townerService.changeMail(\"test\", MailDto.builder()\n+\t\t\t.email(TEST_MAIL)\n+\t\t\t.build());\n+\n+\t\tthen(ownerDao).should(times(1)).findByLoginId(\"test\");\n+\t\tthen(mailService).should(times(0)).send(any());\n+\t\tthen(mailTokenDao).should(times(0)).create(eq(Role.OWNER), eq(TEST_MAIL), any(), eq(Duration.ofSeconds(86400)));\n+\t}\n+\n }\n\\ No newline at end of file"
  },
  {
    "sha": "a036ae218359615176a01e08107dfc6c9dec468f",
    "filename": "src/test/java/com/restaurant/eatenjoy/service/SessionLoginServiceTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 11,
    "changes": 24,
    "blob_url": "https://github.com/f-lab-edu/eat-enjoy/blob/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/test/java/com/restaurant/eatenjoy/service/SessionLoginServiceTest.java",
    "raw_url": "https://github.com/f-lab-edu/eat-enjoy/raw/a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf/src/test/java/com/restaurant/eatenjoy/service/SessionLoginServiceTest.java",
    "contents_url": "https://api.github.com/repos/f-lab-edu/eat-enjoy/contents/src/test/java/com/restaurant/eatenjoy/service/SessionLoginServiceTest.java?ref=a1b9dcd7b0c3d7cbfdde6b8d72857f96f7964fcf",
    "patch": "@@ -23,6 +23,8 @@\n @ExtendWith(MockitoExtension.class)\n class SessionLoginServiceTest {\n \n+\tprivate static final String LOGIN_USER_ID = \"LOGIN_USER_ID\";\n+\n \t@Mock\n \tprivate UserService userService;\n \n@@ -45,15 +47,15 @@ void setUp() {\n \t@Test\n \t@DisplayName(\"동일한 로그인 아이디 세션이 존재하면 로그인은 실패한다.\")\n \tvoid failToLoginSessionDuplicated() {\n-\t\thttpSession.setAttribute(\"loginId\", loginDto.getLoginId());\n+\t\thttpSession.setAttribute(LOGIN_USER_ID, loginDto.getLoginId());\n \t\tassertThatThrownBy(() -> loginService.loginUser(loginDto)).isInstanceOf(DuplicateValueException.class);\n \t}\n \n \t@Test\n \t@DisplayName(\"사용자 정보에 존재하는 로그인 아이디 & 비밀번호 요청이면 로그인에 성공한다.\")\n \tvoid successToLogin() {\n \t\tloginService.loginUser(loginDto);\n-\t\tassertThat(httpSession.getAttribute(\"loginId\")).isEqualTo(loginDto.getLoginId());\n+\t\tassertThat(httpSession.getAttribute(LOGIN_USER_ID)).isEqualTo(loginDto.getLoginId());\n \t}\n \n \t@Test\n@@ -65,51 +67,51 @@ void successToLogout() {\n \t@Test\n \t@DisplayName(\"사용자를 찾을 수 없으면 사용자 권한 검증에 실패한다.\")\n \tvoid failToUserAuthorityIfUserNotFound() {\n-\t\thttpSession.setAttribute(\"loginId\", loginDto.getLoginId());\n+\t\thttpSession.setAttribute(LOGIN_USER_ID, loginDto.getLoginId());\n \n-\t\tgiven(userService.findByLoginId(loginService.getLoginId())).willReturn(null);\n+\t\tgiven(userService.findByLoginId(loginService.getLoginUserId())).willReturn(null);\n \n \t\tassertThatThrownBy(() -> loginService.validateUserAuthority())\n \t\t\t.isInstanceOf(AuthorizationException.class)\n \t\t\t.hasMessage(null);\n \n-\t\tthen(userService).should(times(1)).findByLoginId(loginService.getLoginId());\n+\t\tthen(userService).should(times(1)).findByLoginId(loginService.getLoginUserId());\n \t}\n \n \t@Test\n \t@DisplayName(\"메일 인증을 하지 않으면 사용자 권한 검증에 실패한다.\")\n \tvoid failToUserAuthorityIfUncertified() {\n-\t\thttpSession.setAttribute(\"loginId\", loginDto.getLoginId());\n+\t\thttpSession.setAttribute(LOGIN_USER_ID, loginDto.getLoginId());\n \n \t\tUserDto userDto = UserDto.builder()\n \t\t\t.loginId(loginDto.getLoginId())\n \t\t\t.certified(false)\n \t\t\t.build();\n \n-\t\tgiven(userService.findByLoginId(loginService.getLoginId())).willReturn(userDto);\n+\t\tgiven(userService.findByLoginId(loginService.getLoginUserId())).willReturn(userDto);\n \n \t\tassertThatThrownBy(() -> loginService.validateUserAuthority())\n \t\t\t.isInstanceOf(AuthorizationException.class)\n \t\t\t.hasMessage(\"메일 인증이 되지 않았습니다.\");\n \n-\t\tthen(userService).should(times(1)).findByLoginId(loginService.getLoginId());\n+\t\tthen(userService).should(times(1)).findByLoginId(loginService.getLoginUserId());\n \t}\n \n \t@Test\n \t@DisplayName(\"메일을 인증하면 사용자 권한 검증에 성공한다.\")\n \tvoid successToUserAuthority() {\n-\t\thttpSession.setAttribute(\"loginId\", loginDto.getLoginId());\n+\t\thttpSession.setAttribute(LOGIN_USER_ID, loginDto.getLoginId());\n \n \t\tUserDto userDto = UserDto.builder()\n \t\t\t.loginId(loginDto.getLoginId())\n \t\t\t.certified(true)\n \t\t\t.build();\n \n-\t\tgiven(userService.findByLoginId(loginService.getLoginId())).willReturn(userDto);\n+\t\tgiven(userService.findByLoginId(loginService.getLoginUserId())).willReturn(userDto);\n \n \t\tloginService.validateUserAuthority();\n \n-\t\tthen(userService).should(times(1)).findByLoginId(loginService.getLoginId());\n+\t\tthen(userService).should(times(1)).findByLoginId(loginService.getLoginUserId());\n \t}\n \n }\n\\ No newline at end of file"
  }
]
