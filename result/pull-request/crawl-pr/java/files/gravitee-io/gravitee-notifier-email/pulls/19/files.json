[
  {
    "sha": "224c18a6afaefb786e9d1f4bc6622dc63f4712c1",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gravitee-io/gravitee-notifier-email/blob/48732b739cf5dabfecf80dadff103ad1456a3ffe/pom.xml",
    "raw_url": "https://github.com/gravitee-io/gravitee-notifier-email/raw/48732b739cf5dabfecf80dadff103ad1456a3ffe/pom.xml",
    "contents_url": "https://api.github.com/repos/gravitee-io/gravitee-notifier-email/contents/pom.xml?ref=48732b739cf5dabfecf80dadff103ad1456a3ffe",
    "patch": "@@ -34,7 +34,7 @@\n     <name>Gravitee.io APIM - Notifier - Email</name>\n \n     <properties>\n-        <gravitee-notifier-api.version>1.2.1</gravitee-notifier-api.version>\n+        <gravitee-notifier-api.version>1.2.2-SNAPSHOT</gravitee-notifier-api.version>\n         <maven-assembly-plugin.version>2.5.5</maven-assembly-plugin.version>\n         <jsoup.version>1.11.2</jsoup.version>\n "
  },
  {
    "sha": "d226e926a247c92c38212aed1e95609772002215",
    "filename": "src/main/java/io/gravitee/notifier/email/EmailNotifier.java",
    "status": "modified",
    "additions": 14,
    "deletions": 7,
    "changes": 21,
    "blob_url": "https://github.com/gravitee-io/gravitee-notifier-email/blob/48732b739cf5dabfecf80dadff103ad1456a3ffe/src/main/java/io/gravitee/notifier/email/EmailNotifier.java",
    "raw_url": "https://github.com/gravitee-io/gravitee-notifier-email/raw/48732b739cf5dabfecf80dadff103ad1456a3ffe/src/main/java/io/gravitee/notifier/email/EmailNotifier.java",
    "contents_url": "https://api.github.com/repos/gravitee-io/gravitee-notifier-email/contents/src/main/java/io/gravitee/notifier/email/EmailNotifier.java?ref=48732b739cf5dabfecf80dadff103ad1456a3ffe",
    "patch": "@@ -58,20 +58,26 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(EmailNotifier.class);\n \n-    private static final String TYPE = \"email-notifier\";\n+    public static final String TYPE = \"email-notifier\";\n \n     @Value(\"${notifiers.email.templates.path:${gravitee.home}/templates}\")\n     private String templatesPath;\n \n-    private Configuration config = new Configuration(Configuration.VERSION_2_3_28);\n+    private static final Configuration CONFIGURATION;\n+\n+    static {\n+        CONFIGURATION =\n+                new freemarker.template.Configuration(Configuration.VERSION_2_3_28);\n+\n+        CONFIGURATION.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);\n+    }\n \n     public EmailNotifier(EmailNotifierConfiguration configuration) {\n-        super(TYPE, configuration);\n+        super(TYPE, configuration, CONFIGURATION);\n     }\n \n     public void afterPropertiesSet() throws IOException {\n-        config.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);\n-        config.setTemplateLoader(new FileTemplateLoader(new File(URLDecoder.decode(templatesPath, \"UTF-8\"))));\n+        CONFIGURATION.setTemplateLoader(new FileTemplateLoader(new File(URLDecoder.decode(templatesPath, \"UTF-8\"))));\n     }\n \n     @Override\n@@ -97,8 +103,8 @@ public void afterPropertiesSet() throws IOException {\n                     .setPort(configuration.getPort())\n                     .setTrustAll(configuration.isSslTrustAll());\n \n-            if (configuration.getUsername() != null && ! configuration.getUsername().isEmpty() &&\n-                    configuration.getPassword() != null && ! configuration.getPassword().isEmpty()) {\n+            if (configuration.getUsername() != null && !configuration.getUsername().isEmpty() &&\n+                    configuration.getPassword() != null && !configuration.getPassword().isEmpty()) {\n                 mailConfig.setUsername(configuration.getUsername());\n                 mailConfig.setPassword(configuration.getPassword());\n             } else {\n@@ -185,6 +191,7 @@ private String getContentTypeByFileName(final String fileName) {\n \n     /**\n      * Extract the MIME type from a base64 string\n+     *\n      * @param encoded Base64 string\n      * @return MIME type string\n      */"
  },
  {
    "sha": "13b072efc3de7605814e506fdd1e7fe2c94f83df",
    "filename": "src/test/java/io/gravitee/notifier/email/EmailNotifierTest.java",
    "status": "modified",
    "additions": 12,
    "deletions": 8,
    "changes": 20,
    "blob_url": "https://github.com/gravitee-io/gravitee-notifier-email/blob/48732b739cf5dabfecf80dadff103ad1456a3ffe/src/test/java/io/gravitee/notifier/email/EmailNotifierTest.java",
    "raw_url": "https://github.com/gravitee-io/gravitee-notifier-email/raw/48732b739cf5dabfecf80dadff103ad1456a3ffe/src/test/java/io/gravitee/notifier/email/EmailNotifierTest.java",
    "contents_url": "https://api.github.com/repos/gravitee-io/gravitee-notifier-email/contents/src/test/java/io/gravitee/notifier/email/EmailNotifierTest.java?ref=48732b739cf5dabfecf80dadff103ad1456a3ffe",
    "patch": "@@ -23,10 +23,8 @@\n import io.vertx.ext.mail.MailClient;\n import io.vertx.ext.mail.MailMessage;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.powermock.core.classloader.annotations.PowerMockIgnore;\n import org.powermock.core.classloader.annotations.PrepareForTest;\n@@ -43,7 +41,6 @@\n import static org.powermock.api.mockito.PowerMockito.mockStatic;\n import static org.springframework.test.util.ReflectionTestUtils.setField;\n \n-@Ignore\n @RunWith(PowerMockRunner.class)\n @PrepareForTest({MailClient.class, Vertx.class})\n @PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\"})\n@@ -81,24 +78,26 @@ public void init() throws IOException {\n \n     @Test\n     public void shouldSend() throws Exception {\n-        when(notification.getType()).thenReturn(\"email\");\n+        when(notification.getType()).thenReturn(EmailNotifier.TYPE);\n         when(mapper.readValue(nullable(String.class), eq(EmailNotifierConfiguration.class)))\n                 .thenReturn(emailNotifierConfiguration);\n         when(emailNotifierConfiguration.getFrom()).thenReturn(\"from@mail.com\");\n         when(emailNotifierConfiguration.getTo()).thenReturn(\"to@mail.com\");\n-        when(emailNotifierConfiguration.getSubject()).thenReturn(\"subject of email\");\n-        when(emailNotifierConfiguration.getBody()).thenReturn(\"template_sample.html\");\n+        when(emailNotifierConfiguration.getSubject()).thenReturn(\"HC KO at ${timestamp}\");\n+        when(emailNotifierConfiguration.getBody()).thenReturn(\"<#include \\\"template_sample.html\\\">\");\n         when(emailNotifierConfiguration.getHost()).thenReturn(\"smtp.host.fr\");\n         when(emailNotifierConfiguration.getPort()).thenReturn(587);\n         when(emailNotifierConfiguration.getUsername()).thenReturn(\"user\");\n         when(emailNotifierConfiguration.getPassword()).thenReturn(\"password\");\n \n+        parameters.put(\"timestamp\", \"1615620848665\");\n+\n         emailNotifier.send(notification, parameters);\n \n         final MailMessage mailMessage = new MailMessage();\n         mailMessage.setFrom(\"from@mail.com\");\n         mailMessage.setTo(\"to@mail.com\");\n-        mailMessage.setSubject(\"subject of email\");\n+        mailMessage.setSubject(\"HC KO at 1615620848665\");\n         mailMessage.setHtml(\n                 \"<html>\\n\" +\n                 \" <head></head>\\n\" +\n@@ -109,7 +108,12 @@ public void shouldSend() throws Exception {\n                 \" </body>\\n\" +\n                 \"</html>\"\n         );\n-        verify(mailClient).sendMail(eq(mailMessage), any());\n+        verify(mailClient).sendMail(argThat(msg ->\n+                msg.getFrom().equals(mailMessage.getFrom()) &&\n+                        msg.getTo().equals(mailMessage.getTo()) &&\n+                        msg.getSubject().equals(mailMessage.getSubject()) &&\n+                        msg.getHtml().equals(mailMessage.getHtml())\n+        ), any());\n     }\n \n     @Test"
  }
]
