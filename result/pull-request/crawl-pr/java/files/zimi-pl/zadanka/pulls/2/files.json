[
  {
    "sha": "1e630cb5cb527ce2d6d52bf6f0cc271ab40058dc",
    "filename": "PYTANIA.txt",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/zimi-pl/zadanka/blob/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/PYTANIA.txt",
    "raw_url": "https://github.com/zimi-pl/zadanka/raw/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/PYTANIA.txt",
    "contents_url": "https://api.github.com/repos/zimi-pl/zadanka/contents/PYTANIA.txt?ref=cb89cef33ae91df7d4bc7cdb5e0037974be5f27b",
    "patch": "@@ -0,0 +1,11 @@\n+Pytanie o int i Integer\n+boxing i unboxing\n+\n+ elements.removeIf(n->n.contains(\"\"));\n+  elements =  Arrays.asList(splitedS); // nie dział remove\n+  elements = new ArrayList <String>(Arrays.asList(splitedS)); // działa remove\n+         String whitespace = \"good\";\n+ //        ??? czemu nie działa contains\n+ //        elements.removeIf(n->n.contains(\"\"));\n+         elements.remove(\"good\");\n+ //        elements.removeAll(Collections.singleton(\"good\"));f\n\\ No newline at end of file"
  },
  {
    "sha": "627d0bdaca730efd88f290017b5190a9a3423164",
    "filename": "src/main/java/pl/zimi/zadanka/Zad3.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/zimi-pl/zadanka/blob/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/src/main/java/pl/zimi/zadanka/Zad3.java",
    "raw_url": "https://github.com/zimi-pl/zadanka/raw/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/src/main/java/pl/zimi/zadanka/Zad3.java",
    "contents_url": "https://api.github.com/repos/zimi-pl/zadanka/contents/src/main/java/pl/zimi/zadanka/Zad3.java?ref=cb89cef33ae91df7d4bc7cdb5e0037974be5f27b",
    "patch": "@@ -0,0 +1,24 @@\n+package pl.zimi.zadanka;\n+\n+public class Zad3 {\n+    public boolean checkPowerOfTen(Integer inputNumber) {\n+\n+        if (inputNumber.equals(1)) {\n+            return true;\n+        }\n+\n+        Integer tempNumber = inputNumber;\n+\n+        while (tempNumber % 10 == 0) {\n+            tempNumber = tempNumber / 10;\n+\n+            if (tempNumber == 1) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    ;\n+\n+}"
  },
  {
    "sha": "83b9746e71a08b5eea542d5fed68de74cb4c4f8c",
    "filename": "src/main/java/pl/zimi/zadanka/Zad4.java",
    "status": "added",
    "additions": 94,
    "deletions": 0,
    "changes": 94,
    "blob_url": "https://github.com/zimi-pl/zadanka/blob/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/src/main/java/pl/zimi/zadanka/Zad4.java",
    "raw_url": "https://github.com/zimi-pl/zadanka/raw/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/src/main/java/pl/zimi/zadanka/Zad4.java",
    "contents_url": "https://api.github.com/repos/zimi-pl/zadanka/contents/src/main/java/pl/zimi/zadanka/Zad4.java?ref=cb89cef33ae91df7d4bc7cdb5e0037974be5f27b",
    "patch": "@@ -0,0 +1,94 @@\n+package pl.zimi.zadanka;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/*\n+source\n+https://leetcode.com/problems/reverse-words-in-a-string/\n+ */\n+public class Zad4 {\n+    public static String reverseString(String s) {\n+\n+        String[] splitedS = s.split(\" \");\n+        String sReverse = \"\";\n+        boolean flaga = false;\n+        for (int i = splitedS.length - 1; i >= 0; i--) {\n+\n+            if (splitedS[i].length() > 0) {\n+//            if (true) {     //ten zostawia artefakty na koncu linii\n+                if (flaga == true) {\n+                    sReverse += \" \" + splitedS[i];\n+                } else {\n+                    sReverse += splitedS[i];\n+                    flaga = true;\n+                }\n+            }\n+        }\n+        return sReverse;\n+    }\n+\n+    public static String reverseStringPROBLEMY(String s) {\n+        List<String> myAlist = new ArrayList<String>();\n+        myAlist.add(\"Geeks\");\n+        myAlist.add(\"Practice\");\n+        myAlist.add(\"Quiz\");\n+        System.out.println(\"Original ArrayList : \" + myAlist);\n+        myAlist.remove(\"Quiz\");\n+        System.out.println(\"Modified ArrayList : \" + myAlist);\n+\n+\n+        String sReverse = new String();\n+        List<String> elements = new ArrayList<>();\n+        String[] splitedS = s.split(\" \");\n+//        List <String> bonus = new ArrayList<String>(Arrays.asList(splitedS));\n+//        elements.addAll(bonus);\n+        elements = Arrays.asList(splitedS);\n+\n+        String whitespace = \"good\";\n+//        ??? czemu nie działa contains\n+//        elements.removeIf(n->n.contains(\"\"));\n+        elements.remove(\"good\");\n+//        elements.removeAll(Collections.singleton(\"good\"));\n+//\n+        for (String k : elements) {\n+            if (k == \"\") {\n+\n+                System.out.println(\"znalazłem goood \" + k);\n+            }\n+        }\n+        Collections.reverse(elements);\n+        for (String words : elements) {\n+            sReverse += words + \" \";\n+            System.out.println(words);\n+        }\n+//        sReverse =sReverse.substring(0,sReverse.length()-1);\n+//        sReverse = sReverse.trim();\n+        System.out.println(sReverse);\n+\n+        return sReverse;\n+    }\n+\n+    public static String reversechars(String s) {\n+\n+        String sReverse = new String();\n+        sReverse += String.valueOf(' ');\n+        for (int head = 0; head < s.length(); head++) {\n+            sReverse += String.valueOf(s.charAt(s.length() - head - 1));\n+        }\n+        System.out.println(sReverse);\n+        return sReverse;\n+    }\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"main\");\n+        Zad4 klasa = new Zad4();\n+\n+        String reverseString = klasa.reverseString(\"the sky is blue\");\n+        reverseString = klasa.reverseString(\"a good   example\");\n+        reverseString = klasa.reverseString(\"  hello world  \");\n+\n+    }\n+}"
  },
  {
    "sha": "78f228e873e0f9ff1cb255a250123eb85d1abb42",
    "filename": "src/test/java/pl/zimi/zadanka/Zad3Test.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/zimi-pl/zadanka/blob/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/src/test/java/pl/zimi/zadanka/Zad3Test.java",
    "raw_url": "https://github.com/zimi-pl/zadanka/raw/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/src/test/java/pl/zimi/zadanka/Zad3Test.java",
    "contents_url": "https://api.github.com/repos/zimi-pl/zadanka/contents/src/test/java/pl/zimi/zadanka/Zad3Test.java?ref=cb89cef33ae91df7d4bc7cdb5e0037974be5f27b",
    "patch": "@@ -0,0 +1,47 @@\n+package pl.zimi.zadanka;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class Zad3Test {\n+\n+    @Test\n+    void checkOne() {\n+\n+        Zad3 object = new Zad3();\n+\n+\n+        Assertions.assertEquals(true, object.checkPowerOfTen(1));\n+\n+    }\n+\n+    @Test\n+    void check7() {\n+        Zad3 object = new Zad3();\n+        Assertions.assertEquals(false, object.checkPowerOfTen(7));\n+\n+    }\n+\n+    @Test\n+    void check10(){\n+        Zad3 object = new Zad3();\n+                Assertions.assertEquals(true,object.checkPowerOfTen(10));\n+    }\n+    @Test\n+    void check100(){\n+        Zad3 object = new Zad3();\n+        Assertions.assertEquals(true,object.checkPowerOfTen(100));\n+    }\n+    @Test\n+    void check500(){\n+        Zad3 object = new Zad3();\n+        Assertions.assertEquals(false,object.checkPowerOfTen(500));\n+    }\n+    @Test\n+    void checkminus10(){\n+        Zad3 object = new Zad3();\n+        Assertions.assertEquals(false,object.checkPowerOfTen(-100));\n+    }\n+\n+\n+}"
  },
  {
    "sha": "77bc84773ee6a77d640b9642cf09ff1245e0c183",
    "filename": "src/test/java/pl/zimi/zadanka/Zad4Test.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/zimi-pl/zadanka/blob/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/src/test/java/pl/zimi/zadanka/Zad4Test.java",
    "raw_url": "https://github.com/zimi-pl/zadanka/raw/cb89cef33ae91df7d4bc7cdb5e0037974be5f27b/src/test/java/pl/zimi/zadanka/Zad4Test.java",
    "contents_url": "https://api.github.com/repos/zimi-pl/zadanka/contents/src/test/java/pl/zimi/zadanka/Zad4Test.java?ref=cb89cef33ae91df7d4bc7cdb5e0037974be5f27b",
    "patch": "@@ -0,0 +1,28 @@\n+package pl.zimi.zadanka;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class Zad4Test {\n+    @Test\n+    void checkstring() {\n+\n+        Zad4 object = new Zad4();\n+\n+        Assertions.assertEquals(\"blue is sky the\", object.reverseString(\"the sky is blue\"));\n+\n+    }\n+    @Test\n+    void checkspaces() {\n+\n+        Zad4 object = new Zad4();\n+\n+        Assertions.assertEquals(\"example good a\", object.reverseString(\"a good   example\"));\n+\n+    }\n+    @Test\n+    void Helloworld(){\n+        Zad4 object = new Zad4();\n+        Assertions.assertEquals(\"world hello\",object.reverseString(\"  hello world  \"));\n+    }\n+}"
  }
]
