[
  {
    "sha": "9149ae0c8d45f43598bab71a6134d6182d7e0d40",
    "filename": "javascript/src/main/pages/Admin/Admin.js",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/javascript/src/main/pages/Admin/Admin.js",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/javascript/src/main/pages/Admin/Admin.js",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/javascript/src/main/pages/Admin/Admin.js?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -54,6 +54,7 @@ const Admin = () => {\n             <th>Last Name</th>\n             <th>Role</th>\n             <th>Change Role</th>\n+            <th>Google API Search Token</th>\n           </tr>\n         </thead>\n         <tbody>\n@@ -82,6 +83,7 @@ const Admin = () => {\n                       }>{buttonText}</Button>\n                     }\n                   </td>\n+                  <td>{user.apiToken}</td>\n                 </tr>\n               );\n             })"
  },
  {
    "sha": "88888b5b7bdbd6897e382c9e2b7f27963d59a4fc",
    "filename": "javascript/src/main/pages/Profile/Profile.js",
    "status": "modified",
    "additions": 83,
    "deletions": 5,
    "changes": 88,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/javascript/src/main/pages/Profile/Profile.js",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/javascript/src/main/pages/Profile/Profile.js",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/javascript/src/main/pages/Profile/Profile.js?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -1,17 +1,73 @@\n-import React from \"react\";\n+import React, { useState } from \"react\";\n import useSWR from \"swr\";\n import { useAuth0 } from \"@auth0/auth0-react\";\n import { fetchWithToken } from \"main/utils/fetch\";\n-import { Row, Container, Col, Badge } from \"react-bootstrap\";\n-\n+import { Form, Row, Container, Col, Badge, Button } from \"react-bootstrap\";\n import ReactJson from \"react-json-view\";\n+\n const Profile = () => {\n+\n   const { user, getAccessTokenSilently: getToken } = useAuth0();\n   const { name, picture, email } = user;\n   const { data: roleInfo } = useSWR(\n     [\"/api/myRole\", getToken],\n     fetchWithToken\n   );\n+  const [apiToken, setApiToken] = useState(\"\");\n+  const [tokenStatus, setTokenStatus] = useState(\"\");\n+\n+  const addAPIToken = async () => {\n+    const url = `/api/addApiKey`;\n+    \n+        try {\n+          const result =  await fetchWithToken(url, getToken, {\n+            method: 'PUT',\n+            headers: {\n+              'content-type': 'application/json',\n+            }, \n+            body: apiToken\n+          });\n+          console.log(`result=${result}`)\n+          return result;\n+        } catch (err) {\n+          console.log(`err=${err}`)\n+        } \n+  };\n+\n+  const fetchApiToken = async () => {\n+    const url = `/api/apiKey`;\n+    try {\n+        const result =  await fetchWithToken(url, getToken, {\n+            method: \"GET\",\n+            headers: {\n+                \"content-type\": \"application/json\",\n+            },\n+        });\n+        console.log(`result=${JSON.stringify(result)}`)\n+        return result;\n+    } catch (err) {\n+        console.log(`err=${err}`)\n+    }\n+};\n+\n+  const handleOnSubmit = async (e) => {\n+    e.preventDefault();\n+    await addAPIToken(e);\n+    returnApiTokenStatus();\n+  }\n+  \n+  async function returnApiTokenStatus(){\n+    var apiStatus = await fetchApiToken();\n+    var status;\n+    console.log(\"apiStatus =\", apiStatus);\n+    status = \"You do not have a valid API Token associated with your account! (Default will be used)\";\n+    if (apiStatus && apiStatus.hasOwnProperty('token') && apiStatus[\"token\"] !== \"invalid token\")\n+      status = \"Your custom API token is \" + apiStatus[\"token\"];\n+    setTokenStatus(status);\n+  }\n+  \n+\n+  returnApiTokenStatus();\n \n   return (\n     <Container className=\"mb-5\">\n@@ -26,12 +82,34 @@ const Profile = () => {\n         <Col md>\n           <h2>{name}</h2>\n           <p className=\"lead text-muted\">{email}</p>\n-          { roleInfo ?\n-            <Badge variant=\"info\">{roleInfo.role}</Badge>:\n+          {roleInfo ?\n+            <Badge variant=\"info\">{roleInfo.role}</Badge> :\n             <span>Loading role...</span>\n           }\n         </Col>\n       </Row>\n+\n+      <p>{tokenStatus}</p>\n+\n+      <p>\n+      Don't have an API key or want to learn more? <a href=\"https://developers.google.com/custom-search/v1/overview\">Consider clicking here!</a>\n+      </p>\n+\n+      <Form onSubmit={handleOnSubmit}>\n+                <Form.Group as={Row} controlId=\"search\">\n+                    <Form.Label column sm={2}>API Search Token</Form.Label>\n+                    <Col sm={10}>\n+                        <Form.Control type=\"text\" placeholder=\"Enter your API token\" onChange={(e) => setApiToken(\n+                            e.target.value\n+                        )} />\n+                    </Col>\n+                </Form.Group>\n+                <Form.Group as={Row}>\n+                    <Col sm={{ span: 10, offset: 2 }}>\n+                        <Button type=\"submit\">Submit</Button>\n+                    </Col>\n+                </Form.Group>\n+            </Form>\n       <Row className=\"text-left\">\n         <ReactJson src={user} />\n       </Row>"
  },
  {
    "sha": "1205f451778b5a3e49f4527de9d78a82612aad51",
    "filename": "javascript/src/test/pages/Profile/Profile.test.js",
    "status": "modified",
    "additions": 39,
    "deletions": 1,
    "changes": 40,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/javascript/src/test/pages/Profile/Profile.test.js",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/javascript/src/test/pages/Profile/Profile.test.js",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/javascript/src/test/pages/Profile/Profile.test.js?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -1,13 +1,17 @@\n import React from \"react\";\n-import { render } from \"@testing-library/react\";\n+import { render, waitFor } from \"@testing-library/react\";\n import Profile from \"main/pages/Profile/Profile\";\n import { useAuth0 } from \"@auth0/auth0-react\";\n import useSWR from \"swr\";\n+import { fetchWithToken } from \"main/utils/fetch\";\n+import userEvent from \"@testing-library/user-event\";\n jest.mock(\"@auth0/auth0-react\");\n jest.mock(\"swr\");\n+jest.mock(\"main/utils/fetch\");\n \n describe(\"Profile tests\", () => {\n   beforeEach(() => {\n+    jest.clearAllMocks();\n     useAuth0.mockReturnValue({\n       user: {\n         name: \"test user\",\n@@ -35,4 +39,38 @@ describe(\"Profile tests\", () => {\n     const { getByText } =render(<Profile />);\n     expect(getByText(\"Admin\")).toBeInTheDocument();\n   });\n+\n+  test(\"renders when submit button is pressed\", () => {\n+    fetchWithToken.mockResolvedValue([]);\n+    const { getByText } = render(<Profile />);\n+    userEvent.click(getByText(\"Submit\"));\n+    expect(fetchWithToken).toHaveBeenCalled();\n+  });\n+  test(\"when I click submit button, \", () => {\n+    fetchWithToken.mockImplementation(new Error());\n+    const { getByText } = render(<Profile />);\n+    userEvent.click(getByText(\"Submit\"));\n+    expect(fetchWithToken).toHaveBeenCalled();\n+  });\n+  test(\"when I enter a token, the state for token changes\", () => {\n+    const { getByPlaceholderText } = render(<Profile />);\n+    const enterToken = getByPlaceholderText(\"Enter your API token\");\n+    userEvent.type(enterToken, \"github\");\n+    expect(enterToken.value).toBe(\"github\");\n+  });\n+\n+  test(\"when i enter an invalid token, the text displayed should change to default\",  async () => {\n+    fetchWithToken.mockResolvedValue({token: \"invalid token\"});\n+    const { getByText } = render(<Profile />);\n+    await waitFor(() => expect(getByText(\"You do not have a valid API Token associated with your account! (Default will be used)\")).toBeInTheDocument());\n+\n+  });\n+\n+  test(\"when i enter an valid token, the text displayed should change to show the token\",  async () => {\n+    fetchWithToken.mockResolvedValue({token: \"validTokenabc123\"});\n+    const { getByText } = render(<Profile />);\n+    await waitFor(() => expect(getByText(\"Your custom API token is validTokenabc123\")).toBeInTheDocument());\n+\n+  });\n+\n });"
  },
  {
    "sha": "256c6ca7bd73552d05111cc945459726befd6dac",
    "filename": "src/main/java/edu/ucsb/mapache/controllers/RoleController.java",
    "status": "modified",
    "additions": 46,
    "deletions": 1,
    "changes": 47,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/src/main/java/edu/ucsb/mapache/controllers/RoleController.java",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/src/main/java/edu/ucsb/mapache/controllers/RoleController.java",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/src/main/java/edu/ucsb/mapache/controllers/RoleController.java?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -24,6 +24,11 @@\n import org.springframework.web.bind.annotation.RequestHeader;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.PostMapping; \n+\n+import edu.ucsb.mapache.models.SearchParameters;\n+import org.springframework.beans.factory.annotation.Value;\n+import edu.ucsb.mapache.services.GoogleSearchService;\n \n @RestController\n @RequestMapping(\"/api\")\n@@ -39,6 +44,9 @@\n   @Autowired\n   private AuthControllerAdvice authControllerAdvice;\n \n+  @Autowired\n+  private GoogleSearchService googleSearchService;\n+\n   private ObjectMapper mapper = new ObjectMapper();\n \n   private ResponseEntity<String> getUnauthorizedResponse(String roleRequired) throws JsonProcessingException {\n@@ -100,4 +108,41 @@\n     String body = mapper.writeValueAsString(response);\n     return ResponseEntity.ok().body(body);\n   }\n-}\n+\n+  // Added two functions below to modify DB to add API Token field\n+  \n+  @GetMapping(\"/apiKey\")\n+  public ResponseEntity<String> getCustomAPIToken(@RequestHeader(\"Authorization\") String authorization)\n+      throws JsonProcessingException {\n+        AppUser user = authControllerAdvice.getUser(authorization);\n+        String userToken = user.getApiToken();\n+        Map<String, String> response = new HashMap<>();\n+        response.put(\"token\", userToken);\n+        String body = mapper.writeValueAsString(response);\n+        return ResponseEntity.ok().body(body);\n+        \n+  }\n+\n+  //Sets API Token\n+  @PutMapping(value = \"/addApiKey\")\n+  public ResponseEntity<String> setCustomApiToken(@RequestHeader(\"Authorization\") String authorization, \n+  @RequestBody @Valid String token) \n+      throws JsonProcessingException {\n+        AppUser user = authControllerAdvice.getUser(authorization);\n+        SearchParameters sp = new SearchParameters();\n+        sp.setQuery(\"empty\");\n+        sp.setPage(1);\n+        \n+        String i = googleSearchService.getJSON(sp, token);\n+        if (i == \"{\\\"error\\\": \\\"401: Unauthorized\\\"}\") {\n+          user.clearApiToken();\n+          appUserRepository.save(user);\n+          return new ResponseEntity<> (HttpStatus.NOT_ACCEPTABLE);\n+        }\n+        else {\n+          user.setApiToken(token);\n+          appUserRepository.save(user);\n+        }\n+        return new ResponseEntity<> (HttpStatus.NO_CONTENT);\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "33d0fa7335013c5ddce9f9666d416776ac9b4ea8",
    "filename": "src/main/java/edu/ucsb/mapache/controllers/SearchController.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/src/main/java/edu/ucsb/mapache/controllers/SearchController.java",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/src/main/java/edu/ucsb/mapache/controllers/SearchController.java",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/src/main/java/edu/ucsb/mapache/controllers/SearchController.java?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -95,14 +95,16 @@\n             you.setSearchRemain(100);\n             you.setTime(currentTime);\n         }\n-    \n+        if (you.getApiToken()!=\"invalid token\")\n+            apiToken = you.getApiToken();\n+\n         if(you.getSearchRemain()<=0){\n             return searchQuotaExceeded();\n         }\n         you.setTime(currentTime);\n         you.decrSearchRemain();\n         appUserRepository.save(you);\n-\n+        \n         SearchParameters sp = new SearchParameters();\n         sp.setQuery(searchQuery);\n         sp.setPage(1);\n@@ -141,4 +143,4 @@\n \n         return ResponseEntity.ok().body(body);\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "e084ceaa930ce07bf84d7d9bf67f49824549b9d5",
    "filename": "src/main/java/edu/ucsb/mapache/entities/AppUser.java",
    "status": "modified",
    "additions": 22,
    "deletions": 1,
    "changes": 23,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/src/main/java/edu/ucsb/mapache/entities/AppUser.java",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/src/main/java/edu/ucsb/mapache/entities/AppUser.java",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/src/main/java/edu/ucsb/mapache/entities/AppUser.java?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -23,6 +23,10 @@\n   private int searchRemain=100;\n   @Column(nullable = false)\n   private long time;\n+  // Added below instance variable to associate custom API token w/ an AppUser\n+  //default is set to \"invalid token\"\n+  @Column(nullable = true)\n+  private String apiToken = \"invalid token\";\n \n   public AppUser() {\n     time=0;\n@@ -89,9 +93,26 @@ public void setTime(long time){\n   }\n   @Override\n   public String toString() {\n-    return String.format(\"AppUser[ id=%d, email=%s, firstName=%s, lastName=%s, searchRemain=%d]\", id, email, firstName, lastName, searchRemain);\n+    return String.format(\"AppUser[ id=%d, email=%s, firstName=%s, lastName=%s, searchRemain=%d, customAPIToken=%s]\", id, email, firstName, lastName, searchRemain, apiToken);\n   }\n \n+  public String getApiToken() {\n+    return this.apiToken;\n+  }\n+\n+  public void setApiToken(String apiToken) {\n+    this.apiToken = apiToken;\n+  }\n+\n+  public void clearApiToken() {\n+    this.apiToken = \"invalid token\";\n+  }\n+\n+  public AppUser apiToken(String apiToken) {\n+    this.apiToken = apiToken;\n+    return this;\n+  }\n+  \n   @Override\n   public boolean equals(Object o) {\n     if (this == o)"
  },
  {
    "sha": "4dfbebf7d31a5acd023ded899118621f514a76b5",
    "filename": "src/main/java/edu/ucsb/mapache/services/SearchSupportService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/src/main/java/edu/ucsb/mapache/services/SearchSupportService.java",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/src/main/java/edu/ucsb/mapache/services/SearchSupportService.java",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/src/main/java/edu/ucsb/mapache/services/SearchSupportService.java?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -67,6 +67,7 @@ public AppUser getCurrentUser(String authorization){\n             String lastName = (String) customClaims.get(\"family_name\");\n             you.setFirstName(firstName);\n             you.setLastName(lastName);\n+                \n             appUserRepository.save(you);\n         }else{\n             you=users.get(0);"
  },
  {
    "sha": "98e2afad7d0df08e316fb17f038315e461565f35",
    "filename": "src/test/java/edu/ucsb/mapache/controllers/RoleControllerTests.java",
    "status": "modified",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/src/test/java/edu/ucsb/mapache/controllers/RoleControllerTests.java",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/src/test/java/edu/ucsb/mapache/controllers/RoleControllerTests.java",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/src/test/java/edu/ucsb/mapache/controllers/RoleControllerTests.java?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -7,6 +7,8 @@\n import edu.ucsb.mapache.entities.AppUser;\n import edu.ucsb.mapache.repositories.AdminRepository;\n import edu.ucsb.mapache.repositories.AppUserRepository;\n+import edu.ucsb.mapache.services.GoogleSearchService;\n+\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n@@ -19,6 +21,8 @@\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n import java.util.ArrayList;\n@@ -45,6 +49,8 @@\n   AdminRepository mockAdminRepository;\n   @MockBean\n   AuthControllerAdvice mockAuthControllerAdvice;\n+  @MockBean\n+  GoogleSearchService mockGoogleSearchService;\n \n   @Test\n   public void test_get_users_unauthorizedIfNotAdmin() throws Exception {\n@@ -151,4 +157,53 @@ public void test_myRole_returnsRole() throws Exception {\n     assertEquals(responseMap.get(\"role\"), \"Unique role\");\n   }\n \n+  @Test\n+  public void test_apiKey() throws Exception {\n+    AppUser myUser = new AppUser();\n+    when(mockAuthControllerAdvice.getUser(anyString())).thenReturn(myUser);\n+    MvcResult response = mockMvc.perform(get(\"/api/apiKey\").header(HttpHeaders.AUTHORIZATION, exampleAuthToken))\n+        .andExpect(status().isOk()).andReturn();\n+    String responseString = response.getResponse().getContentAsString();\n+    HashMap<String, String> responseMap = mapper.readValue(responseString,\n+        new TypeReference<HashMap<String, String>>() {\n+        });\n+    assertEquals(responseMap.get(\"token\"), \"invalid token\");\n+  }\n+\n+  @Test\n+  public void test_addApiKey_success() throws Exception {\n+    when(mockGoogleSearchService.getJSON( any(), anyString()  )).thenReturn(\"\");\n+    \n+    AppUser myUser = new AppUser();\n+    when(mockAuthControllerAdvice.getUser(anyString())).thenReturn(myUser);\n+\n+    String sampleAPIToken = \"sampleTokenABCD1234\"; \n+    \n+    mockMvc.perform(put(\"/api/addApiKey\").contentType(\"application/json\").with(csrf()).contentType(MediaType.APPLICATION_JSON)\n+            .characterEncoding(\"utf-8\").content(sampleAPIToken).header(HttpHeaders.AUTHORIZATION, exampleAuthToken))\n+        .andExpect(status().isNoContent());\n+\n+    myUser.setApiToken(sampleAPIToken);\n+    verify(mockAppUserRepository, times(1)).save(myUser);\n+  }\n+\n+  @Test\n+  public void test_addApiKey_failure() throws Exception {\n+    String errorString = \"{\\\"error\\\": \\\"401: Unauthorized\\\"}\";\n+    when(mockGoogleSearchService.getJSON( any(), anyString()  )).thenReturn(errorString);\n+    AppUser myUser = new AppUser();\n+    when(mockAuthControllerAdvice.getUser(anyString())).thenReturn(myUser);\n+    String sampleAPIToken = \"invalid token\"; \n+\n+    mockMvc.perform(put(\"/api/addApiKey\").contentType(\"application/json\").with(csrf()).contentType(MediaType.APPLICATION_JSON)\n+            .characterEncoding(\"utf-8\").content(sampleAPIToken).header(HttpHeaders.AUTHORIZATION, exampleAuthToken))\n+        .andExpect(status().is(406));\n+\n+    myUser.setApiToken(sampleAPIToken);\n+    verify(mockAppUserRepository, times(1)).save(myUser);\n+\n+  }\n+\n+\n+\n }"
  },
  {
    "sha": "691b435fcc59d323187bcbc50e433a66c71f7a00",
    "filename": "src/test/java/edu/ucsb/mapache/controllers/SearchControllerTests.java",
    "status": "modified",
    "additions": 20,
    "deletions": 2,
    "changes": 22,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/src/test/java/edu/ucsb/mapache/controllers/SearchControllerTests.java",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/src/test/java/edu/ucsb/mapache/controllers/SearchControllerTests.java",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/src/test/java/edu/ucsb/mapache/controllers/SearchControllerTests.java?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -12,6 +12,7 @@\n import org.springframework.test.web.servlet.MvcResult;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.mockito.Mockito.when;\n import static org.mockito.Mockito.verify;\n@@ -87,6 +88,23 @@ public void test_basicSearch() throws Exception {\n \n   }\n \n+  @Test\n+  public void test_searchWithAPIToken() throws Exception {\n+      AppUser appUser = getAppUser();\n+      appUser.setApiToken(\"testTokenABC123\");\n+      when(googleSearchService.getJSON(any(SearchParameters.class),eq(\"testTokenABC123\"))).thenReturn(\"SampleResult\");\n+      when(authControllerAdvice.getIsMember(any(String.class))).thenReturn(true);\n+      when(searchSupportService.getCurrentUser(any(String.class))).thenReturn(appUser);\n+      MvcResult response = mockMvc\n+          .perform(\n+              get(\"/api/member/search/basic?searchQuery=github\").contentType(\"application/json\").header(HttpHeaders.AUTHORIZATION, exampleAuthToken))\n+          .andExpect(status().isOk()).andReturn();\n+\n+      String responseString = response.getResponse().getContentAsString();\n+      assertEquals(\"SampleResult\", responseString);\n+  }\n+\n+\n   @Test\n   public void test_basicSearch_searchCount_new_searchTerm() throws Exception {\n     AppUser appUser = getAppUser();\n@@ -192,12 +210,12 @@ public void test_Quota() throws Exception {\n   private AppUser getAppUser() {\n     AppUser appUser = new AppUser();\n     appUser.setId(1);\n-    appUser.setEmail(\"haixinlin@umail.ucsb.edu\");\n+    appUser.setEmail(\"haixinlin123@umail.ucsb.edu\");\n     appUser.setFirstName(\"Hunter\");\n     appUser.setLastName(\"Lin\");\n     appUser.setSearchRemain(100);\n     appUser.setTime(0);\n     return appUser;\n   }\n \n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a0ba7b1ea1766018298a59f6dd6bf4b168d18e8e",
    "filename": "src/test/java/edu/ucsb/mapache/entities/AppUserTests.java",
    "status": "modified",
    "additions": 16,
    "deletions": 1,
    "changes": 17,
    "blob_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/blob/4c32320d5146dd26838fb2979c65307992a34a2b/src/test/java/edu/ucsb/mapache/entities/AppUserTests.java",
    "raw_url": "https://github.com/ucsb-cs156-w21/proj-mapache-search/raw/4c32320d5146dd26838fb2979c65307992a34a2b/src/test/java/edu/ucsb/mapache/entities/AppUserTests.java",
    "contents_url": "https://api.github.com/repos/ucsb-cs156-w21/proj-mapache-search/contents/src/test/java/edu/ucsb/mapache/entities/AppUserTests.java?ref=4c32320d5146dd26838fb2979c65307992a34a2b",
    "patch": "@@ -9,7 +9,7 @@\n   @Test\n   public void testAppUser_toString() {\n     AppUser user = new AppUser(1L, \"test@test.org\", \"test\", \"user\");\n-    assertEquals(user.toString(), \"AppUser[ id=1, email=test@test.org, firstName=test, lastName=user, searchRemain=100]\");\n+    assertEquals(\"AppUser[ id=1, email=test@test.org, firstName=test, lastName=user, searchRemain=100, customAPIToken=invalid token]\", user.toString());\n   }\n \n   @Test\n@@ -40,6 +40,21 @@ public void testAppUser_getAndSetLastName() {\n     assertEquals(\"Doris\", user.getLastName());\n   }\n \n+  @Test\n+  public void testAppUser_getandSetApiToken() {\n+    AppUser user = new AppUser();\n+    user.setApiToken(\"TestTokenABC123\");\n+    assertEquals(\"TestTokenABC123\", user.getApiToken());\n+  }\n+\n+  @Test\n+  public void testAppUser_apiTokenAndClearApiToken() {\n+    AppUser user = new AppUser();\n+    user.apiToken(\"TestTokenABC123\");\n+    user.clearApiToken();\n+    assertEquals(\"invalid token\", user.getApiToken());\n+  }\n+\n   @Test\n   public void testAppUser_notEqualNull() throws Exception {\n     AppUser user = new AppUser();"
  }
]
