[
  {
    "sha": "dd2c9ad96011acf88f03b9fc5c31fa301625a536",
    "filename": ".jhipster/Boekingbestand.json",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/.jhipster/Boekingbestand.json",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/.jhipster/Boekingbestand.json",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/.jhipster/Boekingbestand.json?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,33 @@\n+{\n+  \"name\": \"Boekingbestand\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"kenmerk\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"label\",\n+      \"fieldType\": \"Label\",\n+      \"fieldValues\": \"CZ,OHRA\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"record\",\n+      \"otherEntityRelationshipName\": \"boekingbestand\",\n+      \"relationshipName\": \"record\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210311151038\",\n+  \"entityTableName\": \"boekingbestand\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"pagination\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "68771aae530ba4b2aa69b4748cf896f7a3052d1f",
    "filename": ".jhipster/Record.json",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/.jhipster/Record.json",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/.jhipster/Record.json",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/.jhipster/Record.json?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,45 @@\n+{\n+  \"name\": \"Record\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"debiteur\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"veroorzaker\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"overeenkomst\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"datumIngang\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"datumEinde\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"boekingbestand\",\n+      \"otherEntityRelationshipName\": \"record\",\n+      \"relationshipName\": \"boekingbestand\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210311151138\",\n+  \"entityTableName\": \"record\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"infinite-scroll\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "5533c835df1e7b46801d53e7652b8b5a8bcc5cff",
    "filename": "src/main/java/nl/cz/testsupport/domain/Boekingbestand.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/domain/Boekingbestand.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/domain/Boekingbestand.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/domain/Boekingbestand.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,122 @@\n+package nl.cz.testsupport.domain;\n+\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import nl.cz.testsupport.domain.enumeration.Label;\n+\n+/**\n+ * A Boekingbestand.\n+ */\n+@Entity\n+@Table(name = \"boekingbestand\")\n+public class Boekingbestand implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"kenmerk\")\n+    private String kenmerk;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"label\")\n+    private Label label;\n+\n+    @OneToMany(mappedBy = \"boekingbestand\")\n+    private Set<Record> records = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getKenmerk() {\n+        return kenmerk;\n+    }\n+\n+    public Boekingbestand kenmerk(String kenmerk) {\n+        this.kenmerk = kenmerk;\n+        return this;\n+    }\n+\n+    public void setKenmerk(String kenmerk) {\n+        this.kenmerk = kenmerk;\n+    }\n+\n+    public Label getLabel() {\n+        return label;\n+    }\n+\n+    public Boekingbestand label(Label label) {\n+        this.label = label;\n+        return this;\n+    }\n+\n+    public void setLabel(Label label) {\n+        this.label = label;\n+    }\n+\n+    public Set<Record> getRecords() {\n+        return records;\n+    }\n+\n+    public Boekingbestand records(Set<Record> records) {\n+        this.records = records;\n+        return this;\n+    }\n+\n+    public Boekingbestand addRecord(Record record) {\n+        this.records.add(record);\n+        record.setBoekingbestand(this);\n+        return this;\n+    }\n+\n+    public Boekingbestand removeRecord(Record record) {\n+        this.records.remove(record);\n+        record.setBoekingbestand(null);\n+        return this;\n+    }\n+\n+    public void setRecords(Set<Record> records) {\n+        this.records = records;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Boekingbestand)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Boekingbestand) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Boekingbestand{\" +\n+            \"id=\" + getId() +\n+            \", kenmerk='\" + getKenmerk() + \"'\" +\n+            \", label='\" + getLabel() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "00dbafb90339fe274c23401b8b4789e743a26345",
    "filename": "src/main/java/nl/cz/testsupport/domain/Record.java",
    "status": "added",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/domain/Record.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/domain/Record.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/domain/Record.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,158 @@\n+package nl.cz.testsupport.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Record.\n+ */\n+@Entity\n+@Table(name = \"record\")\n+public class Record implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"debiteur\")\n+    private String debiteur;\n+\n+    @Column(name = \"veroorzaker\")\n+    private String veroorzaker;\n+\n+    @Column(name = \"overeenkomst\")\n+    private String overeenkomst;\n+\n+    @Column(name = \"datum_ingang\")\n+    private String datumIngang;\n+\n+    @Column(name = \"datum_einde\")\n+    private String datumEinde;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"records\", allowSetters = true)\n+    private Boekingbestand boekingbestand;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getDebiteur() {\n+        return debiteur;\n+    }\n+\n+    public Record debiteur(String debiteur) {\n+        this.debiteur = debiteur;\n+        return this;\n+    }\n+\n+    public void setDebiteur(String debiteur) {\n+        this.debiteur = debiteur;\n+    }\n+\n+    public String getVeroorzaker() {\n+        return veroorzaker;\n+    }\n+\n+    public Record veroorzaker(String veroorzaker) {\n+        this.veroorzaker = veroorzaker;\n+        return this;\n+    }\n+\n+    public void setVeroorzaker(String veroorzaker) {\n+        this.veroorzaker = veroorzaker;\n+    }\n+\n+    public String getOvereenkomst() {\n+        return overeenkomst;\n+    }\n+\n+    public Record overeenkomst(String overeenkomst) {\n+        this.overeenkomst = overeenkomst;\n+        return this;\n+    }\n+\n+    public void setOvereenkomst(String overeenkomst) {\n+        this.overeenkomst = overeenkomst;\n+    }\n+\n+    public String getDatumIngang() {\n+        return datumIngang;\n+    }\n+\n+    public Record datumIngang(String datumIngang) {\n+        this.datumIngang = datumIngang;\n+        return this;\n+    }\n+\n+    public void setDatumIngang(String datumIngang) {\n+        this.datumIngang = datumIngang;\n+    }\n+\n+    public String getDatumEinde() {\n+        return datumEinde;\n+    }\n+\n+    public Record datumEinde(String datumEinde) {\n+        this.datumEinde = datumEinde;\n+        return this;\n+    }\n+\n+    public void setDatumEinde(String datumEinde) {\n+        this.datumEinde = datumEinde;\n+    }\n+\n+    public Boekingbestand getBoekingbestand() {\n+        return boekingbestand;\n+    }\n+\n+    public Record boekingbestand(Boekingbestand boekingbestand) {\n+        this.boekingbestand = boekingbestand;\n+        return this;\n+    }\n+\n+    public void setBoekingbestand(Boekingbestand boekingbestand) {\n+        this.boekingbestand = boekingbestand;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Record)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Record) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Record{\" +\n+            \"id=\" + getId() +\n+            \", debiteur='\" + getDebiteur() + \"'\" +\n+            \", veroorzaker='\" + getVeroorzaker() + \"'\" +\n+            \", overeenkomst='\" + getOvereenkomst() + \"'\" +\n+            \", datumIngang='\" + getDatumIngang() + \"'\" +\n+            \", datumEinde='\" + getDatumEinde() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "6a312530170516cba1f53148af1002ee9d7a000e",
    "filename": "src/main/java/nl/cz/testsupport/domain/enumeration/Label.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/domain/enumeration/Label.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/domain/enumeration/Label.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/domain/enumeration/Label.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,8 @@\n+package nl.cz.testsupport.domain.enumeration;\n+\n+/**\n+ * The Label enumeration.\n+ */\n+public enum Label {\n+    CZ, OHRA\n+}"
  },
  {
    "sha": "2c4860061bf12774cb456e0476da39c653497afb",
    "filename": "src/main/java/nl/cz/testsupport/repository/BoekingbestandRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/repository/BoekingbestandRepository.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/repository/BoekingbestandRepository.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/repository/BoekingbestandRepository.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,14 @@\n+package nl.cz.testsupport.repository;\n+\n+import nl.cz.testsupport.domain.Boekingbestand;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Boekingbestand entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface BoekingbestandRepository extends JpaRepository<Boekingbestand, Long> {\n+}"
  },
  {
    "sha": "0668ff44d7d8519e382a4721025656eeff6cf4e9",
    "filename": "src/main/java/nl/cz/testsupport/repository/RecordRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/repository/RecordRepository.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/repository/RecordRepository.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/repository/RecordRepository.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,14 @@\n+package nl.cz.testsupport.repository;\n+\n+import nl.cz.testsupport.domain.Record;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Record entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface RecordRepository extends JpaRepository<Record, Long> {\n+}"
  },
  {
    "sha": "4c2fc1266d9e2da6d9b39d23c3277efdef6a4ea3",
    "filename": "src/main/java/nl/cz/testsupport/service/BoekingbestandService.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/service/BoekingbestandService.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/service/BoekingbestandService.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/service/BoekingbestandService.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,46 @@\n+package nl.cz.testsupport.service;\n+\n+import nl.cz.testsupport.domain.Boekingbestand;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Service Interface for managing {@link Boekingbestand}.\n+ */\n+public interface BoekingbestandService {\n+\n+    /**\n+     * Save a boekingbestand.\n+     *\n+     * @param boekingbestand the entity to save.\n+     * @return the persisted entity.\n+     */\n+    Boekingbestand save(Boekingbestand boekingbestand);\n+\n+    /**\n+     * Get all the boekingbestands.\n+     *\n+     * @param pageable the pagination information.\n+     * @return the list of entities.\n+     */\n+    Page<Boekingbestand> findAll(Pageable pageable);\n+\n+\n+    /**\n+     * Get the \"id\" boekingbestand.\n+     *\n+     * @param id the id of the entity.\n+     * @return the entity.\n+     */\n+    Optional<Boekingbestand> findOne(Long id);\n+\n+    /**\n+     * Delete the \"id\" boekingbestand.\n+     *\n+     * @param id the id of the entity.\n+     */\n+    void delete(Long id);\n+}"
  },
  {
    "sha": "12989638a047319233899d51c8db644dcb1b5419",
    "filename": "src/main/java/nl/cz/testsupport/service/RecordService.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/service/RecordService.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/service/RecordService.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/service/RecordService.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,46 @@\n+package nl.cz.testsupport.service;\n+\n+import nl.cz.testsupport.domain.Record;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Service Interface for managing {@link Record}.\n+ */\n+public interface RecordService {\n+\n+    /**\n+     * Save a record.\n+     *\n+     * @param record the entity to save.\n+     * @return the persisted entity.\n+     */\n+    Record save(Record record);\n+\n+    /**\n+     * Get all the records.\n+     *\n+     * @param pageable the pagination information.\n+     * @return the list of entities.\n+     */\n+    Page<Record> findAll(Pageable pageable);\n+\n+\n+    /**\n+     * Get the \"id\" record.\n+     *\n+     * @param id the id of the entity.\n+     * @return the entity.\n+     */\n+    Optional<Record> findOne(Long id);\n+\n+    /**\n+     * Delete the \"id\" record.\n+     *\n+     * @param id the id of the entity.\n+     */\n+    void delete(Long id);\n+}"
  },
  {
    "sha": "5b467ab445f0644b0e2ae261f89e25f3cc9cd7d1",
    "filename": "src/main/java/nl/cz/testsupport/service/impl/BoekingbestandServiceImpl.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/service/impl/BoekingbestandServiceImpl.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/service/impl/BoekingbestandServiceImpl.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/service/impl/BoekingbestandServiceImpl.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,57 @@\n+package nl.cz.testsupport.service.impl;\n+\n+import nl.cz.testsupport.service.BoekingbestandService;\n+import nl.cz.testsupport.domain.Boekingbestand;\n+import nl.cz.testsupport.repository.BoekingbestandRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Service Implementation for managing {@link Boekingbestand}.\n+ */\n+@Service\n+@Transactional\n+public class BoekingbestandServiceImpl implements BoekingbestandService {\n+\n+    private final Logger log = LoggerFactory.getLogger(BoekingbestandServiceImpl.class);\n+\n+    private final BoekingbestandRepository boekingbestandRepository;\n+\n+    public BoekingbestandServiceImpl(BoekingbestandRepository boekingbestandRepository) {\n+        this.boekingbestandRepository = boekingbestandRepository;\n+    }\n+\n+    @Override\n+    public Boekingbestand save(Boekingbestand boekingbestand) {\n+        log.debug(\"Request to save Boekingbestand : {}\", boekingbestand);\n+        return boekingbestandRepository.save(boekingbestand);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Page<Boekingbestand> findAll(Pageable pageable) {\n+        log.debug(\"Request to get all Boekingbestands\");\n+        return boekingbestandRepository.findAll(pageable);\n+    }\n+\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<Boekingbestand> findOne(Long id) {\n+        log.debug(\"Request to get Boekingbestand : {}\", id);\n+        return boekingbestandRepository.findById(id);\n+    }\n+\n+    @Override\n+    public void delete(Long id) {\n+        log.debug(\"Request to delete Boekingbestand : {}\", id);\n+        boekingbestandRepository.deleteById(id);\n+    }\n+}"
  },
  {
    "sha": "51c3b0747f4f9c93c25cb3a677b0cfad9c9405a4",
    "filename": "src/main/java/nl/cz/testsupport/service/impl/RecordServiceImpl.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/service/impl/RecordServiceImpl.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/service/impl/RecordServiceImpl.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/service/impl/RecordServiceImpl.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,57 @@\n+package nl.cz.testsupport.service.impl;\n+\n+import nl.cz.testsupport.service.RecordService;\n+import nl.cz.testsupport.domain.Record;\n+import nl.cz.testsupport.repository.RecordRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Service Implementation for managing {@link Record}.\n+ */\n+@Service\n+@Transactional\n+public class RecordServiceImpl implements RecordService {\n+\n+    private final Logger log = LoggerFactory.getLogger(RecordServiceImpl.class);\n+\n+    private final RecordRepository recordRepository;\n+\n+    public RecordServiceImpl(RecordRepository recordRepository) {\n+        this.recordRepository = recordRepository;\n+    }\n+\n+    @Override\n+    public Record save(Record record) {\n+        log.debug(\"Request to save Record : {}\", record);\n+        return recordRepository.save(record);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Page<Record> findAll(Pageable pageable) {\n+        log.debug(\"Request to get all Records\");\n+        return recordRepository.findAll(pageable);\n+    }\n+\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<Record> findOne(Long id) {\n+        log.debug(\"Request to get Record : {}\", id);\n+        return recordRepository.findById(id);\n+    }\n+\n+    @Override\n+    public void delete(Long id) {\n+        log.debug(\"Request to delete Record : {}\", id);\n+        recordRepository.deleteById(id);\n+    }\n+}"
  },
  {
    "sha": "9a5f32edc939040aef164fa1ea7179acede8f681",
    "filename": "src/main/java/nl/cz/testsupport/web/rest/BoekingbestandResource.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/web/rest/BoekingbestandResource.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/web/rest/BoekingbestandResource.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/web/rest/BoekingbestandResource.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,125 @@\n+package nl.cz.testsupport.web.rest;\n+\n+import nl.cz.testsupport.domain.Boekingbestand;\n+import nl.cz.testsupport.service.BoekingbestandService;\n+import nl.cz.testsupport.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.PaginationUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * REST controller for managing {@link nl.cz.testsupport.domain.Boekingbestand}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class BoekingbestandResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(BoekingbestandResource.class);\n+\n+    private static final String ENTITY_NAME = \"boekingbestand\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final BoekingbestandService boekingbestandService;\n+\n+    public BoekingbestandResource(BoekingbestandService boekingbestandService) {\n+        this.boekingbestandService = boekingbestandService;\n+    }\n+\n+    /**\n+     * {@code POST  /boekingbestands} : Create a new boekingbestand.\n+     *\n+     * @param boekingbestand the boekingbestand to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new boekingbestand, or with status {@code 400 (Bad Request)} if the boekingbestand has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/boekingbestands\")\n+    public ResponseEntity<Boekingbestand> createBoekingbestand(@RequestBody Boekingbestand boekingbestand) throws URISyntaxException {\n+        log.debug(\"REST request to save Boekingbestand : {}\", boekingbestand);\n+        if (boekingbestand.getId() != null) {\n+            throw new BadRequestAlertException(\"A new boekingbestand cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Boekingbestand result = boekingbestandService.save(boekingbestand);\n+        return ResponseEntity.created(new URI(\"/api/boekingbestands/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, false, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /boekingbestands} : Updates an existing boekingbestand.\n+     *\n+     * @param boekingbestand the boekingbestand to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated boekingbestand,\n+     * or with status {@code 400 (Bad Request)} if the boekingbestand is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the boekingbestand couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/boekingbestands\")\n+    public ResponseEntity<Boekingbestand> updateBoekingbestand(@RequestBody Boekingbestand boekingbestand) throws URISyntaxException {\n+        log.debug(\"REST request to update Boekingbestand : {}\", boekingbestand);\n+        if (boekingbestand.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Boekingbestand result = boekingbestandService.save(boekingbestand);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, false, ENTITY_NAME, boekingbestand.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /boekingbestands} : get all the boekingbestands.\n+     *\n+     * @param pageable the pagination information.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of boekingbestands in body.\n+     */\n+    @GetMapping(\"/boekingbestands\")\n+    public ResponseEntity<List<Boekingbestand>> getAllBoekingbestands(Pageable pageable) {\n+        log.debug(\"REST request to get a page of Boekingbestands\");\n+        Page<Boekingbestand> page = boekingbestandService.findAll(pageable);\n+        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);\n+        return ResponseEntity.ok().headers(headers).body(page.getContent());\n+    }\n+\n+    /**\n+     * {@code GET  /boekingbestands/:id} : get the \"id\" boekingbestand.\n+     *\n+     * @param id the id of the boekingbestand to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the boekingbestand, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/boekingbestands/{id}\")\n+    public ResponseEntity<Boekingbestand> getBoekingbestand(@PathVariable Long id) {\n+        log.debug(\"REST request to get Boekingbestand : {}\", id);\n+        Optional<Boekingbestand> boekingbestand = boekingbestandService.findOne(id);\n+        return ResponseUtil.wrapOrNotFound(boekingbestand);\n+    }\n+\n+    /**\n+     * {@code DELETE  /boekingbestands/:id} : delete the \"id\" boekingbestand.\n+     *\n+     * @param id the id of the boekingbestand to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/boekingbestands/{id}\")\n+    public ResponseEntity<Void> deleteBoekingbestand(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Boekingbestand : {}\", id);\n+        boekingbestandService.delete(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, false, ENTITY_NAME, id.toString())).build();\n+    }\n+}"
  },
  {
    "sha": "1bbc3d5d4c0a18793d4e7ddf8eef3a102aac1d48",
    "filename": "src/main/java/nl/cz/testsupport/web/rest/RecordResource.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/web/rest/RecordResource.java",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/java/nl/cz/testsupport/web/rest/RecordResource.java",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/java/nl/cz/testsupport/web/rest/RecordResource.java?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,125 @@\n+package nl.cz.testsupport.web.rest;\n+\n+import nl.cz.testsupport.domain.Record;\n+import nl.cz.testsupport.service.RecordService;\n+import nl.cz.testsupport.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.PaginationUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * REST controller for managing {@link nl.cz.testsupport.domain.Record}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RecordResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(RecordResource.class);\n+\n+    private static final String ENTITY_NAME = \"record\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final RecordService recordService;\n+\n+    public RecordResource(RecordService recordService) {\n+        this.recordService = recordService;\n+    }\n+\n+    /**\n+     * {@code POST  /records} : Create a new record.\n+     *\n+     * @param record the record to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new record, or with status {@code 400 (Bad Request)} if the record has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/records\")\n+    public ResponseEntity<Record> createRecord(@RequestBody Record record) throws URISyntaxException {\n+        log.debug(\"REST request to save Record : {}\", record);\n+        if (record.getId() != null) {\n+            throw new BadRequestAlertException(\"A new record cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Record result = recordService.save(record);\n+        return ResponseEntity.created(new URI(\"/api/records/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, false, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /records} : Updates an existing record.\n+     *\n+     * @param record the record to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated record,\n+     * or with status {@code 400 (Bad Request)} if the record is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the record couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/records\")\n+    public ResponseEntity<Record> updateRecord(@RequestBody Record record) throws URISyntaxException {\n+        log.debug(\"REST request to update Record : {}\", record);\n+        if (record.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Record result = recordService.save(record);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, false, ENTITY_NAME, record.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /records} : get all the records.\n+     *\n+     * @param pageable the pagination information.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of records in body.\n+     */\n+    @GetMapping(\"/records\")\n+    public ResponseEntity<List<Record>> getAllRecords(Pageable pageable) {\n+        log.debug(\"REST request to get a page of Records\");\n+        Page<Record> page = recordService.findAll(pageable);\n+        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);\n+        return ResponseEntity.ok().headers(headers).body(page.getContent());\n+    }\n+\n+    /**\n+     * {@code GET  /records/:id} : get the \"id\" record.\n+     *\n+     * @param id the id of the record to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the record, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/records/{id}\")\n+    public ResponseEntity<Record> getRecord(@PathVariable Long id) {\n+        log.debug(\"REST request to get Record : {}\", id);\n+        Optional<Record> record = recordService.findOne(id);\n+        return ResponseUtil.wrapOrNotFound(record);\n+    }\n+\n+    /**\n+     * {@code DELETE  /records/:id} : delete the \"id\" record.\n+     *\n+     * @param id the id of the record to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/records/{id}\")\n+    public ResponseEntity<Void> deleteRecord(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Record : {}\", id);\n+        recordService.delete(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, false, ENTITY_NAME, id.toString())).build();\n+    }\n+}"
  },
  {
    "sha": "e6192c4c2e88208237d08f972e25f8c5e63d79de",
    "filename": "src/main/resources/config/liquibase/changelog/20210311151038_added_entity_Boekingbestand.xml",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/changelog/20210311151038_added_entity_Boekingbestand.xml",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/changelog/20210311151038_added_entity_Boekingbestand.xml",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/resources/config/liquibase/changelog/20210311151038_added_entity_Boekingbestand.xml?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+    \n+    <!--\n+        Added the entity Boekingbestand.\n+    -->\n+    <changeSet id=\"20210311151038-1\" author=\"jhipster\">\n+        <createTable tableName=\"boekingbestand\">\n+            <column name=\"id\" type=\"bigint\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"kenmerk\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"label\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+    </changeSet>\n+\n+    <changeSet id=\"20210311151038-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210311151038-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/boekingbestand.csv\"\n+                  separator=\";\"\n+                  tableName=\"boekingbestand\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"kenmerk\" type=\"string\"/>\n+            <column name=\"label\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "f017abf74bb37960affef21321a71b22ef3f30d5",
    "filename": "src/main/resources/config/liquibase/changelog/20210311151138_added_entity_Record.xml",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/changelog/20210311151138_added_entity_Record.xml",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/changelog/20210311151138_added_entity_Record.xml",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/resources/config/liquibase/changelog/20210311151138_added_entity_Record.xml?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+    \n+    <!--\n+        Added the entity Record.\n+    -->\n+    <changeSet id=\"20210311151138-1\" author=\"jhipster\">\n+        <createTable tableName=\"record\">\n+            <column name=\"id\" type=\"bigint\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"debiteur\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"veroorzaker\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"overeenkomst\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"datum_ingang\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"datum_einde\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"boekingbestand_id\" type=\"bigint\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+    </changeSet>\n+\n+    <changeSet id=\"20210311151138-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210311151138-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/record.csv\"\n+                  separator=\";\"\n+                  tableName=\"record\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"debiteur\" type=\"string\"/>\n+            <column name=\"veroorzaker\" type=\"string\"/>\n+            <column name=\"overeenkomst\" type=\"string\"/>\n+            <column name=\"datum_ingang\" type=\"string\"/>\n+            <column name=\"datum_einde\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "c759d0ff5fc9607036f12306f9d2b683ae0525e3",
    "filename": "src/main/resources/config/liquibase/changelog/20210311151138_added_entity_constraints_Record.xml",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/changelog/20210311151138_added_entity_constraints_Record.xml",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/changelog/20210311151138_added_entity_constraints_Record.xml",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/resources/config/liquibase/changelog/20210311151138_added_entity_constraints_Record.xml?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <!--\n+        Added the constraints for entity Record.\n+    -->\n+    <changeSet id=\"20210311151138-2\" author=\"jhipster\">\n+        \n+        <addForeignKeyConstraint baseColumnNames=\"boekingbestand_id\"\n+                                 baseTableName=\"record\"\n+                                 constraintName=\"fk_record_boekingbestand_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"boekingbestand\"/>\n+\n+    </changeSet>\n+</databaseChangeLog>"
  },
  {
    "sha": "c0b69d79f637e541fa646071c234b035383223fa",
    "filename": "src/main/resources/config/liquibase/fake-data/boekingbestand.csv",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/fake-data/boekingbestand.csv",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/fake-data/boekingbestand.csv",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/resources/config/liquibase/fake-data/boekingbestand.csv?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,11 @@\n+id;kenmerk;label\n+1;Lake;CZ\n+2;online Gloves payment;OHRA\n+3;Cheese Japan Borders;OHRA\n+4;Kids dynamic Arkansas;CZ\n+5;Rue;OHRA\n+6;technologies;OHRA\n+7;Customer AGP PCI;OHRA\n+8;Investor Hat;OHRA\n+9;Chief;CZ\n+10;implement interface;OHRA"
  },
  {
    "sha": "d9328702cb989b714f6136fa543ad3587658f013",
    "filename": "src/main/resources/config/liquibase/fake-data/record.csv",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/fake-data/record.csv",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/fake-data/record.csv",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/resources/config/liquibase/fake-data/record.csv?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,11 @@\n+id;debiteur;veroorzaker;overeenkomst;datum_ingang;datum_einde\n+1;strategic Plastic New York;Toys maximize;multi-state;Buckinghamshire responsive;deploy Solomon Islands Somoni\n+2;Health Manat;Computer Personal Loan Account algorithm;Profit-focused connecting Spain;program next generation Future;Steel heuristic\n+3;Sleek PNG;Cotton eco-centric;model Hawaii;system-worthy distributed;back-end Designer Gourde US Dollar\n+4;Ridges;transparent;Rapids;Internal;Madagascar\n+5;Concrete;application Avon;Fresh Division;e-commerce Supervisor Mississippi;Savings Account\n+6;Auto Loan Account Money Market Account;Administrator Frozen;interface bypass;transmit withdrawal;driver Cove\n+7;black payment;HDD;Intelligent;Small Soft Towels;withdrawal Centralized Saint Pierre and Miquelon\n+8;Florida Games;Indiana Future;Handmade Granite Bike infrastructures;Kenyan Shilling Kenyan Shilling auxiliary;analyzing\n+9;Credit Card Account;Streamlined Borders;knowledge user Handmade Wooden Mouse;virtual neural;Future\n+10;Health;wireless generating;Soft;Table copying Intranet;North Dakota Fantastic Soft Keyboard Tunnel"
  },
  {
    "sha": "2ef49a257f52e1e2a36461d368191020eb4d0056",
    "filename": "src/main/resources/config/liquibase/master.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/master.xml",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/resources/config/liquibase/master.xml",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/resources/config/liquibase/master.xml?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -14,7 +14,10 @@\n     <property name=\"uuidType\" value=\"uuid\" dbms=\"h2, postgresql\"/>\n \n     <include file=\"config/liquibase/changelog/00000000000000_initial_schema.xml\" relativeToChangelogFile=\"false\"/>\n+    <include file=\"config/liquibase/changelog/20210311151038_added_entity_Boekingbestand.xml\" relativeToChangelogFile=\"false\"/>\n+    <include file=\"config/liquibase/changelog/20210311151138_added_entity_Record.xml\" relativeToChangelogFile=\"false\"/>\n     <!-- jhipster-needle-liquibase-add-changelog - JHipster will add liquibase changelogs here -->\n+    <include file=\"config/liquibase/changelog/20210311151138_added_entity_constraints_Record.xml\" relativeToChangelogFile=\"false\"/>\n     <!-- jhipster-needle-liquibase-add-constraints-changelog - JHipster will add liquibase constraints changelogs here -->\n     <!-- jhipster-needle-liquibase-add-incremental-changelog - JHipster will add incremental liquibase changelogs here -->\n </databaseChangeLog>"
  },
  {
    "sha": "95aaaff48d7956575164056b2db32668913bfa49",
    "filename": "src/main/webapp/app/entities/boekingbestand/boekingbestand-delete-dialog.tsx",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand-delete-dialog.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand-delete-dialog.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/boekingbestand/boekingbestand-delete-dialog.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,62 @@\n+import React, { useEffect } from 'react';\n+import { connect } from 'react-redux';\n+import { RouteComponentProps } from 'react-router-dom';\n+import { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n+import { ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+\n+import { IBoekingbestand } from 'app/shared/model/boekingbestand.model';\n+import { IRootState } from 'app/shared/reducers';\n+import { getEntity, deleteEntity } from './boekingbestand.reducer';\n+\n+export interface IBoekingbestandDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n+\n+export const BoekingbestandDeleteDialog = (props: IBoekingbestandDeleteDialogProps) => {\n+  useEffect(() => {\n+    props.getEntity(props.match.params.id);\n+  }, []);\n+\n+  const handleClose = () => {\n+    props.history.push('/boekingbestand' + props.location.search);\n+  };\n+\n+  useEffect(() => {\n+    if (props.updateSuccess) {\n+      handleClose();\n+    }\n+  }, [props.updateSuccess]);\n+\n+  const confirmDelete = () => {\n+    props.deleteEntity(props.boekingbestandEntity.id);\n+  };\n+\n+  const { boekingbestandEntity } = props;\n+  return (\n+    <Modal isOpen toggle={handleClose}>\n+      <ModalHeader toggle={handleClose}>Confirm delete operation</ModalHeader>\n+      <ModalBody id=\"testsupportApp.boekingbestand.delete.question\">Are you sure you want to delete this Boekingbestand?</ModalBody>\n+      <ModalFooter>\n+        <Button color=\"secondary\" onClick={handleClose}>\n+          <FontAwesomeIcon icon=\"ban\" />\n+          &nbsp; Cancel\n+        </Button>\n+        <Button id=\"jhi-confirm-delete-boekingbestand\" color=\"danger\" onClick={confirmDelete}>\n+          <FontAwesomeIcon icon=\"trash\" />\n+          &nbsp; Delete\n+        </Button>\n+      </ModalFooter>\n+    </Modal>\n+  );\n+};\n+\n+const mapStateToProps = ({ boekingbestand }: IRootState) => ({\n+  boekingbestandEntity: boekingbestand.entity,\n+  updateSuccess: boekingbestand.updateSuccess,\n+});\n+\n+const mapDispatchToProps = { getEntity, deleteEntity };\n+\n+type StateProps = ReturnType<typeof mapStateToProps>;\n+type DispatchProps = typeof mapDispatchToProps;\n+\n+export default connect(mapStateToProps, mapDispatchToProps)(BoekingbestandDeleteDialog);"
  },
  {
    "sha": "442f0a983e236538613f3646dcccd8442472ee92",
    "filename": "src/main/webapp/app/entities/boekingbestand/boekingbestand-detail.tsx",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand-detail.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand-detail.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/boekingbestand/boekingbestand-detail.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,58 @@\n+import React, { useEffect } from 'react';\n+import { connect } from 'react-redux';\n+import { Link, RouteComponentProps } from 'react-router-dom';\n+import { Button, Row, Col } from 'reactstrap';\n+import { ICrudGetAction } from 'react-jhipster';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+\n+import { IRootState } from 'app/shared/reducers';\n+import { getEntity } from './boekingbestand.reducer';\n+import { IBoekingbestand } from 'app/shared/model/boekingbestand.model';\n+import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\n+\n+export interface IBoekingbestandDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n+\n+export const BoekingbestandDetail = (props: IBoekingbestandDetailProps) => {\n+  useEffect(() => {\n+    props.getEntity(props.match.params.id);\n+  }, []);\n+\n+  const { boekingbestandEntity } = props;\n+  return (\n+    <Row>\n+      <Col md=\"8\">\n+        <h2>\n+          Boekingbestand [<b>{boekingbestandEntity.id}</b>]\n+        </h2>\n+        <dl className=\"jh-entity-details\">\n+          <dt>\n+            <span id=\"kenmerk\">Kenmerk</span>\n+          </dt>\n+          <dd>{boekingbestandEntity.kenmerk}</dd>\n+          <dt>\n+            <span id=\"label\">Label</span>\n+          </dt>\n+          <dd>{boekingbestandEntity.label}</dd>\n+        </dl>\n+        <Button tag={Link} to=\"/boekingbestand\" replace color=\"info\">\n+          <FontAwesomeIcon icon=\"arrow-left\" /> <span className=\"d-none d-md-inline\">Back</span>\n+        </Button>\n+        &nbsp;\n+        <Button tag={Link} to={`/boekingbestand/${boekingbestandEntity.id}/edit`} replace color=\"primary\">\n+          <FontAwesomeIcon icon=\"pencil-alt\" /> <span className=\"d-none d-md-inline\">Edit</span>\n+        </Button>\n+      </Col>\n+    </Row>\n+  );\n+};\n+\n+const mapStateToProps = ({ boekingbestand }: IRootState) => ({\n+  boekingbestandEntity: boekingbestand.entity,\n+});\n+\n+const mapDispatchToProps = { getEntity };\n+\n+type StateProps = ReturnType<typeof mapStateToProps>;\n+type DispatchProps = typeof mapDispatchToProps;\n+\n+export default connect(mapStateToProps, mapDispatchToProps)(BoekingbestandDetail);"
  },
  {
    "sha": "7998aaff3171e3182aa3b3d201ebb92dfcd0a8a6",
    "filename": "src/main/webapp/app/entities/boekingbestand/boekingbestand-update.tsx",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand-update.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand-update.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/boekingbestand/boekingbestand-update.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,130 @@\n+import React, { useState, useEffect } from 'react';\n+import { connect } from 'react-redux';\n+import { Link, RouteComponentProps } from 'react-router-dom';\n+import { Button, Row, Col, Label } from 'reactstrap';\n+import { AvFeedback, AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n+import { ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { IRootState } from 'app/shared/reducers';\n+\n+import { getEntity, updateEntity, createEntity, reset } from './boekingbestand.reducer';\n+import { IBoekingbestand } from 'app/shared/model/boekingbestand.model';\n+import { convertDateTimeFromServer, convertDateTimeToServer, displayDefaultDateTime } from 'app/shared/util/date-utils';\n+import { mapIdList } from 'app/shared/util/entity-utils';\n+\n+export interface IBoekingbestandUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n+\n+export const BoekingbestandUpdate = (props: IBoekingbestandUpdateProps) => {\n+  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.id);\n+\n+  const { boekingbestandEntity, loading, updating } = props;\n+\n+  const handleClose = () => {\n+    props.history.push('/boekingbestand' + props.location.search);\n+  };\n+\n+  useEffect(() => {\n+    if (isNew) {\n+      props.reset();\n+    } else {\n+      props.getEntity(props.match.params.id);\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (props.updateSuccess) {\n+      handleClose();\n+    }\n+  }, [props.updateSuccess]);\n+\n+  const saveEntity = (event, errors, values) => {\n+    if (errors.length === 0) {\n+      const entity = {\n+        ...boekingbestandEntity,\n+        ...values,\n+      };\n+\n+      if (isNew) {\n+        props.createEntity(entity);\n+      } else {\n+        props.updateEntity(entity);\n+      }\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <Row className=\"justify-content-center\">\n+        <Col md=\"8\">\n+          <h2 id=\"testsupportApp.boekingbestand.home.createOrEditLabel\">Create or edit a Boekingbestand</h2>\n+        </Col>\n+      </Row>\n+      <Row className=\"justify-content-center\">\n+        <Col md=\"8\">\n+          {loading ? (\n+            <p>Loading...</p>\n+          ) : (\n+            <AvForm model={isNew ? {} : boekingbestandEntity} onSubmit={saveEntity}>\n+              {!isNew ? (\n+                <AvGroup>\n+                  <Label for=\"boekingbestand-id\">ID</Label>\n+                  <AvInput id=\"boekingbestand-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n+                </AvGroup>\n+              ) : null}\n+              <AvGroup>\n+                <Label id=\"kenmerkLabel\" for=\"boekingbestand-kenmerk\">\n+                  Kenmerk\n+                </Label>\n+                <AvField id=\"boekingbestand-kenmerk\" type=\"text\" name=\"kenmerk\" />\n+              </AvGroup>\n+              <AvGroup>\n+                <Label id=\"labelLabel\" for=\"boekingbestand-label\">\n+                  Label\n+                </Label>\n+                <AvInput\n+                  id=\"boekingbestand-label\"\n+                  type=\"select\"\n+                  className=\"form-control\"\n+                  name=\"label\"\n+                  value={(!isNew && boekingbestandEntity.label) || 'CZ'}\n+                >\n+                  <option value=\"CZ\">CZ</option>\n+                  <option value=\"OHRA\">OHRA</option>\n+                </AvInput>\n+              </AvGroup>\n+              <Button tag={Link} id=\"cancel-save\" to=\"/boekingbestand\" replace color=\"info\">\n+                <FontAwesomeIcon icon=\"arrow-left\" />\n+                &nbsp;\n+                <span className=\"d-none d-md-inline\">Back</span>\n+              </Button>\n+              &nbsp;\n+              <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n+                <FontAwesomeIcon icon=\"save\" />\n+                &nbsp; Save\n+              </Button>\n+            </AvForm>\n+          )}\n+        </Col>\n+      </Row>\n+    </div>\n+  );\n+};\n+\n+const mapStateToProps = (storeState: IRootState) => ({\n+  boekingbestandEntity: storeState.boekingbestand.entity,\n+  loading: storeState.boekingbestand.loading,\n+  updating: storeState.boekingbestand.updating,\n+  updateSuccess: storeState.boekingbestand.updateSuccess,\n+});\n+\n+const mapDispatchToProps = {\n+  getEntity,\n+  updateEntity,\n+  createEntity,\n+  reset,\n+};\n+\n+type StateProps = ReturnType<typeof mapStateToProps>;\n+type DispatchProps = typeof mapDispatchToProps;\n+\n+export default connect(mapStateToProps, mapDispatchToProps)(BoekingbestandUpdate);"
  },
  {
    "sha": "884225f83b87509f02209bca8fa5d84c8b43ba19",
    "filename": "src/main/webapp/app/entities/boekingbestand/boekingbestand.reducer.ts",
    "status": "added",
    "additions": 149,
    "deletions": 0,
    "changes": 149,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand.reducer.ts",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand.reducer.ts",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/boekingbestand/boekingbestand.reducer.ts?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,149 @@\n+import axios from 'axios';\n+import { ICrudGetAction, ICrudGetAllAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n+\n+import { cleanEntity } from 'app/shared/util/entity-utils';\n+import { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n+\n+import { IBoekingbestand, defaultValue } from 'app/shared/model/boekingbestand.model';\n+\n+export const ACTION_TYPES = {\n+  FETCH_BOEKINGBESTAND_LIST: 'boekingbestand/FETCH_BOEKINGBESTAND_LIST',\n+  FETCH_BOEKINGBESTAND: 'boekingbestand/FETCH_BOEKINGBESTAND',\n+  CREATE_BOEKINGBESTAND: 'boekingbestand/CREATE_BOEKINGBESTAND',\n+  UPDATE_BOEKINGBESTAND: 'boekingbestand/UPDATE_BOEKINGBESTAND',\n+  DELETE_BOEKINGBESTAND: 'boekingbestand/DELETE_BOEKINGBESTAND',\n+  RESET: 'boekingbestand/RESET',\n+};\n+\n+const initialState = {\n+  loading: false,\n+  errorMessage: null,\n+  entities: [] as ReadonlyArray<IBoekingbestand>,\n+  entity: defaultValue,\n+  updating: false,\n+  totalItems: 0,\n+  updateSuccess: false,\n+};\n+\n+export type BoekingbestandState = Readonly<typeof initialState>;\n+\n+// Reducer\n+\n+export default (state: BoekingbestandState = initialState, action): BoekingbestandState => {\n+  switch (action.type) {\n+    case REQUEST(ACTION_TYPES.FETCH_BOEKINGBESTAND_LIST):\n+    case REQUEST(ACTION_TYPES.FETCH_BOEKINGBESTAND):\n+      return {\n+        ...state,\n+        errorMessage: null,\n+        updateSuccess: false,\n+        loading: true,\n+      };\n+    case REQUEST(ACTION_TYPES.CREATE_BOEKINGBESTAND):\n+    case REQUEST(ACTION_TYPES.UPDATE_BOEKINGBESTAND):\n+    case REQUEST(ACTION_TYPES.DELETE_BOEKINGBESTAND):\n+      return {\n+        ...state,\n+        errorMessage: null,\n+        updateSuccess: false,\n+        updating: true,\n+      };\n+    case FAILURE(ACTION_TYPES.FETCH_BOEKINGBESTAND_LIST):\n+    case FAILURE(ACTION_TYPES.FETCH_BOEKINGBESTAND):\n+    case FAILURE(ACTION_TYPES.CREATE_BOEKINGBESTAND):\n+    case FAILURE(ACTION_TYPES.UPDATE_BOEKINGBESTAND):\n+    case FAILURE(ACTION_TYPES.DELETE_BOEKINGBESTAND):\n+      return {\n+        ...state,\n+        loading: false,\n+        updating: false,\n+        updateSuccess: false,\n+        errorMessage: action.payload,\n+      };\n+    case SUCCESS(ACTION_TYPES.FETCH_BOEKINGBESTAND_LIST):\n+      return {\n+        ...state,\n+        loading: false,\n+        entities: action.payload.data,\n+        totalItems: parseInt(action.payload.headers['x-total-count'], 10),\n+      };\n+    case SUCCESS(ACTION_TYPES.FETCH_BOEKINGBESTAND):\n+      return {\n+        ...state,\n+        loading: false,\n+        entity: action.payload.data,\n+      };\n+    case SUCCESS(ACTION_TYPES.CREATE_BOEKINGBESTAND):\n+    case SUCCESS(ACTION_TYPES.UPDATE_BOEKINGBESTAND):\n+      return {\n+        ...state,\n+        updating: false,\n+        updateSuccess: true,\n+        entity: action.payload.data,\n+      };\n+    case SUCCESS(ACTION_TYPES.DELETE_BOEKINGBESTAND):\n+      return {\n+        ...state,\n+        updating: false,\n+        updateSuccess: true,\n+        entity: {},\n+      };\n+    case ACTION_TYPES.RESET:\n+      return {\n+        ...initialState,\n+      };\n+    default:\n+      return state;\n+  }\n+};\n+\n+const apiUrl = 'api/boekingbestands';\n+\n+// Actions\n+\n+export const getEntities: ICrudGetAllAction<IBoekingbestand> = (page, size, sort) => {\n+  const requestUrl = `${apiUrl}${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\n+  return {\n+    type: ACTION_TYPES.FETCH_BOEKINGBESTAND_LIST,\n+    payload: axios.get<IBoekingbestand>(`${requestUrl}${sort ? '&' : '?'}cacheBuster=${new Date().getTime()}`),\n+  };\n+};\n+\n+export const getEntity: ICrudGetAction<IBoekingbestand> = id => {\n+  const requestUrl = `${apiUrl}/${id}`;\n+  return {\n+    type: ACTION_TYPES.FETCH_BOEKINGBESTAND,\n+    payload: axios.get<IBoekingbestand>(requestUrl),\n+  };\n+};\n+\n+export const createEntity: ICrudPutAction<IBoekingbestand> = entity => async dispatch => {\n+  const result = await dispatch({\n+    type: ACTION_TYPES.CREATE_BOEKINGBESTAND,\n+    payload: axios.post(apiUrl, cleanEntity(entity)),\n+  });\n+  dispatch(getEntities());\n+  return result;\n+};\n+\n+export const updateEntity: ICrudPutAction<IBoekingbestand> = entity => async dispatch => {\n+  const result = await dispatch({\n+    type: ACTION_TYPES.UPDATE_BOEKINGBESTAND,\n+    payload: axios.put(apiUrl, cleanEntity(entity)),\n+  });\n+  return result;\n+};\n+\n+export const deleteEntity: ICrudDeleteAction<IBoekingbestand> = id => async dispatch => {\n+  const requestUrl = `${apiUrl}/${id}`;\n+  const result = await dispatch({\n+    type: ACTION_TYPES.DELETE_BOEKINGBESTAND,\n+    payload: axios.delete(requestUrl),\n+  });\n+  dispatch(getEntities());\n+  return result;\n+};\n+\n+export const reset = () => ({\n+  type: ACTION_TYPES.RESET,\n+});"
  },
  {
    "sha": "ecca4e0dc121c7780e99801dc3a8f98033e2bdee",
    "filename": "src/main/webapp/app/entities/boekingbestand/boekingbestand.tsx",
    "status": "added",
    "additions": 170,
    "deletions": 0,
    "changes": 170,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/boekingbestand.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/boekingbestand/boekingbestand.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,170 @@\n+import React, { useState, useEffect } from 'react';\n+import { connect } from 'react-redux';\n+import { Link, RouteComponentProps } from 'react-router-dom';\n+import { Button, Col, Row, Table } from 'reactstrap';\n+import { ICrudGetAllAction, getSortState, IPaginationBaseState, JhiPagination, JhiItemCount } from 'react-jhipster';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+\n+import { IRootState } from 'app/shared/reducers';\n+import { getEntities } from './boekingbestand.reducer';\n+import { IBoekingbestand } from 'app/shared/model/boekingbestand.model';\n+import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\n+import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\n+import { overridePaginationStateWithQueryParams } from 'app/shared/util/entity-utils';\n+\n+export interface IBoekingbestandProps extends StateProps, DispatchProps, RouteComponentProps<{ url: string }> {}\n+\n+export const Boekingbestand = (props: IBoekingbestandProps) => {\n+  const [paginationState, setPaginationState] = useState(\n+    overridePaginationStateWithQueryParams(getSortState(props.location, ITEMS_PER_PAGE), props.location.search)\n+  );\n+\n+  const getAllEntities = () => {\n+    props.getEntities(paginationState.activePage - 1, paginationState.itemsPerPage, `${paginationState.sort},${paginationState.order}`);\n+  };\n+\n+  const sortEntities = () => {\n+    getAllEntities();\n+    const endURL = `?page=${paginationState.activePage}&sort=${paginationState.sort},${paginationState.order}`;\n+    if (props.location.search !== endURL) {\n+      props.history.push(`${props.location.pathname}${endURL}`);\n+    }\n+  };\n+\n+  useEffect(() => {\n+    sortEntities();\n+  }, [paginationState.activePage, paginationState.order, paginationState.sort]);\n+\n+  useEffect(() => {\n+    const params = new URLSearchParams(props.location.search);\n+    const page = params.get('page');\n+    const sort = params.get('sort');\n+    if (page && sort) {\n+      const sortSplit = sort.split(',');\n+      setPaginationState({\n+        ...paginationState,\n+        activePage: +page,\n+        sort: sortSplit[0],\n+        order: sortSplit[1],\n+      });\n+    }\n+  }, [props.location.search]);\n+\n+  const sort = p => () => {\n+    setPaginationState({\n+      ...paginationState,\n+      order: paginationState.order === 'asc' ? 'desc' : 'asc',\n+      sort: p,\n+    });\n+  };\n+\n+  const handlePagination = currentPage =>\n+    setPaginationState({\n+      ...paginationState,\n+      activePage: currentPage,\n+    });\n+\n+  const { boekingbestandList, match, loading, totalItems } = props;\n+  return (\n+    <div>\n+      <h2 id=\"boekingbestand-heading\">\n+        Boekingbestands\n+        <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\" id=\"jh-create-entity\">\n+          <FontAwesomeIcon icon=\"plus\" />\n+          &nbsp; Create new Boekingbestand\n+        </Link>\n+      </h2>\n+      <div className=\"table-responsive\">\n+        {boekingbestandList && boekingbestandList.length > 0 ? (\n+          <Table responsive>\n+            <thead>\n+              <tr>\n+                <th className=\"hand\" onClick={sort('id')}>\n+                  ID <FontAwesomeIcon icon=\"sort\" />\n+                </th>\n+                <th className=\"hand\" onClick={sort('kenmerk')}>\n+                  Kenmerk <FontAwesomeIcon icon=\"sort\" />\n+                </th>\n+                <th className=\"hand\" onClick={sort('label')}>\n+                  Label <FontAwesomeIcon icon=\"sort\" />\n+                </th>\n+                <th />\n+              </tr>\n+            </thead>\n+            <tbody>\n+              {boekingbestandList.map((boekingbestand, i) => (\n+                <tr key={`entity-${i}`}>\n+                  <td>\n+                    <Button tag={Link} to={`${match.url}/${boekingbestand.id}`} color=\"link\" size=\"sm\">\n+                      {boekingbestand.id}\n+                    </Button>\n+                  </td>\n+                  <td>{boekingbestand.kenmerk}</td>\n+                  <td>{boekingbestand.label}</td>\n+                  <td className=\"text-right\">\n+                    <div className=\"btn-group flex-btn-group-container\">\n+                      <Button tag={Link} to={`${match.url}/${boekingbestand.id}`} color=\"info\" size=\"sm\">\n+                        <FontAwesomeIcon icon=\"eye\" /> <span className=\"d-none d-md-inline\">View</span>\n+                      </Button>\n+                      <Button\n+                        tag={Link}\n+                        to={`${match.url}/${boekingbestand.id}/edit?page=${paginationState.activePage}&sort=${paginationState.sort},${paginationState.order}`}\n+                        color=\"primary\"\n+                        size=\"sm\"\n+                      >\n+                        <FontAwesomeIcon icon=\"pencil-alt\" /> <span className=\"d-none d-md-inline\">Edit</span>\n+                      </Button>\n+                      <Button\n+                        tag={Link}\n+                        to={`${match.url}/${boekingbestand.id}/delete?page=${paginationState.activePage}&sort=${paginationState.sort},${paginationState.order}`}\n+                        color=\"danger\"\n+                        size=\"sm\"\n+                      >\n+                        <FontAwesomeIcon icon=\"trash\" /> <span className=\"d-none d-md-inline\">Delete</span>\n+                      </Button>\n+                    </div>\n+                  </td>\n+                </tr>\n+              ))}\n+            </tbody>\n+          </Table>\n+        ) : (\n+          !loading && <div className=\"alert alert-warning\">No Boekingbestands found</div>\n+        )}\n+      </div>\n+      {props.totalItems ? (\n+        <div className={boekingbestandList && boekingbestandList.length > 0 ? '' : 'd-none'}>\n+          <Row className=\"justify-content-center\">\n+            <JhiItemCount page={paginationState.activePage} total={totalItems} itemsPerPage={paginationState.itemsPerPage} />\n+          </Row>\n+          <Row className=\"justify-content-center\">\n+            <JhiPagination\n+              activePage={paginationState.activePage}\n+              onSelect={handlePagination}\n+              maxButtons={5}\n+              itemsPerPage={paginationState.itemsPerPage}\n+              totalItems={props.totalItems}\n+            />\n+          </Row>\n+        </div>\n+      ) : (\n+        ''\n+      )}\n+    </div>\n+  );\n+};\n+\n+const mapStateToProps = ({ boekingbestand }: IRootState) => ({\n+  boekingbestandList: boekingbestand.entities,\n+  loading: boekingbestand.loading,\n+  totalItems: boekingbestand.totalItems,\n+});\n+\n+const mapDispatchToProps = {\n+  getEntities,\n+};\n+\n+type StateProps = ReturnType<typeof mapStateToProps>;\n+type DispatchProps = typeof mapDispatchToProps;\n+\n+export default connect(mapStateToProps, mapDispatchToProps)(Boekingbestand);"
  },
  {
    "sha": "dc2a099fa59cab162288cc28c4d5ecba9c87fdac",
    "filename": "src/main/webapp/app/entities/boekingbestand/index.tsx",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/index.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/boekingbestand/index.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/boekingbestand/index.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,23 @@\n+import React from 'react';\n+import { Switch } from 'react-router-dom';\n+\n+import ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\n+\n+import Boekingbestand from './boekingbestand';\n+import BoekingbestandDetail from './boekingbestand-detail';\n+import BoekingbestandUpdate from './boekingbestand-update';\n+import BoekingbestandDeleteDialog from './boekingbestand-delete-dialog';\n+\n+const Routes = ({ match }) => (\n+  <>\n+    <Switch>\n+      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={BoekingbestandUpdate} />\n+      <ErrorBoundaryRoute exact path={`${match.url}/:id/edit`} component={BoekingbestandUpdate} />\n+      <ErrorBoundaryRoute exact path={`${match.url}/:id`} component={BoekingbestandDetail} />\n+      <ErrorBoundaryRoute path={match.url} component={Boekingbestand} />\n+    </Switch>\n+    <ErrorBoundaryRoute exact path={`${match.url}/:id/delete`} component={BoekingbestandDeleteDialog} />\n+  </>\n+);\n+\n+export default Routes;"
  },
  {
    "sha": "cf59ac81d63e4b85674a18350ce836e10d31a16d",
    "filename": "src/main/webapp/app/entities/index.tsx",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/index.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/index.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/index.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -4,12 +4,16 @@ import { Switch } from 'react-router-dom';\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n import ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\n \n+import Boekingbestand from './boekingbestand';\n+import Record from './record';\n /* jhipster-needle-add-route-import - JHipster will add routes here */\n \n const Routes = ({ match }) => (\n   <div>\n     <Switch>\n       {/* prettier-ignore */}\n+      <ErrorBoundaryRoute path={`${match.url}boekingbestand`} component={Boekingbestand} />\n+      <ErrorBoundaryRoute path={`${match.url}record`} component={Record} />\n       {/* jhipster-needle-add-route-path - JHipster will add routes here */}\n     </Switch>\n   </div>"
  },
  {
    "sha": "7b8bf612584e64c1f279ec202e62f0e2367d4a2a",
    "filename": "src/main/webapp/app/entities/record/index.tsx",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/record/index.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/record/index.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/record/index.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,23 @@\n+import React from 'react';\n+import { Switch } from 'react-router-dom';\n+\n+import ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\n+\n+import Record from './record';\n+import RecordDetail from './record-detail';\n+import RecordUpdate from './record-update';\n+import RecordDeleteDialog from './record-delete-dialog';\n+\n+const Routes = ({ match }) => (\n+  <>\n+    <Switch>\n+      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={RecordUpdate} />\n+      <ErrorBoundaryRoute exact path={`${match.url}/:id/edit`} component={RecordUpdate} />\n+      <ErrorBoundaryRoute exact path={`${match.url}/:id`} component={RecordDetail} />\n+      <ErrorBoundaryRoute path={match.url} component={Record} />\n+    </Switch>\n+    <ErrorBoundaryRoute exact path={`${match.url}/:id/delete`} component={RecordDeleteDialog} />\n+  </>\n+);\n+\n+export default Routes;"
  },
  {
    "sha": "18ff5243700ac42b9638521c1e445461f69a25ba",
    "filename": "src/main/webapp/app/entities/record/record-delete-dialog.tsx",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/record/record-delete-dialog.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/record/record-delete-dialog.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/record/record-delete-dialog.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,62 @@\n+import React, { useEffect } from 'react';\n+import { connect } from 'react-redux';\n+import { RouteComponentProps } from 'react-router-dom';\n+import { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n+import { ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+\n+import { IRecord } from 'app/shared/model/record.model';\n+import { IRootState } from 'app/shared/reducers';\n+import { getEntity, deleteEntity } from './record.reducer';\n+\n+export interface IRecordDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n+\n+export const RecordDeleteDialog = (props: IRecordDeleteDialogProps) => {\n+  useEffect(() => {\n+    props.getEntity(props.match.params.id);\n+  }, []);\n+\n+  const handleClose = () => {\n+    props.history.push('/record');\n+  };\n+\n+  useEffect(() => {\n+    if (props.updateSuccess) {\n+      handleClose();\n+    }\n+  }, [props.updateSuccess]);\n+\n+  const confirmDelete = () => {\n+    props.deleteEntity(props.recordEntity.id);\n+  };\n+\n+  const { recordEntity } = props;\n+  return (\n+    <Modal isOpen toggle={handleClose}>\n+      <ModalHeader toggle={handleClose}>Confirm delete operation</ModalHeader>\n+      <ModalBody id=\"testsupportApp.record.delete.question\">Are you sure you want to delete this Record?</ModalBody>\n+      <ModalFooter>\n+        <Button color=\"secondary\" onClick={handleClose}>\n+          <FontAwesomeIcon icon=\"ban\" />\n+          &nbsp; Cancel\n+        </Button>\n+        <Button id=\"jhi-confirm-delete-record\" color=\"danger\" onClick={confirmDelete}>\n+          <FontAwesomeIcon icon=\"trash\" />\n+          &nbsp; Delete\n+        </Button>\n+      </ModalFooter>\n+    </Modal>\n+  );\n+};\n+\n+const mapStateToProps = ({ record }: IRootState) => ({\n+  recordEntity: record.entity,\n+  updateSuccess: record.updateSuccess,\n+});\n+\n+const mapDispatchToProps = { getEntity, deleteEntity };\n+\n+type StateProps = ReturnType<typeof mapStateToProps>;\n+type DispatchProps = typeof mapDispatchToProps;\n+\n+export default connect(mapStateToProps, mapDispatchToProps)(RecordDeleteDialog);"
  },
  {
    "sha": "7beaadf9133fc8d4d663da29c9dec935934c3ce0",
    "filename": "src/main/webapp/app/entities/record/record-detail.tsx",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/record/record-detail.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/record/record-detail.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/record/record-detail.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,72 @@\n+import React, { useEffect } from 'react';\n+import { connect } from 'react-redux';\n+import { Link, RouteComponentProps } from 'react-router-dom';\n+import { Button, Row, Col } from 'reactstrap';\n+import { ICrudGetAction } from 'react-jhipster';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+\n+import { IRootState } from 'app/shared/reducers';\n+import { getEntity } from './record.reducer';\n+import { IRecord } from 'app/shared/model/record.model';\n+import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\n+\n+export interface IRecordDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n+\n+export const RecordDetail = (props: IRecordDetailProps) => {\n+  useEffect(() => {\n+    props.getEntity(props.match.params.id);\n+  }, []);\n+\n+  const { recordEntity } = props;\n+  return (\n+    <Row>\n+      <Col md=\"8\">\n+        <h2>\n+          Record [<b>{recordEntity.id}</b>]\n+        </h2>\n+        <dl className=\"jh-entity-details\">\n+          <dt>\n+            <span id=\"debiteur\">Debiteur</span>\n+          </dt>\n+          <dd>{recordEntity.debiteur}</dd>\n+          <dt>\n+            <span id=\"veroorzaker\">Veroorzaker</span>\n+          </dt>\n+          <dd>{recordEntity.veroorzaker}</dd>\n+          <dt>\n+            <span id=\"overeenkomst\">Overeenkomst</span>\n+          </dt>\n+          <dd>{recordEntity.overeenkomst}</dd>\n+          <dt>\n+            <span id=\"datumIngang\">Datum Ingang</span>\n+          </dt>\n+          <dd>{recordEntity.datumIngang}</dd>\n+          <dt>\n+            <span id=\"datumEinde\">Datum Einde</span>\n+          </dt>\n+          <dd>{recordEntity.datumEinde}</dd>\n+          <dt>Boekingbestand</dt>\n+          <dd>{recordEntity.boekingbestand ? recordEntity.boekingbestand.id : ''}</dd>\n+        </dl>\n+        <Button tag={Link} to=\"/record\" replace color=\"info\">\n+          <FontAwesomeIcon icon=\"arrow-left\" /> <span className=\"d-none d-md-inline\">Back</span>\n+        </Button>\n+        &nbsp;\n+        <Button tag={Link} to={`/record/${recordEntity.id}/edit`} replace color=\"primary\">\n+          <FontAwesomeIcon icon=\"pencil-alt\" /> <span className=\"d-none d-md-inline\">Edit</span>\n+        </Button>\n+      </Col>\n+    </Row>\n+  );\n+};\n+\n+const mapStateToProps = ({ record }: IRootState) => ({\n+  recordEntity: record.entity,\n+});\n+\n+const mapDispatchToProps = { getEntity };\n+\n+type StateProps = ReturnType<typeof mapStateToProps>;\n+type DispatchProps = typeof mapDispatchToProps;\n+\n+export default connect(mapStateToProps, mapDispatchToProps)(RecordDetail);"
  },
  {
    "sha": "43b35c7bfd61539c6b8c3f58d44f9a7520dd7805",
    "filename": "src/main/webapp/app/entities/record/record-update.tsx",
    "status": "added",
    "additions": 157,
    "deletions": 0,
    "changes": 157,
    "blob_url": "https://github.com/goos76/testsupport/blob/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/record/record-update.tsx",
    "raw_url": "https://github.com/goos76/testsupport/raw/5c5bae84869050d08a7972ba5ef7e074ed4440b3/src/main/webapp/app/entities/record/record-update.tsx",
    "contents_url": "https://api.github.com/repos/goos76/testsupport/contents/src/main/webapp/app/entities/record/record-update.tsx?ref=5c5bae84869050d08a7972ba5ef7e074ed4440b3",
    "patch": "@@ -0,0 +1,157 @@\n+import React, { useState, useEffect } from 'react';\n+import { connect } from 'react-redux';\n+import { Link, RouteComponentProps } from 'react-router-dom';\n+import { Button, Row, Col, Label } from 'reactstrap';\n+import { AvFeedback, AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n+import { ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { IRootState } from 'app/shared/reducers';\n+\n+import { IBoekingbestand } from 'app/shared/model/boekingbestand.model';\n+import { getEntities as getBoekingbestands } from 'app/entities/boekingbestand/boekingbestand.reducer';\n+import { getEntity, updateEntity, createEntity, reset } from './record.reducer';\n+import { IRecord } from 'app/shared/model/record.model';\n+import { convertDateTimeFromServer, convertDateTimeToServer, displayDefaultDateTime } from 'app/shared/util/date-utils';\n+import { mapIdList } from 'app/shared/util/entity-utils';\n+\n+export interface IRecordUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n+\n+export const RecordUpdate = (props: IRecordUpdateProps) => {\n+  const [boekingbestandId, setBoekingbestandId] = useState('0');\n+  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.id);\n+\n+  const { recordEntity, boekingbestands, loading, updating } = props;\n+\n+  const handleClose = () => {\n+    props.history.push('/record');\n+  };\n+\n+  useEffect(() => {\n+    if (!isNew) {\n+      props.getEntity(props.match.params.id);\n+    }\n+\n+    props.getBoekingbestands();\n+  }, []);\n+\n+  useEffect(() => {\n+    if (props.updateSuccess) {\n+      handleClose();\n+    }\n+  }, [props.updateSuccess]);\n+\n+  const saveEntity = (event, errors, values) => {\n+    if (errors.length === 0) {\n+      const entity = {\n+        ...recordEntity,\n+        ...values,\n+      };\n+\n+      if (isNew) {\n+        props.createEntity(entity);\n+      } else {\n+        props.updateEntity(entity);\n+      }\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <Row className=\"justify-content-center\">\n+        <Col md=\"8\">\n+          <h2 id=\"testsupportApp.record.home.createOrEditLabel\">Create or edit a Record</h2>\n+        </Col>\n+      </Row>\n+      <Row className=\"justify-content-center\">\n+        <Col md=\"8\">\n+          {loading ? (\n+            <p>Loading...</p>\n+          ) : (\n+            <AvForm model={isNew ? {} : recordEntity} onSubmit={saveEntity}>\n+              {!isNew ? (\n+                <AvGroup>\n+                  <Label for=\"record-id\">ID</Label>\n+                  <AvInput id=\"record-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n+                </AvGroup>\n+              ) : null}\n+              <AvGroup>\n+                <Label id=\"debiteurLabel\" for=\"record-debiteur\">\n+                  Debiteur\n+                </Label>\n+                <AvField id=\"record-debiteur\" type=\"text\" name=\"debiteur\" />\n+              </AvGroup>\n+              <AvGroup>\n+                <Label id=\"veroorzakerLabel\" for=\"record-veroorzaker\">\n+                  Veroorzaker\n+                </Label>\n+                <AvField id=\"record-veroorzaker\" type=\"text\" name=\"veroorzaker\" />\n+              </AvGroup>\n+              <AvGroup>\n+                <Label id=\"overeenkomstLabel\" for=\"record-overeenkomst\">\n+                  Overeenkomst\n+                </Label>\n+                <AvField id=\"record-overeenkomst\" type=\"text\" name=\"overeenkomst\" />\n+              </AvGroup>\n+              <AvGroup>\n+                <Label id=\"datumIngangLabel\" for=\"record-datumIngang\">\n+                  Datum Ingang\n+                </Label>\n+                <AvField id=\"record-datumIngang\" type=\"text\" name=\"datumIngang\" />\n+              </AvGroup>\n+              <AvGroup>\n+                <Label id=\"datumEindeLabel\" for=\"record-datumEinde\">\n+                  Datum Einde\n+                </Label>\n+                <AvField id=\"record-datumEinde\" type=\"text\" name=\"datumEinde\" />\n+              </AvGroup>\n+              <AvGroup>\n+                <Label for=\"record-boekingbestand\">Boekingbestand</Label>\n+                <AvInput id=\"record-boekingbestand\" type=\"select\" className=\"form-control\" name=\"boekingbestand.id\">\n+                  <option value=\"\" key=\"0\" />\n+                  {boekingbestands\n+                    ? boekingbestands.map(otherEntity => (\n+                        <option value={otherEntity.id} key={otherEntity.id}>\n+                          {otherEntity.id}\n+                        </option>\n+                      ))\n+                    : null}\n+                </AvInput>\n+              </AvGroup>\n+              <Button tag={Link} id=\"cancel-save\" to=\"/record\" replace color=\"info\">\n+                <FontAwesomeIcon icon=\"arrow-left\" />\n+                &nbsp;\n+                <span className=\"d-none d-md-inline\">Back</span>\n+              </Button>\n+              &nbsp;\n+              <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n+                <FontAwesomeIcon icon=\"save\" />\n+                &nbsp; Save\n+              </Button>\n+            </AvForm>\n+          )}\n+        </Col>\n+      </Row>\n+    </div>\n+  );\n+};\n+\n+const mapStateToProps = (storeState: IRootState) => ({\n+  boekingbestands: storeState.boekingbestand.entities,\n+  recordEntity: storeState.record.entity,\n+  loading: storeState.record.loading,\n+  updating: storeState.record.updating,\n+  updateSuccess: storeState.record.updateSuccess,\n+});\n+\n+const mapDispatchToProps = {\n+  getBoekingbestands,\n+  getEntity,\n+  updateEntity,\n+  createEntity,\n+  reset,\n+};\n+\n+type StateProps = ReturnType<typeof mapStateToProps>;\n+type DispatchProps = typeof mapDispatchToProps;\n+\n+export default connect(mapStateToProps, mapDispatchToProps)(RecordUpdate);"
  }
]
