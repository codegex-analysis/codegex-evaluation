[
  {
    "sha": "1609e4c55e0614fc1c880531db7baa771053773f",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/.gitignore",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/.gitignore",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/.gitignore?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -1,4 +1,4 @@\n-target/\n+/target\n !.mvn/wrapper/maven-wrapper.jar\n !**/src/main/**\n !**/src/test/**"
  },
  {
    "sha": "71c3d123a2bcdd6eb03b7c7dd1a6ca4c0462f64f",
    "filename": "README.md",
    "status": "modified",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/README.md",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/README.md",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/README.md?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -1,3 +1,29 @@\n+#Environmental preparation\n+1. Add necessary dependencies in pom.xml.\n+2. Start up database and Import data from `sql/lunch-data.sql` to MySql Database.\n+3. Set MySql as production database in application.properties while set h2 as test database in application-test.properties\n+\n+#Refactor the structure of the project and database\n+1. Create com.rezdy.lunch.entity package for the entity classes.\n+2. Transform the database access logic from entityManager to JpaRepository in the com.rezdy.lunch.repository package.\n+3. Create com.rezdy.lunch.service.impl package for the implementations of services, and the original com.rezdy.lunch.service package is for interfaces.\n+4. Refactor the structure of tables to introduce ID as the primary key.\n+5. In test folder, the com.rezdy.lunch.controller package is for controller-layer tests, the com.rezdy.lunch.service.impl package is for service-layer tests,\n+   and the com.rezdy.lunch.repository package is for data-access-layer tests.\n+   \n+#Assumption\n+1. Due to the fact that all foods have their expiry date, both BEST_BEFORE and USE_BY in the \"ingredient\" table have to be \"NOT NULL\".\n+2. Correct the date in the ingredient table where \"BEST_BEFORE\" date should be earlier than \"USE_BY\" date.\n+   \n+#EndPoints\n+1. GET, /lunch, parameter: date, find recipes whose ingredients are available. \n+2. GET, /getRecipe/{title}, find a recipe according to its title, it will return HTTP 404 when the recipe cannot be found.\n+3. GET, /findRecipes, parameter: excludedIngredient, excludedIngredient is array\n+\n+\n+\n+\n+\n # Lunch Microservice\n \n The service provides an endpoint that will determine, from a set of recipes, what I can have for lunch at a given date, based on my fridge ingredient's expiry date, so that I can quickly decide what Iâ€™ll be having to eat, and the ingredients required to prepare the meal."
  },
  {
    "sha": "d3bd17b563fb002f3e409edb0b32cb52e5bb13d4",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 40,
    "deletions": 1,
    "changes": 41,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/pom.xml",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/pom.xml",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/pom.xml?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -2,16 +2,31 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n \txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n \t<modelVersion>4.0.0</modelVersion>\n+\n \t<parent>\n \t\t<groupId>org.springframework.boot</groupId>\n \t\t<artifactId>spring-boot-starter-parent</artifactId>\n \t\t<version>2.2.6.RELEASE</version>\n \t</parent>\n+\n+\t<groupId>com.rezdy</groupId>\n \t<artifactId>java-tech-task</artifactId>\n \t<version>0.0.1-SNAPSHOT</version>\n+\t<packaging>jar</packaging>\n+\n+\t<repositories>\n+\t\t<repository>\n+\t\t\t<id>Eclipse Paho Repo</id>\n+\t\t\t<url>https://repo.eclipse.org/content/repositories/paho-releases/</url>\n+\t\t</repository>\n+\t</repositories>\n \n \t<properties>\n-\t\t<java.version>11</java.version>\n+\t\t<maven.compiler.source>15</maven.compiler.source>\n+\t\t<maven.compiler.target>15</maven.compiler.target>\n+\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+\t\t<start-class>com.rezdy.lunch.LunchApplication</start-class>\n+\t\t<java.version>15</java.version>\n \t</properties>\n \n \t<dependencies>\n@@ -32,6 +47,18 @@\n \t\t\t<groupId>mysql</groupId>\n \t\t\t<artifactId>mysql-connector-java</artifactId>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.16</version>\n+\t\t\t<scope>provided</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.assertj</groupId>\n+\t\t\t<artifactId>assertj-core</artifactId>\n+\t\t\t<version>3.19.0</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n@@ -43,18 +70,30 @@\n \t\t\t\t</exclusion>\n \t\t\t</exclusions>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.h2database</groupId>\n+\t\t\t<artifactId>h2</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n \t</dependencies>\n \n \t<build>\n \t\t<plugins>\n \t\t\t<plugin>\n \t\t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<jvmArguments>\n+\t\t\t\t\t\t-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\n+\t\t\t\t\t</jvmArguments>\n+\t\t\t\t</configuration>\n \t\t\t</plugin>\n \t\t\t<plugin>\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n \t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\n \t\t\t</plugin>\n \t\t\t<plugin>\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n \t\t\t\t<artifactId>maven-failsafe-plugin</artifactId>\n \t\t\t</plugin>\n \t\t</plugins>"
  },
  {
    "sha": "adaea13e5f518405c98d78ed24c17a46d27fb6c0",
    "filename": "sql/lunch-data.sql",
    "status": "modified",
    "additions": 93,
    "deletions": 69,
    "changes": 162,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/sql/lunch-data.sql",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/sql/lunch-data.sql",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/sql/lunch-data.sql?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -1,79 +1,103 @@\n-CREATE TABLE ingredient (\n-    TITLE VARCHAR(256) NOT NULL,\n-    BEST_BEFORE DATE DEFAULT NULL,\n-    USE_BY DATE DEFAULT NULL,\n-    PRIMARY KEY (TITLE)\n-);\n+/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n+/*!40101 SET NAMES utf8mb4 */;\n+/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\n+/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;\n \n-INSERT INTO ingredient (TITLE, BEST_BEFORE, USE_BY) VALUES\n-    ('Ham','2030-12-31','2030-01-01'),\n-    ('Cheese','1999-01-01','2030-01-01'),\n-    ('Bread','2030-12-31','2030-01-01'),\n-    ('Butter','2030-12-31','2030-01-01'),\n-    ('Bacon','2030-12-31','2030-01-01'),\n-    ('Eggs','2030-12-31','2030-01-01'),\n-    ('Baked Beans','2030-12-31','2030-01-01'),\n-    ('Mushrooms','2030-12-31','2030-01-01'),\n-    ('Sausage','2030-12-31','2030-01-01'),\n-    ('Hotdog Bun','2030-12-31','2030-01-01'),\n-    ('Ketchup','2030-12-31','2030-01-01'),\n-    ('Mustard','2030-12-31','2030-01-01'),\n-    ('Lettuce','2030-12-31','2030-01-01'),\n-    ('Tomato','2030-12-31','2030-01-01'),\n-    ('Cucumber','2030-12-31','2030-01-01'),\n-    ('Beetroot','2030-12-31','2030-01-01'),\n-    ('Salad Dressing','2030-12-31','1999-01-01'),\n-    ('Spinach','2030-12-31','1999-01-01'),\n-    ('Milk','2030-12-31','1999-01-01');\n+DROP DATABASE IF EXISTS `lunch`;\n+CREATE DATABASE IF NOT EXISTS `lunch` /*!40100 DEFAULT CHARACTER SET latin1 */;\n+USE `lunch`;\n \n-CREATE TABLE recipe (\n-     TITLE VARCHAR(256) NOT NULL,\n-     PRIMARY KEY (TITLE)\n-);\n \n-INSERT INTO recipe (title) VALUES\n-    ('Ham and Cheese Toastie'),\n-    ('Fry-up'),\n-    ('Salad'),\n-    ('Hotdog'),\n-    ('Omelette')\n-;\n+DROP TABLE IF EXISTS `ingredient`;\n+CREATE TABLE IF NOT EXISTS `ingredient` (\n+  `ID` bigint(20) NOT NULL AUTO_INCREMENT,\n+  `TITLE` varchar(256) NOT NULL,\n+  `BEST_BEFORE` date NOT NULL,\n+  `USE_BY` date NOT NULL,\n+  PRIMARY KEY (`ID`),\n+  KEY `TITLE_BEST_BEFORE` (`TITLE`,`BEST_BEFORE`),\n+  KEY `TITLE_USE_BY` (`TITLE`,`USE_BY`)\n+) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=latin1;\n \n-CREATE TABLE recipe_ingredient (\n-    recipe VARCHAR(256) NOT NULL,\n-    ingredient VARCHAR(256) NOT NULL,\n-    PRIMARY KEY (recipe, ingredient),\n-    CONSTRAINT FK_recipe FOREIGN KEY (recipe) REFERENCES recipe (TITLE),\n-    CONSTRAINT FK_ingredient FOREIGN KEY (ingredient) REFERENCES ingredient (TITLE)\n-);\n \n-INSERT INTO recipe_ingredient (recipe, ingredient) VALUES\n-    ('Ham and Cheese Toastie','Ham'),\n-    ('Ham and Cheese Toastie','Cheese'),\n-    ('Ham and Cheese Toastie','Bread'),\n-    ('Ham and Cheese Toastie','Butter'),\n+/*!40000 ALTER TABLE `ingredient` DISABLE KEYS */;\n+REPLACE INTO `ingredient` (`ID`, `TITLE`, `BEST_BEFORE`, `USE_BY`) VALUES\n+\t(1, 'Bacon', '2030-12-31', '2031-01-01'),\n+\t(2, 'Baked Beans', '2030-12-31', '2031-01-01'),\n+\t(3, 'Beetroot', '2030-12-31', '2031-01-01'),\n+\t(4, 'Bread', '2030-12-31', '2031-01-01'),\n+\t(5, 'Butter', '2030-12-31', '2031-01-01'),\n+\t(6, 'Cheese', '2028-01-01', '2029-01-01'),\n+\t(7, 'Cucumber', '2028-12-31', '2029-01-01'),\n+\t(8, 'Eggs', '2028-12-31', '2029-01-01'),\n+\t(9, 'Ham', '2028-12-31', '2029-01-01'),\n+\t(10, 'Hotdog Bun', '2025-12-31', '2026-01-01'),\n+\t(11, 'Ketchup', '2025-12-31', '2026-01-01'),\n+\t(12, 'Lettuce', '2025-12-31', '2026-01-01'),\n+\t(13, 'Milk', '2015-12-31', '2016-01-01'),\n+\t(14, 'Mushrooms', '2015-12-31', '2016-01-01'),\n+\t(15, 'Mustard', '2014-12-31', '2023-01-01'),\n+\t(16, 'Salad Dressing', '2014-12-31', '2023-01-01'),\n+\t(17, 'Sausage', '2014-12-31', '2023-01-01'),\n+\t(18, 'Spinach', '2014-12-31', '2023-01-01'),\n+\t(19, 'Tomato', '2014-12-31', '2023-01-01');\n+/*!40000 ALTER TABLE `ingredient` ENABLE KEYS */;\n \n-    ('Fry-up','Bacon'),\n-    ('Fry-up','Eggs'),\n-    ('Fry-up','Baked Beans'),\n-    ('Fry-up','Mushrooms'),\n-    ('Fry-up','Sausage'),\n-    ('Fry-up','Bread'),\n \n-    ('Salad','Lettuce'),\n-    ('Salad','Tomato'),\n-    ('Salad','Cucumber'),\n-    ('Salad','Beetroot'),\n-    ('Salad','Salad Dressing'),\n+DROP TABLE IF EXISTS `recipe`;\n+CREATE TABLE IF NOT EXISTS `recipe` (\n+  `ID` bigint(20) NOT NULL AUTO_INCREMENT,\n+  `TITLE` varchar(256) NOT NULL,\n+  PRIMARY KEY (`ID`),\n+  KEY `TITLE` (`TITLE`)\n+) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;\n \n-    ('Hotdog','Hotdog Bun'),\n-    ('Hotdog','Sausage'),\n-    ('Hotdog','Ketchup'),\n-    ('Hotdog','Mustard'),\n+/*!40000 ALTER TABLE `recipe` DISABLE KEYS */;\n+REPLACE INTO `recipe` (`ID`, `TITLE`) VALUES\n+\t(1, 'Fry-up'),\n+\t(2, 'Ham and Cheese Toastie'),\n+\t(3, 'Hotdog'),\n+\t(4, 'Omelette'),\n+\t(5, 'Salad');\n+/*!40000 ALTER TABLE `recipe` ENABLE KEYS */;\n \n-    ('Omelette','Eggs'),\n-    ('Omelette','Mushrooms'),\n-    ('Omelette','Milk'),\n-    ('Omelette','Spinach')\n-;\n \n+DROP TABLE IF EXISTS `recipe_ingredient`;\n+CREATE TABLE IF NOT EXISTS `recipe_ingredient` (\n+  `recipe_id` bigint(20) NOT NULL,\n+  `ingredient_id` bigint(20) NOT NULL,\n+  UNIQUE KEY `recipe_id_ingredient_id` (`recipe_id`,`ingredient_id`),\n+  KEY `FK_ingredient_id` (`ingredient_id`),\n+  CONSTRAINT `FK_ingredient_id` FOREIGN KEY (`ingredient_id`) REFERENCES `ingredient` (`ID`),\n+  CONSTRAINT `FK_recipe_id` FOREIGN KEY (`recipe_id`) REFERENCES `recipe` (`ID`)\n+) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n+\n+/*!40000 ALTER TABLE `recipe_ingredient` DISABLE KEYS */;\n+REPLACE INTO `recipe_ingredient` (`recipe_id`, `ingredient_id`) VALUES\n+\t(1, 1),\n+\t(1, 2),\n+\t(5, 3),\n+\t(1, 4),\n+\t(2, 4),\n+\t(2, 5),\n+\t(2, 6),\n+\t(5, 7),\n+\t(1, 8),\n+\t(4, 8),\n+\t(2, 9),\n+\t(3, 10),\n+\t(3, 11),\n+\t(5, 12),\n+\t(4, 13),\n+\t(1, 14),\n+\t(4, 14),\n+\t(3, 15),\n+\t(5, 16),\n+\t(1, 17),\n+\t(3, 17),\n+\t(4, 18),\n+\t(5, 19);\n+/*!40000 ALTER TABLE `recipe_ingredient` ENABLE KEYS */;\n+/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;\n+/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;\n+/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;"
  },
  {
    "sha": "afe55f88191183b7ac9dbb3f8f4caf03c1696453",
    "filename": "src/main/java/com/rezdy/lunch/controller/LunchController.java",
    "status": "modified",
    "additions": 24,
    "deletions": 5,
    "changes": 29,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/controller/LunchController.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/controller/LunchController.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/controller/LunchController.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -1,9 +1,11 @@\n package com.rezdy.lunch.controller;\n \n+import com.rezdy.lunch.entity.Recipe;\n+import com.rezdy.lunch.exception.ResourceNotFoundException;\n import com.rezdy.lunch.service.LunchService;\n-import com.rezdy.lunch.service.Recipe;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n@@ -20,8 +22,25 @@ public LunchController(LunchService lunchService) {\n         this.lunchService = lunchService;\n     }\n \n-    @PostMapping(\"/lunch\")\n-    public List<Recipe> getRecipes(@RequestParam(value = \"date\") String date) {\n-        return lunchService.getNonExpiredRecipesOnDate(LocalDate.parse(date));\n+    @GetMapping(\"/lunch\")\n+    public List<Recipe> findNonExpiredRecipesOnDate(@RequestParam(\"date\") String date) {\n+        return lunchService.findNonExpiredRecipesOnDate(LocalDate.parse(date));\n     }\n+\n+    @GetMapping(\"/getRecipe/{title}\")\n+    public Recipe getRecipeByTitle(@PathVariable String title) {\n+        Recipe recipe = lunchService.getRecipeByTitle(title);\n+        if(recipe == null) {\n+            throw new ResourceNotFoundException();\n+        }\n+        return recipe;\n+    }\n+\n+    @GetMapping(\"/findRecipes\")\n+    public List<Recipe> findRecipesWithoutSpecifiedIngredients(\n+            @RequestParam(\"excludedIngredients\") List<String> ingredientTitles) {\n+        List<Recipe> recipes = lunchService.findRecipesWithoutSpecifiedIngredients(ingredientTitles);\n+        return recipes;\n+    }\n+\n }"
  },
  {
    "sha": "96e05de7437a9fb995b96916e8f30b3e80882c69",
    "filename": "src/main/java/com/rezdy/lunch/entity/Ingredient.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/entity/Ingredient.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/entity/Ingredient.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/entity/Ingredient.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,38 @@\n+package com.rezdy.lunch.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import lombok.ToString;\n+\n+import javax.persistence.*;\n+import java.time.LocalDate;\n+import java.util.List;\n+\n+import static javax.persistence.GenerationType.IDENTITY;\n+\n+@lombok.Data\n+@Entity\n+@Table(name = \"ingredient\")\n+@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"})\n+public class Ingredient {\n+\n+    @Id\n+    @GeneratedValue(strategy = IDENTITY)\n+    @Column(name = \"ID\")\n+    private Long id;\n+\n+    @Column(name = \"TITLE\")\n+    private String title;\n+\n+    @Column(name = \"BEST_BEFORE\")\n+    private LocalDate bestBefore;\n+\n+    @Column(name = \"USE_BY\")\n+    private LocalDate useBy;\n+\n+    @JsonIgnoreProperties(\"ingredients\")\n+    @ToString.Exclude\n+    @ManyToMany(cascade = CascadeType.REFRESH,\n+                mappedBy = \"ingredients\",\n+                fetch = FetchType.LAZY)\n+    private List<Recipe> recipes;\n+}"
  },
  {
    "sha": "0e72f86c9eeb8d5eeed6be0874a9f972e56befe7",
    "filename": "src/main/java/com/rezdy/lunch/entity/Recipe.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/entity/Recipe.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/entity/Recipe.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/entity/Recipe.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,33 @@\n+package com.rezdy.lunch.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import lombok.ToString;\n+\n+import javax.persistence.*;\n+import java.util.List;\n+\n+import static javax.persistence.GenerationType.IDENTITY;\n+\n+@lombok.Data\n+@Entity\n+@Table(name = \"recipe\")\n+@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"})\n+public class Recipe {\n+\n+    @Id\n+    @GeneratedValue(strategy = IDENTITY)\n+    @Column(name = \"ID\")\n+    private Long id;\n+\n+    @Column(name = \"TITLE\")\n+    private String title;\n+\n+    @JsonIgnoreProperties(\"recipes\")\n+    @ToString.Exclude\n+    @ManyToMany(cascade = CascadeType.ALL)\n+    @JoinTable(\n+            name = \"recipe_ingredient\",\n+            joinColumns = @JoinColumn(name = \"recipe_id\"),\n+            inverseJoinColumns = @JoinColumn(name = \"ingredient_id\"))\n+    private List<Ingredient> ingredients;\n+}"
  },
  {
    "sha": "d63d99daf53f2c3364686f91bbb4c8f01bf1b87a",
    "filename": "src/main/java/com/rezdy/lunch/exception/ErrorResponse.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/exception/ErrorResponse.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/exception/ErrorResponse.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/exception/ErrorResponse.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -1,4 +1,4 @@\n-package com.rezdy.lunch.service;\n+package com.rezdy.lunch.exception;\n \n public class ErrorResponse {\n     private String errorMessage;\n@@ -7,8 +7,7 @@ public String getErrorMessage() {\n         return errorMessage;\n     }\n \n-    public ErrorResponse setErrorMessage(String errorMessage) {\n+    public void setErrorMessage(String errorMessage) {\n         this.errorMessage = errorMessage;\n-        return this;\n     }\n }",
    "previous_filename": "src/main/java/com/rezdy/lunch/service/ErrorResponse.java"
  },
  {
    "sha": "4ec2fa01829c5877e8e059f7506d273baac4a7dc",
    "filename": "src/main/java/com/rezdy/lunch/exception/LunchExceptionHandler.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/exception/LunchExceptionHandler.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/exception/LunchExceptionHandler.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/exception/LunchExceptionHandler.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -1,6 +1,5 @@\n package com.rezdy.lunch.exception;\n \n-import com.rezdy.lunch.service.ErrorResponse;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n@@ -13,7 +12,9 @@\n \n     @ExceptionHandler(DateTimeParseException.class)\n     public ResponseEntity<ErrorResponse> handleValidationException(DateTimeParseException exception) {\n-        return new ResponseEntity<>(new ErrorResponse().setErrorMessage(exception.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);\n+        ErrorResponse errorResponse = new ErrorResponse();\n+        errorResponse.setErrorMessage(\"Erroneous format of the date parameter\");\n+        return new ResponseEntity(errorResponse.getErrorMessage(), HttpStatus.BAD_REQUEST);\n     }\n \n }"
  },
  {
    "sha": "064ac2775a4241fdd415a6fa18ce95ffafbdbc3d",
    "filename": "src/main/java/com/rezdy/lunch/exception/ResourceNotFoundException.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/exception/ResourceNotFoundException.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/exception/ResourceNotFoundException.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/exception/ResourceNotFoundException.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,8 @@\n+package com.rezdy.lunch.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = \"Invalid recipe\")\n+public class ResourceNotFoundException extends RuntimeException {\n+}"
  },
  {
    "sha": "bb6b7003fa6d11d5ab7e8cee110174ebf8646608",
    "filename": "src/main/java/com/rezdy/lunch/repository/RecipeRepository.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/repository/RecipeRepository.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/repository/RecipeRepository.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/repository/RecipeRepository.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,26 @@\n+package com.rezdy.lunch.repository;\n+\n+import com.rezdy.lunch.entity.Recipe;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import java.time.LocalDate;\n+import java.util.List;\n+\n+@Repository\n+public interface RecipeRepository extends JpaRepository<Recipe, Long> {\n+\n+    @Query(\"select distinct recipe from Recipe as recipe \" +\n+            \"where recipe.id not in (select distinct recipe2.id from Recipe as recipe2 \" +\n+            \"inner join recipe2.ingredients as ingredient2 where ingredient2.useBy < :date)\")\n+    List<Recipe> findNonExpiredRecipesOnDate(@Param(\"date\") LocalDate date);\n+\n+    Recipe getByTitle(String title);\n+\n+    @Query(\"select distinct recipe from Recipe as recipe \" +\n+            \"where recipe.id not in (select distinct recipe2.id from Recipe as recipe2 \" +\n+            \"inner join recipe2.ingredients as ingredient2 where ingredient2.title in (:ingredientTitles))\")\n+    List<Recipe> findRecipesWithoutSpecifiedIngredients(@Param(\"ingredientTitles\") List<String> ingredientTitles);\n+}"
  },
  {
    "sha": "338d5c2d30b10d4f25d26b6111196b8737721452",
    "filename": "src/main/java/com/rezdy/lunch/service/Ingredient.java",
    "status": "removed",
    "additions": 0,
    "deletions": 43,
    "changes": 43,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/296808a8c52cd1e40d409176084c0617fdd9afaa/src/main/java/com/rezdy/lunch/service/Ingredient.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/296808a8c52cd1e40d409176084c0617fdd9afaa/src/main/java/com/rezdy/lunch/service/Ingredient.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/service/Ingredient.java?ref=296808a8c52cd1e40d409176084c0617fdd9afaa",
    "patch": "@@ -1,43 +0,0 @@\n-package com.rezdy.lunch.service;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import java.time.LocalDate;\n-\n-@Entity\n-public class Ingredient {\n-\n-    @Id\n-    private String title;\n-\n-    private LocalDate bestBefore;\n-\n-    private LocalDate useBy;\n-\n-    public String getTitle() {\n-        return title;\n-    }\n-\n-    public Ingredient setTitle(String title) {\n-        this.title = title;\n-        return this;\n-    }\n-\n-    public LocalDate getBestBefore() {\n-        return bestBefore;\n-    }\n-\n-    public Ingredient setBestBefore(LocalDate bestBefore) {\n-        this.bestBefore = bestBefore;\n-        return this;\n-    }\n-\n-    public LocalDate getUseBy() {\n-        return useBy;\n-    }\n-\n-    public Ingredient setUseBy(LocalDate useBy) {\n-        this.useBy = useBy;\n-        return this;\n-    }\n-}"
  },
  {
    "sha": "e569ae9c3ecde52cd5d70c03c8d84d6a0131619f",
    "filename": "src/main/java/com/rezdy/lunch/service/LunchService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 40,
    "changes": 45,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/service/LunchService.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/service/LunchService.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/service/LunchService.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -1,51 +1,16 @@\n package com.rezdy.lunch.service;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n+import com.rezdy.lunch.entity.Recipe;\n \n-import javax.persistence.EntityManager;\n-import javax.persistence.criteria.*;\n import java.time.LocalDate;\n-import java.util.ArrayList;\n import java.util.List;\n \n-@Service\n-public class LunchService {\n+public interface LunchService {\n \n-    @Autowired\n-    private EntityManager entityManager;\n+    List<Recipe> findNonExpiredRecipesOnDate(LocalDate date);\n \n-    private List<Recipe> recipesSorted;\n+    Recipe getRecipeByTitle(String title);\n \n-    public List<Recipe> getNonExpiredRecipesOnDate(LocalDate date) {\n-        List<Recipe> recipes = loadRecipes(date);\n-\n-        sortRecipes(recipes);\n-\n-        return recipesSorted;\n-    }\n-\n-    private void sortRecipes(List<Recipe> recipes) {\n-        recipesSorted = recipes; //TODO sort recipes considering best-before\n-    }\n-\n-    public List<Recipe> loadRecipes(LocalDate date) {\n-        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n-        CriteriaQuery<Recipe> criteriaQuery = cb.createQuery(Recipe.class);\n-        Root<Recipe> recipeRoot = criteriaQuery.from(Recipe.class);\n-\n-        CriteriaQuery<Recipe> query = criteriaQuery.select(recipeRoot);\n-\n-        Subquery<Recipe> nonExpiredIngredientSubquery = query.subquery(Recipe.class);\n-        Root<Recipe> nonExpiredIngredient = nonExpiredIngredientSubquery.from(Recipe.class);\n-        nonExpiredIngredientSubquery.select(nonExpiredIngredient);\n-\n-        Predicate matchingRecipe = cb.equal(nonExpiredIngredient.get(\"title\"), recipeRoot.get(\"title\"));\n-        Predicate expiredIngredient = cb.lessThan(nonExpiredIngredient.join(\"ingredients\").get(\"useBy\"), date);\n-\n-        Predicate allNonExpiredIngredients = cb.exists(nonExpiredIngredientSubquery.where(matchingRecipe, expiredIngredient));\n-\n-        return entityManager.createQuery(query.where(allNonExpiredIngredients)).getResultList();\n-    }\n+    List<Recipe> findRecipesWithoutSpecifiedIngredients(List<String> ingredientTitles);\n \n }"
  },
  {
    "sha": "032c9cffd4928966bd0a23a0a7d78dfbf3c0df8a",
    "filename": "src/main/java/com/rezdy/lunch/service/Recipe.java",
    "status": "removed",
    "additions": 0,
    "deletions": 36,
    "changes": 36,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/296808a8c52cd1e40d409176084c0617fdd9afaa/src/main/java/com/rezdy/lunch/service/Recipe.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/296808a8c52cd1e40d409176084c0617fdd9afaa/src/main/java/com/rezdy/lunch/service/Recipe.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/service/Recipe.java?ref=296808a8c52cd1e40d409176084c0617fdd9afaa",
    "patch": "@@ -1,36 +0,0 @@\n-package com.rezdy.lunch.service;\n-\n-import javax.persistence.*;\n-import java.util.Set;\n-\n-@Entity\n-public class Recipe {\n-\n-    @Id\n-    private String title;\n-\n-    @ManyToMany(cascade = CascadeType.ALL)\n-    @JoinTable(\n-            name = \"recipe_ingredient\",\n-            joinColumns = @JoinColumn(name = \"title\"),\n-            inverseJoinColumns = @JoinColumn(name = \"ingredient\"))\n-    private Set<Ingredient> ingredients;\n-\n-    public String getTitle() {\n-        return title;\n-    }\n-\n-    public Recipe setTitle(String title) {\n-        this.title = title;\n-        return this;\n-    }\n-\n-    public Set<Ingredient> getIngredients() {\n-        return ingredients;\n-    }\n-\n-    public Recipe setIngredients(Set<Ingredient> ingredients) {\n-        this.ingredients = ingredients;\n-        return this;\n-    }\n-}"
  },
  {
    "sha": "2f140ea9b4ab861f044c05ca8073d5642a40591f",
    "filename": "src/main/java/com/rezdy/lunch/service/impl/LunchServiceImpl.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/service/impl/LunchServiceImpl.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/java/com/rezdy/lunch/service/impl/LunchServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/java/com/rezdy/lunch/service/impl/LunchServiceImpl.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,58 @@\n+package com.rezdy.lunch.service.impl;\n+\n+import com.rezdy.lunch.entity.Ingredient;\n+import com.rezdy.lunch.entity.Recipe;\n+import com.rezdy.lunch.repository.RecipeRepository;\n+import com.rezdy.lunch.service.LunchService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.LocalDate;\n+import java.util.*;\n+\n+@Service\n+public class LunchServiceImpl implements LunchService {\n+\n+    private RecipeRepository recipeRepository;\n+\n+    @Autowired\n+    public LunchServiceImpl(RecipeRepository recipeRepository) {\n+        this.recipeRepository = recipeRepository;\n+    }\n+\n+    @Transactional\n+    public List<Recipe> findNonExpiredRecipesOnDate(LocalDate date) {\n+        List<Recipe> recipes = recipeRepository.findNonExpiredRecipesOnDate(date);\n+        Comparator<Recipe> recipesComparator = (r1, r2) -> {\n+            Optional<Ingredient> ingredientOptional1 = r1.getIngredients().stream()\n+                    .filter(ingredient -> ingredient.getBestBefore().isBefore(date)\n+                            || ingredient.getBestBefore().isEqual(date))\n+                    .findAny();\n+            Optional<Ingredient> ingredientOptional2 = r2.getIngredients().stream()\n+                    .filter(ingredient -> ingredient.getBestBefore().isBefore(date)\n+                            || ingredient.getBestBefore().isEqual(date))\n+                    .findAny();\n+            if(ingredientOptional1.isPresent() && ingredientOptional2.isEmpty()) {\n+                return 1;\n+            } else if (ingredientOptional1.isEmpty() && ingredientOptional2.isPresent()) {\n+                return -1;\n+            }\n+            return r1.getId().compareTo(r2.getId());\n+        };\n+        recipes.sort(recipesComparator);\n+        return recipes;\n+    }\n+\n+    @Transactional\n+    public Recipe getRecipeByTitle(String title) {\n+        Recipe recipe = recipeRepository.getByTitle(title);\n+        return recipe;\n+    }\n+\n+    @Transactional\n+    public List<Recipe> findRecipesWithoutSpecifiedIngredients(List<String> ingredientTitles) {\n+        List<Recipe> recipes = recipeRepository.findRecipesWithoutSpecifiedIngredients(ingredientTitles);\n+        return recipes;\n+    }\n+}"
  },
  {
    "sha": "abc427572579468e1a26738c1a42e09e16af5314",
    "filename": "src/main/resources/application-test.properties",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/resources/application-test.properties",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/main/resources/application-test.properties",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/main/resources/application-test.properties?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,9 @@\n+spring.h2.console.enabled=true\n+spring.h2.console.path=/h2-console\n+spring.datasource.driverClassName=org.h2.Driver\n+spring.datasource.url=jdbc:h2:mem:lunch;MODE=MYSQL;DATABASE_TO_LOWER=TRUE\n+spring.datasource.username=sa\n+spring.datasource.password=\n+spring.datasource.schema=classpath:test-data.sql\n+spring.jpa.database-platform=org.hibernate.dialect.H2Dialect\n+spring.jpa.hibernate.ddl-auto=update\n\\ No newline at end of file"
  },
  {
    "sha": "1c46e1e442eeea92cb6e6d637e8c7c96a0b9f37e",
    "filename": "src/test/java/com/rezdy/lunch/controller/LunchControllerTest.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/test/java/com/rezdy/lunch/controller/LunchControllerTest.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/test/java/com/rezdy/lunch/controller/LunchControllerTest.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/test/java/com/rezdy/lunch/controller/LunchControllerTest.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,119 @@\n+package com.rezdy.lunch.controller;\n+\n+import com.rezdy.lunch.entity.Ingredient;\n+import com.rezdy.lunch.entity.Recipe;\n+import com.rezdy.lunch.service.LunchService;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+\n+@WebMvcTest(LunchController.class)\n+public class LunchControllerTest {\n+\n+    @MockBean\n+    private LunchService lunchService;\n+\n+    @Autowired\n+    private MockMvc mockMvc;\n+\n+    @Test\n+    public void testFindNonExpiredRecipesOnDate_ReturnRecipes() throws Exception {\n+        List<Recipe> recipesTest = new ArrayList<>();\n+        recipesTest.add(createRecipe(\"Salad\", \"Beetroot\",\n+                \"Cucumber\", \"Lettuce\", \"Salad Dressing\", \"Tomato\"));\n+        recipesTest.add(createRecipe(\"Ham and Cheese Toastie\", \"Bread\", \"Butter\", \"Ham\", \"Cheese\"));\n+        recipesTest.add(createRecipe(\"Hotdog\", \"Hotdog Bun\", \"Ketchup\", \"Sausage\", \"Mustard\"));\n+        LocalDate localDate = LocalDate.of(2023, 1, 1);\n+        when(lunchService.findNonExpiredRecipesOnDate(localDate)).thenReturn(recipesTest);\n+        mockMvc.perform(MockMvcRequestBuilders.get(\"/lunch\").param(\"date\", \"2023-01-01\"))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(jsonPath(\"$.size()\", Matchers.is(3)))\n+                .andExpect(jsonPath(\"$.[*].title\",\n+                        Matchers.hasItems(\"Salad\", \"Ham and Cheese Toastie\", \"Hotdog\")\n+                ))\n+                .andExpect(jsonPath(\"$..[*].title\",\n+                        Matchers.hasItems(\"Beetroot\", \"Cucumber\", \"Lettuce\", \"Salad Dressing\", \"Tomato\",\n+                                \"Bread\", \"Butter\", \"Ham\", \"Cheese\", \"Hotdog Bun\", \"Ketchup\", \"Sausage\", \"Mustard\")));\n+    }\n+\n+    @Test\n+    public void testFindNonExpiredRecipesOnDate_BadRequest() throws Exception {\n+        mockMvc.perform(MockMvcRequestBuilders.get(\"/lunch\").param(\"date\", \"2030-01\"))\n+                .andExpect(status().is4xxClientError());\n+    }\n+\n+    @Test\n+    public void testGetRecipeByTitle_ReturnRecipe() throws Exception {\n+        String title = \"Salad\";\n+        Recipe recipe = new Recipe();\n+        recipe.setTitle(title);\n+        when(lunchService.getRecipeByTitle(title)).thenReturn(recipe);\n+        mockMvc.perform((MockMvcRequestBuilders.get(\"/getRecipe/Salad\")))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.title\", Matchers.is(title)));\n+    }\n+\n+    @Test\n+    public void testGetRecipeByTitle_NotFound() throws Exception {\n+        String title = \"Dumpling\";\n+        when(lunchService.getRecipeByTitle(title)).thenReturn(null);\n+        mockMvc.perform(MockMvcRequestBuilders.get(\"/getRecipe/Dumpling\"))\n+                .andExpect(MockMvcResultMatchers.status().is4xxClientError());\n+    }\n+\n+    @Test\n+    public void testFindRecipesWithoutSpecifiedIngredients_ReturnRecipes() throws Exception {\n+        String[] ingredientTitles = {\"Beetroot\",\"Cucumber\",\"Hotdog Bun\",\"Ketchup\",\"Lettuce\",\n+                \"Milk\",\"Mustard\",\"Salad Dressing\",\"Spinach\",\"Tomato\"};\n+        List<Recipe> recipes = new ArrayList<>();\n+        recipes.add(createRecipe(\"Fry-up\"));\n+        recipes.add(createRecipe(\"Ham and Cheese Toastie\"));\n+        when(lunchService.findRecipesWithoutSpecifiedIngredients(Arrays.asList(ingredientTitles)))\n+                .thenReturn(recipes);\n+        mockMvc.perform(MockMvcRequestBuilders.get(\"/findRecipes\")\n+                .param(\"excludedIngredients\", ingredientTitles))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.size()\", Matchers.is(2)))\n+                .andExpect(jsonPath(\"$.[*].title\", Matchers.hasItems(\"Fry-up\", \"Ham and Cheese Toastie\")));\n+    }\n+\n+    @Test\n+    public void testFindRecipesWithoutSpecifiedIngredients_NoRecipes() throws Exception {\n+        String[] ingredientTitles = {\"Bacon\", \"Bread\", \"Hotdog Bun\", \"Eggs\", \"Beetroot\"};\n+        List<Recipe> recipes = new ArrayList<>();\n+        when(lunchService.findRecipesWithoutSpecifiedIngredients(Arrays.asList(ingredientTitles)))\n+                .thenReturn(recipes);\n+        mockMvc.perform(MockMvcRequestBuilders.get(\"/findRecipes\")\n+                .param(\"excludedIngredients\", ingredientTitles))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.size()\", Matchers.is(0)));\n+    }\n+\n+    private Recipe createRecipe(String recipeTitle, String... ingredientTitles) {\n+        Recipe recipe = new Recipe();\n+        recipe.setTitle(recipeTitle);\n+        List<Ingredient> ingredients = new ArrayList<>();\n+        Arrays.stream(ingredientTitles).forEach(ingredientTitle->{\n+            Ingredient ingredient = new Ingredient();\n+            ingredient.setTitle(ingredientTitle);\n+            ingredients.add(ingredient);\n+        });\n+        recipe.setIngredients(ingredients);\n+        return recipe;\n+    }\n+}"
  },
  {
    "sha": "4855aee0f7969e83febf868bf2ccca31173093c7",
    "filename": "src/test/java/com/rezdy/lunch/repository/RecipeRepositoryTest.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/test/java/com/rezdy/lunch/repository/RecipeRepositoryTest.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/test/java/com/rezdy/lunch/repository/RecipeRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/test/java/com/rezdy/lunch/repository/RecipeRepositoryTest.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,98 @@\n+package com.rezdy.lunch.repository;\n+\n+import com.rezdy.lunch.entity.Ingredient;\n+import com.rezdy.lunch.entity.Recipe;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@DataJpaTest\n+@ActiveProfiles(\"test\")\n+public class RecipeRepositoryTest {\n+\n+    @Autowired\n+    private RecipeRepository recipeRepository;\n+\n+    @Test\n+    public void testFindNonExpiredRecipesOnDate_NoRecipe() {\n+        LocalDate localDate = LocalDate.of(2031, 1, 2);\n+        List<Recipe> recipes = recipeRepository.findNonExpiredRecipesOnDate(localDate);\n+        Assertions.assertThat(recipes).isEmpty();\n+    }\n+\n+    @Test\n+    public void testFindNonExpiredRecipesOnDate_ThreeRecipes() {\n+        List<Recipe> recipesTest = new ArrayList<>();\n+        recipesTest.add(createRecipe(\"Ham and Cheese Toastie\", \"Bread\", \"Butter\", \"Ham\", \"Cheese\"));\n+        recipesTest.add(createRecipe(\"Salad\", \"Beetroot\",\n+                \"Cucumber\", \"Lettuce\", \"Salad Dressing\", \"Tomato\"));\n+        recipesTest.add(createRecipe(\"Hotdog\", \"Ketchup\", \"Hotdog Bun\", \"Sausage\", \"Mustard\"));\n+        LocalDate localDate = LocalDate.of(2023, 1, 1);\n+        List<Recipe> recipes = recipeRepository.findNonExpiredRecipesOnDate(localDate);\n+        Assertions.assertThat(recipes).usingRecursiveComparison().ignoringCollectionOrder()\n+                .ignoringFields(\"id\", \"ingredients.id\", \"ingredients.bestBefore\",\n+                        \"ingredients.useBy\", \"ingredients.recipes\")\n+                .isEqualTo(recipesTest);\n+    }\n+\n+    @Test\n+    public void testFindNonExpiredRecipesOnDate_AllRecipes() {\n+        LocalDate localDate = LocalDate.of(2016, 1, 1);\n+        List<Recipe> recipes = recipeRepository.findNonExpiredRecipesOnDate(localDate);\n+        org.junit.jupiter.api.Assertions.assertEquals(recipes.size(), recipeRepository.count());\n+    }\n+\n+    @Test\n+    public void testGetByTitle_ReturnRecipe() {\n+        String title = \"Salad\";\n+        Recipe recipe = recipeRepository.getByTitle(title);\n+        org.junit.jupiter.api.Assertions.assertEquals(recipe.getTitle(), title);\n+    }\n+\n+    @Test\n+    public void testGetByTitle_NoRecipe() {\n+        String title = \"Dumpling\";\n+        Recipe recipe = recipeRepository.getByTitle(title);\n+        org.junit.jupiter.api.Assertions.assertNull(recipe);\n+    }\n+\n+    @Test\n+    public void testFindRecipesWithoutSpecifiedIngredients_ReturnRecipes() {\n+        String[] ingredientTitles = {\"Beetroot\",\"Cucumber\",\"Hotdog Bun\",\"Ketchup\",\"Lettuce\",\n+                \"Milk\",\"Mustard\",\"Salad Dressing\",\"Spinach\",\"Tomato\"};\n+        List<Recipe> recipes = recipeRepository.findRecipesWithoutSpecifiedIngredients(Arrays.asList(ingredientTitles));\n+\n+        List<Recipe> recipesExpected = new ArrayList<>();\n+        recipesExpected.add(createRecipe(\"Fry-up\"));\n+        recipesExpected.add(createRecipe(\"Ham and Cheese Toastie\"));\n+        Assertions.assertThat(recipes).usingRecursiveComparison().ignoringCollectionOrder()\n+                .ignoringFields(\"id\", \"ingredients\").isEqualTo(recipesExpected);\n+    }\n+\n+    @Test\n+    public void testFindRecipesWithoutSpecifiedIngredients_NoRecipe() {\n+        String[] ingredientTitles = {\"Bacon\", \"Bread\", \"Hotdog Bun\", \"Eggs\", \"Beetroot\"};\n+        List<Recipe> recipes = recipeRepository.findRecipesWithoutSpecifiedIngredients(Arrays.asList(ingredientTitles));\n+        org.junit.jupiter.api.Assertions.assertEquals(recipes.size(), 0);\n+    }\n+\n+    private Recipe createRecipe(String recipeTitle, String... ingredientTitles) {\n+        Recipe recipe = new Recipe();\n+        recipe.setTitle(recipeTitle);\n+        List<Ingredient> ingredients = new ArrayList<>();\n+        Arrays.stream(ingredientTitles).forEach(ingredientTitle->{\n+            Ingredient ingredient = new Ingredient();\n+            ingredient.setTitle(ingredientTitle);\n+            ingredients.add(ingredient);\n+        });\n+        recipe.setIngredients(ingredients);\n+        return recipe;\n+    }\n+}"
  },
  {
    "sha": "fa306b374934b095e69712dd7397fac72f758ac5",
    "filename": "src/test/java/com/rezdy/lunch/service/impl/LunchServiceImplTest.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/test/java/com/rezdy/lunch/service/impl/LunchServiceImplTest.java",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/test/java/com/rezdy/lunch/service/impl/LunchServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/test/java/com/rezdy/lunch/service/impl/LunchServiceImplTest.java?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,105 @@\n+package com.rezdy.lunch.service.impl;\n+\n+import com.rezdy.lunch.entity.Ingredient;\n+import com.rezdy.lunch.entity.Recipe;\n+import com.rezdy.lunch.repository.RecipeRepository;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class LunchServiceImplTest {\n+\n+    @Mock\n+    private RecipeRepository recipeRepository;\n+\n+    @InjectMocks\n+    private LunchServiceImpl lunchServiceImpl;\n+\n+    @Test\n+    public void testFindNonExpiredRecipesOnDate_ThreeRecipesByOrder() {\n+        Recipe salad = createRecipe(2L, \"Salad\",\n+                LocalDate.of(2018, 1, 1),\n+                LocalDate.of(2024, 1, 1));\n+        Recipe hotdog = createRecipe(1L, \"Hotdog\",\n+                LocalDate.of(2018, 1, 1),\n+                LocalDate.of(2024, 1, 1));\n+        Recipe HamAndCheeseToastie = createRecipe(4L, \"Ham and Cheese Toastie\",\n+                LocalDate.of(2029, 1, 1),\n+                LocalDate.of(2030, 1, 1));\n+        Recipe omelette = createRecipe(3L, \"Omelette\",\n+                LocalDate.of(2029, 1, 1),\n+                LocalDate.of(2030, 1, 1));\n+\n+\n+        List<Recipe> recipesBeforeSort = new ArrayList<>();\n+        recipesBeforeSort.add(salad);\n+        recipesBeforeSort.add(hotdog);\n+        recipesBeforeSort.add(HamAndCheeseToastie);\n+        recipesBeforeSort.add(omelette);\n+        LocalDate localDate = LocalDate.of(2022, 01, 01);\n+        when(recipeRepository.findNonExpiredRecipesOnDate(localDate)).thenReturn(recipesBeforeSort);\n+        List<Recipe> recipes = lunchServiceImpl.findNonExpiredRecipesOnDate(localDate);\n+        verify(recipeRepository).findNonExpiredRecipesOnDate(localDate);\n+\n+        List<Recipe> recipesAfterSort = new ArrayList<>();\n+        recipesAfterSort.add(omelette);\n+        recipesAfterSort.add(HamAndCheeseToastie);\n+        recipesAfterSort.add(hotdog);\n+        recipesAfterSort.add(salad);\n+        Assertions.assertThat(recipes).usingRecursiveComparison()\n+                .ignoringFields(\"ingredients\").isEqualTo(recipesAfterSort);\n+\n+    }\n+\n+    @Test\n+    public void testGetRecipeByTitle() {\n+        String title = \"Salad\";\n+        Recipe recipeTest = new Recipe();\n+        recipeTest.setTitle(title);\n+        when(recipeRepository.getByTitle(title)).thenReturn(recipeTest);\n+        Recipe recipe = lunchServiceImpl.getRecipeByTitle(title);\n+        verify(recipeRepository).getByTitle(title);\n+        org.junit.jupiter.api.Assertions.assertEquals(recipe.getTitle(), title);\n+    }\n+\n+    @Test\n+    public void testFindRecipesWithoutSpecifiedIngredients() {\n+        String[] titles = {\"Beetroot\",\"Cucumber\",\"Hotdog Bun\",\"Ketchup\",\"Lettuce\",\n+                \"Milk\",\"Mustard\",\"Salad Dressing\",\"Spinach\",\"Tomato\"};\n+        List<String> ingredientTitles = Arrays.asList(titles);\n+        List<Recipe> recipesExpected = new ArrayList<>();\n+        recipesExpected.add(createRecipe(1L, \"Fry-up\", null, null));\n+        recipesExpected.add(createRecipe(2L, \"Ham and Cheese Toastie\", null, null));\n+        when(recipeRepository.findRecipesWithoutSpecifiedIngredients(ingredientTitles))\n+                .thenReturn(recipesExpected);\n+        List<Recipe> recipes = lunchServiceImpl.findRecipesWithoutSpecifiedIngredients(ingredientTitles);\n+        verify(recipeRepository).findRecipesWithoutSpecifiedIngredients(ingredientTitles);\n+        Assertions.assertThat(recipes).usingRecursiveComparison()\n+                .ignoringFields(\"ingredients\").isEqualTo(recipesExpected);\n+    }\n+\n+    private Recipe createRecipe(Long recipeId, String recipeTitle, LocalDate bestBefore, LocalDate useBy) {\n+        Recipe recipe = new Recipe();\n+        recipe.setId(recipeId);\n+        recipe.setTitle(recipeTitle);\n+        List<Ingredient> ingredients = new ArrayList<>();\n+        Ingredient ingredient = new Ingredient();\n+        ingredient.setBestBefore(bestBefore);\n+        ingredient.setUseBy(useBy);\n+        ingredients.add(ingredient);\n+        recipe.setIngredients(ingredients);\n+        return recipe;\n+    }\n+}"
  },
  {
    "sha": "3f9938540dbe3055dcc4036f07f40376380bc8e4",
    "filename": "src/test/resources/test-data.sql",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/Rezdy/java-tech-task/blob/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/test/resources/test-data.sql",
    "raw_url": "https://github.com/Rezdy/java-tech-task/raw/5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498/src/test/resources/test-data.sql",
    "contents_url": "https://api.github.com/repos/Rezdy/java-tech-task/contents/src/test/resources/test-data.sql?ref=5d4e56f34ec9d0b0da2901e2a3c7fc620ed96498",
    "patch": "@@ -0,0 +1,96 @@\n+CREATE TABLE IF NOT EXISTS `ingredient` (\n+  `ID` bigint(20) NOT NULL AUTO_INCREMENT,\n+  `TITLE` varchar(256) NOT NULL,\n+  `BEST_BEFORE` date NOT NULL,\n+  `USE_BY` date NOT NULL,\n+  PRIMARY KEY (`ID`)\n+);\n+\n+CREATE INDEX ON ingredient(`TITLE`,`BEST_BEFORE`);\n+CREATE INDEX ON ingredient(`TITLE`,`USE_BY`);\n+\n+INSERT INTO `ingredient` (`ID`, `TITLE`, `BEST_BEFORE`, `USE_BY`) VALUES\n+\t(1, 'Bacon', '2030-12-31', '2031-01-01'),\n+\t(2, 'Baked Beans', '2030-12-31', '2031-01-01'),\n+\t(3, 'Beetroot', '2030-12-31', '2031-01-01'),\n+\t(4, 'Bread', '2030-12-31', '2031-01-01'),\n+\t(5, 'Butter', '2030-12-31', '2031-01-01'),\n+\n+\t(6, 'Cheese', '2028-01-01', '2029-01-01'),\n+\t(7, 'Cucumber', '2028-12-31', '2029-01-01'),\n+\t(8, 'Eggs', '2028-12-31', '2029-01-01'),\n+\t(9, 'Ham', '2028-12-31', '2029-01-01'),\n+\n+\t(10, 'Hotdog Bun', '2025-12-31', '2026-01-01'),\n+\t(11, 'Ketchup', '2025-12-31', '2026-01-01'),\n+\t(12, 'Lettuce', '2025-12-31', '2026-01-01'),\n+\n+\t(13, 'Milk', '2015-12-31', '2016-01-01'),\n+\t(14, 'Mushrooms', '2015-12-31', '2016-01-01'),\n+\n+\t(15, 'Mustard', '2014-12-31', '2023-01-01'),\n+\t(16, 'Salad Dressing', '2014-12-31', '2023-01-01'),\n+\t(17, 'Sausage', '2014-12-31', '2023-01-01'),\n+\t(18, 'Spinach', '2014-12-31', '2023-01-01'),\n+\t(19, 'Tomato', '2014-12-31', '2023-01-01');\n+\n+\n+CREATE TABLE IF NOT EXISTS `recipe` (\n+  `ID` bigint(20) NOT NULL AUTO_INCREMENT,\n+  `TITLE` varchar(256) NOT NULL,\n+  PRIMARY KEY (`ID`)\n+);\n+\n+CREATE INDEX ON recipe(`TITLE`);\n+\n+INSERT INTO `recipe` (`ID`, `TITLE`) VALUES\n+\t(1, 'Fry-up'),\n+\t(2, 'Ham and Cheese Toastie'),\n+\t(3, 'Hotdog'),\n+\t(4, 'Omelette'),\n+\t(5, 'Salad');\n+\n+\n+CREATE TABLE IF NOT EXISTS `recipe_ingredient` (\n+  `recipe_id` bigint(20) NOT NULL,\n+  `ingredient_id` bigint(20) NOT NULL\n+);\n+\n+CREATE UNIQUE INDEX ON recipe_ingredient(`recipe_id`,`ingredient_id`);\n+\n+ ALTER TABLE recipe_ingredient\n+    ADD FOREIGN KEY (`ingredient_id`)\n+    REFERENCES `ingredient` (`ID`);\n+\n+ ALTER TABLE recipe_ingredient\n+    ADD FOREIGN KEY (`recipe_id`)\n+    REFERENCES `recipe` (`ID`);\n+\n+INSERT INTO `recipe_ingredient` (`recipe_id`, `ingredient_id`) VALUES\n+\t(1, 1),\n+\t(1, 2),\n+\t(5, 3),\n+\t(1, 4),\n+\t(2, 4),\n+\t(2, 5),\n+\n+\t(2, 6),\n+\t(5, 7),\n+\t(1, 8),\n+\t(4, 8),\n+\t(2, 9),\n+\n+\t(3, 10),\n+\t(3, 11),\n+\t(5, 12),\n+\n+\t(4, 13),\n+\t(1, 14),\n+\t(4, 14),\n+\n+\t(3, 15),\n+\t(5, 16),\n+\t(1, 17),\n+\t(3, 17),\n+\t(4, 18),\n+\t(5, 19);"
  }
]
