[
  {
    "sha": "638a48d42f27e57dc7dd1d7d0e16f11c89897644",
    "filename": "TEST.db",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/TEST.db",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/TEST.db",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/TEST.db?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6"
  },
  {
    "sha": "f0215f127804a8fc78c8795cd012e14817df2a3e",
    "filename": "tcore_7/AccuWeatherProvider.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/AccuWeatherProvider.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/AccuWeatherProvider.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/AccuWeatherProvider.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,92 @@\n+package tcore_7;\r\n+\r\n+import com.fasterxml.jackson.databind.JsonNode;\r\n+import com.fasterxml.jackson.databind.ObjectMapper;\r\n+import okhttp3.HttpUrl;\r\n+import okhttp3.OkHttpClient;\r\n+import okhttp3.Request;\r\n+import okhttp3.Response;\r\n+import tcore_7.model.WeatherResponse;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+public class AccuWeatherProvider implements WeatherProvider {\r\n+    private static final String BASE_HOST = \"dataservice.accuweather.com\";\r\n+    private static final String FORECAST_ENDPOINT = \"forecasts\";\r\n+    private static final String API_VERSION = \"v1\";\r\n+    private static final String FORECAST_TYPE = \"daily\";\r\n+\r\n+    private static final String API_KEY = ApplicationGlobalState.getInstance().getApiKey();\r\n+\r\n+    private final OkHttpClient client = new OkHttpClient();\r\n+    private final ObjectMapper objectMapper = new ObjectMapper();\r\n+\r\n+    @Override\r\n+    public WeatherResponse getWeather(String city, Period period) throws IOException {\r\n+        HttpUrl url = new HttpUrl.Builder()\r\n+                .scheme(\"http\")\r\n+                .host(BASE_HOST)\r\n+                .addPathSegment(FORECAST_ENDPOINT)\r\n+                .addPathSegment(API_VERSION)\r\n+                .addPathSegment(FORECAST_TYPE)\r\n+                .addPathSegment(period.getApiDaysCode())\r\n+                .addPathSegment(city)\r\n+                .addQueryParameter(\"apikey\", API_KEY)\r\n+                .addQueryParameter(\"language\", \"ru-ru\")\r\n+                .addQueryParameter(\"metric\", \"true\")\r\n+                .build();\r\n+\r\n+        Request request = new Request.Builder()\r\n+                .addHeader(\"accept\", \"application/json\")\r\n+                .url(url)\r\n+                .build();\r\n+\r\n+\r\n+        Response response = client.newCall(request).execute();\r\n+        String result = response.body().string();\r\n+\r\n+        WeatherResponse weatherResponse = objectMapper.readValue(result, WeatherResponse.class);\r\n+\r\n+        return weatherResponse;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String findCityByUserInput(String userInput) throws IOException {\r\n+        // http://dataservice.accuweather.com/locations/v1/cities/autocomplete\r\n+\r\n+        HttpUrl url = new HttpUrl.Builder()\r\n+                .scheme(\"http\")\r\n+                .host(BASE_HOST)\r\n+                .addPathSegment(\"locations\")\r\n+                .addPathSegment(API_VERSION)\r\n+                .addPathSegment(\"cities\")\r\n+                .addPathSegment(\"autocomplete\")\r\n+                .addQueryParameter(\"apikey\", API_KEY)\r\n+                .addQueryParameter(\"language\", \"en-en\")\r\n+                .addQueryParameter(\"q\", userInput)\r\n+                .build();\r\n+\r\n+        Request request = new Request.Builder()\r\n+                .addHeader(\"accept\", \"application/json\")\r\n+                .url(url)\r\n+                .build();\r\n+\r\n+\r\n+        Response response = client.newCall(request).execute();\r\n+        String result = response.body().string();\r\n+\r\n+        JsonNode jsonNode = objectMapper.readTree(result);\r\n+\r\n+        // get first result\r\n+        JsonNode keyNode = jsonNode.findValue(\"Key\");\r\n+        if (keyNode == null) {\r\n+            return \"\";\r\n+        }\r\n+\r\n+        String key = keyNode.asText();\r\n+\r\n+        return key;\r\n+    }\r\n+\r\n+\r\n+}\r"
  },
  {
    "sha": "83b38ed5ed6693abae795d60f6cb78a7d93d0ca6",
    "filename": "tcore_7/ApplicationGlobalState.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/ApplicationGlobalState.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/ApplicationGlobalState.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/ApplicationGlobalState.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,34 @@\n+package tcore_7;\r\n+\r\n+public class ApplicationGlobalState {\r\n+    private static ApplicationGlobalState INSTANCE;\r\n+    private String selectedCity = null;\r\n+    private final String API_KEY = \"1Pu57qZ5H2PpiDwqf8HqEiUSsth5VRhU\";\r\n+    private final String DB_FILENAME = \"TEST.db\";\r\n+\r\n+\r\n+    public static ApplicationGlobalState getInstance() {\r\n+        if(INSTANCE == null) {\r\n+            INSTANCE = new ApplicationGlobalState();\r\n+        }\r\n+\r\n+        return INSTANCE;\r\n+    }\r\n+\r\n+    public String getDbFileName() {\r\n+        return DB_FILENAME;\r\n+    }\r\n+\r\n+    public String getSelectedCity(String city) {\r\n+        return selectedCity;\r\n+    }\r\n+\r\n+    public void setSelectedCity(String selectedCity) {\r\n+        this.selectedCity = selectedCity;\r\n+    }\r\n+\r\n+    public String getApiKey() {\r\n+        return this.API_KEY;\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "200137eeec146aeea60e3f835745a3eb779db863",
    "filename": "tcore_7/DatabaseRepository.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/DatabaseRepository.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/DatabaseRepository.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/DatabaseRepository.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,13 @@\n+package tcore_7;\r\n+\r\n+import java.io.IOException;\r\n+import java.sql.SQLException;\r\n+import java.util.List;\r\n+\r\n+public interface DatabaseRepository {\r\n+\r\n+    boolean saveWeatherData(WeatherData weatherData) throws SQLException;\r\n+\r\n+    List<WeatherData> getAllSavedData() throws IOException;\r\n+}\r\n+\r"
  },
  {
    "sha": "835cc250e8058e845de06d869f6d9670d6195056",
    "filename": "tcore_7/Functionality.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/Functionality.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/Functionality.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/Functionality.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,5 @@\n+package tcore_7;\r\n+\r\n+public enum  Functionality {\r\n+    GET_WEATHER_IN_NEXT_5_DAYS\r\n+}\r"
  },
  {
    "sha": "9074b32eb2ac668a3c27cd04385ce9c002a90269",
    "filename": "tcore_7/Main.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/Main.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/Main.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/Main.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,9 @@\n+package tcore_7;\r\n+\r\n+public class Main {\r\n+    public static void main(String[] args) throws Exception {\r\n+        UserInterface userInterface = new  UserInterface();\r\n+        userInterface.runApplication();\r\n+\r\n+    }\r\n+}\r"
  },
  {
    "sha": "17a91a8db7bdd9f37e254f3ae78b278ef075c50a",
    "filename": "tcore_7/MainApp.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/MainApp.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/MainApp.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/MainApp.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,123 @@\n+package tcore_7;\r\n+\r\n+import java.io.IOException;\r\n+import java.sql.*;\r\n+import java.util.List;\r\n+\r\n+\r\n+public class MainApp implements DatabaseRepository {\r\n+\r\n+    private static Connection connection;\r\n+    private static Statement statement;\r\n+    private static PreparedStatement preparedStatement;\r\n+\r\n+\r\n+    public static void main(String[] args) {\r\n+        try {\r\n+            Class.forName(\"org.sqlite.JDBC\");\r\n+\r\n+            connection = DriverManager.getConnection(\"jdbc:sqlite:TEST.db\");\r\n+            statement = connection.createStatement();\r\n+\r\n+            performDropTable();\r\n+            createTable();\r\n+            insertWeather();\r\n+//            readWeatherFromDB();\r\n+\r\n+            connection.close();\r\n+\r\n+        } catch (ClassNotFoundException | SQLException e) {\r\n+            e.printStackTrace();\r\n+        } finally {\r\n+            try {\r\n+                preparedStatement.close();\r\n+            } catch (SQLException throwable) {\r\n+                throwable.printStackTrace();\r\n+            }\r\n+            try {\r\n+                statement.close();\r\n+            } catch (SQLException throwable) {\r\n+                throwable.printStackTrace();\r\n+            }\r\n+            try {\r\n+                connection.close();\r\n+            } catch (SQLException throwable) {\r\n+                throwable.printStackTrace();\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    private static void createTable() throws SQLException {\r\n+        statement.executeUpdate(\"CREATE TABLE IF NOT EXISTS weather (\\n\"\r\n+                + \"id INTEGER PRIMARY KEY AUTOINCREMENT,\\n\"\r\n+                + \"city TEXT NOT NULL,\\n\"\r\n+                + \"localdate TEXT NOT NULL,\\n\"\r\n+                + \"text TEXT NOT NULL,\\n\"\r\n+                + \"temperature REAL NOT NULL \\n\"\r\n+                + \");\");\r\n+    }\r\n+\r\n+     String filename;\r\n+    String insertWeather = \"INSERT INTO weather (city, date, weatherText, temperature) VALUES (?,?,?,?)\";\r\n+\r\n+    public MainApp() {\r\n+        filename = ApplicationGlobalState.getInstance().getDbFileName();\r\n+    }\r\n+\r\n+    private static void performDropTable() throws SQLException {\r\n+        statement.executeUpdate(\"DROP TABLE IF EXISTS weather\");\r\n+    }\r\n+     private static void insertWeather() throws SQLException {\r\n+        preparedStatement = connection.prepareStatement(\"INSERT INTO weather (city, localdate, weatherText, temperature) \" +\r\n+                \" VALUES (?,?,?,?)\");\r\n+        for (int i = 0; i < 5; i++); {\r\n+        preparedStatement.setString(1,WeatherData.getCity());\r\n+        preparedStatement.setString(1,WeatherData.getDate());\r\n+        preparedStatement.setString(1,WeatherData.getText());\r\n+        preparedStatement.setDouble(1, WeatherData.getTemperature());\r\n+//             preparedStatement.addBatch();\r\n+             preparedStatement.executeBatch();\r\n+         }\r\n+     }\r\n+\r\n+    private Connection getConnection() throws SQLException {\r\n+        Connection connection = DriverManager.getConnection(\"jdbc:sqlite:\" + filename);\r\n+        return connection;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean saveWeatherData(WeatherData weatherData) throws SQLException {\r\n+\r\n+        try (Connection connection = getConnection();\r\n+             PreparedStatement saveWeather = connection.prepareStatement(insertWeather)) {\r\n+            saveWeather.setString(1, weatherData.getCity());\r\n+            saveWeather.setString(2, weatherData.getDate());\r\n+            saveWeather.setString(3, weatherData.getText());\r\n+            saveWeather.setDouble(4, weatherData.getTemperature());\r\n+            return saveWeather.execute();\r\n+        } catch (SQLException throwable) {\r\n+            throwable.printStackTrace();\r\n+        }\r\n+            throw new SQLException(\"Failure on saving weather object\");\r\n+        }\r\n+\r\n+    @Override\r\n+    public List<WeatherData> getAllSavedData() throws IOException {\r\n+        return null;\r\n+    }\r\n+\r\n+//    private static void readWeatherFromDB() throws SQLException {\r\n+//        ResultSet resultSet = statement.executeQuery(\"SELECT * FROM TEST.db\");\r\n+//        resultSet.last();\r\n+//        resultSet.next();\r\n+//        System.out.println(\r\n+//                resultSet.getInt(1) + \" | \" +\r\n+//                        resultSet.getString(2) + \" | \" +\r\n+//                        resultSet.getInt(3) + \" | \"\r\n+//        );\r\n+//    }\r\n+}\r\n+\r\n+\r\n+\r"
  },
  {
    "sha": "1a44680578b5445582cdfd922bb7b97a66312582",
    "filename": "tcore_7/Period.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/Period.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/Period.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/Period.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,16 @@\n+package tcore_7;\r\n+\r\n+public enum Period {\r\n+\r\n+    FIVE_DAYS(\"5day\");\r\n+\r\n+    private String apiDaysCode;\r\n+\r\n+    Period(String apiDaysCode) {\r\n+        this.apiDaysCode = apiDaysCode;\r\n+    }\r\n+\r\n+    public String getApiDaysCode() {\r\n+        return apiDaysCode;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "9ab3a6cf55316a2eb45a3e9c3c88de529559ce2f",
    "filename": "tcore_7/UserInterface.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/UserInterface.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/UserInterface.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/UserInterface.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,143 @@\n+package tcore_7;\r\n+\r\n+import org.apache.commons.lang3.StringUtils;\r\n+import org.apache.commons.lang3.math.NumberUtils;\r\n+import tcore_7.model.DailyForecast;\r\n+import tcore_7.model.WeatherResponse;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Scanner;\r\n+\r\n+\r\n+public class UserInterface {\r\n+\r\n+    public void runApplication() throws Exception {\r\n+\r\n+        WorkFlow workFlow = new WorkFlow();\r\n+\r\n+        Scanner scanner = new Scanner(System.in);\r\n+\r\n+        while (true) {\r\n+            for (Step step : workFlow.steps) {\r\n+                if (!step.isComplete) {\r\n+                    System.out.println(step.text);\r\n+                    String input = scanner.nextLine();\r\n+                    checkIsExit(input);\r\n+                    step.validateAndSet(input);\r\n+                }\r\n+            }\r\n+            boolean isAllComplete = workFlow.steps.stream()\r\n+                    .allMatch(step -> step.isComplete);\r\n+\r\n+            if (isAllComplete) {\r\n+                break;\r\n+            }\r\n+        }\r\n+\r\n+        Step step = workFlow.steps.stream().findFirst().get();\r\n+\r\n+        WeatherProvider weatherProvider = new AccuWeatherProvider();\r\n+        String cityByUserInput = weatherProvider.findCityByUserInput(step.stepUserInput);\r\n+\r\n+        if (StringUtils.isBlank(cityByUserInput)) {\r\n+            throw new RuntimeException(String.format(\"City %s is not found\", step.stepUserInput));\r\n+        }\r\n+\r\n+        WeatherResponse weather = weatherProvider.getWeather(cityByUserInput, Period.FIVE_DAYS);\r\n+\r\n+        List<DailyForecast> dailyForecasts = weather.getDailyForecasts();\r\n+\r\n+        for (int i = 0; i < dailyForecasts.size(); i++) {\r\n+            DailyForecast dailyForecast = dailyForecasts.get(i);\r\n+\r\n+            int day = i + 1;\r\n+            String city = step.stepUserInput;\r\n+            String date = dailyForecast.getDate();\r\n+            String weatherText = dailyForecast.getDay().getIconPhrase();\r\n+\r\n+            String temperature = dailyForecast.getTemperature().getMinimum().getValue().toString()\r\n+                    + \" \" +\r\n+                    dailyForecast.getTemperature().getMinimum().getUnit();\r\n+\r\n+            String result = String.format(\"%d день В городе %s на дату %s ожидается %s, температура [ %s ]\", day, city, date, weatherText, temperature);\r\n+\r\n+            System.out.println(result);\r\n+        }\r\n+    }\r\n+\r\n+    private void checkIsExit(String results) {\r\n+        if (results.toLowerCase().equals(\"выход\") || results.toLowerCase().equals(\"exit\")) {\r\n+            System.out.println(\"Завершаю работу\");\r\n+            System.exit(0);\r\n+        }\r\n+    }\r\n+\r\n+    private void setGlobalCity(String city) {\r\n+        ApplicationGlobalState.getInstance().getSelectedCity(city);\r\n+    }\r\n+\r\n+\r\n+    static class WorkFlow {\r\n+        List<Step> steps = new LinkedList<>();\r\n+\r\n+        public WorkFlow() {\r\n+            steps.add(new CityStep(\"Введите название города на англ. языке\"));\r\n+            steps.add(new ConfirmStep(\"Введите ответ:1 - Получить погоду на следующие 5дней,\" + \"выход (exit) - завершить работу\"));\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    static class ConfirmStep extends Step {\r\n+\r\n+        public ConfirmStep(String text) {\r\n+            super(text);\r\n+        }\r\n+\r\n+        @Override\r\n+        void validateAndSet(String userInput) throws IOException {\r\n+            super.validateAndSet(userInput);\r\n+\r\n+            if (!NumberUtils.isParsable(userInput)) {\r\n+                throw new IOException(\"Incorrect user input\");\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    static class CityStep extends Step {\r\n+\r\n+        public CityStep(String text) {\r\n+            super(text);\r\n+        }\r\n+\r\n+        @Override\r\n+        void validateAndSet(String userInput) throws IOException {\r\n+            super.validateAndSet(userInput);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    abstract static class Step {\r\n+\r\n+        private boolean isComplete;\r\n+\r\n+        private String text;\r\n+\r\n+        private String stepUserInput;\r\n+\r\n+        public Step(String text) {\r\n+            this.text = text;\r\n+        }\r\n+\r\n+        void validateAndSet(String userInput) throws IOException {\r\n+            if (StringUtils.isBlank(userInput)) {\r\n+                throw new IOException(\"Incorrect user input\");\r\n+            }\r\n+\r\n+            stepUserInput = userInput;\r\n+            isComplete = true;\r\n+        }\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "88fcbacd31fdfc959c79d28f0d6a8da3aaa0e2e4",
    "filename": "tcore_7/WeatherData.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/WeatherData.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/WeatherData.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/WeatherData.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,50 @@\n+package tcore_7;\r\n+\r\n+public class WeatherData {\r\n+\r\n+    private static String city;\r\n+    private static String date;\r\n+    private static String weatherText;\r\n+    private static Double temperature;\r\n+\r\n+\r\n+    public WeatherData(String city, String localDate, String weatherText, Double temperature) {\r\n+        this.city = city;\r\n+        this.date = localDate;\r\n+        this.weatherText = weatherText;\r\n+        this.temperature = temperature;\r\n+    }\r\n+\r\n+    public static String getCity() {\r\n+        return city;\r\n+    }\r\n+\r\n+    public void setCity(String city) {\r\n+        this.city = city;\r\n+    }\r\n+\r\n+    public static String getDate() {\r\n+        return date;\r\n+    }\r\n+\r\n+    public void setLocalDate(String localDate) {\r\n+        this.date = localDate;\r\n+    }\r\n+\r\n+    public static String getText() {\r\n+        return weatherText;\r\n+    }\r\n+\r\n+    public void setText(String text) {\r\n+        this.weatherText = weatherText;\r\n+    }\r\n+\r\n+    public static Double getTemperature() {\r\n+        return temperature;\r\n+    }\r\n+\r\n+    public void setTemperature(Double temperature) {\r\n+        this.temperature = temperature;\r\n+    }\r\n+}\r\n+\r"
  },
  {
    "sha": "6ef68e72a5d1fdd785630cc1b8ac04a2555a8b52",
    "filename": "tcore_7/WeatherProvider.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/WeatherProvider.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/WeatherProvider.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/WeatherProvider.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,13 @@\n+package tcore_7;\r\n+\r\n+import tcore_7.model.WeatherResponse;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+public interface WeatherProvider {\r\n+    WeatherResponse getWeather(String city, Period period) throws IOException;\r\n+\r\n+    String findCityByUserInput(String userInput) throws IOException;\r\n+\r\n+//    WeatherData getAllFromDb() throws IOException;\r\n+}\r"
  },
  {
    "sha": "80efd14aa2d47e1bbb36af1433cbc0b74994a487",
    "filename": "tcore_7/model/DailyForecast.java",
    "status": "added",
    "additions": 139,
    "deletions": 0,
    "changes": 139,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/DailyForecast.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/DailyForecast.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/model/DailyForecast.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,139 @@\n+\n+package tcore_7.model;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"Date\",\n+    \"EpochDate\",\n+    \"Temperature\",\n+    \"Day\",\n+    \"Night\",\n+    \"Sources\",\n+    \"MobileLink\",\n+    \"Link\"\n+})\n+public class DailyForecast implements Serializable\n+{\n+\n+    @JsonProperty(\"Date\")\n+    private String date;\n+    @JsonProperty(\"EpochDate\")\n+    private Integer epochDate;\n+    @JsonProperty(\"Temperature\")\n+    private Temperature temperature;\n+    @JsonProperty(\"Day\")\n+    private Day day;\n+    @JsonProperty(\"Night\")\n+    private Night night;\n+    @JsonProperty(\"Sources\")\n+    private List<String> sources = null;\n+    @JsonProperty(\"MobileLink\")\n+    private String mobileLink;\n+    @JsonProperty(\"Link\")\n+    private String link;\n+    @JsonIgnore\n+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n+    private final static long serialVersionUID = 4787617182521777232L;\n+\n+    @JsonProperty(\"Date\")\n+    public String getDate() {\n+        return date;\n+    }\n+\n+    @JsonProperty(\"Date\")\n+    public void setDate(String date) {\n+        this.date = date;\n+    }\n+\n+    @JsonProperty(\"EpochDate\")\n+    public Integer getEpochDate() {\n+        return epochDate;\n+    }\n+\n+    @JsonProperty(\"EpochDate\")\n+    public void setEpochDate(Integer epochDate) {\n+        this.epochDate = epochDate;\n+    }\n+\n+    @JsonProperty(\"Temperature\")\n+    public Temperature getTemperature() {\n+        return temperature;\n+    }\n+\n+    @JsonProperty(\"Temperature\")\n+    public void setTemperature(Temperature temperature) {\n+        this.temperature = temperature;\n+    }\n+\n+    @JsonProperty(\"Day\")\n+    public Day getDay() {\n+        return day;\n+    }\n+\n+    @JsonProperty(\"Day\")\n+    public void setDay(Day day) {\n+        this.day = day;\n+    }\n+\n+    @JsonProperty(\"Night\")\n+    public Night getNight() {\n+        return night;\n+    }\n+\n+    @JsonProperty(\"Night\")\n+    public void setNight(Night night) {\n+        this.night = night;\n+    }\n+\n+    @JsonProperty(\"Sources\")\n+    public List<String> getSources() {\n+        return sources;\n+    }\n+\n+    @JsonProperty(\"Sources\")\n+    public void setSources(List<String> sources) {\n+        this.sources = sources;\n+    }\n+\n+    @JsonProperty(\"MobileLink\")\n+    public String getMobileLink() {\n+        return mobileLink;\n+    }\n+\n+    @JsonProperty(\"MobileLink\")\n+    public void setMobileLink(String mobileLink) {\n+        this.mobileLink = mobileLink;\n+    }\n+\n+    @JsonProperty(\"Link\")\n+    public String getLink() {\n+        return link;\n+    }\n+\n+    @JsonProperty(\"Link\")\n+    public void setLink(String link) {\n+        this.link = link;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, Object> getAdditionalProperties() {\n+        return this.additionalProperties;\n+    }\n+\n+    @JsonAnySetter\n+    public void setAdditionalProperty(String name, Object value) {\n+        this.additionalProperties.put(name, value);\n+    }\n+\n+}"
  },
  {
    "sha": "d93de0e6acdf9b9a6fecde163df2ce9769bd1ac3",
    "filename": "tcore_7/model/Day.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Day.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Day.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/model/Day.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,99 @@\n+\n+package tcore_7.model;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"Icon\",\n+    \"IconPhrase\",\n+    \"HasPrecipitation\",\n+    \"PrecipitationType\",\n+    \"PrecipitationIntensity\"\n+})\n+public class Day implements Serializable\n+{\n+\n+    @JsonProperty(\"Icon\")\n+    private Integer icon;\n+    @JsonProperty(\"IconPhrase\")\n+    private String iconPhrase;\n+    @JsonProperty(\"HasPrecipitation\")\n+    private Boolean hasPrecipitation;\n+    @JsonProperty(\"PrecipitationType\")\n+    private String precipitationType;\n+    @JsonProperty(\"PrecipitationIntensity\")\n+    private String precipitationIntensity;\n+    @JsonIgnore\n+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n+    private final static long serialVersionUID = -241135131870122005L;\n+\n+    @JsonProperty(\"Icon\")\n+    public Integer getIcon() {\n+        return icon;\n+    }\n+\n+    @JsonProperty(\"Icon\")\n+    public void setIcon(Integer icon) {\n+        this.icon = icon;\n+    }\n+\n+    @JsonProperty(\"IconPhrase\")\n+    public String getIconPhrase() {\n+        return iconPhrase;\n+    }\n+\n+    @JsonProperty(\"IconPhrase\")\n+    public void setIconPhrase(String iconPhrase) {\n+        this.iconPhrase = iconPhrase;\n+    }\n+\n+    @JsonProperty(\"HasPrecipitation\")\n+    public Boolean getHasPrecipitation() {\n+        return hasPrecipitation;\n+    }\n+\n+    @JsonProperty(\"HasPrecipitation\")\n+    public void setHasPrecipitation(Boolean hasPrecipitation) {\n+        this.hasPrecipitation = hasPrecipitation;\n+    }\n+\n+    @JsonProperty(\"PrecipitationType\")\n+    public String getPrecipitationType() {\n+        return precipitationType;\n+    }\n+\n+    @JsonProperty(\"PrecipitationType\")\n+    public void setPrecipitationType(String precipitationType) {\n+        this.precipitationType = precipitationType;\n+    }\n+\n+    @JsonProperty(\"PrecipitationIntensity\")\n+    public String getPrecipitationIntensity() {\n+        return precipitationIntensity;\n+    }\n+\n+    @JsonProperty(\"PrecipitationIntensity\")\n+    public void setPrecipitationIntensity(String precipitationIntensity) {\n+        this.precipitationIntensity = precipitationIntensity;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, Object> getAdditionalProperties() {\n+        return this.additionalProperties;\n+    }\n+\n+    @JsonAnySetter\n+    public void setAdditionalProperty(String name, Object value) {\n+        this.additionalProperties.put(name, value);\n+    }\n+\n+}"
  },
  {
    "sha": "32d5a9e12b74f88364478f4ab895024624004f7c",
    "filename": "tcore_7/model/Headline.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Headline.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Headline.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/model/Headline.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,151 @@\n+\n+package tcore_7.model;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"EffectiveDate\",\n+    \"EffectiveEpochDate\",\n+    \"Severity\",\n+    \"Text\",\n+    \"Category\",\n+    \"EndDate\",\n+    \"EndEpochDate\",\n+    \"MobileLink\",\n+    \"Link\"\n+})\n+public class Headline implements Serializable\n+{\n+\n+    @JsonProperty(\"EffectiveDate\")\n+    private String effectiveDate;\n+    @JsonProperty(\"EffectiveEpochDate\")\n+    private Integer effectiveEpochDate;\n+    @JsonProperty(\"Severity\")\n+    private Integer severity;\n+    @JsonProperty(\"Text\")\n+    private String text;\n+    @JsonProperty(\"Category\")\n+    private String category;\n+    @JsonProperty(\"EndDate\")\n+    private String endDate;\n+    @JsonProperty(\"EndEpochDate\")\n+    private Integer endEpochDate;\n+    @JsonProperty(\"MobileLink\")\n+    private String mobileLink;\n+    @JsonProperty(\"Link\")\n+    private String link;\n+    @JsonIgnore\n+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n+    private final static long serialVersionUID = -7327208383142689268L;\n+\n+    @JsonProperty(\"EffectiveDate\")\n+    public String getEffectiveDate() {\n+        return effectiveDate;\n+    }\n+\n+    @JsonProperty(\"EffectiveDate\")\n+    public void setEffectiveDate(String effectiveDate) {\n+        this.effectiveDate = effectiveDate;\n+    }\n+\n+    @JsonProperty(\"EffectiveEpochDate\")\n+    public Integer getEffectiveEpochDate() {\n+        return effectiveEpochDate;\n+    }\n+\n+    @JsonProperty(\"EffectiveEpochDate\")\n+    public void setEffectiveEpochDate(Integer effectiveEpochDate) {\n+        this.effectiveEpochDate = effectiveEpochDate;\n+    }\n+\n+    @JsonProperty(\"Severity\")\n+    public Integer getSeverity() {\n+        return severity;\n+    }\n+\n+    @JsonProperty(\"Severity\")\n+    public void setSeverity(Integer severity) {\n+        this.severity = severity;\n+    }\n+\n+    @JsonProperty(\"Text\")\n+    public String getText() {\n+        return text;\n+    }\n+\n+    @JsonProperty(\"Text\")\n+    public void setText(String text) {\n+        this.text = text;\n+    }\n+\n+    @JsonProperty(\"Category\")\n+    public String getCategory() {\n+        return category;\n+    }\n+\n+    @JsonProperty(\"Category\")\n+    public void setCategory(String category) {\n+        this.category = category;\n+    }\n+\n+    @JsonProperty(\"EndDate\")\n+    public String getEndDate() {\n+        return endDate;\n+    }\n+\n+    @JsonProperty(\"EndDate\")\n+    public void setEndDate(String endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+    @JsonProperty(\"EndEpochDate\")\n+    public Integer getEndEpochDate() {\n+        return endEpochDate;\n+    }\n+\n+    @JsonProperty(\"EndEpochDate\")\n+    public void setEndEpochDate(Integer endEpochDate) {\n+        this.endEpochDate = endEpochDate;\n+    }\n+\n+    @JsonProperty(\"MobileLink\")\n+    public String getMobileLink() {\n+        return mobileLink;\n+    }\n+\n+    @JsonProperty(\"MobileLink\")\n+    public void setMobileLink(String mobileLink) {\n+        this.mobileLink = mobileLink;\n+    }\n+\n+    @JsonProperty(\"Link\")\n+    public String getLink() {\n+        return link;\n+    }\n+\n+    @JsonProperty(\"Link\")\n+    public void setLink(String link) {\n+        this.link = link;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, Object> getAdditionalProperties() {\n+        return this.additionalProperties;\n+    }\n+\n+    @JsonAnySetter\n+    public void setAdditionalProperty(String name, Object value) {\n+        this.additionalProperties.put(name, value);\n+    }\n+\n+}"
  },
  {
    "sha": "920bc2fc000037c01e0ab90edbc7d512c77c7c49",
    "filename": "tcore_7/model/Maximum.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Maximum.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Maximum.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/model/Maximum.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,73 @@\n+\n+package tcore_7.model;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"Value\",\n+    \"Unit\",\n+    \"UnitType\"\n+})\n+public class Maximum implements Serializable\n+{\n+\n+    @JsonProperty(\"Value\")\n+    private Double value;\n+    @JsonProperty(\"Unit\")\n+    private String unit;\n+    @JsonProperty(\"UnitType\")\n+    private Integer unitType;\n+    @JsonIgnore\n+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n+    private final static long serialVersionUID = -3014495282656126577L;\n+\n+    @JsonProperty(\"Value\")\n+    public Double getValue() {\n+        return value;\n+    }\n+\n+    @JsonProperty(\"Value\")\n+    public void setValue(Double value) {\n+        this.value = value;\n+    }\n+\n+    @JsonProperty(\"Unit\")\n+    public String getUnit() {\n+        return unit;\n+    }\n+\n+    @JsonProperty(\"Unit\")\n+    public void setUnit(String unit) {\n+        this.unit = unit;\n+    }\n+\n+    @JsonProperty(\"UnitType\")\n+    public Integer getUnitType() {\n+        return unitType;\n+    }\n+\n+    @JsonProperty(\"UnitType\")\n+    public void setUnitType(Integer unitType) {\n+        this.unitType = unitType;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, Object> getAdditionalProperties() {\n+        return this.additionalProperties;\n+    }\n+\n+    @JsonAnySetter\n+    public void setAdditionalProperty(String name, Object value) {\n+        this.additionalProperties.put(name, value);\n+    }\n+\n+}"
  },
  {
    "sha": "5ed9ecf012ba4730d7068236f384a9823e71dfd3",
    "filename": "tcore_7/model/Minimum.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Minimum.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Minimum.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/model/Minimum.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,73 @@\n+\n+package tcore_7.model;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"Value\",\n+    \"Unit\",\n+    \"UnitType\"\n+})\n+public class Minimum implements Serializable\n+{\n+\n+    @JsonProperty(\"Value\")\n+    private Double value;\n+    @JsonProperty(\"Unit\")\n+    private String unit;\n+    @JsonProperty(\"UnitType\")\n+    private Integer unitType;\n+    @JsonIgnore\n+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n+    private final static long serialVersionUID = -3910125474086185049L;\n+\n+    @JsonProperty(\"Value\")\n+    public Double getValue() {\n+        return value;\n+    }\n+\n+    @JsonProperty(\"Value\")\n+    public void setValue(Double value) {\n+        this.value = value;\n+    }\n+\n+    @JsonProperty(\"Unit\")\n+    public String getUnit() {\n+        return unit;\n+    }\n+\n+    @JsonProperty(\"Unit\")\n+    public void setUnit(String unit) {\n+        this.unit = unit;\n+    }\n+\n+    @JsonProperty(\"UnitType\")\n+    public Integer getUnitType() {\n+        return unitType;\n+    }\n+\n+    @JsonProperty(\"UnitType\")\n+    public void setUnitType(Integer unitType) {\n+        this.unitType = unitType;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, Object> getAdditionalProperties() {\n+        return this.additionalProperties;\n+    }\n+\n+    @JsonAnySetter\n+    public void setAdditionalProperty(String name, Object value) {\n+        this.additionalProperties.put(name, value);\n+    }\n+\n+}"
  },
  {
    "sha": "dddf66a6816b7ab7b7ade18b94a6dea520190873",
    "filename": "tcore_7/model/Night.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Night.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Night.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/model/Night.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,99 @@\n+\n+package tcore_7.model;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"Icon\",\n+    \"IconPhrase\",\n+    \"HasPrecipitation\",\n+    \"PrecipitationType\",\n+    \"PrecipitationIntensity\"\n+})\n+public class Night implements Serializable\n+{\n+\n+    @JsonProperty(\"Icon\")\n+    private Integer icon;\n+    @JsonProperty(\"IconPhrase\")\n+    private String iconPhrase;\n+    @JsonProperty(\"HasPrecipitation\")\n+    private Boolean hasPrecipitation;\n+    @JsonProperty(\"PrecipitationType\")\n+    private String precipitationType;\n+    @JsonProperty(\"PrecipitationIntensity\")\n+    private String precipitationIntensity;\n+    @JsonIgnore\n+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n+    private final static long serialVersionUID = -1454616389830149990L;\n+\n+    @JsonProperty(\"Icon\")\n+    public Integer getIcon() {\n+        return icon;\n+    }\n+\n+    @JsonProperty(\"Icon\")\n+    public void setIcon(Integer icon) {\n+        this.icon = icon;\n+    }\n+\n+    @JsonProperty(\"IconPhrase\")\n+    public String getIconPhrase() {\n+        return iconPhrase;\n+    }\n+\n+    @JsonProperty(\"IconPhrase\")\n+    public void setIconPhrase(String iconPhrase) {\n+        this.iconPhrase = iconPhrase;\n+    }\n+\n+    @JsonProperty(\"HasPrecipitation\")\n+    public Boolean getHasPrecipitation() {\n+        return hasPrecipitation;\n+    }\n+\n+    @JsonProperty(\"HasPrecipitation\")\n+    public void setHasPrecipitation(Boolean hasPrecipitation) {\n+        this.hasPrecipitation = hasPrecipitation;\n+    }\n+\n+    @JsonProperty(\"PrecipitationType\")\n+    public String getPrecipitationType() {\n+        return precipitationType;\n+    }\n+\n+    @JsonProperty(\"PrecipitationType\")\n+    public void setPrecipitationType(String precipitationType) {\n+        this.precipitationType = precipitationType;\n+    }\n+\n+    @JsonProperty(\"PrecipitationIntensity\")\n+    public String getPrecipitationIntensity() {\n+        return precipitationIntensity;\n+    }\n+\n+    @JsonProperty(\"PrecipitationIntensity\")\n+    public void setPrecipitationIntensity(String precipitationIntensity) {\n+        this.precipitationIntensity = precipitationIntensity;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, Object> getAdditionalProperties() {\n+        return this.additionalProperties;\n+    }\n+\n+    @JsonAnySetter\n+    public void setAdditionalProperty(String name, Object value) {\n+        this.additionalProperties.put(name, value);\n+    }\n+\n+}"
  },
  {
    "sha": "de75cbf9f0a92a42e5ee6a7b29106c71706fd9b8",
    "filename": "tcore_7/model/Temperature.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Temperature.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/Temperature.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/model/Temperature.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,60 @@\n+\n+package tcore_7.model;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"Minimum\",\n+    \"Maximum\"\n+})\n+public class Temperature implements Serializable\n+{\n+\n+    @JsonProperty(\"Minimum\")\n+    private Minimum minimum;\n+    @JsonProperty(\"Maximum\")\n+    private Maximum maximum;\n+    @JsonIgnore\n+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n+    private final static long serialVersionUID = -7831867112866696375L;\n+\n+    @JsonProperty(\"Minimum\")\n+    public Minimum getMinimum() {\n+        return minimum;\n+    }\n+\n+    @JsonProperty(\"Minimum\")\n+    public void setMinimum(Minimum minimum) {\n+        this.minimum = minimum;\n+    }\n+\n+    @JsonProperty(\"Maximum\")\n+    public Maximum getMaximum() {\n+        return maximum;\n+    }\n+\n+    @JsonProperty(\"Maximum\")\n+    public void setMaximum(Maximum maximum) {\n+        this.maximum = maximum;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, Object> getAdditionalProperties() {\n+        return this.additionalProperties;\n+    }\n+\n+    @JsonAnySetter\n+    public void setAdditionalProperty(String name, Object value) {\n+        this.additionalProperties.put(name, value);\n+    }\n+\n+}"
  },
  {
    "sha": "f304d5dcc133efaf5b8034ec8f0c807f25277d0a",
    "filename": "tcore_7/model/WeatherResponse.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/alishkasun/Test/blob/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/WeatherResponse.java",
    "raw_url": "https://github.com/alishkasun/Test/raw/12b3c9f2f724770b1f2442465a1b6958c018e6b6/tcore_7/model/WeatherResponse.java",
    "contents_url": "https://api.github.com/repos/alishkasun/Test/contents/tcore_7/model/WeatherResponse.java?ref=12b3c9f2f724770b1f2442465a1b6958c018e6b6",
    "patch": "@@ -0,0 +1,64 @@\n+\n+package tcore_7.model;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+\n+// Generated via service http://www.jsonschema2pojo.org/\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"Headline\",\n+    \"DailyForecasts\"\n+})\n+public class WeatherResponse implements Serializable\n+{\n+\n+    @JsonProperty(\"Headline\")\n+    private Headline headline;\n+    @JsonProperty(\"DailyForecasts\")\n+    private List<DailyForecast> dailyForecasts = null;\n+    @JsonIgnore\n+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n+    private final static long serialVersionUID = -7236486344600049068L;\n+\n+    @JsonProperty(\"Headline\")\n+    public Headline getHeadline() {\n+        return headline;\n+    }\n+\n+    @JsonProperty(\"Headline\")\n+    public void setHeadline(Headline headline) {\n+        this.headline = headline;\n+    }\n+\n+    @JsonProperty(\"DailyForecasts\")\n+    public List<DailyForecast> getDailyForecasts() {\n+        return dailyForecasts;\n+    }\n+\n+    @JsonProperty(\"DailyForecasts\")\n+    public void setDailyForecasts(List<DailyForecast> dailyForecasts) {\n+        this.dailyForecasts = dailyForecasts;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, Object> getAdditionalProperties() {\n+        return this.additionalProperties;\n+    }\n+\n+    @JsonAnySetter\n+    public void setAdditionalProperty(String name, Object value) {\n+        this.additionalProperties.put(name, value);\n+    }\n+\n+}"
  }
]
