[
  {
    "sha": "f68bc77aecbce588119b005bb810962245a11182",
    "filename": "yazbyz/week04/BJ_14888.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/younyikim/Algorithm-Study-2021/blob/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_14888.java",
    "raw_url": "https://github.com/younyikim/Algorithm-Study-2021/raw/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_14888.java",
    "contents_url": "https://api.github.com/repos/younyikim/Algorithm-Study-2021/contents/yazbyz/week04/BJ_14888.java?ref=35c01e3ff19d6000a3e0762a705e8fd3a554b4bf",
    "patch": "@@ -0,0 +1,76 @@\n+//BaekJoon14888\n+//author : Hyejin Eom\n+//20210318\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.StringTokenizer;\n+\n+public class BJ_14888 {\n+\tpublic static int MAX = Integer.MIN_VALUE;\t// 최댓값\n+\tpublic static int MIN = Integer.MAX_VALUE;\t// 최솟값\n+\tpublic static int[] operator = new int[4];\t// 연산자 개수\n+\tpublic static int[] number;\t\t\t\t\t// 숫자\n+\tpublic static int N;\t\t\t\t\t\t// 숫자 개수\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\n+\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\n+\t\tN = Integer.parseInt(br.readLine());\n+\t\tnumber = new int[N];\n+\n+\t\t// 숫자 입력\n+\t\tStringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n+\t\tfor (int i = 0; i < N; i++) {\n+\t\t\tnumber[i] = Integer.parseInt(st.nextToken());\n+\t\t}\n+\n+\t\t// 연산자 입력\n+\t\tst = new StringTokenizer(br.readLine(), \" \");\n+\t\tfor (int i = 0; i < 4; i++) {\n+\t\t\toperator[i] = Integer.parseInt(st.nextToken());\n+\t\t}\n+\n+\t\tdfs(number[0], 1);\n+\n+\t\tSystem.out.println(MAX);\n+\t\tSystem.out.println(MIN);\n+\n+\t}\n+\n+\tpublic static void dfs(int num, int idx) {\n+\t\tif (idx == N) {\n+\t\t\tMAX = Math.max(MAX, num);\n+\t\t\tMIN = Math.min(MIN, num);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfor (int i = 0; i < 4; i++) {\n+\t\t\t// 연산자 개수가 1개 이상인 경우\n+\t\t\tif (operator[i] > 0) {\n+\n+\t\t\t\t// 해당 연산자를 1 감소시킨다.\n+\t\t\t\toperator[i]--;\n+\n+\t\t\t\tswitch (i) {\n+\n+\t\t\t\t\tcase 0:\tdfs(num + number[idx], idx + 1);\tbreak;\n+\t\t\t\t\tcase 1:\tdfs(num - number[idx], idx + 1);\tbreak;\n+\t\t\t\t\tcase 2:\tdfs(num * number[idx], idx + 1);\tbreak;\n+\t\t\t\t\tcase 3:\tdfs(num / number[idx], idx + 1);\tbreak;\n+\n+\t\t\t\t}\n+\t\t\t\t// 재귀호출이 종료되면 다시 해당 연산자 개수를 복구한다.\n+\t\t\t\toperator[i]++;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+}\n+\n+\n+\n+\n+// 출처: https://st-lab.tistory.com/121?category=862595 [Stranger's LAB]"
  },
  {
    "sha": "60952ebddd0c8d0b80794b84138484576dde8a68",
    "filename": "yazbyz/week04/BJ_14889.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/younyikim/Algorithm-Study-2021/blob/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_14889.java",
    "raw_url": "https://github.com/younyikim/Algorithm-Study-2021/raw/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_14889.java",
    "contents_url": "https://api.github.com/repos/younyikim/Algorithm-Study-2021/contents/yazbyz/week04/BJ_14889.java?ref=35c01e3ff19d6000a3e0762a705e8fd3a554b4bf",
    "patch": "@@ -0,0 +1,81 @@\n+//BaekJoon14889\n+//author : Hyejin Eom\n+//20210318\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.StringTokenizer;\n+\n+public class BJ_14889 {\n+\tstatic int N;\n+\tstatic int[][] map;\n+\tstatic boolean[] visit;\n+\tstatic int Min = Integer.MAX_VALUE;\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\t\tN = Integer.parseInt(br.readLine());\n+\t\tmap = new int[N][N];\n+\t\tvisit = new boolean[N];\n+\t\tfor (int i = 0; i < N; i++) {\n+\t\t\tStringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n+\t\t\tfor (int j = 0; j < N; j++) {\n+\t\t\t\tmap[i][j] = Integer.parseInt(st.nextToken());\n+\t\t\t}\n+\t\t}\n+\t\tcombi(0, 0);\n+\t\tSystem.out.println(Min);\n+\t}\n+\t// idx는 인덱스, count는 조합 개수(=재귀 깊이)\n+\tstatic void combi(int idx, int count) {\n+\t\t// 팀 조합이 완성될 경우\n+\t\tif(count == N / 2) {\n+/*\n+방문한 팀과 방문하지 않은 팀을 각각 나누어\n+각 팀의 점수를 구한 뒤 최솟값을 찾는다.\n+*/\n+\t\t\tdiff();\n+\t\t\treturn;\n+\t\t}\n+\t\tfor(int i = idx; i < N; i++) {\n+\t\t\t// 방문하지 않았다면?\n+\t\t\tif(!visit[i]) {\n+\t\t\t\tvisit[i] = true; // 방문으로 변경\n+\t\t\t\tcombi(i + 1, count + 1); // 재귀 호출\n+\t\t\t\tvisit[i] = false; // 재귀가 끝나면 비방문으로 변경\n+\t\t\t}\n+\t\t}\n+\t}\n+\t// 두 팀의 능력치 차이를 계산하는 함수\n+\tstatic void diff() {\n+\t\tint team_start = 0;\n+\t\tint team_link = 0;\n+\t\tfor (int i = 0; i < N - 1; i++) {\n+\t\t\tfor (int j = i + 1; j < N; j++) {\n+\t\t\t\t// i 번째 사람과 j 번째 사람이 true라면 스타트팀으로 점수 플러스\n+\t\t\t\tif (visit[i] == true && visit[j] == true) {\n+\t\t\t\t\tteam_start += map[i][j];\n+\t\t\t\t\tteam_start += map[j][i];\n+\t\t\t\t}\n+\t\t\t\t// i 번째 사람과 j 번째 사람이 false라면 링크팀으로 점수 플러스\n+\t\t\t\telse if (visit[i] == false && visit[j] == false) {\n+\t\t\t\t\tteam_link += map[i][j];\n+\t\t\t\t\tteam_link += map[j][i];\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t// 두 팀의 점수 차이 (절댓값)\n+\t\tint val = Math.abs(team_start - team_link);\n+/*\n+두 팀의 점수차가 0이라면 가장 낮은 최솟값이기 때문에\n+더이상의 탐색 필요없이 0을 출력하고 종료하면 된다.\n+*/\n+\t\tif (val == 0) {\n+\t\t\tSystem.out.println(val);\n+\t\t\tSystem.exit(0);\n+\t\t}\n+\t\tMin = Math.min(val, Min);\n+\t}\n+}\n+\n+// 출처: https://st-lab.tistory.com/122?category=862595 [Stranger's LAB]"
  },
  {
    "sha": "e93c682b5a4ff7641444d09e882e8de597a6a5b3",
    "filename": "yazbyz/week04/BJ_15649.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/younyikim/Algorithm-Study-2021/blob/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_15649.java",
    "raw_url": "https://github.com/younyikim/Algorithm-Study-2021/raw/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_15649.java",
    "contents_url": "https://api.github.com/repos/younyikim/Algorithm-Study-2021/contents/yazbyz/week04/BJ_15649.java?ref=35c01e3ff19d6000a3e0762a705e8fd3a554b4bf",
    "patch": "@@ -0,0 +1,52 @@\n+//BaekJoon15649\n+//author : Hyejin Eom\n+// reference : https://st-lab.tistory.com/114\n+//20210318\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public class BJ_15649 {\n+\tpublic static int[] arr;\n+\tpublic static boolean[] visit;\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\n+\t\tString[] temp = br.readLine().split(\" \");\n+\t\tint N = Integer.parseInt(temp[0]);\n+\t\tint M = Integer.parseInt(temp[1]);\n+\t\tif (1 > M || M > N || N > 8) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tvisit = new boolean[N];\n+\t\tarr = new int[M];\n+\t\tdfs(N, M, 0);\n+\n+\t}\n+\tpublic static void dfs(int N, int M, int depth) {\n+\t\t// 재귀 깊이가 M과 같아지면 탐색과정에서 담았던 배열을 출력\n+\t\tif (depth == M) {\n+\t\t\tfor (int val : arr) {\n+\t\t\t\tSystem.out.print(val + \" \");\n+\t\t\t}\n+\t\t\tSystem.out.println();\n+\t\t\treturn;\n+\t\t}\n+\t\tfor (int i = 0; i < N; i++) {\n+\t\t\t// 만약 해당 노드(값)을 방문하지 않았다면?\n+\t\t\tif (visit[i] == false) {\n+\t\t\t\tvisit[i] = true; // 해당 노드를 방문상태로 변경\n+\t\t\t\tarr[depth] = i + 1; // 해당 깊이를 index로 하여 i + 1 값 저장\n+\t\t\t\tdfs(N, M, depth + 1); // 다음 자식 노드 방문을 위해 depth 1 증가시키면서 재귀호출\n+\t\t\t\t// 자식노드 방문이 끝나고 돌아오면 방문노드를 방문하지 않은 상태로 변경\n+\t\t\t\tvisit[i] = false;\n+\t\t\t}\n+\t\t}\n+\t\treturn;\n+\t}\n+\n+\t\t//출처: https://st-lab.tistory.com/114 [Stranger's LAB]\n+}"
  },
  {
    "sha": "3e7a61f46b7a6416689ff764d2d70dbd202f9fe1",
    "filename": "yazbyz/week04/BJ_15650.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/younyikim/Algorithm-Study-2021/blob/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_15650.java",
    "raw_url": "https://github.com/younyikim/Algorithm-Study-2021/raw/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_15650.java",
    "contents_url": "https://api.github.com/repos/younyikim/Algorithm-Study-2021/contents/yazbyz/week04/BJ_15650.java?ref=35c01e3ff19d6000a3e0762a705e8fd3a554b4bf",
    "patch": "@@ -0,0 +1,40 @@\n+//BaekJoon15650\n+//author : Hyejin Eom\n+//20210318\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public class BJ_15650 {\n+\tpublic static int[] arr;\n+\tpublic static int M, N;\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\n+\t\tString[] temp = br.readLine().split(\" \");\n+\t\tN = Integer.parseInt(temp[0]);\n+\t\tM = Integer.parseInt(temp[1]);\n+\t\tif (1 > M || M > N || N > 8) { return; }\n+\n+\t\tarr = new int[M];\n+\n+\t\tdfs(1, 0);\n+\t}\n+\tpublic static void dfs(int at, int depth) {\n+\t\tif (depth == M) {\n+\t\t\tfor (int val : arr) {\n+\t\t\t\tSystem.out.print(val + \" \");\n+\t\t\t}\n+\t\t\tSystem.out.println();\n+\t\t\treturn;\n+\t\t}\n+\t\tfor (int i = at; i <= N; i++) {\n+\t\t\tarr[depth] = i;\n+\t\t\tdfs(i + 1, depth + 1);\n+\t\t}\n+\t}\n+\n+\t// 출처: https://st-lab.tistory.com/115?category=862595 [Stranger's LAB]\n+}"
  },
  {
    "sha": "c0dfd852f2c595d21b27e56625a293731e455cdf",
    "filename": "yazbyz/week04/BJ_15651.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/younyikim/Algorithm-Study-2021/blob/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_15651.java",
    "raw_url": "https://github.com/younyikim/Algorithm-Study-2021/raw/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_15651.java",
    "contents_url": "https://api.github.com/repos/younyikim/Algorithm-Study-2021/contents/yazbyz/week04/BJ_15651.java?ref=35c01e3ff19d6000a3e0762a705e8fd3a554b4bf",
    "patch": "@@ -0,0 +1,44 @@\n+//BaekJoon15651\n+//author : Hyejin Eom\n+//20210318\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public class BJ_15651 {\n+\tpublic static int[] arr;\n+\tpublic static int M, N;\n+\tpublic static StringBuilder sb = new StringBuilder();\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\n+\t\tString[] temp = br.readLine().split(\" \");\n+\t\tN = Integer.parseInt(temp[0]);\n+\t\tM = Integer.parseInt(temp[1]);\n+\t\tif (1 > M || M > N || N > 7) { return; }\n+\n+\t\tarr = new int[M];\n+\n+\t\tdfs(0);\n+\n+\t\tSystem.out.print(sb);\n+\t}\n+\tpublic static void dfs(int depth) {\n+\t\tif (depth == M) {\n+\t\t\tfor (int i = 0; i < M; i++) {\n+\t\t\t\tsb.append(arr[i] + \" \");\n+\t\t\t}\n+\t\t\tsb.append('\\n');\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfor (int i = 1; i <= N; i++) {\n+\t\t\tarr[depth] = i;\n+\t\t\tdfs(depth + 1);\n+\t\t}\n+\t}\n+\n+\t// 출처: https://st-lab.tistory.com/115?category=862595 [Stranger's LAB]\n+}"
  },
  {
    "sha": "5506ee71c4fe379136c2dc83fa3bbe9b7848eefc",
    "filename": "yazbyz/week04/BJ_15652.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/younyikim/Algorithm-Study-2021/blob/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_15652.java",
    "raw_url": "https://github.com/younyikim/Algorithm-Study-2021/raw/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_15652.java",
    "contents_url": "https://api.github.com/repos/younyikim/Algorithm-Study-2021/contents/yazbyz/week04/BJ_15652.java?ref=35c01e3ff19d6000a3e0762a705e8fd3a554b4bf",
    "patch": "@@ -0,0 +1,40 @@\n+//BaekJoon15652\n+//author : Hyejin Eom\n+//20210318\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public class BJ_15652 {\n+\tpublic static int[] arr;\n+\tpublic static int M, N;\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\n+\t\tString[] temp = br.readLine().split(\" \");\n+\t\tN = Integer.parseInt(temp[0]);\n+\t\tM = Integer.parseInt(temp[1]);\n+\t\tif (1 > M || M > N || N > 8) { return; }\n+\n+\t\tarr = new int[M];\n+\n+\t\tdfs(1, 0);\n+\t}\n+\tpublic static void dfs(int at, int depth) {\n+\t\tif (depth == M) {\n+\t\t\tfor (int val : arr) {\n+\t\t\t\tSystem.out.print(val + \" \");\n+\t\t\t}\n+\t\t\tSystem.out.println();\n+\t\t\treturn;\n+\t\t}\n+\t\tfor (int i = at; i <= N; i++) {\n+\t\t\tarr[depth] = i;\n+\t\t\tdfs(i, depth + 1);\n+\t\t}\n+\t}\n+\n+\t// 출처: https://st-lab.tistory.com/115?category=862595 [Stranger's LAB]\n+}"
  },
  {
    "sha": "41c3a51ad5006345b2236a57cf354f88ec6fa059",
    "filename": "yazbyz/week04/BJ_2580.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/younyikim/Algorithm-Study-2021/blob/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_2580.java",
    "raw_url": "https://github.com/younyikim/Algorithm-Study-2021/raw/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_2580.java",
    "contents_url": "https://api.github.com/repos/younyikim/Algorithm-Study-2021/contents/yazbyz/week04/BJ_2580.java?ref=35c01e3ff19d6000a3e0762a705e8fd3a554b4bf",
    "patch": "@@ -0,0 +1,100 @@\n+//BaekJoon2580\n+//author : Hyejin Eom\n+//20210318\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.StringTokenizer;\n+\n+public class BJ_2580 {\n+\tpublic static int[][] arr = new int[9][9];\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\n+\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\n+\t\tfor (int i = 0; i < 9; i++) {\n+\t\t\tStringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n+\t\t\tfor (int j = 0; j < 9; j++) {\n+\t\t\t\tarr[i][j] = Integer.parseInt(st.nextToken());\n+\t\t\t}\n+\t\t}\n+\n+\t\tsudoku(0, 0);\n+\n+\t}\n+\n+\tpublic static void sudoku(int row, int col) {\n+\n+\t\t// 해당 행이 다 채워졌을 경우 다음 행의 첫 번째 열부터 시작\n+\t\tif (col == 9) {\n+\t\t\tsudoku(row + 1, 0);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// 행과 열이 모두 채워졌을 경우 출력 후 종료\n+\t\tif (row == 9) {\n+\t\t\tStringBuilder sb = new StringBuilder();\n+\t\t\tfor (int i = 0; i < 9; i++) {\n+\t\t\t\tfor (int j = 0; j < 9; j++) {\n+\t\t\t\t\tsb.append(arr[i][j]).append(' ');\n+\t\t\t\t}\n+\t\t\t\tsb.append('\\n');\n+\t\t\t}\n+\t\t\tSystem.out.println(sb);\n+\t\t\t// 출력 뒤 시스템을 종료한다.\n+\t\t\tSystem.exit(0);\n+\t\t}\n+\n+\t\t// 만약 해당 위치가 0 이라면 1부터 9까지 중 가능한 수 탐색\n+\t\tif (arr[row][col] == 0) {\n+\t\t\tfor (int i = 1; i <= 9; i++) {\n+\t\t\t\t// i 값이 중복되지 않는지 검사\n+\t\t\t\tif (possibility(row, col, i)) {\n+\t\t\t\t\tarr[row][col] = i;\n+\t\t\t\t\tsudoku(row, col + 1);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tarr[row][col] = 0;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tsudoku(row, col + 1);\n+\n+\t}\n+\n+\tpublic static boolean possibility(int row, int col, int value) {\n+\n+\t\t// 같은 행에 있는 원소들 중 겹치는 열 원소가 있는지 검사\n+\t\tfor (int i = 0; i < 9; i++) {\n+\t\t\tif (arr[row][i] == value) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// 같은 열에 있는 원소들 중 겹치는 행 원소가 있는지 검사\n+\t\tfor (int i = 0; i < 9; i++) {\n+\t\t\tif (arr[i][col] == value) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// 3*3 칸에 중복되는 원소가 있는지 검사\n+\t\tint set_row = (row / 3) * 3; // value가 속한 3x3의 행의 첫 위치\n+\t\tint set_col = (col / 3) * 3; // value가 속한 3x3의 열의 첫 위치\n+\n+\t\tfor (int i = set_row; i < set_row + 3; i++) {\n+\t\t\tfor (int j = set_col; j < set_col + 3; j++) {\n+\t\t\t\tif (arr[i][j] == value) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn true; // 중복되는 것이 없을 경우 true 반환\n+\t}\n+\n+}\n+\n+//출처: https://st-lab.tistory.com/119?category=862595 [Stranger's LAB]\n\\ No newline at end of file"
  },
  {
    "sha": "8b13d90c78da86b86e9d869f1015d9ad002cafa0",
    "filename": "yazbyz/week04/BJ_9663.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/younyikim/Algorithm-Study-2021/blob/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_9663.java",
    "raw_url": "https://github.com/younyikim/Algorithm-Study-2021/raw/35c01e3ff19d6000a3e0762a705e8fd3a554b4bf/yazbyz/week04/BJ_9663.java",
    "contents_url": "https://api.github.com/repos/younyikim/Algorithm-Study-2021/contents/yazbyz/week04/BJ_9663.java?ref=35c01e3ff19d6000a3e0762a705e8fd3a554b4bf",
    "patch": "@@ -0,0 +1,52 @@\n+//BaekJoon9663\n+//author : Hyejin Eom\n+//20210318\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public class BJ_9663 {\n+\tpublic static int[] arr;\n+\tpublic static int N;\n+\tpublic static int count = 0;\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\t\tN = Integer.parseInt(br.readLine());\n+\t\tarr = new int[N];\n+\t\tnQueen(0);\n+\t\tSystem.out.println(count);\n+\t}\n+\tpublic static void nQueen(int depth) {\n+\t\t// 모든 원소를 다 채운 상태면 count 증가 및 return\n+\t\tif (depth == N) {\n+\t\t\tcount++;\n+\t\t\treturn;\n+\t\t}\n+\t\tfor (int i = 0; i < N; i++) {\n+\t\t\tarr[depth] = i;\n+\t\t\t// 놓을 수 있는 위치일 경우 재귀호출\n+\t\t\tif (Possibility(depth)) {\n+\t\t\t\tnQueen(depth + 1);\n+\t\t\t}\n+\t\t}\n+\t}\n+\tpublic static boolean Possibility(int col) {\n+\t\tfor (int i = 0; i < col; i++) {\n+\t\t\t// 해당 열의 행과 i열의 행이 일치할경우 (같은 행에 존재할 경우)\n+\t\t\tif (arr[col] == arr[i]) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\t/*\n+\t\t\t * 대각선상에 놓여있는 경우\n+\t\t\t * (열의 차와 행의 차가 같을 경우가 대각선에 놓여있는 경우다)\n+\t\t\t */\n+\t\t\telse if (Math.abs(col - i) == Math.abs(arr[col] - arr[i])) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n+\t}\n+}\n+\n+// 출처: https://st-lab.tistory.com/118?category=862595 [Stranger's LAB]"
  }
]
