[
  {
    "sha": "261c335495f1c1d78280a062c5daf6eee5dfd861",
    "filename": "src/java_1/collections/CollectionsChallenges.java",
    "status": "modified",
    "additions": 168,
    "deletions": 16,
    "changes": 184,
    "blob_url": "https://github.com/ATown0789/java/blob/53b1c8caa6f300db8ce7d524fb27f517a6d18c42/src/java_1/collections/CollectionsChallenges.java",
    "raw_url": "https://github.com/ATown0789/java/raw/53b1c8caa6f300db8ce7d524fb27f517a6d18c42/src/java_1/collections/CollectionsChallenges.java",
    "contents_url": "https://api.github.com/repos/ATown0789/java/contents/src/java_1/collections/CollectionsChallenges.java?ref=53b1c8caa6f300db8ce7d524fb27f517a6d18c42",
    "patch": "@@ -1,61 +1,125 @@\n-package java_1.collections;\n-\n import java.util.*;\n \n public class CollectionsChallenges {\n \n \tpublic static void main(String[] args) {\n-//\t\tComplete the code challenges for the following static methods\n+//\t\tComplete the code challenges for the following static methods I forgot to make a branch\n+\n+\t\tArrayList<Integer> arrayList = new ArrayList<>(\n+\t\t\t\tArrays.asList(12, 41, 435, 76, 43, 12, 10, 34)\n+\t\t);\n+\t\tint[] array = {1,2,3,4,5,6,7};\n+\t\tArrayList<String> arrayList1 = new ArrayList<String>();\n+\t\tarrayList1.add(\"hello1\");\n+\t\tarrayList1.add(\"hello1\");\n+\t\tarrayList1.add(\"hello1\");\n+\t\tarrayList1.add(\"hello2\");\n+\t\tarrayList1.add(\"hello3\");\n+\t\tarrayList1.add(\"hello4\");\n+\t\tarrayList1.add(\"hello5\");\n+\t\tarrayList1.add(\"hello5\");\n+\t\tarrayList1.add(\"hello4\");\n+\t\tarrayList1.add(\"hello3\");\n+\n+\t\tPerson anthony = new Person(\"Anthony\",31);\n+\t\tPerson anthonyClone = new Person(\"Anthony Clone\",31);\n+\t\tPerson yesica = new Person(\"Yesica\",33);\n+\t\tPerson yesicaClone = new Person(\"Yesica Clone\",33);\n+\t\tPerson eddison = new Person(\"Eddison\",2);\n+\t\tPerson grumps = new Person(\"Grumps\",61);\n+\n+\t\tPerson [] personArr = {anthonyClone,anthony,yesica,eddison,grumps,yesicaClone};\n+\n+\t\tSystem.out.println(covidVaccineQueue(personArr));\n+\n+\n \t}\n \n-\tint findVal(int val, ArrayList<Integer> arrList) {\n-//\t\tfind a value in the input array list.  return it if found.  If not, return 0.\n-\t\treturn 0;\n+\tstatic int findVal(int val, ArrayList<Integer> arrList) {\n+\t\t//\t\tfind a value in the input array list.  return it if found.  If not, return 0.\n+\n+\t\tif(arrList.contains(val)) {\n+\t\t\treturn val;\n+\t\t}\n+\n+\t\telse return 0;\n \t}\n \n-\tstatic List convertArrToList(Object[] array) {\n+\tstatic List convertArrToList(int[] array) {\n //\t\tconvert the array to a list and return it.\n-\t\treturn null;\n+\n+\t\treturn Arrays.asList(array);\n \t}\n \n \tstatic Set<String> listToSet(List<String> states) {\n //\t\tconvert a list of US states to a set.  return the set.\n-\t\treturn null;\n+\t\tSet<String> stateSet = new HashSet <>(states);\n+\t\treturn stateSet;\n \t}\n \n \tstatic int addToList(int x, ArrayList<Integer> numList) {\n \t\t// add the x input to the array list.  return the value if succcessfully added.\n-\t\treturn x;\n+\t\tint testNum = numList.size(); //I only added the testNum and if else because it said to return if successfully added\n+\t\tnumList.add(x);\n+\t\tif(testNum < numList.size())\n+\t\t\treturn x;\n+\t\telse\n+\t\t\treturn 0;\n \t}\n \n \tstatic void removeFromList(int x, ArrayList<Integer> numList) {\n \t\t// remove the input parameter value x from the numList.\n+\t\tint indexNum = numList.indexOf(x);\n+\t\tif(indexNum > -1)\n+\t\t\tnumList.remove(indexNum);\n+\t\telse\n+\t\t\tSystem.out.println(\"Number not found in ArrayList\");\n \t}\n \n-\tstatic int insertIntoList(int x, int i, ArrayList<Integer> numList) {\n+\tstatic void insertIntoList(int x, int i, ArrayList<Integer> numList) {\n \t\t// insert the the value x at index position i for the input numList.  If the index position is outside the bounds of the current numList, add it to the end of the array list.\n-\t\treturn x;\n+\n+\t\tif (i +1 >= numList.size() || i < 0)\n+\t\t\tnumList.add(x);\n+\t\telse\n+\t\t\tnumList.add(i,x);\n \t}\n \n \tstatic List<Integer> reverseNums(ArrayList<Integer> nums) {\n \t\t/*\n \t\treverse the values of the nums list\n \t\treturn the reversed array list.\n \t\t*/\n-\t\treturn null;\n+\t\tCollections.reverse(nums);\n+\t\treturn nums;\n \t}\n \n \tstatic LinkedList<String> reverseLinkedList(LinkedList<String> linkedList, boolean mutate) {\n \n /*\t\treverse the linked list.  If the mutate boolean is set to true, reverse a copy of the linked list without mutating the original list.  If mutate is false, reverse the original linkedList in place.\n \t\texample : [\"red\",\"orange\",\"yellow\",\"green\",\"blue\",\"indigo\",\"violet\"] => reverseLinkedList => [violet, indigo, blue, green, yellow, orange, red]\n  */\n-\t\treturn linkedList;\n+\t\tif(mutate) {\n+\t\t\tLinkedList<String> listCopy = new LinkedList<String>();\n+\t\t\tlistCopy = (LinkedList)linkedList.clone();\n+\t\t\tCollections.reverse(listCopy);\n+\t\t\treturn listCopy;\n+\t\t}\n+\t\telse {\n+\t\t\tCollections.reverse(linkedList);\n+\t\t\treturn linkedList;\n+\t\t}\n \t}\n \n \tstatic ArrayList<String> removeDuplicates(ArrayList<String> names) {\n //\t\tremove duplicates from the list of name strings.  return a new array list with the unique elements.\n-\t\treturn names;\n+\t\tHashSet<String> nameSet = new HashSet<String>();\n+\t\tfor(String name : names)\n+\t\t\tnameSet.add(name);\n+\t\tArrayList<String> newList = new ArrayList<>();\n+\t\tfor(String name: nameSet)\n+\t\t\tnewList.add(name);\n+\t\treturn newList;\n \t}\n \n \tstatic class Person {\n@@ -79,8 +143,96 @@ public String toString() {\n \t//Optional\n \tstatic Queue<Person> covidVaccineQueue(Person[] people) {\n //\t\tThere is an Array of people looking to get the COVID-19 vaccine.  The vaccines are administered on a first-come, first-serve basis.  Sequence the order of people by age.  The most elderly people get placed first in the queue, with the youngest getting placed last in the queue.  Return the Queue of folks waiting to be vaccinated.\n+\t\tArrayList<Person> toBeSorted = new ArrayList<>(Arrays.asList(people)); //used ArrayList to sort\n+\t\tList<Person> sorted = new LinkedList<>(); //cast to LinkedList to use queue\n+\n+\t\tsorted = quickSort(toBeSorted);\n \n-\t\treturn null;\n+\t\tQueue<Person> sortedQ = new LinkedList<>(sorted); //cast to queue\n+\n+\t\treturn sortedQ;\n \t}\n \n+\n+\t//Stable Quick Sort (copied from https://www.geeksforgeeks.org/stable-quicksort/ and modified to take a Person object and to sort descending)\n+\n+\t// The code uses middle element as pivot.\n+\n+\tpublic static ArrayList<Person> quickSort(ArrayList<Person> people)\n+\t{\n+\n+\t\t// Base case\n+\t\tif(people.size() <= 1)\n+\t\t{\n+\t\t\treturn people;\n+\t\t}\n+\t\telse\n+\t\t{\n+\n+\t\t\t// Let us choose middle element a pivot\n+\t\t\tint mid = people.size() / 2;\n+\t\t\tPerson pivot = people.get(mid);\n+\n+\t\t\t// key element is used to break the array\n+\t\t\t// into 2 halves according to their values\n+\t\t\tArrayList<Person> smaller = new ArrayList<>();\n+\t\t\tArrayList<Person> greater = new ArrayList<>();\n+\n+\t\t\t// Put greater elements in greater list,\n+\t\t\t// smaller elements in smaller list. Also,\n+\t\t\t// compare positions to decide where to put.\n+\t\t\tfor(int ind = 0; ind < people.size(); ind++)\n+\t\t\t{\n+\t\t\t\tPerson individual = people.get(ind);\n+\t\t\t\tint val = individual.age;\n+\t\t\t\tif( ind != mid )\n+\t\t\t\t{\n+\t\t\t\t\tif( val < pivot.age )\n+\t\t\t\t\t{\n+\t\t\t\t\t\tsmaller.add(individual);\n+\t\t\t\t\t}\n+\t\t\t\t\telse if(val > pivot.age)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tgreater.add(individual);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\n+\t\t\t\t\t\t// If value is same, then considering\n+\t\t\t\t\t\t// position to decide the list.\n+\t\t\t\t\t\tif(ind < mid)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tgreater.add(individual);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tsmaller.add(individual);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tArrayList<Person> ans = new ArrayList<Person>();\n+\t\t\tArrayList<Person> sa1 = quickSort(smaller);\n+\t\t\tArrayList<Person> sa2 = quickSort(greater);\n+\n+\t\t\t// add all elements of greater list into ans list\n+\t\t\tfor(Person val2 : sa2)\n+\t\t\t\tans.add(val2);\n+\n+\t\t\t// add pivot element into ans list\n+\t\t\tans.add(pivot);\n+\n+\t\t\t// add all elements of smaller list into ans list\n+\t\t\tfor(Person val1 : sa1)\n+\t\t\t\tans.add(val1);\n+\n+\t\t\t// return ans list\n+\t\t\treturn ans;\n+\t\t}\n+\t}\n+\n+// This code is contributed by Naresh Saharan\n+\n+\n }"
  },
  {
    "sha": "844925b971a69535f5e611fea3f9a494dd08b159",
    "filename": "src/java_1/dataTypes/DataTypes.java",
    "status": "modified",
    "additions": 29,
    "deletions": 9,
    "changes": 38,
    "blob_url": "https://github.com/ATown0789/java/blob/53b1c8caa6f300db8ce7d524fb27f517a6d18c42/src/java_1/dataTypes/DataTypes.java",
    "raw_url": "https://github.com/ATown0789/java/raw/53b1c8caa6f300db8ce7d524fb27f517a6d18c42/src/java_1/dataTypes/DataTypes.java",
    "contents_url": "https://api.github.com/repos/ATown0789/java/contents/src/java_1/dataTypes/DataTypes.java?ref=53b1c8caa6f300db8ce7d524fb27f517a6d18c42",
    "patch": "@@ -1,4 +1,4 @@\n-package java_1.dataTypes;\n+import java.util.Arrays;\n \n class DataTypes {\n \n@@ -13,38 +13,58 @@\n //\t\tlong halfByte = 0101;\n \n \n+\n+\n \tpublic static void main(String[] args) {\n+\t\tint[] bits = new int[]{0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,0};\n+\t\tString[] colors = new String[]{\"bluebird\",\"yellow bumblebee\",\"black spider\", \"green monkey\",\"pink\",\"great gatsby\",\"feeding frenzy\",\"black bird\",\"Matterhorn\",\"Great White Lakes\",\"torah\",\"white bible\",\"green quran\", \"red herring\", \"Black Sea\"};\n \t\t//the class fields defined in this DataTypes class have mistakes with either the data type, or the syntax.  Fix the data types so the main method correctly displays the value of all of the variables\n \t\t//For the methods below in this DataTypes class, determine the appropriate datatypes for the inputs and the outputs\n+\n+\t\tMyArrays array = new MyArrays();\n+\t\tarray.greet(\"Anthony\");\n+\t\tSystem.out.println(Arrays.toString(getDataTypes(31, true, 1232L)));\n \t}\n \n-\tvoid yearsToMonths(Object years) {\n+\tint yearsToMonths(int years) {\n \t\t//\tconvert years to months using appropriate data types for the inputs and the outputs, 2 years => 24 months\n+\t\treturn years*12;\n \t}\n \n-\tvoid monthsToHours(Object months) {\n+\tint monthsToHours(int months) {\n \t\t//\tconvert months to hours using appropriate data types for the inputs and the outputs, 8 months => 17520 hours\n+\t\treturn months * 730;\n \t}\n \n-\tvoid daysToSeconds(Object days) {\n+\tlong daysToSeconds(int days) {\n \t\t//\tconvert days to seconds using appropriate data types for the inputs and the outputs, 2 days => 172800 seconds\n+\t\treturn days * 86400;\n+\n \t}\n \n-\tvoid centuriesToSeconds(Object centuries) {\n+\tlong centuriesToSeconds(int centuries) {\n \t\t//\tconvert centuries to seconds using appropriate data types for the inputs and the outputs, 1 century => 3.1556952 x 10^9 seconds\n+\t\treturn centuries * 3155695200L;\n \t}\n \n-\tvoid dollarsToBitcoin(Object dollars) {\n+\tint dollarsToBitcoin(int dollars) {\n \t\t//\tconvert (usd) dollars $ to bitcoin using appropriate data types for the inputs and the outputs, As of 1/2021, 1 bitcoin ~=> $50000.00\n+\t\treturn dollars * 50000;\n \t}\n \n-\tvoid canDrive(Object age) {\n+\tboolean canDrive(int age) {\n \t\t//determine if the age passed in is ready to drive, return a value indicating whether or not the age passed in is ready to drive.\n+\t\treturn age >= 16;\n \t}\n \n-\tString[] getDataTypes(int num1, boolean bool1, long long1) {\n+\tstatic String[] getDataTypes(int num1, boolean bool1, long long1) {\n //\t\tUse Java to get the data type of the three input variables; and return a string representation of the data types of the three variables as an array.  Do NOT hard code the answers here.  Make sure to use Java to programmatically get the data types.\n-\t\treturn new String[]{null,null,null};\n+\t\tString numType = ((Object) num1).getClass().getSimpleName();\n+\t\tString boolType = ((Object) bool1).getClass().getSimpleName();\n+\t\tString longType = ((Object) long1).getClass().getSimpleName();\n+\n+\n+\t\treturn new String[]{numType,boolType,longType};\n \t}\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "e26933ce7f4168d943cdbe4d41064a4761b38b9c",
    "filename": "src/java_1/dataTypes/JavaChallenges.java",
    "status": "modified",
    "additions": 98,
    "deletions": 11,
    "changes": 109,
    "blob_url": "https://github.com/ATown0789/java/blob/53b1c8caa6f300db8ce7d524fb27f517a6d18c42/src/java_1/dataTypes/JavaChallenges.java",
    "raw_url": "https://github.com/ATown0789/java/raw/53b1c8caa6f300db8ce7d524fb27f517a6d18c42/src/java_1/dataTypes/JavaChallenges.java",
    "contents_url": "https://api.github.com/repos/ATown0789/java/contents/src/java_1/dataTypes/JavaChallenges.java?ref=53b1c8caa6f300db8ce7d524fb27f517a6d18c42",
    "patch": "@@ -1,9 +1,15 @@\n-package java_1.dataTypes;\n+import java.util.*;\n \n public class JavaChallenges {\n \n \tpublic static void main(String[] args) {\n \t\t//solve the code challenges found in the static methods on this class\n+\t\t//System.out.println(calcGPA(new int[] {100,80,85,92,60,44,67}));\n+\t\t//solveQuadratic(4,-5,1);\n+\t\t//printEgg();\n+\t\tItem pants = new Item(\"pants\",20);\n+\t\tItem iphone = new Item(\"iPhone\",1100);\n+\t\tSystem.out.println(totaledReceipt(new Item[]{pants, iphone}));\n \t}\n \n \tstatic void printMsg(String msg, int repeats) {\n@@ -13,13 +19,19 @@ static void printMsg(String msg, int repeats) {\n \t\thello world\n \t\thello world\n \t\t */\n+\t\tfor(int i = 0; i < repeats; i++) {\n+\t\t\tSystem.out.println(msg);\n+\t\t}\n \t}\n \n \tstatic int nthFibonacci(int n) {\n \t\t/*calculate the nth fibonacci number and return the value.  The first 4 fibonacci numbers are : 1, 1, 2, 3...  learn more : http://bit.ly/fibonacci-agile\n \t\texample : nthFibonacci(7) => 13\n \t\t */\n-\t\treturn 1;\n+\t\tif(n <=  1)\n+\t\t\treturn n;\n+\t\treturn nthFibonacci(n-1) + nthFibonacci(n-2);\n+\n \t}\n \n \tstatic double calcPay(int hrsPerPeriod, double hourlyRate, int payPeriods) {\n@@ -28,23 +40,64 @@ static double calcPay(int hrsPerPeriod, double hourlyRate, int payPeriods) {\n \t\t80 hours / period , $50.00 / hr, 8 periods => calcPay(80,25.00,8) => 16000.00\n \t\t1 hr / period, $250.00 / hr, 2 periods => calcPay(1,250.00,2) => 500.00\n  */\n-\t\treturn 0.0d;\n+\n+\t\treturn hrsPerPeriod*hourlyRate*payPeriods;\n \t}\n \n-\tstatic long solveQuadratic(int x, int y, int z) {\n-\t\t/* compute a quadratic equation using the input parameters.  Recall that a quadratic equation has the format :  x^2 + y + z */\n-\t\treturn x;\n+\tstatic void solveQuadratic(int a, int b, int c) {\n+\t\t/* compute a quadratic equation using the input parameters.  Recall that a quadratic equation has the format :  ax^2 + bx + c */\n+\t\tif(a == 0) {\n+\t\t\tSystem.out.println(\"A Cannot be 0\");\n+\t\t\treturn;\n+\t\t}\n+\t\tdouble root1, root2;\n+\n+\t\tdouble determinant = b * b - 4 * a * c;\n+\n+\t\tif(determinant > 0) { //2 real number solutions\n+\t\t\troot1 = (-b + Math.sqrt(determinant))/(2*a);\n+\t\t\troot2 = (-b - Math.sqrt(determinant))/(2*a);\n+\t\t\tSystem.out.println(\"Two real number answers:\");\n+\t\t\tSystem.out.println(\"answer 1 = \" + root1);\n+\t\t\tSystem.out.println(\"answer 2 = \" + root2);\n+\t\t}\n+\n+\t\telse if(determinant == 0) { //1 real number solution\n+\n+\t\t\troot1 = -b / (2 * a);\n+\n+\t\t\tSystem.out.println(\"One real number answer\");\n+\t\t\tSystem.out.println(\"answer = \" + root1);\n+\n+\t\t}\n+\n+\t\telse { //imaginary number solutions\n+\t\t\troot1 = -b / (2*a); //real part\n+\t\t\troot2 = Math.sqrt(-determinant) / (2*a); //imaginary part\n+\t\t\tSystem.out.println(\"answer 1 = \" + root1 + \"+\" + root2 + \"i\");\n+\t\t\tSystem.out.println(\"answer 1 = \" + root1 + \"-\" + root2 + \"i\");\n+\t\t}\n+\n \t}\n \n \tstatic int countQuarters(double amount) {\n //\t\tcalculate the number of quarters that can be changed for the given amount.\n //\t\t$10.50 => countQuarters(10.50) => 42\n-\t\treturn 0;\n+\t\t\treturn (int) (amount/.25);\n+\n \t}\n \n \tstatic String reverseString(String str) {\n \t\t//reverse the input string and return it.\n-\t\treturn str;\n+\t\tList<Character> charList = new ArrayList<Character>();\n+\t\tfor(int i = 0; i < str.length(); i++) {\n+\t\t\tcharList.add(i,str.charAt(i));\n+\t\t}\n+\t\tCollections.reverse(charList);\n+\n+\t\tString newStr = String.valueOf(charList);\n+\n+\t\treturn newStr;\n \t}\n \n \tstatic String shuffleMessage(String[] messages) {\n@@ -53,7 +106,10 @@ static String shuffleMessage(String[] messages) {\n \t\t[\"hi\", \"dear\", \"friend\"] => shuffleMessage() => \"dear hi friend\";\n \t\t[\"hi\", \"dear\", \"friend\"] => shuffleMessage() => \"friend dear hi\";\n */\n-\t\treturn null;\n+\t\tList<String> messageList = Arrays.asList(messages);\n+\t\tCollections.shuffle(messageList);\n+\n+\t\treturn String.join(\" \", messageList);\n \t}\n \n \tstatic double calcGPA(int[] scores) {\n@@ -66,7 +122,26 @@ static double calcGPA(int[] scores) {\n \t\t\t80 - 89 - 3.0\n \t\t\t90 - 100 - 4.0\n \t\t */\n-\t\treturn 4.0;\n+\t\tdouble sumScore = 0;\n+\t\tfor(int i : scores) {\n+\t\t\tif(i >= 90 && i <= 100){\n+\t\t\t\tsumScore += 4.0;\n+\t\t\t}\n+\t\t\telse if(i >= 80 && i <= 89){\n+\t\t\t\tsumScore += 3.0;\n+\t\t\t}\n+\t\t\telse if(i >= 70 && i <= 79){\n+\t\t\t\tsumScore += 2.0;\n+\t\t\t}\n+\t\t\telse if(i >= 60 && i <= 69){\n+\t\t\t\tsumScore += 1.0;\n+\t\t\t}\n+\t\t\telse if(i >= 0 && i <= 59){\n+\t\t\t\tsumScore += 0.0;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn sumScore / scores.length;\n \t}\n \n \tstatic void printEgg() {\n@@ -79,6 +154,12 @@ static void printEgg() {\n \t\t\t \\_______/\n \n \t\t*/\n+\t\tSystem.out.println(\"  -------   \");\n+\t\tSystem.out.println(\" /       \\\\ \");\n+\t\tSystem.out.println(\"/         \\\\\");\n+\t\tSystem.out.println(\"-\\\"-'-\\\"-'-\\\"-\");\n+\t\tSystem.out.println(\"\\\\         /\");\n+\t\tSystem.out.println(\" \\\\_______/\");\n \t}\n \n \tstatic class Item {\n@@ -103,7 +184,13 @@ static double totaledReceipt(Item[] transactions) {\n \n \t//\t\tCalculate the total amount of all items in the transactions array.  Note that each element of the transactions array is of type Item.\n \t//\t\t[Item{ item : \"pants\" , cost : 20.00} , Item{ item : \"iPhone\", cost : 1100.00} ] => totaledReceipt() => 1120.00\n-\t\t\treturn 0.0;\n+\t\t\tdouble total = 0;\n+\n+\t\t\tfor(Item item : transactions) {\n+\t\t\t\ttotal += item.cost;\n+\t\t\t}\n+\n+\t\t\treturn total;\n \n \t\t}\n \t}\n\\ No newline at end of file"
  },
  {
    "sha": "15371fc9d6d3e990fac5847c9ea15734787fc4a8",
    "filename": "src/java_1/dataTypes/MyArrays.java",
    "status": "renamed",
    "additions": 24,
    "deletions": 6,
    "changes": 30,
    "blob_url": "https://github.com/ATown0789/java/blob/53b1c8caa6f300db8ce7d524fb27f517a6d18c42/src/java_1/dataTypes/MyArrays.java",
    "raw_url": "https://github.com/ATown0789/java/raw/53b1c8caa6f300db8ce7d524fb27f517a6d18c42/src/java_1/dataTypes/MyArrays.java",
    "contents_url": "https://api.github.com/repos/ATown0789/java/contents/src/java_1/dataTypes/MyArrays.java?ref=53b1c8caa6f300db8ce7d524fb27f517a6d18c42",
    "patch": "@@ -1,13 +1,16 @@\n-package java_1.dataTypes;\n+import java.lang.reflect.Array;\n+import java.util.*;\n \n-class Arrays {\n+class MyArrays {\n     int[] nums = new int[]{10,23,3,4,5,2,1};\n     String[] greetings = new String[]{\"Hello\",\"Howdy\",\"Hallo\",\"Hola\",\"Bonjour\",\"Ciao\",\"أهلا و سهلا\"};\n     int[] bits = new int[]{0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,0};\n     String[] colors = new String[]{\"bluebird\",\"yellow bumblebee\",\"black spider\", \"green monkey\",\"pink\",\"great gatsby\",\"feeding frenzy\",\"black bird\",\"Matterhorn\",\"Great White Lakes\",\"torah\",\"white bible\",\"green quran\", \"red herring\", \"Black Sea\"};\n \n     void printNums() {\n //        Programmatically print the nums array to the console.  Print each number on a new line.  The nums array is defined on this class.\n+        for(int i : nums)\n+            System.out.println(i);\n     };\n \n     void greet(String name) {\n@@ -17,18 +20,33 @@ void greet(String name) {\n                \"ABRAM\" => greet() => \"Hola Abram\"\n                \"maTT => greet() => \"أهلا و سهلا Matt\"\n  */\n+        Random random = new Random();\n+        int index = random.nextInt(greetings.length);\n+\n+        System.out.println(greetings[index] +\" \" + name);\n+\n     };\n \n-    boolean[] bitsToBinaries() {\n+    ArrayList<Boolean> bitsToBinaries(int[] bits) {\n //        Programmatically convert the bit array of 1's and 0's into a binary array of true and false. return the 'converted' array.\n //        ex : bitsToBinaries() => [false,true,true,true,false,false,false,true,true,true,true,true,false,true,false,false,true,false]\n-            return null;\n+        ArrayList<Boolean> newArr = new ArrayList<>();\n+        for(int i : bits)\n+            newArr.add(i == 1);\n+\n+        return newArr;\n     };\n \n-    String[] keepColors() {\n+    ArrayList<String> keepColors(String[] colors) {\n //        In this class is an array called \"colors\".  Programmatically remove the elements that do NOT have a color associated with it.  Return the filtered color array of elements that have a color associated with it.\n //        ex : keepColors() => [\"bluebird\",\"yellow bumblebee\",\"black spider\", \"green monkey\",\"pink\",\"black bird\",\"Great White Lakes\",\"white bible\",\"green quran\", \"red herring\", \"Black Sea\"]\n-        return null;\n+        String[] testStr = {\"black\", \"blue\",\"green\",\"red\",\"yellow\",\"pink\",\"white\",\"brown\",\"gray\",\"orange\",\"purple\"};\n+        ArrayList<String> onlyColors = new ArrayList<>();\n+        for(String element:colors){\n+            if( Arrays.stream(testStr).anyMatch(element.toLowerCase()::contains))\n+                onlyColors.add(element);\n+        }\n+        return onlyColors;\n     }\n \n }",
    "previous_filename": "src/java_1/dataTypes/Arrays.java"
  }
]
