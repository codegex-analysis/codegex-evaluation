[
  {
    "sha": "1e7cc8ef239f601350fe9dfbf6273fa06016d730",
    "filename": "README.md",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/README.md",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/README.md",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/README.md?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,6 @@\n+change some properties in src/main/resources/application.properties:\n+   - \"spring.datasource.password\"\n+   - \"spring.datasource.username\"\n+   - \"spring.datasource.url\"\n+   - change \"server.port\" if it needed\n+swagger ui start /swagger-ui\n\\ No newline at end of file"
  },
  {
    "sha": "c254c41c3a9889d339f6cc52cab2d751d572ca66",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/pom.xml",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/pom.xml",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/pom.xml?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -21,15 +21,10 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-data-jpa</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-starter-security</artifactId>\n-        </dependency>\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-web</artifactId>\n         </dependency>\n-\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-devtools</artifactId>\n@@ -52,9 +47,15 @@\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n-            <groupId>org.springframework.security</groupId>\n-            <artifactId>spring-security-test</artifactId>\n-            <scope>test</scope>\n+            <groupId>com.vaadin.external.google</groupId>\n+            <artifactId>android-json</artifactId>\n+            <version>0.0.20131108.vaadin1</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.springfox</groupId>\n+            <artifactId>springfox-boot-starter</artifactId>\n+            <version>3.0.0</version>\n         </dependency>\n     </dependencies>\n "
  },
  {
    "sha": "4f092881fc999a392506b22212e12c2942ab7f79",
    "filename": "src/main/java/my/project/rm/RMApplication.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/RMApplication.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/RMApplication.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/RMApplication.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -2,8 +2,10 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n \n @SpringBootApplication\n+@EnableScheduling\n public class RMApplication {\n \n     public static void main(String[] args) {"
  },
  {
    "sha": "be337e589007d75b53e9c073e44b60fec9087874",
    "filename": "src/main/java/my/project/rm/configuration/SwaggerConfiguration.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/configuration/SwaggerConfiguration.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/configuration/SwaggerConfiguration.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/configuration/SwaggerConfiguration.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,40 @@\n+package my.project.rm.configuration;\n+\n+import org.springframework.boot.web.error.ErrorAttributeOptions;\n+import org.springframework.boot.web.servlet.error.DefaultErrorAttributes;\n+import org.springframework.boot.web.servlet.error.ErrorAttributes;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.context.request.WebRequest;\n+import springfox.documentation.builders.ApiInfoBuilder;\n+import springfox.documentation.builders.PathSelectors;\n+import springfox.documentation.builders.RequestHandlerSelectors;\n+import springfox.documentation.service.ApiInfo;\n+import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spring.web.plugins.Docket;\n+import springfox.documentation.swagger2.annotations.EnableSwagger2;\n+import java.util.function.Predicate;\n+\n+@Configuration\n+@EnableSwagger2\n+public class SwaggerConfiguration {\n+\n+    @Bean\n+    public Docket api() {\n+        return new Docket(DocumentationType.SWAGGER_2)\n+                .select()\n+                .apis(RequestHandlerSelectors.any())\n+                .paths(PathSelectors.any())\n+                .paths(Predicate.not(PathSelectors.regex(\"/error.*\")))\n+                .build()\n+                .apiInfo(getMyApiInfo());\n+    }\n+\n+    private ApiInfo getMyApiInfo() {\n+        return new ApiInfoBuilder()\n+                .title(\"Rick and Morty\")\n+                .description(\"Rick and Morty API Task\")\n+                .version(\"Version 1\")\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "2dab60dc62edf533998f287984b24cf665954c4e",
    "filename": "src/main/java/my/project/rm/controller/CharacterController.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/controller/CharacterController.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/controller/CharacterController.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/controller/CharacterController.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,43 @@\n+package my.project.rm.controller;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import my.project.rm.entity.RMCharacter;\n+import my.project.rm.entity.dto.RMCharacterResponseDto;\n+import my.project.rm.service.CharacterService;\n+import my.project.rm.utils.CharacterMapperUtil;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.websocket.server.PathParam;\n+import java.util.List;\n+\n+@Api(\"Character Controller\")\n+@RestController\n+@RequestMapping(\"/character\")\n+public class CharacterController {\n+\n+    private final CharacterService characterService;\n+    private final CharacterMapperUtil characterMapper;\n+\n+    public CharacterController(CharacterService characterService,\n+                               CharacterMapperUtil characterMapper) {\n+        this.characterService = characterService;\n+        this.characterMapper = characterMapper;\n+    }\n+\n+    @GetMapping(value = \"/random\")\n+    @ApiOperation(\"Return information about random character\")\n+    public RMCharacterResponseDto getRandomCharacter() {\n+        RMCharacter randomCharacter = characterService.getRandomCharacter();\n+        return characterMapper.mapEntityListToDto(randomCharacter);\n+    }\n+\n+    @GetMapping\n+    @ApiOperation(\"Return list of all characters whose name match with entered\")\n+    public List<RMCharacterResponseDto> getCharacterByNameMatch(@PathParam(\"name\") String name) {\n+        return characterMapper.mapEntityListToDto(characterService.getCharactersByNameMatcher(name));\n+    }\n+\n+}"
  },
  {
    "sha": "aa1eb20d35cf5446a404155ea60ac56efafedcd1",
    "filename": "src/main/java/my/project/rm/entity/RMCharacter.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/entity/RMCharacter.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/entity/RMCharacter.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/entity/RMCharacter.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,23 @@\n+package my.project.rm.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.Data;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Data\n+@Table(name = \"characters\")\n+public class RMCharacter {\n+\n+    @Id\n+    private Long id;\n+    private String name;\n+    private String status;\n+    private String species;\n+    private String type;\n+    private String gender;\n+    private String image;\n+    private String url;\n+\n+}"
  },
  {
    "sha": "63c7648876c9577873be2172ad948f1c7378ca34",
    "filename": "src/main/java/my/project/rm/entity/dto/ApiResponseDto.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/entity/dto/ApiResponseDto.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/entity/dto/ApiResponseDto.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/entity/dto/ApiResponseDto.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,14 @@\n+package my.project.rm.entity.dto;\n+\n+import lombok.Data;\n+import my.project.rm.entity.RMCharacter;\n+\n+import java.util.List;\n+\n+@Data\n+public class ApiResponseDto {\n+\n+    private InfoResponseDto info;\n+    private List<RMCharacter> results;\n+\n+}"
  },
  {
    "sha": "85c05d76498f3716c8049e8f27f71348ed5e06cf",
    "filename": "src/main/java/my/project/rm/entity/dto/InfoResponseDto.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/entity/dto/InfoResponseDto.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/entity/dto/InfoResponseDto.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/entity/dto/InfoResponseDto.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,13 @@\n+package my.project.rm.entity.dto;\n+\n+import lombok.Data;\n+\n+@Data\n+public class InfoResponseDto {\n+\n+    private long count;\n+    private long pages;\n+    private String next;\n+    private String prev;\n+\n+}"
  },
  {
    "sha": "ce7332dcd60474e5f61af1f4a193e212101c70c4",
    "filename": "src/main/java/my/project/rm/entity/dto/RMCharacterResponseDto.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/entity/dto/RMCharacterResponseDto.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/entity/dto/RMCharacterResponseDto.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/entity/dto/RMCharacterResponseDto.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,16 @@\n+package my.project.rm.entity.dto;\n+\n+import lombok.Data;\n+\n+@Data\n+public class RMCharacterResponseDto {\n+\n+    private String name;\n+    private String status;\n+    private String species;\n+    private String type;\n+    private String gender;\n+    private String image;\n+    private String url;\n+\n+}"
  },
  {
    "sha": "2052f7656158a8dea34727cec8db1c84f323d05d",
    "filename": "src/main/java/my/project/rm/repository/CharacterHibernateDao.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/repository/CharacterHibernateDao.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/repository/CharacterHibernateDao.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/repository/CharacterHibernateDao.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,18 @@\n+package my.project.rm.repository;\n+\n+import my.project.rm.entity.RMCharacter;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public interface CharacterHibernateDao {\n+\n+    List<RMCharacter> saveAll(List<RMCharacter> characters);\n+\n+    List<RMCharacter> findAllByNameContaining(String name);\n+\n+    List<RMCharacter> findAll();\n+\n+    Optional<RMCharacter> findRMCharacterRandom();\n+\n+    void save(RMCharacter character);\n+}"
  },
  {
    "sha": "166e9fbd900a975593ac0a42fea10c06e309edd2",
    "filename": "src/main/java/my/project/rm/repository/CharacterHibernateDaoImpl.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/repository/CharacterHibernateDaoImpl.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/repository/CharacterHibernateDaoImpl.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/repository/CharacterHibernateDaoImpl.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,78 @@\n+package my.project.rm.repository;\n+\n+import my.project.rm.entity.RMCharacter;\n+import org.springframework.stereotype.Repository;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Repository //Can be used instead of JpaRepository\n+public class CharacterHibernateDaoImpl implements CharacterHibernateDao {\n+\n+    private final EntityManager entityManager;\n+\n+    public CharacterHibernateDaoImpl(EntityManager entityManager) {\n+        this.entityManager = entityManager;\n+    }\n+\n+    @Override\n+    public List<RMCharacter> saveAll(List<RMCharacter> characters) {\n+        for (RMCharacter character : characters) {\n+            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();\n+            CriteriaQuery<RMCharacter> query = criteriaBuilder.createQuery(RMCharacter.class);\n+            Root<RMCharacter> from = query.from(RMCharacter.class);\n+            Predicate predicate = criteriaBuilder.equal(from.get(\"id\"), character.getId());\n+\n+            query.where(predicate);\n+            TypedQuery<RMCharacter> managerQuery = entityManager.createQuery(query);\n+            if (managerQuery.getResultList().isEmpty()) {\n+                entityManager.persist(character);\n+            }\n+        }\n+        return characters;\n+    }\n+\n+    @Override\n+    public List<RMCharacter> findAllByNameContaining(String name) {\n+        CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+        CriteriaQuery<RMCharacter> query = builder.createQuery(RMCharacter.class);\n+\n+        Root<RMCharacter> from = query.from(RMCharacter.class);\n+\n+        Predicate nameMatcherPredicate = builder.like(from.get(\"name\"), \"%\" + name + \"%\");\n+\n+        query.where(nameMatcherPredicate);\n+\n+        TypedQuery<RMCharacter> resultQuery = entityManager.createQuery(query);\n+        return resultQuery.getResultList();\n+    }\n+\n+    @Override\n+    public List<RMCharacter> findAll() {\n+        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();\n+        CriteriaQuery<RMCharacter> query = criteriaBuilder.createQuery(RMCharacter.class);\n+        Root<RMCharacter> from = query.from(RMCharacter.class);\n+\n+        CriteriaQuery<RMCharacter> resultQuery = query.select(from);\n+\n+        return entityManager.createQuery(resultQuery).getResultList();\n+    }\n+\n+    @Override\n+    public Optional<RMCharacter> findRMCharacterRandom() {\n+        String query = \"SELECT * FROM characters ORDER BY RANDOM() LIMIT 1;\";\n+        Query nativeQuery = entityManager.createNativeQuery(query, RMCharacter.class);\n+        return Optional.of((RMCharacter) nativeQuery.getSingleResult());\n+    }\n+\n+    @Override\n+    public void save(RMCharacter character) {\n+        entityManager.persist(character);\n+    }\n+}"
  },
  {
    "sha": "98ec3718a9cb226afa3bbf136894faf0fa5f33c3",
    "filename": "src/main/java/my/project/rm/repository/RMCharacterRepository.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/repository/RMCharacterRepository.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/repository/RMCharacterRepository.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/repository/RMCharacterRepository.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,18 @@\n+package my.project.rm.repository;\n+\n+import my.project.rm.entity.RMCharacter;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.stereotype.Repository;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Repository\n+public interface RMCharacterRepository extends JpaRepository<RMCharacter, Long> {\n+\n+    List<RMCharacter> findAllByNameContaining(String name);\n+\n+    @Query(value = \"SELECT * FROM characters ORDER BY RANDOM() LIMIT 1;\", nativeQuery = true)\n+    Optional<RMCharacter> findRMCharacterRandom();\n+\n+}"
  },
  {
    "sha": "8948cf0d0da3d287152a4fd977b936a95d567621",
    "filename": "src/main/java/my/project/rm/service/CharacterService.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/service/CharacterService.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/service/CharacterService.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/service/CharacterService.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,17 @@\n+package my.project.rm.service;\n+\n+import my.project.rm.entity.RMCharacter;\n+import java.util.List;\n+\n+public interface CharacterService {\n+\n+    List<RMCharacter> saveAll(List<RMCharacter> characters);\n+\n+    List<RMCharacter> getCharactersByNameMatcher(String name);\n+\n+    RMCharacter getRandomCharacter();\n+\n+    List<RMCharacter> findAll();\n+\n+    void save(RMCharacter character);\n+}"
  },
  {
    "sha": "f2f460fc1ff983d552e030a1a2fe257f5787c128",
    "filename": "src/main/java/my/project/rm/service/impl/CharacterServiceImpl.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/service/impl/CharacterServiceImpl.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/service/impl/CharacterServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/service/impl/CharacterServiceImpl.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,51 @@\n+package my.project.rm.service.impl;\n+\n+import my.project.rm.entity.RMCharacter;\n+import my.project.rm.repository.RMCharacterRepository;\n+import my.project.rm.service.CharacterService;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.server.ResponseStatusException;\n+import javax.transaction.Transactional;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+public class CharacterServiceImpl implements CharacterService {\n+\n+    private final RMCharacterRepository rmCharacterRepository;\n+\n+    public CharacterServiceImpl(RMCharacterRepository rmCharacterRepository) {\n+        this.rmCharacterRepository = rmCharacterRepository;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public List<RMCharacter> saveAll(List<RMCharacter> characters) {\n+        return rmCharacterRepository.saveAll(characters);\n+    }\n+\n+    @Override\n+    public List<RMCharacter> getCharactersByNameMatcher(String name) {\n+        return rmCharacterRepository.findAllByNameContaining(name);\n+    }\n+\n+    @Override\n+    public RMCharacter getRandomCharacter() {\n+        Optional<RMCharacter> rmCharacterRandom = rmCharacterRepository.findRMCharacterRandom();\n+        if (rmCharacterRandom.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NO_CONTENT, \"Character not found\");\n+        }\n+        return rmCharacterRandom.get();\n+    }\n+\n+    @Override\n+    public List<RMCharacter> findAll() {\n+        return rmCharacterRepository.findAll();\n+    }\n+\n+    @Override\n+    public void save(RMCharacter character) {\n+        rmCharacterRepository.save(character);\n+    }\n+}"
  },
  {
    "sha": "0979180d30795d98bd7d8c6c7eb49a376532d324",
    "filename": "src/main/java/my/project/rm/utils/ApiSyncService.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/utils/ApiSyncService.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/utils/ApiSyncService.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/utils/ApiSyncService.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,53 @@\n+package my.project.rm.utils;\n+\n+import my.project.rm.entity.dto.ApiResponseDto;\n+import my.project.rm.service.CharacterService;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+import javax.annotation.PostConstruct;\n+import java.util.logging.Logger;\n+\n+@Service\n+public class ApiSyncService {\n+\n+    @PostConstruct\n+    public void init() {\n+        long start = System.currentTimeMillis();\n+        Logger.getAnonymousLogger().info(\"Wait while api characters sync...\");\n+        getCharactersList();\n+        Logger.getAnonymousLogger().info(\"Api characters sync finished. \"\n+                + (System.currentTimeMillis() - start));\n+    }\n+\n+    @Value(\"${apiRickAndMortyUrl}\")\n+    private String apiRickAndMortyUrl;\n+\n+    private final RestTemplate restTemplate;\n+    private final CharacterService characterService;\n+\n+    public ApiSyncService(CharacterService characterService) {\n+        this.restTemplate = new RestTemplate();\n+        this.characterService = characterService;\n+    }\n+\n+    @Scheduled(cron = \"${syncApiCharactersScheduleCronExpression}\")\n+    public void getCharactersList() {\n+        String pageUrl = apiRickAndMortyUrl;\n+\n+        while (pageUrl != null) {\n+            ResponseEntity<ApiResponseDto> responseEntity = restTemplate\n+                    .getForEntity(pageUrl, ApiResponseDto.class);\n+\n+            if (responseEntity.getStatusCode().is2xxSuccessful()) {\n+                characterService.saveAll((responseEntity.getBody().getResults()));\n+                pageUrl = responseEntity.getBody().getInfo().getNext();\n+            } else {\n+                Logger.getLogger(\"ApiSyncService\")\n+                        .warning(\"Request to API rejected: \" + responseEntity.getStatusCode());\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "bc21e6d8ffabe2841b8d1bbc8434aa29ab196dc3",
    "filename": "src/main/java/my/project/rm/utils/CharacterMapperUtil.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/utils/CharacterMapperUtil.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/utils/CharacterMapperUtil.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/utils/CharacterMapperUtil.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,29 @@\n+package my.project.rm.utils;\n+\n+import my.project.rm.entity.RMCharacter;\n+import my.project.rm.entity.dto.RMCharacterResponseDto;\n+import org.springframework.stereotype.Component;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class CharacterMapperUtil {\n+\n+    public List<RMCharacterResponseDto> mapEntityListToDto(List<RMCharacter> charactersByNameMatcher) {\n+        return charactersByNameMatcher.stream()\n+                .map(this::mapEntityListToDto)\n+                .collect(Collectors.toList());\n+    }\n+\n+    public RMCharacterResponseDto mapEntityListToDto(RMCharacter rmCharacter) {\n+        RMCharacterResponseDto rmCharacterResponseDto = new RMCharacterResponseDto();\n+        rmCharacterResponseDto.setGender(rmCharacter.getGender());\n+        rmCharacterResponseDto.setStatus(rmCharacter.getStatus());\n+        rmCharacterResponseDto.setName(rmCharacter.getName());\n+        rmCharacterResponseDto.setImage(rmCharacter.getImage());\n+        rmCharacterResponseDto.setSpecies(rmCharacter.getSpecies());\n+        rmCharacterResponseDto.setType(rmCharacter.getType());\n+        rmCharacterResponseDto.setUrl(rmCharacter.getUrl());\n+        return rmCharacterResponseDto;\n+    }\n+}"
  },
  {
    "sha": "1dcd40d24a7aa09f9de32f7843e21f520b935929",
    "filename": "src/main/java/my/project/rm/utils/CustomGlobalExceptionHandler.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/utils/CustomGlobalExceptionHandler.java",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/java/my/project/rm/utils/CustomGlobalExceptionHandler.java",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/java/my/project/rm/utils/CustomGlobalExceptionHandler.java?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -0,0 +1,26 @@\n+package my.project.rm.utils;\n+\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.RestControllerAdvice;\n+import org.springframework.web.context.request.WebRequest;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import java.util.Date;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Component\n+@RestControllerAdvice\n+public class CustomGlobalExceptionHandler  {\n+\n+    @ExceptionHandler(ResponseStatusException.class)\n+    public Map<String, Object> handle(ResponseStatusException t, WebRequest request) {\n+        Map<String, Object> response = new LinkedHashMap<>();\n+        response.put(\"timestamp\", new Date());\n+        response.put(\"status\", (t.getRawStatusCode()));\n+        response.put(\"status_message\", (t.getStatus()));\n+        response.put(\"message\", t.getReason());\n+        return response;\n+    }\n+}"
  },
  {
    "sha": "19d4180f6d05b18c174d593f66fb21acdaed66c4",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/DDemoNZ/RickAndMortyApi/blob/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/resources/application.properties",
    "raw_url": "https://github.com/DDemoNZ/RickAndMortyApi/raw/44df04fb7a4cb5911156d5028a824052513d6d9c/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/DDemoNZ/RickAndMortyApi/contents/src/main/resources/application.properties?ref=44df04fb7a4cb5911156d5028a824052513d6d9c",
    "patch": "@@ -1 +1,12 @@\n+spring.jpa.show-sql=false\n+spring.jpa.hibernate.ddl-auto=create-drop\n+spring.datasource.password=\n+spring.datasource.username=\n+spring.datasource.url=\n \n+server.port=9593\n+\n+###############################################################\n+apiRickAndMortyUrl=https://rickandmortyapi.com/api/character/\n+syncApiCharactersScheduleCronExpression= 0 3 1 * * ?\n+################################################################"
  }
]
