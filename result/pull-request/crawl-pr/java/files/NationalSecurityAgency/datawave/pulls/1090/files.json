[
  {
    "sha": "b3cd6dcefdc76201e0a91d521dbed92c22abda53",
    "filename": "warehouse/query-core/src/main/java/datawave/query/metrics/ShardTableQueryMetricHandler.java",
    "status": "modified",
    "additions": 19,
    "deletions": 20,
    "changes": 39,
    "blob_url": "https://github.com/NationalSecurityAgency/datawave/blob/5ae960ba86e407d1896f2057bc3be724f74c23e7/warehouse/query-core/src/main/java/datawave/query/metrics/ShardTableQueryMetricHandler.java",
    "raw_url": "https://github.com/NationalSecurityAgency/datawave/raw/5ae960ba86e407d1896f2057bc3be724f74c23e7/warehouse/query-core/src/main/java/datawave/query/metrics/ShardTableQueryMetricHandler.java",
    "contents_url": "https://api.github.com/repos/NationalSecurityAgency/datawave/contents/warehouse/query-core/src/main/java/datawave/query/metrics/ShardTableQueryMetricHandler.java?ref=5ae960ba86e407d1896f2057bc3be724f74c23e7",
    "patch": "@@ -48,7 +48,6 @@\n import datawave.webservice.common.connection.AccumuloConnectionFactory;\n import datawave.webservice.common.connection.AccumuloConnectionFactory.Priority;\n import datawave.webservice.common.logging.ThreadConfigurableLogger;\n-import datawave.webservice.common.logging.ThreadLocalLogLevel;\n import datawave.webservice.query.Query;\n import datawave.webservice.query.QueryImpl;\n import datawave.webservice.query.QueryImpl.Parameter;\n@@ -857,7 +856,7 @@ protected void createAndConfigureTablesIfNecessary(String[] tableNames, TableOpe\n     \n     private void enableLogs(boolean enable) {\n         if (enable) {\n-            ThreadLocalLogLevel.clear();\n+            ThreadConfigurableLogger.clearThreadLevels();\n         } else {\n             // All loggers that are encountered in the call chain during metrics calls should be included here.\n             // If you need to add a logger name here, you also need to change the Logger declaration where that Logger is instantiated\n@@ -866,24 +865,24 @@ private void enableLogs(boolean enable) {\n             // to\n             // Logger log = ThreadConfigurableLogger.getLogger(MyClass.class);\n             \n-            ThreadLocalLogLevel.setLevel(\"datawave.query.index.lookup.RangeStream\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.metrics.ShardTableQueryMetricHandler\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.planner.DefaultQueryPlanner\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.planner.ThreadedRangeBundlerIterator\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.scheduler.SequentialScheduler\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.tables.ShardQueryLogic\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.metrics.ShardTableQueryMetricHandler\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.jexl.visitors.QueryModelVisitor\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.jexl.visitors.ExpandMultiNormalizedTerms\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.jexl.lookups.LookupBoundedRangeForTerms\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.query.jexl.visitors.RangeConjunctionRebuildingVisitor\", Level.ERROR);\n-            \n-            ThreadLocalLogLevel.setLevel(\"datawave.ingest.data.TypeRegistry\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.ingest.data.config.ingest.BaseIngestHelper\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.ingest.mapreduce.handler.shard.AbstractColumnBasedHandler\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.ingest.mapreduce.handler.shard.ShardedDataTypeHandler\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.ingest.util.RegionTimer\", Level.ERROR);\n-            ThreadLocalLogLevel.setLevel(\"datawave.ingest.data.Event\", Level.OFF);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.index.lookup.RangeStream\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.metrics.ShardTableQueryMetricHandler\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.planner.DefaultQueryPlanner\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.planner.ThreadedRangeBundlerIterator\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.scheduler.SequentialScheduler\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.tables.ShardQueryLogic\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.metrics.ShardTableQueryMetricHandler\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.jexl.visitors.QueryModelVisitor\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.jexl.visitors.ExpandMultiNormalizedTerms\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.jexl.lookups.LookupBoundedRangeForTerms\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.query.jexl.visitors.RangeConjunctionRebuildingVisitor\", Level.ERROR);\n+            \n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.ingest.data.TypeRegistry\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.ingest.data.config.ingest.BaseIngestHelper\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.ingest.mapreduce.handler.shard.AbstractColumnBasedHandler\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.ingest.mapreduce.handler.shard.ShardedDataTypeHandler\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.ingest.util.RegionTimer\", Level.ERROR);\n+            ThreadConfigurableLogger.setLevelForThread(\"datawave.ingest.data.Event\", Level.OFF);\n         }\n     }\n     "
  },
  {
    "sha": "5871fa259a80209392d00b65a10e7ea280258d75",
    "filename": "web-services/common-util/src/main/java/datawave/webservice/common/logging/ThreadConfigurableLogger.java",
    "status": "modified",
    "additions": 101,
    "deletions": 131,
    "changes": 232,
    "blob_url": "https://github.com/NationalSecurityAgency/datawave/blob/5ae960ba86e407d1896f2057bc3be724f74c23e7/web-services/common-util/src/main/java/datawave/webservice/common/logging/ThreadConfigurableLogger.java",
    "raw_url": "https://github.com/NationalSecurityAgency/datawave/raw/5ae960ba86e407d1896f2057bc3be724f74c23e7/web-services/common-util/src/main/java/datawave/webservice/common/logging/ThreadConfigurableLogger.java",
    "contents_url": "https://api.github.com/repos/NationalSecurityAgency/datawave/contents/web-services/common-util/src/main/java/datawave/webservice/common/logging/ThreadConfigurableLogger.java?ref=5ae960ba86e407d1896f2057bc3be724f74c23e7",
    "patch": "@@ -4,14 +4,15 @@\n import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import org.apache.log4j.Priority;\n-import org.apache.log4j.spi.LoggerRepository;\n-import org.apache.log4j.spi.LoggingEvent;\n \n-import java.util.Enumeration;\n-import java.util.ResourceBundle;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ThreadConfigurableLogger extends Logger {\n     \n+    private final Logger log;\n+    private static ThreadLocal<Map<String,Level>> logToLevelMap = ThreadLocal.withInitial(HashMap::new);\n+    \n     public static ThreadConfigurableLogger getLogger(Class clazz) {\n         return new ThreadConfigurableLogger(Logger.getLogger(clazz));\n     }\n@@ -24,248 +25,217 @@ public static ThreadConfigurableLogger getRootLogger() {\n         return new ThreadConfigurableLogger(Logger.getRootLogger());\n     }\n     \n-    Logger log = null;\n-    \n     public ThreadConfigurableLogger(Logger log) {\n         super(log.getName());\n         this.log = log;\n     }\n     \n-    @Override\n-    public synchronized void addAppender(Appender newAppender) {\n-        log.addAppender(newAppender);\n-    }\n-    \n-    @Override\n-    public void assertLog(boolean assertion, String msg) {\n-        log.assertLog(assertion, msg);\n-    }\n-    \n-    @Override\n-    public void callAppenders(LoggingEvent arg0) {\n-        log.callAppenders(arg0);\n-    }\n-    \n     @Override\n     public void debug(Object message) {\n         if (shouldLog(Level.DEBUG)) {\n-            this.log.debug(message);\n+            log.debug(message);\n         }\n     }\n     \n     @Override\n     public void debug(Object message, Throwable t) {\n         if (shouldLog(Level.DEBUG)) {\n-            this.log.debug(message, t);\n+            log.debug(message, t);\n         }\n     }\n     \n     @Override\n     public void error(Object message) {\n         if (shouldLog(Level.ERROR)) {\n-            this.log.error(message);\n+            log.error(message);\n         }\n     }\n     \n     @Override\n     public void error(Object message, Throwable t) {\n         if (shouldLog(Level.ERROR)) {\n-            this.log.error(message, t);\n+            log.error(message, t);\n         }\n     }\n     \n     @Override\n     public void fatal(Object message) {\n         if (shouldLog(Level.FATAL)) {\n-            this.log.fatal(message);\n+            log.fatal(message);\n         }\n     }\n     \n     @Override\n     public void fatal(Object message, Throwable t) {\n         if (shouldLog(Level.FATAL)) {\n-            this.log.fatal(message, t);\n+            log.fatal(message, t);\n         }\n     }\n     \n-    @Override\n-    public boolean getAdditivity() {\n-        return log.getAdditivity();\n-    }\n-    \n-    @Override\n-    public synchronized Enumeration getAllAppenders() {\n-        return log.getAllAppenders();\n-    }\n-    \n-    @Override\n-    public synchronized Appender getAppender(String name) {\n-        return log.getAppender(name);\n-    }\n-    \n-    @Override\n-    @SuppressWarnings(\"deprecation\")\n-    public Priority getChainedPriority() {\n-        return log.getChainedPriority();\n-    }\n-    \n-    @Override\n-    public Level getEffectiveLevel() {\n-        return log.getEffectiveLevel();\n-    }\n-    \n-    @Override\n-    @SuppressWarnings(\"deprecation\")\n-    public LoggerRepository getHierarchy() {\n-        return log.getHierarchy();\n-    }\n-    \n-    @Override\n-    public LoggerRepository getLoggerRepository() {\n-        return log.getLoggerRepository();\n-    }\n-    \n-    @Override\n-    public ResourceBundle getResourceBundle() {\n-        return log.getResourceBundle();\n-    }\n-    \n     @Override\n     public void info(Object message) {\n         if (shouldLog(Level.INFO)) {\n-            this.log.info(message);\n+            log.info(message);\n         }\n     }\n     \n     @Override\n     public void info(Object message, Throwable t) {\n         if (shouldLog(Level.INFO)) {\n-            this.log.info(message, t);\n+            log.info(message, t);\n         }\n     }\n     \n     @Override\n-    public boolean isAttached(Appender appender) {\n-        return log.isAttached(appender);\n+    public void l7dlog(Priority arg0, String arg1, Object[] arg2, Throwable arg3) {\n+        if (shouldLog(Level.toLevel(arg0.toInt()))) {\n+            log.l7dlog(arg0, arg1, arg2, arg3);\n+        }\n     }\n     \n     @Override\n-    public boolean isDebugEnabled() {\n-        return this.log.isDebugEnabled();\n+    public void l7dlog(Priority arg0, String arg1, Throwable arg2) {\n+        if (shouldLog(Level.toLevel(arg0.toInt()))) {\n+            log.l7dlog(arg0, arg1, arg2);\n+        }\n     }\n     \n     @Override\n-    public boolean isEnabledFor(Priority level) {\n-        return log.isEnabledFor(level);\n+    public void log(Priority priority, Object message) {\n+        if (shouldLog(Level.toLevel(priority.toInt()))) {\n+            log.log(priority, message);\n+        }\n     }\n     \n     @Override\n-    public boolean isInfoEnabled() {\n-        return log.isInfoEnabled();\n+    public void log(Priority priority, Object message, Throwable t) {\n+        if (shouldLog(Level.toLevel(priority.toInt()))) {\n+            log.log(priority, message, t);\n+        }\n     }\n     \n     @Override\n-    public boolean isTraceEnabled() {\n-        return this.log.isTraceEnabled();\n+    public void log(String callerFQCN, Priority level, Object message, Throwable t) {\n+        if (shouldLog(Level.toLevel(level.toInt()))) {\n+            log.log(callerFQCN, level, message, t);\n+        }\n     }\n     \n-    @Override\n-    public void l7dlog(Priority arg0, String arg1, Object[] arg2, Throwable arg3) {\n-        log.l7dlog(arg0, arg1, arg2, arg3);\n+    private boolean shouldLog(Level requestedLevel) {\n+        Level allowedLevel = getLevelForThread();\n+        if (allowedLevel == null || requestedLevel.isGreaterOrEqual(allowedLevel)) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n     }\n     \n     @Override\n-    public void l7dlog(Priority arg0, String arg1, Throwable arg2) {\n-        log.l7dlog(arg0, arg1, arg2);\n+    public void trace(Object message) {\n+        if (shouldLog(Level.TRACE)) {\n+            log.trace(message);\n+        }\n     }\n     \n     @Override\n-    public void log(Priority priority, Object message) {\n-        log.log(priority, message);\n+    public void trace(Object message, Throwable t) {\n+        if (shouldLog(Level.TRACE)) {\n+            log.trace(message, t);\n+        }\n     }\n     \n     @Override\n-    public void log(Priority priority, Object message, Throwable t) {\n-        log.log(priority, message, t);\n+    public void warn(Object message) {\n+        if (shouldLog(Level.WARN)) {\n+            log.warn(message);\n+        }\n     }\n     \n     @Override\n-    public void log(String callerFQCN, Priority level, Object message, Throwable t) {\n-        log.log(callerFQCN, level, message, t);\n+    public void warn(Object message, Throwable t) {\n+        if (shouldLog(Level.WARN)) {\n+            log.warn(message, t);\n+        }\n     }\n     \n     @Override\n-    public synchronized void removeAllAppenders() {\n-        log.removeAllAppenders();\n+    public synchronized void addAppender(Appender newAppender) {\n+        log.addAppender(newAppender);\n     }\n     \n     @Override\n-    public synchronized void removeAppender(Appender appender) {\n-        log.removeAppender(appender);\n+    public boolean isAttached(Appender appender) {\n+        return log.isAttached(appender);\n     }\n     \n     @Override\n-    public synchronized void removeAppender(String name) {\n-        log.removeAppender(name);\n+    public boolean isDebugEnabled() {\n+        return log.isDebugEnabled();\n     }\n     \n     @Override\n-    public void setAdditivity(boolean additive) {\n-        log.setAdditivity(additive);\n+    public boolean isEnabledFor(Priority level) {\n+        return log.isEnabledFor(level);\n     }\n     \n     @Override\n-    public void setLevel(Level level) {\n-        log.setLevel(level);\n+    public boolean isInfoEnabled() {\n+        return log.isInfoEnabled();\n     }\n     \n     @Override\n-    @SuppressWarnings(\"deprecation\")\n-    public void setPriority(Priority priority) {\n-        log.setPriority(priority);\n+    public boolean isTraceEnabled() {\n+        return log.isTraceEnabled();\n     }\n     \n     @Override\n-    public void setResourceBundle(ResourceBundle bundle) {\n-        log.setResourceBundle(bundle);\n+    public void setLevel(Level level) {\n+        log.setLevel(level);\n     }\n     \n-    private boolean shouldLog(Level requestedLevel) {\n-        \n-        Level allowedLevel = ThreadLocalLogLevel.getLevel(log.getName());\n-        if (allowedLevel == null || requestedLevel.isGreaterOrEqual(allowedLevel)) {\n-            return true;\n-        } else {\n-            return false;\n+    public Level getLevelForThread() {\n+        Level level = null;\n+        Map<String,Level> levelMap = logToLevelMap.get();\n+        if (levelMap != null) {\n+            level = levelMap.get(getName());\n         }\n-        \n+        return level;\n     }\n     \n-    @Override\n-    public void trace(Object message) {\n-        if (shouldLog(Level.TRACE)) {\n-            this.log.trace(message);\n+    public void setLevelForThread(Level level) {\n+        Map<String,Level> levelMap = logToLevelMap.get();\n+        if (levelMap != null) {\n+            levelMap.put(getName(), level);\n         }\n     }\n     \n-    @Override\n-    public void trace(Object message, Throwable t) {\n-        if (shouldLog(Level.TRACE)) {\n-            this.log.trace(message, t);\n+    public void clearLevelForThread() {\n+        Map<String,Level> levelMap = logToLevelMap.get();\n+        if (levelMap != null) {\n+            levelMap.remove(getName());\n         }\n     }\n     \n-    @Override\n-    public void warn(Object message) {\n-        if (shouldLog(Level.WARN)) {\n-            this.log.warn(message);\n+    public static void setLevelForThread(String name, Level level) {\n+        Map<String,Level> levelMap = logToLevelMap.get();\n+        if (levelMap != null) {\n+            levelMap.put(name, level);\n         }\n     }\n     \n-    @Override\n-    public void warn(Object message, Throwable t) {\n-        if (shouldLog(Level.WARN)) {\n-            this.log.warn(message, t);\n+    public static Level getLevelForThread(String name) {\n+        Level level = null;\n+        Map<String,Level> levelMap = logToLevelMap.get();\n+        if (levelMap != null) {\n+            level = levelMap.get(name);\n+        }\n+        return level;\n+    }\n+    \n+    public static void clearThreadLevels() {\n+        Map<String,Level> levelMap = logToLevelMap.get();\n+        if (levelMap != null) {\n+            levelMap.clear();\n         }\n     }\n }"
  },
  {
    "sha": "394da1ac78038b0457ae743981cfbd6e1406fffb",
    "filename": "web-services/common-util/src/main/java/datawave/webservice/common/logging/ThreadLocalLogLevel.java",
    "status": "removed",
    "additions": 0,
    "deletions": 37,
    "changes": 37,
    "blob_url": "https://github.com/NationalSecurityAgency/datawave/blob/cbe49e37d451f3156ebb724f819a72e4f591c61e/web-services/common-util/src/main/java/datawave/webservice/common/logging/ThreadLocalLogLevel.java",
    "raw_url": "https://github.com/NationalSecurityAgency/datawave/raw/cbe49e37d451f3156ebb724f819a72e4f591c61e/web-services/common-util/src/main/java/datawave/webservice/common/logging/ThreadLocalLogLevel.java",
    "contents_url": "https://api.github.com/repos/NationalSecurityAgency/datawave/contents/web-services/common-util/src/main/java/datawave/webservice/common/logging/ThreadLocalLogLevel.java?ref=cbe49e37d451f3156ebb724f819a72e4f591c61e",
    "patch": "@@ -1,37 +0,0 @@\n-package datawave.webservice.common.logging;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.log4j.Level;\n-\n-public class ThreadLocalLogLevel {\n-    \n-    private static ThreadLocal<Map<String,Level>> logToLevelMap = ThreadLocal.withInitial(HashMap::new);\n-    \n-    public static void setLevel(String name, Level level) {\n-        \n-        Map<String,Level> levelMap = logToLevelMap.get();\n-        if (levelMap != null) {\n-            levelMap.put(name, level);\n-        }\n-    }\n-    \n-    public static Level getLevel(String name) {\n-        \n-        Level level = null;\n-        Map<String,Level> levelMap = logToLevelMap.get();\n-        if (levelMap != null) {\n-            level = levelMap.get(name);\n-        }\n-        return level;\n-    }\n-    \n-    public static void clear() {\n-        \n-        Map<String,Level> levelMap = logToLevelMap.get();\n-        if (levelMap != null) {\n-            levelMap.clear();\n-        }\n-    }\n-}"
  }
]
