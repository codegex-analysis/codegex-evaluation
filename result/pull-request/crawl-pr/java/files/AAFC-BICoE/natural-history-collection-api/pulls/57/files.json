[
  {
    "sha": "e5b3f0054b397e6f9d2442d76c3104bc52cfc7c8",
    "filename": "src/main/java/ca/gc/aafc/collection/api/datetime/IsoDateTimeRsqlResolver.java",
    "status": "modified",
    "additions": 29,
    "deletions": 7,
    "changes": 36,
    "blob_url": "https://github.com/AAFC-BICoE/natural-history-collection-api/blob/32258f4a7990ed767378c165a2c205fa93ae41cc/src/main/java/ca/gc/aafc/collection/api/datetime/IsoDateTimeRsqlResolver.java",
    "raw_url": "https://github.com/AAFC-BICoE/natural-history-collection-api/raw/32258f4a7990ed767378c165a2c205fa93ae41cc/src/main/java/ca/gc/aafc/collection/api/datetime/IsoDateTimeRsqlResolver.java",
    "contents_url": "https://api.github.com/repos/AAFC-BICoE/natural-history-collection-api/contents/src/main/java/ca/gc/aafc/collection/api/datetime/IsoDateTimeRsqlResolver.java?ref=32258f4a7990ed767378c165a2c205fa93ae41cc",
    "patch": "@@ -3,6 +3,7 @@\n import ca.gc.aafc.dina.filter.RsqlFilterAdapter;\n import cz.jirutka.rsql.parser.ast.AndNode;\n import cz.jirutka.rsql.parser.ast.ComparisonNode;\n+import cz.jirutka.rsql.parser.ast.ComparisonOperator;\n import cz.jirutka.rsql.parser.ast.LogicalNode;\n import cz.jirutka.rsql.parser.ast.Node;\n import cz.jirutka.rsql.parser.ast.OrNode;\n@@ -48,16 +49,37 @@ private Node resolveLogicalNode(LogicalNode logicalNode, Set<String> field) {\n   @Override\n   public Node visit(ComparisonNode node, Set<String> field) {\n     String selector = node.getSelector();\n-    if (isSelectedField(field, selector) && node.getOperator().equals(RSQLOperators.EQUAL)) {\n+    if (isSelectedField(field, selector)) {\n+      ComparisonOperator operator = node.getOperator();\n       ISODateTime argument = node.getArguments().stream().findFirst().map(ISODateTime::parse).orElseThrow();\n       List<String> precision = List.of(Byte.toString(argument.getFormat().getPrecision()));\n-      return new AndNode(List.of(\n-        new ComparisonNode(RSQLOperators.EQUAL, selector, List.of(argument.getLocalDateTime().toString())),\n-        new ComparisonNode(RSQLOperators.EQUAL, precisionFields.get(selector), precision)\n-      ));\n-    } else {\n-      return node;\n+      if (operator.equals(RSQLOperators.EQUAL)) {\n+        return processEqualOperator(selector, argument, precision);\n+      } else if (operator.equals(RSQLOperators.LESS_THAN) || operator.equals(RSQLOperators.LESS_THAN_OR_EQUAL)\n+        || operator.equals(RSQLOperators.GREATER_THAN) || operator.equals(RSQLOperators.GREATER_THAN_OR_EQUAL)) {\n+        return processLessOrGreaterOperators(selector, argument, precision, operator);\n+      }\n     }\n+    return node;\n+  }\n+\n+  private AndNode processEqualOperator(String selector, ISODateTime argument, List<String> precision) {\n+    return new AndNode(List.of(\n+      new ComparisonNode(RSQLOperators.EQUAL, selector, List.of(argument.getLocalDateTime().toString())),\n+      new ComparisonNode(RSQLOperators.EQUAL, precisionFields.get(selector), precision)\n+    ));\n+  }\n+\n+  private AndNode processLessOrGreaterOperators(\n+    String selector,\n+    ISODateTime argument,\n+    List<String> precision,\n+    ComparisonOperator operator\n+  ) {\n+    return new AndNode(List.of(\n+      new ComparisonNode(operator, selector, List.of(argument.getLocalDateTime().toString())),\n+      new ComparisonNode(RSQLOperators.GREATER_THAN_OR_EQUAL, precisionFields.get(selector), precision)\n+    ));\n   }\n \n   private static boolean isSelectedField(Set<String> field, String selector) {"
  },
  {
    "sha": "8d9060a7bc159c753fe4cdc3094c2d951e07d338",
    "filename": "src/test/java/ca/gc/aafc/collection/api/repository/CollectingEventRepositoryIT.java",
    "status": "modified",
    "additions": 91,
    "deletions": 25,
    "changes": 116,
    "blob_url": "https://github.com/AAFC-BICoE/natural-history-collection-api/blob/32258f4a7990ed767378c165a2c205fa93ae41cc/src/test/java/ca/gc/aafc/collection/api/repository/CollectingEventRepositoryIT.java",
    "raw_url": "https://github.com/AAFC-BICoE/natural-history-collection-api/raw/32258f4a7990ed767378c165a2c205fa93ae41cc/src/test/java/ca/gc/aafc/collection/api/repository/CollectingEventRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/AAFC-BICoE/natural-history-collection-api/contents/src/test/java/ca/gc/aafc/collection/api/repository/CollectingEventRepositoryIT.java?ref=32258f4a7990ed767378c165a2c205fa93ae41cc",
    "patch": "@@ -1,28 +1,5 @@\n package ca.gc.aafc.collection.api.repository;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-\n-import java.time.LocalDate;\n-import java.time.LocalDateTime;\n-import java.time.LocalTime;\n-import java.time.OffsetDateTime;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import javax.inject.Inject;\n-\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import org.springframework.boot.test.context.SpringBootTest;\n-\n import ca.gc.aafc.collection.api.CollectionModuleBaseIT;\n import ca.gc.aafc.collection.api.datetime.ISODateTime;\n import ca.gc.aafc.collection.api.dto.CollectingEventDto;\n@@ -38,6 +15,26 @@\n import io.crnk.core.queryspec.IncludeRelationSpec;\n import io.crnk.core.queryspec.PathSpec;\n import io.crnk.core.queryspec.QuerySpec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n @SpringBootTest(properties = \"keycloak.enabled=true\")\n public class CollectingEventRepositoryIT extends CollectionModuleBaseIT {\n@@ -221,14 +218,14 @@ private CollectingEventDto newEventDto(String startTime, String endDate) {\n   }\n \n   @ParameterizedTest\n-  @MethodSource({\"precisionFilterSource\"})\n+  @MethodSource({\"equalFilterSource\", \"lt_FilterSource\", \"gt_FilterSource\"})\n   @WithMockKeycloakUser(username = \"test user\", groupRole = {\"aafc: staff\"})\n   void findAll_PrecisionBoundsTest_DateFilteredCorrectly(String startDate, String input, int expectedSize) {\n     collectingEventRepository.create(newEventDto(startDate, \"1888\"));\n     assertEquals(expectedSize, collectingEventRepository.findAll(newRsqlQuerySpec(input)).size());\n   }\n \n-  private static Stream<Arguments> precisionFilterSource() {\n+  private static Stream<Arguments> equalFilterSource() {\n     return Stream.of(\n       // Format YYYY\n       Arguments.of(\"1999\", \"startEventDateTime==1999\", 1),\n@@ -248,6 +245,75 @@ void findAll_PrecisionBoundsTest_DateFilteredCorrectly(String startDate, String\n     );\n   }\n \n+  private static Stream<Arguments> lt_FilterSource() {\n+    return Stream.of(\n+      // Format YYYY\n+      Arguments.of(\"1999\", \"startEventDateTime=le=1999\", 1),\n+      Arguments.of(\"1999\", \"startEventDateTime=le=1998\", 0),\n+\n+      Arguments.of(\"1999\", \"startEventDateTime=lt=1999\", 0),\n+      Arguments.of(\"1999\", \"startEventDateTime=lt=2000\", 1),\n+\n+      // Format YYYY-MM\n+      Arguments.of(\"1999\", \"startEventDateTime=le=1999-01\", 0),\n+      Arguments.of(\"1999-01\", \"startEventDateTime=le=1999-01\", 1),\n+      Arguments.of(\"1999-01\", \"startEventDateTime=le=1998-12\", 0),\n+\n+      Arguments.of(\"1999-01\", \"startEventDateTime=lt=1999-01\", 0),\n+      Arguments.of(\"1999-01\", \"startEventDateTime=lt=1999-02\", 1),\n+\n+      // Format YYYY-MM-DD\n+      Arguments.of(\"1999-01\", \"startEventDateTime=le=1999-01-01\", 0),\n+      Arguments.of(\"1999-01-02\", \"startEventDateTime=le=1999-01-02\", 1),\n+      Arguments.of(\"1999-01-02\", \"startEventDateTime=le=1999-01-01\", 0),\n+\n+      Arguments.of(\"1999-01-02\", \"startEventDateTime=lt=1999-01-02\", 0),\n+      Arguments.of(\"1999-01-02\", \"startEventDateTime=lt=1999-01-03\", 1),\n+      // Format YYYY-MM-DD-HH-MM\n+      Arguments.of(\"1999-01-02\", \"startEventDateTime=le=1999-01-02T02:00\", 0),\n+      Arguments.of(\"1999-01-02T01:00\", \"startEventDateTime=le=1999-01-02T02:00\", 1),\n+      Arguments.of(\"1999-01-02T02:00\", \"startEventDateTime=le=1999-01-02T01:00\", 0),\n+\n+      Arguments.of(\"1999-01-02T02:00\", \"startEventDateTime=lt=1999-01-02T02:00\", 0),\n+      Arguments.of(\"1999-01-02T02:00\", \"startEventDateTime=lt=1999-01-02T03:00\", 1)\n+    );\n+  }\n+\n+  private static Stream<Arguments> gt_FilterSource() {//TODO use these\n+    return Stream.of(\n+      // Format YYYY\n+      Arguments.of(\"2222\", \"startEventDateTime=ge=2222\", 1),\n+      Arguments.of(\"2222\", \"startEventDateTime=ge=2223\", 0),\n+\n+      Arguments.of(\"2222\", \"startEventDateTime=gt=2222\", 0),\n+      Arguments.of(\"2222\", \"startEventDateTime=gt=2221\", 1),\n+\n+      // Format YYYY-MM\n+      Arguments.of(\"2222\", \"startEventDateTime=ge=2222-01\", 0),\n+      Arguments.of(\"2222-01\", \"startEventDateTime=ge=2222-01\", 1),\n+      Arguments.of(\"2222-01\", \"startEventDateTime=ge=2222-02\", 0),\n+\n+      Arguments.of(\"2222-01\", \"startEventDateTime=gt=2222-01\", 0),\n+      Arguments.of(\"2222-01\", \"startEventDateTime=gt=2221-12\", 1),\n+\n+      // Format YYYY-MM-DD\n+      Arguments.of(\"2222-01\", \"startEventDateTime=ge=2222-01-01\", 0),\n+      Arguments.of(\"2222-01-02\", \"startEventDateTime=ge=2222-01-02\", 1),\n+      Arguments.of(\"2222-01-02\", \"startEventDateTime=ge=2222-01-03\", 0),\n+\n+      Arguments.of(\"2222-01-02\", \"startEventDateTime=gt=2222-01-02\", 0),\n+      Arguments.of(\"2222-01-02\", \"startEventDateTime=gt=2222-01-01\", 1),\n+      // Format YYYY-MM-DD-HH-MM\n+      Arguments.of(\"2222-01-02\", \"startEventDateTime=ge=2222-01-02T02:00\", 0),\n+      Arguments.of(\"2222-01-02T01:00\", \"startEventDateTime=ge=2222-01-02T02:00\", 0),\n+      Arguments.of(\"2222-01-02T02:00\", \"startEventDateTime=ge=2222-01-02T01:00\", 1),\n+\n+      Arguments.of(\"2222-01-02T02:00\", \"startEventDateTime=gt=2222-01-02T02:00\", 0),\n+      Arguments.of(\"2222-01-02T02:00\", \"startEventDateTime=gt=2222-01-02T01:00\", 1)\n+    );\n+  }\n+\n+\n   private static QuerySpec newRsqlQuerySpec(String rsql) {\n     QuerySpec spec = new QuerySpec(CollectingEventDto.class);\n     spec.addFilter(PathSpec.of(\"rsql\").filter(FilterOperator.EQ, rsql));"
  }
]
