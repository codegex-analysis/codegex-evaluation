[
  {
    "sha": "74b9bca021e76faff1eda7cec9195ee413089248",
    "filename": "client/src/main/java/ChatApp.java",
    "status": "modified",
    "additions": 8,
    "deletions": 16,
    "changes": 24,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/ChatApp.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/ChatApp.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/java/ChatApp.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -1,31 +1,23 @@\n import javafx.application.Application;\n import javafx.fxml.FXMLLoader;\n import javafx.scene.Parent;\n-import javafx.scene.Scene;\n import javafx.stage.Stage;\n \n-import java.io.IOException;\n-\n /**\n  * Сущность чата.\n  *\n  * @author Kristina Retivykh\n  */\n public class ChatApp extends Application {\n+\n     @Override\n     public void start(Stage primaryStage) throws Exception {\n-        Network network = Network.getInstance();\n-        Parent root = FXMLLoader.load(getClass().getResource(\"chat.fxml\"));\n-        primaryStage.setScene(new Scene(root));\n-        primaryStage.setTitle(\"Chat\");\n-        primaryStage.setResizable(false);\n-        primaryStage.show();\n-        primaryStage.setOnCloseRequest(request -> {\n-            try {\n-                network.writeMessage(\"/quit\");\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-            }\n-        });\n+        MainController mainController = new MainController(primaryStage);\n+        Parent login = FXMLLoader.load(getClass().getResource(\"login.fxml\"));\n+        Parent chat = FXMLLoader.load(getClass().getResource(\"chat.fxml\"));\n+        mainController.add(\"login\", login);\n+        mainController.add(\"chat\", chat);\n+        mainController.activate(\"login\", \"Войти\");\n+\n     }\n }"
  },
  {
    "sha": "660a6ab207a640411defb1b312615ada04ff7e51",
    "filename": "client/src/main/java/ChatController.java",
    "status": "modified",
    "additions": 42,
    "deletions": 14,
    "changes": 56,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/ChatController.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/ChatController.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/java/ChatController.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -15,8 +15,10 @@\n import java.util.ResourceBundle;\n \n \n-public class ChatController implements Initializable {\n-    \n+public class ChatController\n+extends MainController\n+implements Initializable {\n+\n     private Network network;\n     public TextField messageField;\n     public ListView<String> listView;\n@@ -42,21 +44,39 @@ public void setCurrentDate(Date currentDate) {\n \n     @Override\n     public void initialize(URL location, ResourceBundle resources) {\n-        //TODO всё, что здесь, перенести в отдельный метод типа \"коннект\", привязать к кнопке\n         network = Network.getInstance();\n         new Thread(() -> {\n             try {\n                 while (true) {\n-                    String message = network.readMessage();\n-                    if (message.equals(\"/quit\")) {\n+                    Message message = network.readMessage();\n+                    if (message.getMsg().equals(\"/quit\")) {\n                         network.close();\n                         break;\n                     }\n-                    Platform.runLater(() -> listView.getItems().add(message));\n+                    if (listView.getItems().size() == 0 || isNewDay(new Date())) {\n+                        //если переписка только началась, то помечаем начало переписки\n+                        // или если в процессе переписки наступили новые сутки\n+                        listView.getItems().add(dateFormatter.format(new Date()));\n+                        setCurrentDate(new Date());\n+                    }\n+                    String privateLabel = message.getRecipient().isEmpty()\n+                            ? \"\"\n+                            :\" PRIVATE\";\n+                    Platform.runLater(() -> listView.getItems().add(\n+                            String.format(\"(%s) [%s]%s: %s\",\n+                                    timeFormatter.format(new Date()),\n+                                    message.getAuthor().getNick(),\n+                                    privateLabel,\n+                                    message.getMsg()\n+                            )\n+                        )\n+                    );\n                 }\n             } catch (IOException e) {\n                 System.err.println(\"Server was broke\");\n                 Platform.runLater(() -> listView.getItems().add(\"Server was broke\"));\n+            } catch (ClassNotFoundException e) {\n+                e.printStackTrace();\n             }\n         }).start();\n     }\n@@ -68,15 +88,19 @@ public void initialize(URL location, ResourceBundle resources) {\n     private void send() throws IOException {\n         Date date = new Date();\n         ObservableList<String> historyItems = listView.getItems();\n-        //TODO\n-        if (historyItems.size() == 0 || isNewDay(date)) {\n-            //если переписка только началась, то помечаем начало переписки\n-            // или если в процессе переписки наступили новые сутки\n-            network.writeMessage(dateFormatter.format(date));\n-            setCurrentDate(date);\n+        String address = \"\";\n+        String msgBody = messageField.getText();\n+        if (msgBody.startsWith(\"/w \")) {\n+            address = msgBody.split(\" \")[1];\n+            int indexMsg = msgBody.indexOf(address) + address.length() + 1;\n+            msgBody = msgBody.substring(indexMsg);\n         }\n-        String prefixMsg = \"(\" + timeFormatter.format(date) + \"): \";\n-        network.writeMessage(prefixMsg + messageField.getText());\n+\n+        network.writeMessage(new Message(\n+                getUser(),\n+                address,\n+                msgBody)\n+        );\n         messageField.clear();\n     }\n \n@@ -89,6 +113,10 @@ private void send() throws IOException {\n      */\n     private boolean isNewDay(Date date) {\n         SimpleDateFormat formatter = new SimpleDateFormat(\"dd.MM.yyyy\");\n+        //TODO потом поправить\n+        if (currentDate == null) {\n+            currentDate = new Date();\n+        }\n         String currentDateStr = formatter.format(currentDate);\n         String newDateStr = formatter.format(date);\n "
  },
  {
    "sha": "aa29e78fc362f0b0640876e611878334ee966228",
    "filename": "client/src/main/java/LoginController.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/LoginController.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/LoginController.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/java/LoginController.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -0,0 +1,75 @@\n+import javafx.event.ActionEvent;\n+import javafx.fxml.Initializable;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.PasswordField;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.AnchorPane;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ResourceBundle;\n+\n+public class LoginController\n+extends MainController\n+implements Initializable {\n+    private Network network;\n+\n+    public TextField userNameField;\n+    public PasswordField passwordField;\n+    public Label lblStateConn;\n+    public AnchorPane logWin;\n+\n+    public void login() {\n+        //TODO пока заглушка,  вообще отправить Message(User)\n+        Message respMessageMock = new Message(\n+                new User(userNameField.getText(),\n+                        passwordField.getText()),\n+                true\n+        );\n+        setUser(new User(userNameField.getText(),\n+                passwordField.getText()));\n+        Message messageAuth = new Message(getUser());\n+        if (Boolean.TRUE.equals(respMessageMock.isState())) {\n+            lblStateConn.setText(\"Login success\");\n+            setUser(new User(userNameField.getText(),\n+                    passwordField.getText()));\n+            activate(\"chat\", (\"Чат \" + getUser().getNick()));\n+        } else {\n+            lblStateConn.setText(\"Login failed\");\n+        }\n+//        try {\n+////            network.writeMessage(messageAuth);\n+////            Message messageState = network.readMessage();\n+//            if (Boolean.TRUE.equals(respMessageMock.isState())) {\n+//                lblStateConn.setText(\"Login success\");\n+//                setUser(new User(userNameField.getText(),\n+//                        passwordField.getText()));\n+//                activate(\"chat\", (\"Чат \" + getUser().getNick()));\n+//            } else {\n+//                lblStateConn.setText(\"Login failed\");\n+//            }\n+//        } catch (IOException e) {\n+//            e.printStackTrace();\n+//            System.err.println(\"Не получилось отправить сообщение\");\n+//        } catch (ClassNotFoundException e) {\n+//            e.printStackTrace();\n+//            System.err.println(\"Не получилось прочитать сообщение\");\n+//        }\n+    }\n+    public void loginButton(ActionEvent actionEvent) throws IOException {\n+        login();\n+    }\n+\n+    @Override\n+    public void initialize(URL location, ResourceBundle resources) {\n+        network = Network.getInstance();\n+    }\n+\n+    public void signIn(KeyEvent keyEvent) {\n+        if (keyEvent.getCode() == KeyCode.ENTER) {\n+            login();\n+        }\n+    }\n+}"
  },
  {
    "sha": "ba97a18d62aee8bccbc0d6e905622e585e9e551b",
    "filename": "client/src/main/java/MainController.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/MainController.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/MainController.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/java/MainController.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -0,0 +1,60 @@\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+\n+public class MainController {\n+    private static HashMap<String, Parent> controllers;\n+    private static Network network;\n+    private static Stage primaryStage;\n+    private static User user;\n+\n+    public static User getUser() {\n+        return user;\n+    }\n+\n+    public static Network getNetwork() {\n+        return network;\n+    }\n+\n+    public static void setUser(User user) {\n+        MainController.user = user;\n+    }\n+\n+    public MainController() {\n+    }\n+\n+    public MainController(Stage primaryStage) {\n+        this.controllers = new HashMap<>();\n+        this.primaryStage = primaryStage;\n+        network = Network.getInstance();\n+        user = null;\n+    }\n+\n+    public void add(String name, Parent parent)\n+    {\n+        controllers.put(name, parent);\n+    }\n+\n+    public Parent get(String name) {\n+        return controllers.getOrDefault(name, null);\n+    }\n+\n+    public void activate(String name, String title)\n+    {\n+        Parent parent = controllers.get(name);\n+        primaryStage.setScene(new Scene(parent));\n+        primaryStage.setTitle(title);\n+        primaryStage.setResizable(false);\n+        primaryStage.show();\n+        primaryStage.setOnCloseRequest(request -> {\n+            try {\n+                network.writeMessage(new Message(getUser(), \"/quit\"));\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+}"
  },
  {
    "sha": "aff26b41c95a38efef2060d0c3f4bb736bf7b4e9",
    "filename": "client/src/main/java/Message.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/Message.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/Message.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/java/Message.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -0,0 +1,50 @@\n+import java.io.Serializable;\n+\n+public class Message implements Serializable {\n+    private final User author;\n+    private final String recipient;\n+    private final String msg;\n+    private Boolean state = null;\n+\n+    public Boolean isState() {\n+        return state;\n+    }\n+\n+    public User getAuthor() {\n+        return this.author;\n+    }\n+\n+    public String getRecipient() {\n+        return recipient;\n+    }\n+\n+    public String getMsg() {\n+        return msg;\n+    }\n+\n+    public Message(User author, String recipient, String msg) {\n+        this.author = author;\n+        this.recipient = recipient;\n+        this.msg = msg;\n+    }\n+\n+    public Message(User author, String msg) {\n+        this.author = author;\n+        this.msg = msg;\n+        this.recipient = null;\n+    }\n+\n+    public Message(User user) {\n+        this.author = user;\n+        this.recipient = null;\n+        this.msg = null;\n+    }\n+\n+    public Message(User user, boolean state) {\n+        this.author = user;\n+        this.recipient = null;\n+        this.msg = null;\n+        this.state = state;\n+    }\n+\n+}"
  },
  {
    "sha": "d51a563c2133a7e6ff4ea9095d8db3433ce60bd2",
    "filename": "client/src/main/java/Network.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/Network.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/Network.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/java/Network.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -1,17 +1,15 @@\n-import javafx.application.Platform;\n-\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.net.Socket;\n \n public class Network {\n \n     private static final int PORT = 8189;\n     \n     private Socket socket;\n-    private DataInputStream in;\n-    private DataOutputStream out;\n+    private ObjectInputStream in;\n+    private ObjectOutputStream out;\n \n     private static Network instance;\n \n@@ -25,19 +23,19 @@ public static Network getInstance() {\n     private Network() {\n         try {\n             socket = new Socket(\"localhost\", PORT);\n-            out = new DataOutputStream(socket.getOutputStream());\n-            in = new DataInputStream(socket.getInputStream());\n+            out = new ObjectOutputStream(socket.getOutputStream());\n+            in = new ObjectInputStream(socket.getInputStream());\n         } catch (Exception e) {\n             System.err.println(\"Problem with server on port \" + PORT);\n         }\n     }\n     \n-    public String readMessage() throws IOException {\n-        return in.readUTF();\n+    public Message readMessage() throws IOException, ClassNotFoundException {\n+        return (Message) in.readObject();\n     }\n     \n-    public void writeMessage(String message) throws IOException {\n-        out.writeUTF(message);\n+    public void writeMessage(Message message) throws IOException {\n+        out.writeObject(message);\n         out.flush();\n     }\n     "
  },
  {
    "sha": "e54e700b5b77e9bd561ad8541761980a5ed26541",
    "filename": "client/src/main/java/User.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/User.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/java/User.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/java/User.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -0,0 +1,29 @@\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+public class User implements Serializable {\n+    private final String login;\n+    private final String pass;\n+\n+    public User(String login, String pass) {\n+        this.login = login;\n+        this.pass = pass;\n+    }\n+\n+    public String getNick() {\n+        return login;\n+    }\n+\n+    public boolean equals(User o) {\n+        if (o == null) {\n+            return false;\n+        }\n+        return this.login.equals(o.login)\n+                && this.pass.equals(this.pass);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(login, pass);\n+    }\n+}"
  },
  {
    "sha": "9777836dec8721903c223795a14701e828cb97c2",
    "filename": "client/src/main/resources/chat.fxml",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/resources/chat.fxml",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/resources/chat.fxml",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/resources/chat.fxml?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -1,8 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n \n-<?import java.lang.*?>\n-<?import java.util.*?>\n-<?import javafx.scene.*?>\n <?import javafx.scene.control.*?>\n <?import javafx.scene.layout.*?>\n "
  },
  {
    "sha": "bda68570659d2984c2c4bbf1f1fa711abe6889e6",
    "filename": "client/src/main/resources/login.fxml",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/resources/login.fxml",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/client/src/main/resources/login.fxml",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/client/src/main/resources/login.fxml?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+<?import javafx.scene.text.*?>\n+\n+<AnchorPane fx:id=\"logWin\" prefHeight=\"463.0\" prefWidth=\"493.0\"\n+            xmlns=\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"LoginController\">\n+   <children>\n+      <Button layoutX=\"181.0\" layoutY=\"301.0\" mnemonicParsing=\"false\" onAction=\"#loginButton\" text=\"Sign in\">\n+         <font>\n+            <Font size=\"30.0\" />\n+         </font>\n+      </Button>\n+      <TextField fx:id=\"userNameField\"  onKeyReleased=\"#signIn\" layoutX=\"110.0\" layoutY=\"143.0\" promptText=\"User name\">\n+         <font>\n+            <Font size=\"22.0\" />\n+         </font>\n+      </TextField>\n+      <PasswordField fx:id=\"passwordField\"  onKeyReleased=\"#signIn\" layoutX=\"109.0\" layoutY=\"219.0\" prefHeight=\"48.0\" prefWidth=\"274.0\" promptText=\"Password\">\n+         <font>\n+            <Font size=\"22.0\" />\n+         </font>\n+      </PasswordField>\n+      <Label fx:id=\"lblStateConn\" layoutX=\"170.0\" layoutY=\"87.0\" text=\"Connection state\">\n+         <font>\n+            <Font size=\"20.0\" />\n+         </font>\n+      </Label>\n+   </children>\n+</AnchorPane>"
  },
  {
    "sha": "b1f49b2cb579fec76c7920f4c8765853184fa276",
    "filename": "server/src/main/java/ClientHandler.java",
    "status": "modified",
    "additions": 51,
    "deletions": 21,
    "changes": 72,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/server/src/main/java/ClientHandler.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/server/src/main/java/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/server/src/main/java/ClientHandler.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -1,52 +1,82 @@\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * Класс, отвечающий за обмен сообщениями между клиентами и сервером.\n  */\n public class ClientHandler implements Runnable {\n     \n-    private Socket socket;\n-    private Server server;\n-    private DataInputStream in;\n-    private DataOutputStream out;\n+    private final Socket socket;\n+    private final Server server;\n+    private ObjectInputStream in;\n+    private ObjectOutputStream out;\n     private boolean running;\n-    private String nickName;\n-    private static int cnt = 0;\n-    \n+    private User user;\n+\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(User user) {\n+        this.user = user;\n+    }\n+\n     public ClientHandler(Socket socket, Server server) {\n         this.socket = socket;\n         this.server = server;\n         running = true;\n-        cnt++;\n-        nickName = \"user\" + cnt;\n+    }\n+\n+    boolean auth(User user) {\n+        List<User> usersMockData = new ArrayList<>();\n+        usersMockData.add(new User(\"user1\", \"1234\"));\n+        usersMockData.add(new User(\"user2\", \"1234\"));\n+        usersMockData.add(new User(\"user3\", \"1234\"));\n+        usersMockData.add(new User(\"user4\", \"1234\"));\n+        usersMockData.add(new User(\"user5\", \"1234\"));\n+        usersMockData.add(new User(\"user6\", \"1234\"));\n+        usersMockData.add(new User(\"user7\", \"1234\"));\n+//        return usersMockData.contains(user); //TODO\n+        for (User mock: usersMockData) {\n+            if (user.equals(mock)) return true;\n+        }\n+        return false;\n     }\n \n     @Override\n     public void run() {\n         try {\n-            out = new DataOutputStream(socket.getOutputStream());\n-            in = new DataInputStream(socket.getInputStream());\n+            in = new ObjectInputStream(socket.getInputStream());\n+            out = new ObjectOutputStream(socket.getOutputStream());\n             System.out.println(\"[DEBUG] client start processing\");\n             while (running) {\n-                String message = in.readUTF();\n-                if (message.equals(\"/quit\")) {\n-                    out.writeUTF(message);\n+                Message message = (Message) in.readObject();\n+                if (message.getMsg() == null) {\n+                    sendMessage(new Message(message.getAuthor(),\n+                            auth(message.getAuthor())));\n                 } else {\n-                    server.broadCastMessage(\"[\" + nickName + \"]: \" + message);\n+                    setUser(message.getAuthor());\n+                    if (message.getMsg().equals(\"/quit\")) {\n+                        out.writeObject(message);\n+                    } else if (!message.getRecipient().isEmpty()) {\n+                        server.sendPrivateMessage(message);\n+                    } else {\n+                        server.broadCastMessage(message);\n+                    }\n+                    System.out.println(\"[DEBUG] message from client: \" + message.getAuthor().getNick());\n                 }\n-                System.out.println(\"[DEBUG] message from client: \" + message);\n             }\n         } catch (Exception e) {\n             System.err.println(\"Handled connection was broken\");\n             server.removeClient(this);\n         }\n     }\n     \n-    public void sendMessage(String message) throws IOException {\n-        out.writeUTF(message);\n+    public void sendMessage(Message message) throws IOException {\n+        out.writeObject(message);\n         out.flush();\n     }\n }"
  },
  {
    "sha": "aff26b41c95a38efef2060d0c3f4bb736bf7b4e9",
    "filename": "server/src/main/java/Message.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/server/src/main/java/Message.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/server/src/main/java/Message.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/server/src/main/java/Message.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -0,0 +1,50 @@\n+import java.io.Serializable;\n+\n+public class Message implements Serializable {\n+    private final User author;\n+    private final String recipient;\n+    private final String msg;\n+    private Boolean state = null;\n+\n+    public Boolean isState() {\n+        return state;\n+    }\n+\n+    public User getAuthor() {\n+        return this.author;\n+    }\n+\n+    public String getRecipient() {\n+        return recipient;\n+    }\n+\n+    public String getMsg() {\n+        return msg;\n+    }\n+\n+    public Message(User author, String recipient, String msg) {\n+        this.author = author;\n+        this.recipient = recipient;\n+        this.msg = msg;\n+    }\n+\n+    public Message(User author, String msg) {\n+        this.author = author;\n+        this.msg = msg;\n+        this.recipient = null;\n+    }\n+\n+    public Message(User user) {\n+        this.author = user;\n+        this.recipient = null;\n+        this.msg = null;\n+    }\n+\n+    public Message(User user, boolean state) {\n+        this.author = user;\n+        this.recipient = null;\n+        this.msg = null;\n+        this.state = state;\n+    }\n+\n+}"
  },
  {
    "sha": "92a8de3dedf7bc62c2de4d0d2014ce7be2fd6898",
    "filename": "server/src/main/java/Server.java",
    "status": "modified",
    "additions": 16,
    "deletions": 6,
    "changes": 22,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/server/src/main/java/Server.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/server/src/main/java/Server.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/server/src/main/java/Server.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -27,7 +27,7 @@ public Server(int port) {\n             System.err.println(\"Server was broke\");\n         }\n     }\n-    \n+\n     public void addClient(ClientHandler clientHandler) {\n         clients.add(clientHandler);\n         System.out.println(\"[DEBUG] Client added to broadcast queue.\");\n@@ -38,16 +38,26 @@ public void removeClient(ClientHandler clientHandler) {\n         System.out.println(\"[DEBUG] Client removed from broadcast queue.\");\n     }\n \n-    public void broadCastMessage(String message) throws IOException {\n+    public void broadCastMessage(Message message) throws IOException {\n         for (ClientHandler client: clients) {\n             client.sendMessage(message);\n         }\n     }\n-    \n-    public void sendPrivateMessage(String nickName, String message) {\n-        //TODO\n+\n+    public void sendPrivateMessage(Message message) throws IOException {\n+        for (ClientHandler client: clients) {\n+            if (message.getRecipient().equals(client.getUser().getNick())\n+                || message.getAuthor().getNick().equals(client.getUser().getNick())) {\n+                client.sendMessage(message);\n+            }\n+        }\n+        System.out.println(\"[DEBUG] Client \"\n+            + message.getAuthor().getNick()\n+            + \" send private message to \"\n+            + message.getRecipient()\n+        );\n     }\n-            \n+\n     public static void main(String[] args) {\n         int port = -1;\n         if (args != null && args.length == 1) {"
  },
  {
    "sha": "e54e700b5b77e9bd561ad8541761980a5ed26541",
    "filename": "server/src/main/java/User.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/lr131/java-level-2/blob/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/server/src/main/java/User.java",
    "raw_url": "https://github.com/lr131/java-level-2/raw/2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3/server/src/main/java/User.java",
    "contents_url": "https://api.github.com/repos/lr131/java-level-2/contents/server/src/main/java/User.java?ref=2bee36e4615a95796c2ad6d55afb6d6c05bdb7d3",
    "patch": "@@ -0,0 +1,29 @@\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+public class User implements Serializable {\n+    private final String login;\n+    private final String pass;\n+\n+    public User(String login, String pass) {\n+        this.login = login;\n+        this.pass = pass;\n+    }\n+\n+    public String getNick() {\n+        return login;\n+    }\n+\n+    public boolean equals(User o) {\n+        if (o == null) {\n+            return false;\n+        }\n+        return this.login.equals(o.login)\n+                && this.pass.equals(this.pass);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(login, pass);\n+    }\n+}"
  }
]
