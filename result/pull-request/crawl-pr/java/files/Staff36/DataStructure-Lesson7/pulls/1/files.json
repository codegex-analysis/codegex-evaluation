[
  {
    "sha": "6bb1a0f14abef37e8a8f331de76a21da24bbcd0c",
    "filename": "src/com/Lesso7/Graph.java",
    "status": "modified",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/Staff36/DataStructure-Lesson7/blob/4eb6dd72be1d8bd3d2c81db67083dc149f138f1f/src/com/Lesso7/Graph.java",
    "raw_url": "https://github.com/Staff36/DataStructure-Lesson7/raw/4eb6dd72be1d8bd3d2c81db67083dc149f138f1f/src/com/Lesso7/Graph.java",
    "contents_url": "https://api.github.com/repos/Staff36/DataStructure-Lesson7/contents/src/com/Lesso7/Graph.java?ref=4eb6dd72be1d8bd3d2c81db67083dc149f138f1f",
    "patch": "@@ -0,0 +1,158 @@\n+package com.Lesso7;\n+\n+import java.util.*;\n+\n+public class Graph {\n+    private final List<Vertex> vertexList;\n+    private final boolean[][] adjMat;\n+\n+\n+    public Graph(int maxVertexCount) {\n+        this.adjMat = new boolean[maxVertexCount][maxVertexCount];\n+        this.vertexList= new ArrayList<Vertex>(maxVertexCount);\n+    }\n+\n+    public void addVertex(String label){\n+        vertexList.add(new Vertex(label));\n+    }\n+    public void addEdge(String startLabel, String endLabel){\n+        int startIndex = indexOf(startLabel);\n+        int endIndex = indexOf(endLabel);\n+        if (startIndex == -1 || endIndex == -1) {\n+        throw new IllegalArgumentException(\"Invalid label for index\");\n+        }\n+        adjMat[startIndex][endIndex]=true;\n+        adjMat[endIndex][startIndex]=true;\n+    }\n+\n+    private int indexOf(String label){\n+        for (int i = 0; i < getSize(); i++) {\n+            if (label.equals(vertexList.get(i).getValue())){\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+    public void addEdges(String startLabel, String secondLabel, String ... labels){\n+        addEdge(startLabel,secondLabel);\n+        for (String label:labels){\n+            addEdge(startLabel,label);\n+        }\n+    }\n+    public int getSize(){\n+        return vertexList.size();\n+    }\n+    public void display(){\n+        for (int i = 0; i < getSize(); i++) {\n+            System.out.print(vertexList.get(i));\n+            for (int j = 0; j < getSize(); j++) {\n+                if (adjMat[i][j]){\n+                    System.out.print(\"-> \"+vertexList.get(j));\n+                }\n+            }\n+            System.out.println();\n+\n+        }\n+    }\n+    public void depthFirstSearch(String startLabel){\n+        int startIndex= indexOf(startLabel);\n+        if (startIndex==-1){\n+            throw new IllegalArgumentException(\"Invalid start label\");\n+        }\n+        Stack<Vertex> stack= new Stack<>();\n+        Vertex vertex=vertexList.get(startIndex);\n+        visitVertex(stack, vertex,true);\n+        while (!stack.isEmpty()){\n+            vertex= getNearUnvisitedVertex(stack.peek());\n+            if (vertex!=null){\n+                visitVertex(stack,vertex,true);\n+            }else {\n+                stack.pop();\n+            }\n+        }\n+        resetVertexState();\n+    }\n+\n+    private void resetVertexState() {\n+        for (Vertex vertex:vertexList) {\n+            vertex.setVisited(false);\n+            vertex.setPreviousVertex(null);\n+        }\n+    }\n+    private Vertex getNearUnvisitedVertex(Vertex current) {\n+        int currentIndex= vertexList.indexOf(current);\n+        for (int i = 0; i < getSize(); i++) {\n+            if (adjMat[currentIndex][i]&&!vertexList.get(i).isVisited){\n+               return vertexList.get(i);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void visitVertex(Stack<Vertex> stack, Vertex vertex,boolean display) {\n+        System.out.println(vertex);\n+        vertex.setVisited(true);\n+        stack.push(vertex);\n+    }\n+    private void visitVertex(Queue<Vertex> queue, Vertex vertex, boolean display) {\n+       if (display)\n+        System.out.println(vertex);\n+\n+        vertex.setVisited(true);\n+        queue.add(vertex);\n+    }\n+\n+    public void breadthFirstSearch(String startLabel){\n+        int startIndex= indexOf(startLabel);\n+\n+        if (startIndex==-1){\n+            throw new IllegalArgumentException(\"Invalid start label\");\n+        }\n+        Queue<Vertex> queue= new LinkedList<>();\n+        Vertex vertex=vertexList.get(startIndex);\n+\n+        visitVertex(queue, vertex,true);\n+        while (!queue.isEmpty()){\n+            vertex= getNearUnvisitedVertex(queue.peek());\n+            if (vertex!=null){\n+                visitVertex(queue,vertex,true);\n+            }else {\n+                queue.remove();\n+            }\n+        }\n+        resetVertexState();\n+    }\n+    public List<Vertex> findTheShortRoad(String startLabel, String endLabel){\n+        int startIndex= indexOf(startLabel);\n+        ArrayList<Vertex> shortWay = new ArrayList<>();\n+        if (startIndex==-1)\n+            throw new IllegalArgumentException(\"Invalid start label\");\n+        Queue<Vertex> queue= new LinkedList<>();\n+        Vertex vertex=vertexList.get(startIndex);\n+        visitVertex(queue, vertex,false);\n+        Vertex previousVertex=vertex;\n+\n+        while (!queue.isEmpty()){\n+         vertex= getNearUnvisitedVertex(queue.peek());\n+            if (vertex!=null){\n+                vertex.setPreviousVertex(previousVertex);\n+                visitVertex(queue,vertex,false);\n+                if (vertex.getValue().equals(endLabel)){\n+                    break;\n+                }\n+            }else {\n+                queue.remove();\n+                previousVertex=queue.peek();\n+            }\n+        }\n+        while (vertex!=null){\n+            shortWay.add(vertex);\n+            vertex=vertex.getPreviousVertex();\n+        }\n+        Collections.reverse(shortWay);\n+\n+        resetVertexState();\n+        return shortWay;\n+    }\n+\n+}"
  },
  {
    "sha": "b999ca0a2b0a41d67b2f4cb5b45ef89a22779bfa",
    "filename": "src/com/Lesso7/Main.java",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/Staff36/DataStructure-Lesson7/blob/4eb6dd72be1d8bd3d2c81db67083dc149f138f1f/src/com/Lesso7/Main.java",
    "raw_url": "https://github.com/Staff36/DataStructure-Lesson7/raw/4eb6dd72be1d8bd3d2c81db67083dc149f138f1f/src/com/Lesso7/Main.java",
    "contents_url": "https://api.github.com/repos/Staff36/DataStructure-Lesson7/contents/src/com/Lesso7/Main.java?ref=4eb6dd72be1d8bd3d2c81db67083dc149f138f1f",
    "patch": "@@ -0,0 +1,34 @@\n+package com.Lesso7;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        Graph graph= createGraph();\n+        System.out.println(\"Size graph is \"+graph.getSize());\n+        graph.display();\n+        System.out.println(\"\\nThe shortest way is: \\n\"+graph.findTheShortRoad(\"Moscow\",\"Voronezh\"));\n+    }\n+    public static Graph createGraph(){\n+        Graph graph= new Graph(10);\n+        graph.addVertex(\"Moscow\");\n+        graph.addVertex(\"Tula\");\n+        graph.addVertex(\"Lipetsk\");\n+        graph.addVertex(\"Voronezh\");\n+        graph.addVertex(\"Ryazan\");\n+        graph.addVertex(\"Tambov\");\n+        graph.addVertex(\"Saratov\");\n+        graph.addVertex(\"Kaluga\");\n+        graph.addVertex(\"Orel\");\n+        graph.addVertex(\"Kursk\");\n+\n+        graph.addEdges(\"Moscow\",\"Tula\",\"Ryazan\",\"Kaluga\" );\n+        graph.addEdges(\"Voronezh\",\"Lipetsk\",\"Saratov\",\"Kursk\");\n+        graph.addEdges(\"Tula\",\"Lipetsk\");\n+        graph.addEdges(\"Ryazan\",\"Tambov\");\n+        graph.addEdges(\"Tambov\",\"Saratov\");\n+        graph.addEdges(\"Kaluga\",\"Orel\");\n+        graph.addEdges(\"Orel\",\"Kursk\");\n+        return graph;\n+    }\n+\n+}"
  },
  {
    "sha": "768cb4f6f605667050357a200d7e410e0d684605",
    "filename": "src/com/Lesso7/Vertex.java",
    "status": "modified",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/Staff36/DataStructure-Lesson7/blob/4eb6dd72be1d8bd3d2c81db67083dc149f138f1f/src/com/Lesso7/Vertex.java",
    "raw_url": "https://github.com/Staff36/DataStructure-Lesson7/raw/4eb6dd72be1d8bd3d2c81db67083dc149f138f1f/src/com/Lesso7/Vertex.java",
    "contents_url": "https://api.github.com/repos/Staff36/DataStructure-Lesson7/contents/src/com/Lesso7/Vertex.java?ref=4eb6dd72be1d8bd3d2c81db67083dc149f138f1f",
    "patch": "@@ -0,0 +1,60 @@\n+package com.Lesso7;\n+\n+import java.util.Objects;\n+\n+\n+public class Vertex {\n+    private Vertex previousVertex;\n+    boolean isVisited;\n+    private String value;\n+\n+\n+    private boolean isVisited() {\n+        return isVisited;\n+    }\n+\n+    public Vertex getPreviousVertex() {\n+        return previousVertex;\n+    }\n+\n+    public void setPreviousVertex(Vertex previousVertex) {\n+        this.previousVertex = previousVertex;\n+    }\n+    public void setVisited(boolean visited) {\n+        isVisited = visited;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public Vertex(String value) {\n+        this.value = value;\n+        isVisited=false;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return value;\n+\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Vertex vertex = (Vertex) o;\n+        return Objects.equals(value, vertex.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);\n+    }\n+\n+}"
  }
]
