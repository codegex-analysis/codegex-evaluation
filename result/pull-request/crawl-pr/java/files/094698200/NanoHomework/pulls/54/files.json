[
  {
    "sha": "a1b791dd955557d04277344eb9dd912b19fd7955",
    "filename": "src/ArrayJava.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/ArrayJava.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/ArrayJava.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/ArrayJava.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,21 @@\n+public class ArrayJava {\n+    public static void main(String[] args) {\n+        int[] mas = {3, 3, 8, 9, 7, 8, 4, 6, 6, 8, 6, 9, 8, 6, 3, 3, 3, 5};\n+\n+        int a = 0;\n+        int d = 0;\n+        for (int i = 0; i < mas.length; i++) {\n+            for (int j = i + 1; j < mas.length - 1; j++) {\n+                if (mas[i] == mas[j]) {\n+                    a = mas[i];\n+                    d++;\n+\n+                }\n+\n+            }\n+            System.out.println(\"элемент \" + a + \" встречается \" + d + \" раз\\n\");\n+            d = 0;\n+            break;\n+        }\n+    }\n+}"
  },
  {
    "sha": "cd37c518d0faeafd0751411d2c7acb2b45e1cca4",
    "filename": "src/Game/Game.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/Game/Game.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/Game/Game.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/Game/Game.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,25 @@\n+package Game;\n+\n+public class Game {\n+    public static void main(String[] args) {\n+\n+\n+        int[] mas = {3, 3, 8, 9, 7, 8, 4, 6, 6, 8, 6, 9, 8, 6, 3, 3, 3, 5};\n+\n+        int a = 0;\n+        int d = 0;\n+        for (int i = 0; i < mas.length; i++) {\n+            for (int j = i + 1; j < mas.length - 1; j++) {\n+                if (mas[i] == mas[j]) {\n+                    a = mas[i];\n+                    d++;\n+\n+                }\n+\n+            }\n+            System.out.println(\"элемент \" + a + \" встречается \" + d + \" раз\\n\");\n+            d = 0;\n+            break;\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "fa2afa6d0cd485e93d40998c2f70290edf19ee98",
    "filename": "src/HeavyBoxTwo.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/HeavyBoxTwo.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/HeavyBoxTwo.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/HeavyBoxTwo.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,21 @@\n+import java.util.ArrayList;\n+\n+public class HeavyBoxTwo {\n+    public static void main(String[] args) {\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"Hello\");\n+        arrayList.add(\"Kays\");\n+        arrayList.add(\"Name\");\n+        arrayList.add(\"Bay\");\n+             System.out.println(arrayList);\n+\n+\n+        for (String s:arrayList) {\n+            System.out.println(arrayList);\n+          }\n+\n+          arrayList.size();\n+      System.out.println(arrayList);\n+ }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0eb592ccc95c15fbdc3c0e1a123661b9df27b285",
    "filename": "src/KeyboardObserver.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/KeyboardObserver.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/KeyboardObserver.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/KeyboardObserver.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,69 @@\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n+\n+public class KeyboardObserver extends Thread {\n+    private Queue<KeyEvent> keyEvents = new ArrayBlockingQueue<KeyEvent>(100);\n+\n+    private JFrame frame;\n+\n+    @Override\n+    public void run() {\n+        frame = new JFrame(\"KeyPress Tester\");\n+        frame.setTitle(\"Transparent JFrame Demo\");\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\n+        frame.setUndecorated(true);\n+        frame.setSize(400, 400);\n+        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n+        frame.setLayout(new GridBagLayout());\n+\n+        frame.setOpacity(0.0f);\n+        frame.setVisible(true);\n+\n+        frame.addFocusListener(new FocusListener() {\n+            @Override\n+            public void focusGained(FocusEvent e) {\n+                //do nothing\n+            }\n+\n+            @Override\n+            public void focusLost(FocusEvent e) {\n+                System.exit(0);\n+            }\n+        });\n+\n+\n+        frame.addKeyListener(new KeyListener() {\n+\n+            public void keyTyped(KeyEvent e) {\n+                //do nothing\n+            }\n+\n+            public void keyReleased(KeyEvent e) {\n+                //do nothing\n+            }\n+\n+            public void keyPressed(KeyEvent e) {\n+                keyEvents.add(e);\n+            }\n+        });\n+    }\n+\n+\n+    public boolean hasKeyEvents() {\n+        return !keyEvents.isEmpty();\n+    }\n+\n+    public KeyEvent getEventFromTop() {\n+        return keyEvents.poll();\n+    }\n+}\n+"
  },
  {
    "sha": "97443ab90fa80ff128c017f2d191657e1a1c0420",
    "filename": "src/Mouse.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/Mouse.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/Mouse.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/Mouse.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,17 @@\n+public class Mouse {\n+    private int x;\n+    private int y;\n+\n+    public int getX() {\n+        return x;\n+    }\n+\n+    public int getY() {\n+        return y;\n+    }\n+\n+    public Mouse(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b35d5fd592d17e1f2dc5b747a8d27e691da463f3",
    "filename": "src/Room.java",
    "status": "added",
    "additions": 166,
    "deletions": 0,
    "changes": 166,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/Room.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/Room.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/Room.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,166 @@\n+\n+\n+import java.awt.event.KeyEvent;\n+import java.util.ArrayList;\n+\n+/**\n+ * Основной класс программы.\n+ */\n+public class Room {\n+    private int width;\n+    private int height;\n+    private Snake snake;\n+    private Mouse mouse;\n+\n+    public Room(int width, int height, Snake snake) {\n+        this.width = width;\n+        this.height = height;\n+        this.snake = snake;\n+    }\n+\n+    public Snake getSnake() {\n+        return snake;\n+    }\n+\n+    public Mouse getMouse() {\n+        return mouse;\n+    }\n+\n+    public int getWidth() {\n+        return width;\n+    }\n+\n+    public int getHeight() {\n+        return height;\n+    }\n+\n+    public void setWidth(int width) {\n+        this.width = width;\n+    }\n+\n+    public void setHeight(int height) {\n+        this.height = height;\n+    }\n+\n+    public void setSnake(Snake snake) {\n+        this.snake = snake;\n+    }\n+\n+    public void setMouse(Mouse mouse) {\n+        this.mouse = mouse;\n+    }\n+\n+    /**\n+     * Основной цикл программы.\n+     * Тут происходят все важные действия\n+     */\n+    public void run() {\n+        //Создаем объект \"наблюдатель за клавиатурой\" и стартуем его.\n+        KeyboardObserver keyboardObserver = new KeyboardObserver();\n+        keyboardObserver.start();\n+\n+        //пока змея жива\n+        while (snake.isAlive()) {\n+            //\"наблюдатель\" содержит события о нажатии клавиш?\n+            if (keyboardObserver.hasKeyEvents()) {\n+                KeyEvent event = keyboardObserver.getEventFromTop();\n+                //Если равно символу 'q' - выйти из игры.\n+                if (event.getKeyChar() == 'q') return;\n+\n+                //Если \"стрелка влево\" - сдвинуть фигурку влево\n+                if (event.getKeyCode() == KeyEvent.VK_LEFT)\n+                    snake.setDirection(SnakeDirection.LEFT);\n+                    //Если \"стрелка вправо\" - сдвинуть фигурку вправо\n+                else if (event.getKeyCode() == KeyEvent.VK_RIGHT)\n+                    snake.setDirection(SnakeDirection.RIGHT);\n+                    //Если \"стрелка вверх\" - сдвинуть фигурку вверх\n+                else if (event.getKeyCode() == KeyEvent.VK_UP)\n+                    snake.setDirection(SnakeDirection.UP);\n+                    //Если \"стрелка вниз\" - сдвинуть фигурку вниз\n+                else if (event.getKeyCode() == KeyEvent.VK_DOWN)\n+                    snake.setDirection(SnakeDirection.DOWN);\n+            }\n+\n+            snake.move();   //двигаем змею\n+            print();        //отображаем текущее состояние игры\n+            sleep();        //пауза между ходами\n+        }\n+\n+        //Выводим сообщение \"Game Over\"\n+        System.out.println(\"Game Over!\");\n+    }\n+\n+    /**\n+     * Выводим на экран текущее состояние игры\n+     */\n+    public void print() {\n+        //Создаем массив, куда будем \"рисовать\" текущее состояние игры\n+        int[][] matrix = new int[height][width];\n+\n+        //Рисуем все кусочки змеи\n+        ArrayList<SnakeSection> sections = new ArrayList<SnakeSection>(snake.getSections());\n+        for (SnakeSection snakeSection : sections) {\n+            matrix[snakeSection.getY()][snakeSection.getX()] = 1;\n+        }\n+\n+        //Рисуем голову змеи (4 - если змея мертвая)\n+        matrix[snake.getY()][snake.getX()] = snake.isAlive() ? 2 : 4;\n+\n+        //Рисуем мышь\n+        matrix[mouse.getY()][mouse.getX()] = 3;\n+\n+        //Выводим все это на экран\n+        String[] symbols = {\" . \", \" x \", \" X \", \"^_^\", \"RIP\"};\n+        for (int y = 0; y < height; y++) {\n+            for (int x = 0; x < width; x++) {\n+                System.out.print(symbols[matrix[y][x]]);\n+            }\n+            System.out.println();\n+        }\n+        System.out.println();\n+        System.out.println();\n+        System.out.println();\n+    }\n+\n+    /**\n+     * Метод вызывается, когда мышь съели\n+     */\n+    public void eatMouse() {\n+        createMouse();\n+    }\n+\n+    /**\n+     * Создает новую мышь\n+     */\n+    public void createMouse() {\n+        int x = (int) (Math.random() * width);\n+        int y = (int) (Math.random() * height);\n+\n+        mouse = new Mouse(x, y);\n+    }\n+\n+\n+    public static Room game;\n+\n+    public static void main(String[] args) {\n+        game = new Room(20, 20, new Snake(10, 10));\n+        game.snake.setDirection(SnakeDirection.DOWN);\n+        game.createMouse();\n+        game.run();\n+    }\n+\n+    private int initialDelay = 520;\n+    private int delayStep = 20;\n+\n+    /**\n+     * Программа делает паузу, длинна которой зависит от длинны змеи.\n+     */\n+    public void sleep() {\n+        try {\n+            int level = snake.getSections().size();\n+            int delay = level < 15 ? (initialDelay - delayStep * level) : 200;\n+            Thread.sleep(delay);\n+        } catch (InterruptedException e) {\n+        }\n+    }\n+}"
  },
  {
    "sha": "d7fa897efe626c5ba244757ffa041700c9432477",
    "filename": "src/Snake.java",
    "status": "added",
    "additions": 112,
    "deletions": 0,
    "changes": 112,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/Snake.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/Snake.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/Snake.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,112 @@\n+\n+import java.util.List;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Класс змея\n+ */\n+public class Snake {\n+    //Направление движения змеи\n+    private SnakeDirection direction;\n+    //Состояние - жива змея или нет.\n+    private boolean isAlive;\n+    //Список кусочков змеи.\n+    private List<SnakeSection> sections;\n+\n+    public Snake(int x, int y) {\n+        sections = new ArrayList<>();\n+        sections.add(new SnakeSection(x, y));\n+        isAlive = true;\n+    }\n+\n+    public boolean isAlive() {\n+        return isAlive;\n+    }\n+\n+    public int getX() {\n+        return sections.get(0).getX();\n+    }\n+\n+    public int getY() {\n+        return sections.get(0).getY();\n+    }\n+\n+    public SnakeDirection getDirection() {\n+        return direction;\n+    }\n+\n+    public void setDirection(SnakeDirection direction) {\n+        this.direction = direction;\n+    }\n+\n+    public List<SnakeSection> getSections() {\n+        return sections;\n+    }\n+\n+    /**\n+     * Метод перемещает змею на один ход.\n+     * Направление перемещения задано переменной direction.\n+     */\n+    public void move() {\n+        if (!isAlive) return;\n+\n+        if (direction == SnakeDirection.UP)\n+            move(0, -1);\n+        else if (direction == SnakeDirection.RIGHT)\n+            move(1, 0);\n+        else if (direction == SnakeDirection.DOWN)\n+            move(0, 1);\n+        else if (direction == SnakeDirection.LEFT)\n+            move(-1, 0);\n+    }\n+\n+    /**\n+     * Метод перемещает змею в соседнюю клетку.\n+     * Координаты клетки заданы относительно текущей головы с помощью переменных (dx, dy).\n+     */\n+    void move(int dx, int dy) {\n+        //Создаем новую голову - новый \"кусочек змеи\".\n+        SnakeSection head = sections.get(0);\n+        head = new SnakeSection(head.getX() + dx, head.getY() + dy);\n+\n+        //Проверяем - не вылезла ли голова за границу комнаты\n+        checkBorders(head);\n+        if (!isAlive) return;\n+\n+        //Проверяем - не пересекает ли змея  саму себя\n+        checkBody(head);\n+        if (!isAlive) return;\n+\n+        //Проверяем - не съела ли змея мышь.\n+        Mouse mouse = Room.game.getMouse();\n+        if (head.getX() == mouse.getX() && head.getY() == mouse.getY()) //съела\n+        {\n+            sections.add(0, head);                  //Добавили новую голову\n+            Room.game.eatMouse();                   //Хвост не удаляем, но создаем новую мышь.\n+        } else //просто движется\n+        {\n+            sections.add(0, head);                  //добавили новую голову\n+            sections.remove(sections.size() - 1);   //удалили последний элемент с хвоста\n+        }\n+    }\n+\n+    /**\n+     * Метод проверяет - находится ли новая голова в пределах комнаты\n+     */\n+    private void checkBorders(SnakeSection head) {\n+        if ((head.getX() < 0 || head.getX() >= Room.game.getWidth()) || head.getY() < 0 || head.getY() >= Room.game.getHeight()) {\n+            isAlive = false;\n+        }\n+    }\n+\n+    /**\n+     * Метод проверяет - не совпадает ли голова с каким-нибудь участком тела змеи.\n+     */\n+    private void checkBody(SnakeSection head) {\n+        if (sections.contains(head)) {\n+            isAlive = false;\n+        }\n+    }\n+}"
  },
  {
    "sha": "2da7dd8d45221dc6353a5269259b4358e6739717",
    "filename": "src/SnakeDirection.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/SnakeDirection.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/SnakeDirection.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/SnakeDirection.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,6 @@\n+public enum SnakeDirection {\n+    UP,\n+    DOWN,\n+    RIGHT,\n+    LEFT\n+}"
  },
  {
    "sha": "c360d4ff35a1c4f4902e99264c516b9f14fe4e67",
    "filename": "src/SnakeGame.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/SnakeGame.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/SnakeGame.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/SnakeGame.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,15 @@\n+import Game.Game;\n+\n+public class SnakeGame extends Game {\n+\n+    public static final int WIDTH = 15;\n+    public static final int HEIGHT = 15;\n+\n+\n+    public void initialize() {\n+        setScreenSize(WIDTH, HEIGHT);\n+    }\n+\n+    private void setScreenSize(int width, int height) {\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "08b661334bb28deeff225f55f4318c4ba1b63aaa",
    "filename": "src/SnakeSection.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/SnakeSection.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/SnakeSection.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/SnakeSection.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,37 @@\n+\n+public class SnakeSection {\n+    private int x;\n+    private int y;\n+\n+\n+    public SnakeSection(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    public int getX() {\n+        return x;\n+    }\n+\n+    public int getY() {\n+        return y;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+\n+        SnakeSection that = (SnakeSection) o;\n+\n+        if (x != that.x) return false;\n+        return y == that.y;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = x;\n+        result = 31 * result + y;\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "0d79c5d338dc3f2a355ebd075c6c2d7a76d9431c",
    "filename": "src/TreeSet.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/094698200/NanoHomework/blob/8fbc51937c1a249139bc41f295a5b0621708a95c/src/TreeSet.java",
    "raw_url": "https://github.com/094698200/NanoHomework/raw/8fbc51937c1a249139bc41f295a5b0621708a95c/src/TreeSet.java",
    "contents_url": "https://api.github.com/repos/094698200/NanoHomework/contents/src/TreeSet.java?ref=8fbc51937c1a249139bc41f295a5b0621708a95c",
    "patch": "@@ -0,0 +1,4 @@\n+public class TreeSet {\n+\n+\n+}\n\\ No newline at end of file"
  }
]
