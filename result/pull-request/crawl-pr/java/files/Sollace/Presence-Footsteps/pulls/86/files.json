[
  {
    "sha": "ff940537424677685fe6711a54391e963cae98ce",
    "filename": "src/main/java/eu/ha3/presencefootsteps/sound/generator/CrowStepSoundGenerator.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/Sollace/Presence-Footsteps/blob/7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0/src/main/java/eu/ha3/presencefootsteps/sound/generator/CrowStepSoundGenerator.java",
    "raw_url": "https://github.com/Sollace/Presence-Footsteps/raw/7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0/src/main/java/eu/ha3/presencefootsteps/sound/generator/CrowStepSoundGenerator.java",
    "contents_url": "https://api.github.com/repos/Sollace/Presence-Footsteps/contents/src/main/java/eu/ha3/presencefootsteps/sound/generator/CrowStepSoundGenerator.java?ref=7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0",
    "patch": "@@ -0,0 +1,141 @@\n+package eu.ha3.presencefootsteps.sound.generator;\n+\n+import eu.ha3.presencefootsteps.sound.State;\n+import eu.ha3.presencefootsteps.util.MathUtil;\n+import eu.ha3.presencefootsteps.sound.Options;\n+import net.minecraft.entity.LivingEntity;\n+\n+class CrowStepSoundGenerator extends BipedalStepSoundGenerator {\n+\n+    protected boolean isFalling = false;\n+\n+    protected FlightState state = FlightState.IDLE;\n+    protected int flapMod = 0;\n+    private long lastTimeImmobile;\n+    protected long nextFlapTime;\n+\n+    @Override\n+    public boolean generateFootsteps(LivingEntity ply) {\n+        lastTimeImmobile = timeImmobile;\n+        return super.generateFootsteps(ply);\n+    }\n+\n+    @Override\n+    protected void simulateAirborne(LivingEntity ply) {\n+        isFalling = motionY < -0.3;\n+        super.simulateAirborne(ply);\n+        if (isAirborne) {\n+            simulateFlying(ply);\n+        }\n+    }\n+\n+    protected boolean updateState(double x, double y, double z, double strafe) {\n+        double smotionHor = x * x + z * z;\n+        float motionHor = (float) Math.sqrt(smotionHor);\n+        FlightState result = FlightState.IDLE;\n+        if (motionHor > variator.MIN_DASH_MOTION) {\n+            result = FlightState.DASHING;\n+        } else if (motionHor > variator.MIN_COAST_MOTION && (float) Math.abs(y) < variator.MIN_COAST_MOTION / 20) {\n+            if (strafe > variator.MIN_MOTION_Y) {\n+                result = FlightState.COASTING_STRAFING;\n+            } else {\n+                result = FlightState.COASTING;\n+            }\n+        } else if (motionHor > variator.MIN_MOTION_HOR) {\n+            result = FlightState.FLYING;\n+        } else if (y < 0) {\n+            result = FlightState.DESCENDING;\n+        } else if ((float) y > variator.MIN_MOTION_Y) {\n+            result = FlightState.ASCENDING;\n+        }\n+        boolean changed = result != state;\n+        state = result;\n+        return changed;\n+    }\n+\n+    protected int getWingSpeed() {\n+        switch (state) {\n+        case COASTING:\n+            if (flapMod == 0)\n+                return variator.WING_SPEED_COAST;\n+            return variator.WING_SPEED_NORMAL * flapMod;\n+        case COASTING_STRAFING:\n+            return variator.WING_SPEED_NORMAL * (1 + flapMod);\n+        case DASHING:\n+            return variator.WING_SPEED_RAPID;\n+        case ASCENDING:\n+        case FLYING:\n+            return variator.WING_SPEED_NORMAL;\n+        default:\n+            return variator.WING_SPEED_IDLE;\n+        }\n+    }\n+\n+    @Override\n+    protected void simulateJumpingLanding(LivingEntity ply) {\n+        if (hasStoppingConditions(ply)) {\n+            return;\n+        }\n+\n+        final long now = System.currentTimeMillis();\n+\n+        double xpd = motionX * motionX + motionZ * motionZ;\n+        float speed = (float) Math.sqrt(xpd);\n+\n+        if (isAirborne) {\n+            nextFlapTime = now + variator.WING_JUMPING_REST_TIME;\n+        }\n+\n+        boolean hugeLanding = !isAirborne && fallDistance > variator.HUGEFALL_LANDING_DISTANCE_MIN;\n+        boolean speedingJumpStateChange = speed > variator.MIN_MOTION_HOR;\n+\n+        if (hugeLanding || speedingJumpStateChange) {\n+            if (!isAirborne) {\n+                float volume = speedingJumpStateChange ? 2\n+                        : MathUtil.scalex(fallDistance, variator.HUGEFALL_LANDING_DISTANCE_MIN, variator.HUGEFALL_LANDING_DISTANCE_MAX);\n+                acoustics.playAcoustic(ply, \"_SWIFT\", State.LAND, Options.singular(\"gliding_volume\", volume));\n+            } else {\n+                acoustics.playAcoustic(ply, \"_SWIFT\", State.JUMP, Options.EMPTY);\n+            }\n+        }\n+\n+        if (isAirborne && isJumping(ply)) {\n+            simulateJumping(ply);\n+        } else if (!isAirborne && hugeLanding) {\n+            simulateLanding(ply);\n+        }\n+    }\n+\n+    protected void simulateFlying(LivingEntity ply) {\n+        final long now = System.currentTimeMillis();\n+\n+        if (updateState(motionX, motionY, motionZ, ply.sidewaysSpeed)) {\n+            nextFlapTime = now + variator.FLIGHT_TRANSITION_TIME;\n+        }\n+\n+        if (!ply.isSubmergedInWater() && !isFalling && now > nextFlapTime) {\n+            nextFlapTime = now + getWingSpeed() + (ply.world.random.nextInt(100) - 50);\n+            flapMod = (flapMod + 1) % (1 + ply.world.random.nextInt(4));\n+\n+            float volume = 1;\n+            long diffImmobile = now - lastTimeImmobile;\n+            if (diffImmobile > variator.WING_IMMOBILE_FADE_START) {\n+                volume -= MathUtil.scalex(diffImmobile,\n+                        variator.WING_IMMOBILE_FADE_START,\n+                        variator.WING_IMMOBILE_FADE_START + variator.WING_IMMOBILE_FADE_DURATION);\n+            }\n+\n+            acoustics.playAcoustic(ply, \"_WING\", State.WALK, Options.singular(\"gliding_volume\", volume));\n+        }\n+    }\n+\n+    private enum FlightState {\n+        DASHING,\n+        COASTING,\n+        COASTING_STRAFING,\n+        FLYING,\n+        IDLE,\n+        ASCENDING,\n+        DESCENDING\n+    }\n+}"
  },
  {
    "sha": "800171aa9b7d9713a4316170b8ce35ef31bd08a7",
    "filename": "src/main/java/eu/ha3/presencefootsteps/sound/generator/Locomotion.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/Sollace/Presence-Footsteps/blob/7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0/src/main/java/eu/ha3/presencefootsteps/sound/generator/Locomotion.java",
    "raw_url": "https://github.com/Sollace/Presence-Footsteps/raw/7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0/src/main/java/eu/ha3/presencefootsteps/sound/generator/Locomotion.java",
    "contents_url": "https://api.github.com/repos/Sollace/Presence-Footsteps/contents/src/main/java/eu/ha3/presencefootsteps/sound/generator/Locomotion.java?ref=7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0",
    "patch": "@@ -13,7 +13,8 @@\n     NONE(() -> StepSoundGenerator.EMPTY),\n     BIPED(BipedalStepSoundGenerator::new),\n     QUADRUPED(QuadrapedalStepSoundGenerator::new),\n-    FLYING(PegasusStepSoundGenerator::new);\n+    FLYING(PegasusStepSoundGenerator::new),\n+    CROWLIKE(CrowStepSoundGenerator::new);\n \n     private static final Map<String, Locomotion> registry = new HashMap<>();\n "
  },
  {
    "sha": "f7aecf5a33b643769dfff23c8abe2b429dce0252",
    "filename": "src/main/resources/assets/presencefootsteps/lang/en_us.json",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Sollace/Presence-Footsteps/blob/7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0/src/main/resources/assets/presencefootsteps/lang/en_us.json",
    "raw_url": "https://github.com/Sollace/Presence-Footsteps/raw/7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0/src/main/resources/assets/presencefootsteps/lang/en_us.json",
    "contents_url": "https://api.github.com/repos/Sollace/Presence-Footsteps/contents/src/main/resources/assets/presencefootsteps/lang/en_us.json?ref=7be6cfb5c13b85fbe7885d7b5dd3c8924800acb0",
    "patch": "@@ -13,6 +13,7 @@\n \t\"menu.pf.stance.quadruped\": \"Quadrupedal\",\n \t\"menu.pf.stance.biped\": \"Bipedal\",\n \t\"menu.pf.stance.flying\": \"Avian\",\n+\t\"menu.pf.stance.crowlike\": \"Avian Biped\",\n \t\"menu.pf.report.full\": \"Full report\",\n \t\"menu.pf.report.concise\": \"Concise report\",\n \t\"pf.report.save\": \"File saved as: %s\","
  }
]
