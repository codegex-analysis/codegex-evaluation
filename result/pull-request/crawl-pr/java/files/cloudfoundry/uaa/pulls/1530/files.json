[
  {
    "sha": "72ab9b2ebe329c2d6602c5e2f35ca9a9c01b0579",
    "filename": "server/src/main/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManager.java",
    "status": "modified",
    "additions": 33,
    "deletions": 11,
    "changes": 44,
    "blob_url": "https://github.com/cloudfoundry/uaa/blob/46cb27430410b3839fba3c69c34d0e2e83d40113/server/src/main/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManager.java",
    "raw_url": "https://github.com/cloudfoundry/uaa/raw/46cb27430410b3839fba3c69c34d0e2e83d40113/server/src/main/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManager.java",
    "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server/src/main/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManager.java?ref=46cb27430410b3839fba3c69c34d0e2e83d40113",
    "patch": "@@ -174,6 +174,8 @@ private boolean idTokenWasIssuedByTheUaa(String issuer) {\n     private IdentityProvider buildInternalUaaIdpConfig(String issuer, String originKey) {\n         OIDCIdentityProviderDefinition uaaOidcProviderConfig = new OIDCIdentityProviderDefinition();\n         uaaOidcProviderConfig.setIssuer(issuer);\n+        Map<String, Object> userNameMapping = Collections.singletonMap(USER_NAME_ATTRIBUTE_NAME, USER_NAME_ATTRIBUTE_NAME);\n+        uaaOidcProviderConfig.setAttributeMappings(userNameMapping);\n         IdentityProvider<OIDCIdentityProviderDefinition> uaaIdp = new IdentityProvider<>();\n         uaaIdp.setOriginKey(originKey);\n         uaaIdp.setConfig(uaaOidcProviderConfig);\n@@ -404,23 +406,43 @@ protected UaaUser userAuthenticated(Authentication request, UaaUser userFromRequ\n         }\n \n         //we must check and see if the email address has changed between authentications\n-            if (haveUserAttributesChanged(userFromDb, userFromRequest)) {\n-                logger.debug(\"User attributed have changed, updating them.\");\n-                userFromDb = userFromDb.modifyAttributes(email,\n-                                                         userFromRequest.getGivenName(),\n-                                                         userFromRequest.getFamilyName(),\n-                                                         userFromRequest.getPhoneNumber(),\n-                                                         userFromRequest.getExternalId(),\n-                                                         userFromDb.isVerified() || userFromRequest.isVerified())\n-                    .modifyUsername(userFromRequest.getUsername());\n-                userModified = true;\n-            }\n+        if (haveUserAttributesChanged(userFromDb, userFromRequest) && !isIdTokenIssuedByUaaWithoutIdpRegistration(request)) {\n+            logger.debug(\"User attributed have changed, updating them.\");\n+            userFromDb = userFromDb.modifyAttributes(email,\n+                                                     userFromRequest.getGivenName(),\n+                                                     userFromRequest.getFamilyName(),\n+                                                     userFromRequest.getPhoneNumber(),\n+                                                     userFromRequest.getExternalId(),\n+                                                     userFromDb.isVerified() || userFromRequest.isVerified())\n+                .modifyUsername(userFromRequest.getUsername());\n+            userModified = true;\n+        }\n \n         ExternalGroupAuthorizationEvent event = new ExternalGroupAuthorizationEvent(userFromDb, userModified, userFromRequest.getAuthorities(), true);\n         publish(event);\n         return getUserDatabase().retrieveUserById(userFromDb.getId());\n     }\n \n+    private boolean isIdTokenIssuedByUaaWithoutIdpRegistration(Authentication request) {\n+        String idToken = ((ExternalOAuthCodeToken) request).getIdToken();\n+        if (idToken == null) {\n+            return false;\n+        }\n+        String claimsString = JwtHelper.decode(ofNullable(idToken).orElse(\"\")).getClaims();\n+        Map<String, Object> claims = JsonUtils.readValue(claimsString, new TypeReference<Map<String, Object>>() {});\n+        String issuer = (String) claims.get(ClaimConstants.ISS);\n+        if (idTokenWasIssuedByTheUaa(issuer)) {\n+            try {\n+                ((ExternalOAuthProviderConfigurator) getProviderProvisioning()).retrieveByIssuer(issuer, IdentityZoneHolder.get().getId());\n+                return false;\n+            } catch (IncorrectResultSizeDataAccessException e) {\n+                return true;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n     @Override\n     protected boolean isAddNewShadowUser() {\n         if (!super.isAddNewShadowUser()) {"
  },
  {
    "sha": "1839e2e04b3372a7f4afa84387f63b38ebf5516d",
    "filename": "server/src/test/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManagerIT.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/cloudfoundry/uaa/blob/46cb27430410b3839fba3c69c34d0e2e83d40113/server/src/test/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManagerIT.java",
    "raw_url": "https://github.com/cloudfoundry/uaa/raw/46cb27430410b3839fba3c69c34d0e2e83d40113/server/src/test/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManagerIT.java",
    "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server/src/test/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManagerIT.java?ref=46cb27430410b3839fba3c69c34d0e2e83d40113",
    "patch": "@@ -80,6 +80,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.UUID;\n import java.util.concurrent.CountDownLatch;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -442,7 +443,9 @@ void when_exchanging_an_id_token_retrieved_from_the_internal_uaa_idp_for_an_acce\n         when(provisioning.retrieveAll(eq(true), anyString())).thenReturn(new ArrayList<>());\n \n         String username = RandomStringUtils.random(50);\n-        claims.put(\"sub\", username);\n+        String userid = UUID.randomUUID().toString();\n+        claims.put(\"sub\", userid);\n+        claims.put(\"user_name\", username);\n         claims.put(\"iss\", \"http://localhost/oauth/token\");\n         claims.put(\"origin\", UAA_ORIGIN);\n \n@@ -485,7 +488,9 @@ void when_exchanging_an_id_token_retrieved_by_uaa_via_an_oidc_idp_for_an_access_\n         when(provisioning.retrieveAll(eq(true), anyString())).thenReturn(Collections.singletonList(idpProvider));\n \n         String username = RandomStringUtils.random(50);\n-        claims.put(\"sub\", username);\n+        String userid = UUID.randomUUID().toString();\n+        claims.put(\"sub\", userid);\n+        claims.put(\"user_name\", username);\n         claims.put(\"iss\", UAA_ISSUER_URL);\n         claims.put(\"origin\", idpProvider.getOriginKey());\n "
  }
]
