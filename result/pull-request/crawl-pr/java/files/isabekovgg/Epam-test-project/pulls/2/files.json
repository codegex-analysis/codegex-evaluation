[
  {
    "sha": "2968e5ffb7fb4ada58716ad592e348eda1855803",
    "filename": "src/main/java/Manipulations.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/isabekovgg/Epam-test-project/blob/03e5c67ce2275cca98181954989be941d7b7cebf/src/main/java/Manipulations.class",
    "raw_url": "https://github.com/isabekovgg/Epam-test-project/raw/03e5c67ce2275cca98181954989be941d7b7cebf/src/main/java/Manipulations.class",
    "contents_url": "https://api.github.com/repos/isabekovgg/Epam-test-project/contents/src/main/java/Manipulations.class?ref=03e5c67ce2275cca98181954989be941d7b7cebf"
  },
  {
    "sha": "d36c18a34d934f913807ffcd648732713a77167d",
    "filename": "src/main/java/Manipulations.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/isabekovgg/Epam-test-project/blob/03e5c67ce2275cca98181954989be941d7b7cebf/src/main/java/Manipulations.java",
    "raw_url": "https://github.com/isabekovgg/Epam-test-project/raw/03e5c67ce2275cca98181954989be941d7b7cebf/src/main/java/Manipulations.java",
    "contents_url": "https://api.github.com/repos/isabekovgg/Epam-test-project/contents/src/main/java/Manipulations.java?ref=03e5c67ce2275cca98181954989be941d7b7cebf",
    "patch": "@@ -0,0 +1,86 @@\n+import model.Car;\n+\n+import java.util.Date;\n+import java.util.Scanner;\n+\n+public class Manipulations {\n+\n+    public static void searchByBrand(Car[] cars, String brand) {\n+        boolean check = false;\n+        for (Car car : cars) {\n+            if (car.getBrand().toLowerCase().equals(brand.toLowerCase())) {\n+                System.out.println(car);\n+                check = true;\n+            }\n+        }\n+        if (check == false) {\n+            System.out.println(\"No cars of such brand in catalogue\");\n+        }\n+    }\n+\n+    public static void searchByBrandAndExploitation(Car[] cars, String brand, int exploitation) {\n+        Date d=new Date();\n+        int year = d.getYear()+1900;\n+        boolean check = false;\n+        for (Car car : cars) {\n+            if (car.getBrand().toLowerCase().equals(brand.toLowerCase()) && year-car.getCreated()>exploitation) {\n+                System.out.println(car);\n+                check = true;\n+            }\n+        }\n+        if (check == false) {\n+            System.out.println(\"No cars of such brand or at least such exploitation in catalogue\");\n+        }\n+    }\n+\n+    public static void searchByYearAndCost(Car[] cars, int year, int cost) {\n+        boolean check = false;\n+        for (Car car : cars) {\n+            if (car.getCreated()==year && car.getCost()>cost) {\n+                System.out.println(car);\n+                check = true;\n+            }\n+        }\n+        if (check == false) {\n+            System.out.println(\"No cars of that year or such minimal price in catalogue\");\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        Car[] cars = {\n+                new Car(1, 7500, 2018, 1, \"Toyota\", \"white\"),\n+                new Car(2, 12500, 2015, 1, \"Nissan\", \"black\"),\n+                new Car(3, 10000, 2012, 1, \"Toyota\", \"blue\"),\n+                new Car(4, 20000, 2020, 1, \"BWM\", \"green\"),\n+                new Car(5, 40000, 2020, 1, \"Porsche\", \"pink\"),\n+                new Car(6, 5000, 2010, 1, \"Toyota\", \"yellow\"),\n+                new Car(7, 15000, 2018, 1, \"BMW\", \"black\"),\n+                new Car(8, 15000, 2017, 1, \"Toyota\", \"white\"),\n+                new Car(9, 10000, 2016, 1, \"Toyota\", \"white\"),\n+        };\n+        Scanner myObj = new Scanner(System.in);\n+        System.out.println(\"Please, choose option 1,2,3:\\n1)Find car by brand\\n2)Find car by brand and minimal exploitation\\n3)Find car by manufactured year and minimal cost\");\n+        String option = myObj.nextLine();\n+        switch (option){\n+            case \"1\":\n+                System.out.println(\"What brand do u want to find?\");\n+                String brand1 = myObj.nextLine();\n+                searchByBrand(cars, brand1);\n+                return;\n+            case \"2\":\n+                System.out.println(\"What brand do u want to find?\");\n+                String brand2 = myObj.nextLine();\n+                System.out.println(\"Minimal exploitation?\");\n+                String exp = myObj.nextLine();\n+                searchByBrandAndExploitation(cars, brand2, Integer.valueOf(exp));\n+                return;\n+            case \"3\":\n+                System.out.println(\"Year of manufacturing?\");\n+                String created = myObj.nextLine();\n+                System.out.println(\"Minimal price?\");\n+                String price = myObj.nextLine();\n+                searchByYearAndCost(cars, Integer.valueOf(created), Integer.valueOf(price));\n+                return;\n+        }\n+    }\n+}"
  },
  {
    "sha": "2fdf526b956e2efb853e4ef2a1ed1bc65a7a3dc3",
    "filename": "src/main/java/model/Car.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/isabekovgg/Epam-test-project/blob/03e5c67ce2275cca98181954989be941d7b7cebf/src/main/java/model/Car.class",
    "raw_url": "https://github.com/isabekovgg/Epam-test-project/raw/03e5c67ce2275cca98181954989be941d7b7cebf/src/main/java/model/Car.class",
    "contents_url": "https://api.github.com/repos/isabekovgg/Epam-test-project/contents/src/main/java/model/Car.class?ref=03e5c67ce2275cca98181954989be941d7b7cebf"
  },
  {
    "sha": "1627d5b0af1c329673c5e774c7199c0038cc9a62",
    "filename": "src/main/java/model/Car.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/isabekovgg/Epam-test-project/blob/03e5c67ce2275cca98181954989be941d7b7cebf/src/main/java/model/Car.java",
    "raw_url": "https://github.com/isabekovgg/Epam-test-project/raw/03e5c67ce2275cca98181954989be941d7b7cebf/src/main/java/model/Car.java",
    "contents_url": "https://api.github.com/repos/isabekovgg/Epam-test-project/contents/src/main/java/model/Car.java?ref=03e5c67ce2275cca98181954989be941d7b7cebf",
    "patch": "@@ -3,7 +3,7 @@\n import java.io.Serializable;\n import java.util.Objects;\n \n-public class Car implements Serializable {\n+public class Car {\n     private int id;\n     private String brand;\n     private int created;\n@@ -78,7 +78,7 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return brand;\n+        return String.format(\"%s %s %d year %d$, registration id: %d, id: %d\",this.brand,this.color,this.created,this.cost,this.regid,this.id);\n     }\n \n }"
  }
]
