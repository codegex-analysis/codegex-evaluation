[
  {
    "sha": "780d5f84788c2b6e2ca2b63da05654d0df48b126",
    "filename": "implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java",
    "status": "modified",
    "additions": 24,
    "deletions": 2,
    "changes": 26,
    "blob_url": "https://github.com/micrometer-metrics/micrometer/blob/e4b720b024176d6d8520b3f6a0037dfefa625125/implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java",
    "raw_url": "https://github.com/micrometer-metrics/micrometer/raw/e4b720b024176d6d8520b3f6a0037dfefa625125/implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java",
    "contents_url": "https://api.github.com/repos/micrometer-metrics/micrometer/contents/implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java?ref=e4b720b024176d6d8520b3f6a0037dfefa625125",
    "patch": "@@ -27,6 +27,9 @@\n import java.util.stream.Collectors;\n \n public class DatadogStatsdLineBuilder extends FlavorStatsdLineBuilder {\n+\n+    private static final String ENTITY_ID_TAG_NAME = \"dd.internal.entity_id\";\n+\n     private final Object conventionTagsLock = new Object();\n     @SuppressWarnings({\"NullableProblems\", \"unused\"})\n     private volatile NamingConvention namingConvention;\n@@ -37,6 +40,8 @@\n     @SuppressWarnings(\"NullableProblems\")\n     private volatile String tagsNoStat;\n     private final ConcurrentMap<Statistic, String> tags = new ConcurrentHashMap<>();\n+    @Nullable\n+    private String ddEntityId;\n \n     public DatadogStatsdLineBuilder(Meter.Id id, MeterRegistry.Config config) {\n         super(id, config);\n@@ -48,6 +53,11 @@ String line(String amount, @Nullable Statistic stat, String type) {\n         return name + amount + \"|\" + type + tagsByStatistic(stat);\n     }\n \n+    // VisibleForTesting\n+    void setDdEntityId(@Nullable String ddEntityId) {\n+        this.ddEntityId = ddEntityId;\n+    }\n+\n     private void updateIfNamingConventionChanged() {\n         NamingConvention next = config.namingConvention();\n         if (this.namingConvention != next) {\n@@ -56,18 +66,30 @@ private void updateIfNamingConventionChanged() {\n                     return;\n                 }\n                 this.tags.clear();\n-                this.conventionTags = id.getTagsAsIterable().iterator().hasNext() ?\n+                String conventionTags = id.getTagsAsIterable().iterator().hasNext() ?\n                         id.getConventionTags(next).stream()\n-                                .map(t -> formatTag(t))\n+                                .map(this::formatTag)\n                                 .collect(Collectors.joining(\",\"))\n                         : null;\n+                this.conventionTags = appendEntityIdTag(conventionTags);\n             }\n             this.name = next.name(sanitizeName(id.getName()), id.getType(), id.getBaseUnit()) + \":\";\n             this.tagsNoStat = tags(null, conventionTags, \":\", \"|#\");\n             this.namingConvention = next;\n         }\n     }\n \n+    private @Nullable String appendEntityIdTag(@Nullable String tags) {\n+        if (ddEntityId == null || ddEntityId.trim().isEmpty()) {\n+            ddEntityId = System.getenv(\"DD_ENTITY_ID\");\n+        }\n+        if (ddEntityId != null && !ddEntityId.trim().isEmpty()) {\n+            String entityIdTag = formatTag(Tag.of(ENTITY_ID_TAG_NAME, ddEntityId));\n+            return tags == null ? entityIdTag : tags + \",\" + entityIdTag;\n+        }\n+        return tags;\n+    }\n+\n     private String formatTag(Tag t) {\n         String sanitizedTag = sanitizeName(t.getKey());\n         if (!t.getValue().isEmpty()) {"
  },
  {
    "sha": "d93f2c8b2e0c5fa183e677af416083277241a2c3",
    "filename": "implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilderTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/micrometer-metrics/micrometer/blob/e4b720b024176d6d8520b3f6a0037dfefa625125/implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilderTest.java",
    "raw_url": "https://github.com/micrometer-metrics/micrometer/raw/e4b720b024176d6d8520b3f6a0037dfefa625125/implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilderTest.java",
    "contents_url": "https://api.github.com/repos/micrometer-metrics/micrometer/contents/implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilderTest.java?ref=e4b720b024176d6d8520b3f6a0037dfefa625125",
    "patch": "@@ -59,6 +59,17 @@ void interpretEmptyTagValuesAsValuelessTags() {\n         assertThat(lb.line(\"1\", Statistic.COUNT, \"c\")).isEqualTo(\"my_counter:1|c|#statistic:count,my_tag\");\n     }\n \n+    @Issue(\"#2417\")\n+    @Test\n+    void appendDdEntityIdTag() {\n+        Counter c = registry.counter(\"my:counter\", \"mytag\", \"myvalue\");\n+        DatadogStatsdLineBuilder lb = new DatadogStatsdLineBuilder(c.getId(), registry.config());\n+        lb.setDdEntityId(\"test-entity-id\");\n+\n+        registry.config().namingConvention(NamingConvention.dot);\n+        assertThat(lb.line(\"1\", Statistic.COUNT, \"c\")).isEqualTo(\"my_counter:1|c|#statistic:count,mytag:myvalue,dd.internal.entity_id:test-entity-id\");\n+    }\n+\n     @Issue(\"#1998\")\n     @Test\n     void allowColonsInTagValues() {"
  }
]
