[
  {
    "sha": "a56ef8501d25165a9fba831b137d8afd5c1af6af",
    "filename": "README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/README.md",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/README.md",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/README.md?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -38,7 +38,7 @@ Here is the list of some functionality that can be extended using Extensions API\n * **Implement support for different terrorist watch lists** - for more information, see the <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_api/src/main/java/com/generalbytes/batm/server/extensions/watchlist/IWatchList.java\">IWatchList</a> interface.\n * **Implement support for a different AML provider** - for more information, see the <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_api/src/main/java/com/generalbytes/batm/server/extensions/aml/IAMLProvider.java\">IAMLProvider</a> interface.\n * **Perform actions whenever a transaction on CAS is created or updated** - This is useful; for example, in those locales where you may need to notify the tax office about the transaction in realtime and print a unique tax office onetime id on the ticket printed by the BATM. For more information, see the <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_api/src/main/java/com/generalbytes/batm/server/extensions/ITransactionListener.java\">ITransactionListener</a> interface.\n-* **Implement a paper wallet generator for your crypto currency XYZ** - Do you want your BATM to be able print a paper wallet or write the transaction's private key on an NFC card? You will need to implement this interface. For more information, see the <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_api/src/main/java/com/generalbytes/batm/server/extensions/IPaperWalletGenerator.java\">IPaperWalletGenerator</a> interface.\n+* **Implement a paper wallet generator for your cryptocurrency XYZ** - Do you want your BATM to be able to print a paper wallet or write the transaction's private key on an NFC card? You will need to implement this interface. For more information, see the <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_api/src/main/java/com/generalbytes/batm/server/extensions/IPaperWalletGenerator.java\">IPaperWalletGenerator</a> interface.\n * **Implement a fiat-to-fiat currency exchange rate provider** - Do you want CAS to use the fiat currency exchange rates provided by your local bank (or exchange) instead of the international market? For more information, see the <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_api/src/main/java/com/generalbytes/batm/server/extensions/IFiatExchangeRateProvider.java\">IFiatExchangeRateProvider</a> interface.\n * **Send emails or SMSes from extension** - To notify your customer via SMS or email with custom messages, call the methods exposed by the <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_api/src/main/java/com/generalbytes/batm/server/extensions/IExtensionContext.java\">IExtensionContext</a> interface.\n * **<a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_api/src/main/java/com/generalbytes/batm/server/extensions/IExtensionContext.java\">ExtensionContext</a>** is your main entrypoint for interacting with CAS.\n@@ -50,7 +50,7 @@ ExtensionContext may be called from any extension. A reference to ExtensionConte\n Content\n =======\n * **server_extensions_api** - contains the extension API that all extensions use to extend CAS' functionality.\n-* **server_extensions_extra** - reference extension implementation that demonstrates BTC, LTC, CLOAK, DGB, DASH, HATCH, POT, VIA, BTX, SYS, FLASH, DOGE, NLG, ICG, NBT, GRS, MAX, BSD, MEC, BTDX, SUM, BURST, ECA, LINDA, $PAC, DAI, MKR, MUE, BAT and REP coin support functionality.\n+* **server_extensions_extra** - reference extension implementation that demonstrates BTC, LTC, CLOAK, DGB, DASH, HATCH, POT, VIA, BTX, SYS, FLASH, DOGE, NLG, ICG, NBT, GRS, MAX, BSD, MEC, BTDX, NANO, SUM, BURST, ECA, LINDA, $PAC, DAI, MKR, MUE, BAT and REP coin support functionality.\n * **server_extensions_test** - contains tester for testing the extensions (CAS not required).\n \n Note for developers\n@@ -64,14 +64,14 @@ Requirements:\n When you implement support for a new crypto-coin, please add it to **server_extensions_extra** - so that it may get into the default CAS installation pack for customers.\n Please use the appropriate Fork and Pull Request in the GitHub workflow when adding new functions, and bear in mind that your code will be reviewed prior to any merge with the master.\n \n-When adding new cryptocurrency support, please remember to provide it's logo! This logo will later be downloaded by the BATM from CAS and displayed on the BATM screen. Both SVG and PNG logos are supported; however, only the SVG logo is used on newer BATM versions. A PNG logo is offered only for backward compatibility, and in the few cases where the SVG logo has an unusually large size.\n+When adding new cryptocurrency support, please remember to provide its logo! This logo will later be downloaded by the BATM from CAS and displayed on the BATM screen. Both SVG and PNG logos are supported; however, only the SVG logo is used on newer BATM versions. A PNG logo is offered only for backward compatibility, and in the few cases where the SVG logo has an unusually large size.\n SVG logos must comply with following rules:\n 1. SVG logos should not contain filters or bitmap images\n 2. All SVG and PNG logos should be 120 x 120px. See other logos for examples.\n 3. Preserve the unified BATM design: every SVG logo must contain the background from <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_extra/src/main/resources/template.svg\">template.svg</a>. An example background can be found <a href=\"https://github.com/GENERALBYTESCOM/batm_public/blob/master/server_extensions_extra/src/main/resources/lisk.svg\">here</a>.\n \n \n-After you implement the the extension make sure you test it with \"Tester\" (which you will find in **server_extensions_test**).\n+After you implement the extension make sure you test it with \"Tester\" (which you will find in **server_extensions_test**).\n If you want to implement an extension that you don't want to share with the rest of the world, then create a separate module (e.g. server_extensions_mycompany) and use a different jar name (server_extensions_mycompany.jar).\n \n Build information"
  },
  {
    "sha": "72784cdffde5b767e4a26458eab71b2ddfa69648",
    "filename": "currencies/src/main/java/com/generalbytes/batm/common/currencies/CryptoCurrency.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/currencies/src/main/java/com/generalbytes/batm/common/currencies/CryptoCurrency.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/currencies/src/main/java/com/generalbytes/batm/common/currencies/CryptoCurrency.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/currencies/src/main/java/com/generalbytes/batm/common/currencies/CryptoCurrency.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -79,6 +79,7 @@\n     MEC(\"Megacoin\"),\n     MKR(\"Maker\"),\n     MUSD(\"MovexUSD\"),\n+    NANO(\"Nano\"),\n     NBT(\"NuBits\"),\n     NLG(\"NLG\"),\n     NXT(\"Nxt\"),"
  },
  {
    "sha": "fb4ca94391fc2300faafdb116968342994406b07",
    "filename": "server_extensions_extra/build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/build.gradle",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/build.gradle",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/build.gradle?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -59,7 +59,9 @@ dependencies {\n     compile(group: 'org.web3j', name: 'crypto', version: '3.6.0')\n     compile(group: 'org.web3j', name: 'utils', version: '3.6.0')\n     compile(group: 'org.web3j', name: 'abi', version: '3.6.0')\n+    compile(group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.3.8')\n     compile(group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.12.1')\n+    compile(group: 'com.squareup.okio', name: 'okio', version: '1.17.2')\n     compile(group: 'io.reactivex', name: 'rxjava', version: '1.2.4')\n     compile(group: 'com.vdurmont', name: 'emoji-java', version: '3.1.3') //for chat emojis\n     compile(group: 'com.nexmo', name: 'client', version: '5.5.0')       // sms provider"
  },
  {
    "sha": "f0ec16163448171cead0ddea294106bc2b3ac335",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/binance/BinanceComExchange.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/binance/BinanceComExchange.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/binance/BinanceComExchange.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/binance/BinanceComExchange.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -51,6 +51,7 @@\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.KMD.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.LSK.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.LTC.getCode());\n+        SUPPORTED_CRYPTOS.add(CryptoCurrency.NANO.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.NULS.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.REP.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.SYS.getCode());"
  },
  {
    "sha": "30b037d88f593baffe32ccedbfd4d9c9fcad76ef",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/binance/BinanceUsExchange.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/binance/BinanceUsExchange.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/binance/BinanceUsExchange.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/binance/BinanceUsExchange.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -41,6 +41,7 @@\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.BTC.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.DASH.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.DOGE.getCode());\n+        SUPPORTED_CRYPTOS.add(CryptoCurrency.NANO.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.ETH.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.LTC.getCode());\n         SUPPORTED_CRYPTOS.add(CryptoCurrency.USDT.getCode());"
  },
  {
    "sha": "1ec18d96f74129633f0d1e29e4470a07db00f74a",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/hitbtc/HitbtcExchange.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/hitbtc/HitbtcExchange.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/hitbtc/HitbtcExchange.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/exchanges/hitbtc/HitbtcExchange.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -64,6 +64,7 @@ private static ExchangeSpecification getSpecification(String clientKey, String c\n         cryptoCurrencies.add(CryptoCurrency.BCH.getCode());\n         cryptoCurrencies.add(CryptoCurrency.DOGE.getCode());\n         cryptoCurrencies.add(CryptoCurrency.XMR.getCode());\n+        cryptoCurrencies.add(CryptoCurrency.NANO.getCode());\n         cryptoCurrencies.add(CryptoCurrency.DASH.getCode());\n         cryptoCurrencies.add(CryptoCurrency.NXT.getCode());\n         return cryptoCurrencies;"
  },
  {
    "sha": "2a599d9986e6057806f99a9c49c47c5738df35ae",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/sources/coingecko/CoinGeckoRateSource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/sources/coingecko/CoinGeckoRateSource.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/sources/coingecko/CoinGeckoRateSource.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/sources/coingecko/CoinGeckoRateSource.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -74,6 +74,7 @@\n         CRYPTOCURRENCIES.put(CryptoCurrency.MUE.getCode(), \"monetaryunit\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.NBT.getCode(), \"ninsa-b-token\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.NLG.getCode(), \"gulden\");\n+        CRYPTOCURRENCIES.put(CryptoCurrency.NANO.getCode(), \"nano\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.NULS.getCode(), \"nuls\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.NXT.getCode(), \"nxt\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.POT.getCode(), \"potcoin\");"
  },
  {
    "sha": "3bdd429a7d35f9969dfbb5dc40ae8efa55c800e4",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/sources/coinpaprika/CoinPaprikaRateSource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/sources/coinpaprika/CoinPaprikaRateSource.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/sources/coinpaprika/CoinPaprikaRateSource.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/bitcoin/sources/coinpaprika/CoinPaprikaRateSource.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -75,6 +75,7 @@\n         CRYPTOCURRENCIES.put(CryptoCurrency.MEC.getCode(), \"mec-megacoin\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.MKR.getCode(), \"mkr-maker\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.MUE.getCode(), \"mue-monetaryunit\");\n+        CRYPTOCURRENCIES.put(CryptoCurrency.NANO.getCode(), \"nano-nano\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.NLG.getCode(), \"nlg-gulden\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.NULS.getCode(), \"nuls-nuls\");\n         CRYPTOCURRENCIES.put(CryptoCurrency.NXT.getCode(), \"nxt-nxt\");"
  },
  {
    "sha": "0f2b1102b59601c6891ec87849341a5b6b681c22",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/dash/sources/coinmarketcap/CoinmarketcapRateSource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/dash/sources/coinmarketcap/CoinmarketcapRateSource.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/dash/sources/coinmarketcap/CoinmarketcapRateSource.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/dash/sources/coinmarketcap/CoinmarketcapRateSource.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -90,6 +90,7 @@ public CoinmarketcapRateSource(String apiKey, String preferedFiatCurrency) {\n         result.add(CryptoCurrency.MEC.getCode());\n         result.add(CryptoCurrency.MKR.getCode());\n         result.add(CryptoCurrency.MUE.getCode());\n+        result.add(CryptoCurrency.NANO.getCode());\n         result.add(CryptoCurrency.PAC.getCode());\n         result.add(CryptoCurrency.POT.getCode());\n         result.add(CryptoCurrency.REP.getCode());"
  },
  {
    "sha": "f0f69b1f4231232fe8510676a1ad0cc1cf5f3e99",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoAddressValidator.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoAddressValidator.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoAddressValidator.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoAddressValidator.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,74 @@\n+/*************************************************************************************\n+ * Copyright (C) 2014-2020 GENERAL BYTES s.r.o. All rights reserved.\n+ *\n+ * This software may be distributed and modified under the terms of the GNU\n+ * General Public License version 2 (GPL2) as published by the Free Software\n+ * Foundation and appearing in the file GPL2.TXT included in the packaging of\n+ * this file. Please note that GPL2 Section 2[b] requires that all works based\n+ * on this software must also be made publicly available under the terms of\n+ * the GPL2 (\"Copyleft\").\n+ *\n+ * Contact information\n+ * -------------------\n+ *\n+ * GENERAL BYTES s.r.o.\n+ * Web      :  http://www.generalbytes.com\n+ *\n+ ************************************************************************************/\n+package com.generalbytes.batm.server.extensions.extra.nano;\n+\n+import com.generalbytes.batm.server.extensions.ICryptoAddressValidator;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+public class NanoAddressValidator implements ICryptoAddressValidator {\n+\n+    private static final Logger log = LoggerFactory.getLogger(NanoAddressValidator.class);\n+\n+    private final NanoExtensionContext context;\n+\n+    public NanoAddressValidator(NanoExtensionContext context) {\n+        this.context = context;\n+    }\n+\n+\n+    @Override\n+    public boolean isAddressValid(String address) {\n+        String parsedAddr;\n+        try {\n+            parsedAddr = context.getUtil().parseAddress(address);\n+        } catch (IllegalArgumentException e) {\n+            return false; // Didn't match basic regex pattern\n+        }\n+\n+        NanoRpcClient rpcClient = context.getRpcClient();\n+        if (rpcClient == null) {\n+            // RPC not configured - assume valid (note: checksum is NOT validated!)\n+            log.debug(\"Blindly assuming Nano account {} is valid.\", parsedAddr);\n+            return true;\n+        } else {\n+            // Validate on node\n+            try {\n+                return rpcClient.isAddressValid(parsedAddr);\n+            } catch (IOException | NanoRpcClient.RpcException e) {\n+                // Hopefully shouldn't happen. Address may be valid, but we'll assume it isn't for this case.\n+                log.warn(\"Couldn't validate nano address over RPC.\", e);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isPaperWalletSupported() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean mustBeBase58Address() {\n+        return false;\n+    }\n+\n+}"
  },
  {
    "sha": "14ca6936c75feee8e73d667fe37fad61c74d86e1",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoCurrencyUtil.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoCurrencyUtil.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoCurrencyUtil.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoCurrencyUtil.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,80 @@\n+package com.generalbytes.batm.server.extensions.extra.nano;\n+\n+import com.generalbytes.batm.server.extensions.payment.IPaymentOutput;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Karl Oczadly\n+ */\n+public class NanoCurrencyUtil {\n+\n+    public static final NanoCurrencyUtil NANO = new NanoCurrencyUtil(30, \"nano\", \"nano\", \"xrb\");\n+\n+    /*\n+     * Allows basic validation of address, omitting URI scheme and query arguments if provided.\n+     * Group 1: URI (optional), 2: prefix, 3: pubkey + checksum\n+     */\n+    private static final Pattern ADDR_PATTERN =\n+            Pattern.compile(\"^(?:(\\\\w+):)?(\\\\w+)_([13][13456789abcdefghijkmnopqrstuwxyz]{59})(?:\\\\?.*)?$\");\n+\n+    private final int unitExp;\n+    private final String uriScheme, defaultPrefix;\n+    private final String[] allPrefixes;\n+    private final BigDecimal maxUnitVal;\n+\n+    /**\n+     * @param unitExp       1 unit = 10<sup>x</sup> raw, {@code x} being this value\n+     * @param addrUriScheme the uri scheme (eg: {@code nano})\n+     * @param addrPrefixes  a set of address prefixes, the first being the default (eg: {@code xrb})\n+     */\n+    public NanoCurrencyUtil(int unitExp, String addrUriScheme, String... addrPrefixes) {\n+        this.unitExp = unitExp;\n+        this.uriScheme = addrUriScheme;\n+        this.defaultPrefix = addrPrefixes[0];\n+        this.allPrefixes = addrPrefixes;\n+        this.maxUnitVal = BigDecimal.valueOf(2).pow(128).subtract(BigDecimal.ONE).movePointLeft(unitExp);\n+    }\n+\n+\n+    public String parseAddress(String addr) {\n+        Matcher m = ADDR_PATTERN.matcher(addr.trim().toLowerCase());\n+        if (!m.matches())\n+            throw new IllegalArgumentException(\"Invalid address \\\"\" + addr + \"\\\" (regex doesn't match).\");\n+        if (m.group(1) != null && !m.group(1).equalsIgnoreCase(uriScheme))\n+            throw new IllegalArgumentException(\"Invalid address \\\"\" + addr + \"\\\" (unsupported URI scheme).\");\n+        String prefix = m.group(2);\n+        if (Arrays.stream(allPrefixes).noneMatch(prefix::equalsIgnoreCase))\n+            throw new IllegalArgumentException(\"Invalid address \\\"\" + addr + \"\\\" (unsupported prefix).\");\n+\n+        return defaultPrefix + \"_\" + m.group(3);\n+    }\n+\n+    public void validateAmount(BigDecimal amount) {\n+        if (amount.stripTrailingZeros().scale() > unitExp)\n+            throw new IllegalArgumentException(\"Invalid amount (too many decimal places).\");\n+        if (amount.compareTo(maxUnitVal) > 0)\n+            throw new IllegalArgumentException(\"Invalid amount (value too large).\");\n+        if (amount.compareTo(BigDecimal.ZERO) < 0)\n+            throw new IllegalArgumentException(\"Invalid amount (value is negative).\");\n+    }\n+\n+    public BigInteger amountToRaw(BigDecimal amount) {\n+        validateAmount(amount);\n+        return amount.movePointRight(unitExp).toBigIntegerExact();\n+    }\n+\n+    public BigDecimal amountFromRaw(BigInteger raw) {\n+        BigDecimal amount = new BigDecimal(raw).movePointLeft(unitExp);\n+        validateAmount(amount);\n+        return amount;\n+    }\n+\n+}"
  },
  {
    "sha": "c7cb012521715a639870d3078c7f6170afdd17e8",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoDefinition.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoDefinition.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoDefinition.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoDefinition.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,38 @@\n+/*************************************************************************************\n+ * Copyright (C) 2014-2021 GENERAL BYTES s.r.o. All rights reserved.\n+ *\n+ * This software may be distributed and modified under the terms of the GNU\n+ * General Public License version 2 (GPL2) as published by the Free Software\n+ * Foundation and appearing in the file GPL2.TXT included in the packaging of\n+ * this file. Please note that GPL2 Section 2[b] requires that all works based\n+ * on this software must also be made publicly available under the terms of\n+ * the GPL2 (\"Copyleft\").\n+ *\n+ * Contact information\n+ * -------------------\n+ *\n+ * GENERAL BYTES s.r.o.\n+ * Web      :  http://www.generalbytes.com\n+ *\n+ ************************************************************************************/\n+package com.generalbytes.batm.server.extensions.extra.nano;\n+\n+import com.generalbytes.batm.common.currencies.CryptoCurrency;\n+import com.generalbytes.batm.server.extensions.CryptoCurrencyDefinition;\n+import com.generalbytes.batm.server.extensions.payment.IPaymentSupport;\n+\n+public class NanoDefinition extends CryptoCurrencyDefinition {\n+\n+    private final IPaymentSupport paymentSupport;\n+\n+    public NanoDefinition(IPaymentSupport paymentSupport) {\n+        super(CryptoCurrency.NANO.getCode(), \"Nano\", \"nano\", \"https://nano.org\");\n+        this.paymentSupport = paymentSupport;\n+    }\n+\n+    @Override\n+    public IPaymentSupport getPaymentSupport() {\n+        return paymentSupport;\n+    }\n+\n+}"
  },
  {
    "sha": "f4976d76b36a0771a140dc545f8dd815574be640",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoExtension.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoExtension.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoExtension.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoExtension.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,145 @@\n+/*************************************************************************************\n+ * Copyright (C) 2014-2020 GENERAL BYTES s.r.o. All rights reserved.\n+ *\n+ * This software may be distributed and modified under the terms of the GNU\n+ * General Public License version 2 (GPL2) as published by the Free Software\n+ * Foundation and appearing in the file GPL2.TXT included in the packaging of\n+ * this file. Please note that GPL2 Section 2[b] requires that all works based\n+ * on this software must also be made publicly available under the terms of\n+ * the GPL2 (\"Copyleft\").\n+ *\n+ * Contact information\n+ * -------------------\n+ *\n+ * GENERAL BYTES s.r.o.\n+ * Web      :  http://www.generalbytes.com\n+ *\n+ ************************************************************************************/\n+package com.generalbytes.batm.server.extensions.extra.nano;\n+\n+import com.generalbytes.batm.common.currencies.CryptoCurrency;\n+import com.generalbytes.batm.common.currencies.FiatCurrency;\n+import com.generalbytes.batm.server.extensions.*;\n+import com.generalbytes.batm.server.extensions.extra.bitcoin.exchanges.binance.BinanceComExchange;\n+import com.generalbytes.batm.server.extensions.extra.bitcoin.exchanges.binance.BinanceUsExchange;\n+import com.generalbytes.batm.server.extensions.extra.bitcoin.sources.coingecko.CoinGeckoRateSource;\n+import com.generalbytes.batm.server.extensions.extra.bitcoin.sources.coinpaprika.CoinPaprikaRateSource;\n+import com.generalbytes.batm.server.extensions.extra.dash.sources.coinmarketcap.CoinmarketcapRateSource;\n+import com.generalbytes.batm.server.extensions.extra.nano.wallet.demo.DemoWallet;\n+import com.generalbytes.batm.server.extensions.extra.nano.wallet.node.NanoNodeWallet;\n+import com.generalbytes.batm.server.extensions.extra.nano.wallet.paper.NanoPaperWalletGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+\n+/*\n+ * EXTENSION NOTES:\n+ *\n+ * The NanoExtensionContext object which is passed around contains various different objects relating to the\n+ * cryptocurrency being used, including the crypto code identifier, address format and standard unit denomination.\n+ *\n+ * The context object also contains a reference to a globally-used NanoRpcClient instance. This is optionally\n+ * defined when the end user configures a nano_node wallet — if this is not defined, then certain actions will\n+ * become unavailable (or resort to less desirable fallbacks). This is a (messy) necessity due to the dependency\n+ * constraints put in place, so operations such as paper wallet generation and address validation must be processed\n+ * externally on an RPC endpoint.\n+ */\n+public class NanoExtension extends AbstractExtension {\n+\n+    private static final Logger log = LoggerFactory.getLogger(NanoExtension.class);\n+\n+    public static final CryptoCurrency CRYPTO = CryptoCurrency.NANO;\n+\n+    private volatile NanoExtensionContext context = new NanoExtensionContext(CRYPTO, ctx, NanoCurrencyUtil.NANO);\n+\n+\n+    @Override\n+    public String getName() {\n+        return \"BATM Nano extra extension\";\n+    }\n+\n+    @Override\n+    public void init(IExtensionContext ctx) {\n+        super.init(ctx);\n+        this.context = new NanoExtensionContext(CRYPTO, ctx, NanoCurrencyUtil.NANO);\n+    }\n+\n+    @Override\n+    public IWallet createWallet(String walletLogin, String tunnelPassword) {\n+        try {\n+            if (walletLogin != null && !walletLogin.trim().isEmpty()) {\n+                StringTokenizer st = new StringTokenizer(walletLogin, \":\");\n+                String walletName = st.nextToken();\n+\n+                if (\"nano_node\".equalsIgnoreCase(walletName)) {\n+                    NanoNodeWallet wallet = NanoNodeWallet.create(context, st);\n+                    context.setRpcClient(wallet.getRpcClient()); // Set global RPC client\n+                    return wallet;\n+                } else if (\"nano_demo\".equalsIgnoreCase(walletName)) {\n+                    String fiatCurrency = st.nextToken();\n+                    String walletAddress = st.nextToken();\n+                    return new DemoWallet(fiatCurrency, CRYPTO.getCode(), walletAddress);\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Couldn't create wallet.\", e);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public ICryptoAddressValidator createAddressValidator(String cryptoCurrency) {\n+        if (CRYPTO.getCode().equalsIgnoreCase(cryptoCurrency))\n+            return new NanoAddressValidator(context);\n+        return null;\n+    }\n+\n+    @Override\n+    public IRateSource createRateSource(String sourceLogin) {\n+        if (sourceLogin != null && !sourceLogin.trim().isEmpty()) {\n+            StringTokenizer st = new StringTokenizer(sourceLogin, \":\");\n+            String sourceType = st.nextToken();\n+\n+            if (\"coinmarketcap\".equalsIgnoreCase(sourceType)) {\n+                String preferredCurrency = getPreferredCurrency(st, FiatCurrency.USD);\n+                String apiKey = st.hasMoreTokens() ? st.nextToken() : null;\n+                return new CoinmarketcapRateSource(apiKey, preferredCurrency);\n+            } else if (\"coingecko\".equalsIgnoreCase(sourceType)) {\n+                return new CoinGeckoRateSource(getPreferredCurrency(st, FiatCurrency.USD));\n+            } else if (\"coinpaprika\".equalsIgnoreCase(sourceType)) {\n+                return new CoinPaprikaRateSource(getPreferredCurrency(st, FiatCurrency.USD));\n+            } else if (\"binancecom\".equalsIgnoreCase(sourceType)) {\n+                return new BinanceComExchange(getPreferredCurrency(st, FiatCurrency.EUR));\n+            } else if (\"binanceus\".equalsIgnoreCase(sourceType)) {\n+                return new BinanceUsExchange(getPreferredCurrency(st, FiatCurrency.USD));\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<String> getSupportedCryptoCurrencies() {\n+        return Collections.singleton(CRYPTO.getCode());\n+    }\n+\n+    @Override\n+    public Set<ICryptoCurrencyDefinition> getCryptoCurrencyDefinitions() {\n+        return Collections.singleton(new NanoDefinition(new NanoPaymentSupport(context)));\n+    }\n+\n+    @Override\n+    public IPaperWalletGenerator createPaperWalletGenerator(String cryptoCurrency) {\n+        if (CRYPTO.getCode().equalsIgnoreCase(cryptoCurrency))\n+            return new NanoPaperWalletGenerator(context);\n+        return null;\n+    }\n+\n+\n+    public static String getPreferredCurrency(StringTokenizer tokenizer, FiatCurrency defaultVal) {\n+        return tokenizer.hasMoreTokens() ? tokenizer.nextToken().toUpperCase() : defaultVal.getCode();\n+    }\n+\n+}"
  },
  {
    "sha": "92673f32be3f54f10814d4d6355acdd299bbcec6",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoExtensionContext.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoExtensionContext.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoExtensionContext.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoExtensionContext.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,46 @@\n+package com.generalbytes.batm.server.extensions.extra.nano;\n+\n+import com.generalbytes.batm.common.currencies.CryptoCurrency;\n+import com.generalbytes.batm.server.extensions.IExtensionContext;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+\n+/**\n+ * Contains various contextual information for the Nano extension.\n+ */\n+public class NanoExtensionContext {\n+\n+    private volatile NanoRpcClient rpcClient = null;\n+    private final CryptoCurrency currency;\n+    private final IExtensionContext extensionContext;\n+    private final NanoCurrencyUtil nanoCurrencyUtil;\n+\n+    public NanoExtensionContext(CryptoCurrency currency, IExtensionContext extensionContext,\n+                                NanoCurrencyUtil nanoCurrencyUtil) {\n+        this.currency = currency;\n+        this.extensionContext = extensionContext;\n+        this.nanoCurrencyUtil = nanoCurrencyUtil;\n+    }\n+\n+\n+    public String getCurrencyCode() {\n+        return currency.getCode();\n+    }\n+\n+    public NanoRpcClient getRpcClient() {\n+        return rpcClient;\n+    }\n+\n+    public void setRpcClient(NanoRpcClient rpcClient) {\n+        if (rpcClient != null)\n+            this.rpcClient = rpcClient;\n+    }\n+\n+    public IExtensionContext getExtensionContext() {\n+        return extensionContext;\n+    }\n+\n+    public NanoCurrencyUtil getUtil() {\n+        return nanoCurrencyUtil;\n+    }\n+\n+}"
  },
  {
    "sha": "af861402272d7ac842ca3962fc370f924bfb1a73",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoPaymentSupport.java",
    "status": "added",
    "additions": 306,
    "deletions": 0,
    "changes": 306,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoPaymentSupport.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoPaymentSupport.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/NanoPaymentSupport.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,306 @@\n+package com.generalbytes.batm.server.extensions.extra.nano;\n+\n+import com.generalbytes.batm.server.extensions.IQueryableWallet;\n+import com.generalbytes.batm.server.extensions.extra.common.PollingPaymentSupport;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoWsClient;\n+import com.generalbytes.batm.server.extensions.extra.nano.wallet.node.INanoRpcWallet;\n+import com.generalbytes.batm.server.extensions.payment.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/*\n+ * This payment support will utilise the websocket value if configured to reduce load on the RPC endpoint, and minimize\n+ * delays when processing and verifying deposits. If not provided by the wallet (websocket is null, or cannot connect),\n+ * then it will simply resort to standard RPC polling.\n+ */\n+public class NanoPaymentSupport extends PollingPaymentSupport {\n+\n+    private static final Logger log = LoggerFactory.getLogger(NanoPaymentSupport.class);\n+\n+    private static final long POLL_PERIOD = 750; // 750 ms\n+    private static final int POLL_SKIP_CYCLES = 20; // 15 sec (multiplier of POLL_PERIOD when using websockets)\n+\n+    private static final List<Integer> FINAL_STATES = Arrays.asList(\n+        PaymentRequest.STATE_TRANSACTION_INVALID,\n+        PaymentRequest.STATE_REMOVED,\n+        PaymentRequest.STATE_SOMETHING_ARRIVED_AFTER_TIMEOUT,\n+        PaymentRequest.STATE_TRANSACTION_TIMED_OUT\n+    );\n+\n+    private final NanoExtensionContext currencyContext;\n+    private final Map<PaymentRequest, PaymentRequestContext> requests = new ConcurrentHashMap<>();\n+    private final ExecutorService threadPool = Executors.newCachedThreadPool();\n+\n+    public NanoPaymentSupport(NanoExtensionContext currencyContext) {\n+        this.currencyContext = currencyContext;\n+    }\n+\n+\n+    @Override\n+    protected long getPollingPeriodMillis() {\n+        return POLL_PERIOD;\n+    }\n+\n+    @Override\n+    protected long getPollingInitialDelayMillis() {\n+        return 1500;\n+    }\n+\n+    @Override\n+    protected String getCryptoCurrency() {\n+        return currencyContext.getCurrencyCode();\n+    }\n+\n+    @Override\n+    public PaymentRequest createPaymentRequest(IPaymentRequestSpecification spec) {\n+        if (!currencyContext.getCurrencyCode().equalsIgnoreCase(spec.getCryptoCurrency()))\n+            throw new IllegalArgumentException(\"Unsupported CryptoCurrency.\");\n+        if (!(spec.getWallet() instanceof INanoRpcWallet))\n+            throw new IllegalArgumentException(\"Wallet \" + spec.getWallet().getClass() + \" does not implement INanoRpcWallet\");\n+        currencyContext.getUtil().validateAmount(spec.getTotal()); // Throws exception if amount is invalid\n+\n+        long validTillMillis = System.currentTimeMillis() + (spec.getValidInSeconds() * 1000);\n+        String address = currencyContext.getUtil().parseAddress(spec.getOutputs().get(0).getAddress());\n+        String refundAddr = spec.getTimeoutRefundAddress() == null ? null :\n+                currencyContext.getUtil().parseAddress(spec.getTimeoutRefundAddress());\n+\n+        PaymentRequest request = new PaymentRequest(spec.getCryptoCurrency(), spec.getDescription(), validTillMillis,\n+            address, spec.getTotal(), spec.getTolerance(),\n+            spec.getRemoveAfterNumberOfConfirmationsOfIncomingTransaction(),\n+            spec.getRemoveAfterNumberOfConfirmationsOfOutgoingTransaction(), spec.getWallet(),\n+            refundAddr, spec.getOutputs(), spec.isDoNotForward(), null);\n+\n+        registerPaymentRequest(request);\n+        return request;\n+    }\n+\n+    @Override\n+    public void registerPaymentRequest(PaymentRequest request) {\n+        INanoRpcWallet wallet = (INanoRpcWallet)request.getWallet();\n+\n+        // Request websocket notifications (if supported by wallet)\n+        PaymentRequestContext requestContext = new PaymentRequestContext(wallet, null);\n+        if (request.getWallet() instanceof INanoRpcWallet) {\n+            NanoWsClient wsClient = ((INanoRpcWallet)request.getWallet()).getWsClient();\n+            if (wsClient != null) {\n+                requestContext = new PaymentRequestContext(wallet, wsClient);\n+                final PaymentRequestContext fContext = requestContext; // Final for lambda\n+                // Attempt to add the account to the topic filter\n+                threadPool.submit(() -> {\n+                    fContext.wsRequestInitialized = wsClient.addDepositWatcher(\n+                            request.getAddress(), () -> poll(request, fContext, true));\n+                });\n+            } else {\n+                log.debug(\"Using RPC polling as the wallet doesn't have a websocket configured. {}\", request);\n+            }\n+        } else {\n+            log.debug(\"Using wallet polling as the wallet isn't an INanoRpcWallet. {}\", request);\n+        }\n+        requests.put(request, requestContext);\n+\n+        // Register in polling support\n+        super.registerPaymentRequest(request);\n+    }\n+\n+    @Override\n+    protected void poll(PaymentRequest request) {\n+        PaymentRequestContext reqContext = requests.get(request);\n+        if (reqContext != null) {\n+            /*\n+             * We submit to a thread pool to concurrently handle, otherwise requests will queue up when an RPC\n+             * connection isn't available. Polling is still synchronized and made thread-safe within the custom poll\n+             * method through a lock.\n+             */\n+            threadPool.submit(() -> poll(request, reqContext, false));\n+        } else {\n+            log.debug(\"Unknown PaymentRequest was supplied to poll: {}\", request);\n+        }\n+    }\n+\n+    public void poll(PaymentRequest request, PaymentRequestContext reqContext, boolean wsNotification) {\n+        if (!request.isRemovalCondition() && reqContext.shouldPoll(wsNotification)) {\n+            // Acquire lock (block and wait for forced poll requests)\n+            if (reqContext.acquirePollLock(wsNotification)) {\n+                try {\n+                    log.debug(\"Polling (from ws notification: {}) {}\", wsNotification, request);\n+\n+                    // Fetch total amount\n+                    IQueryableWallet wallet = (IQueryableWallet)request.getWallet();\n+                    ReceivedAmount received = wallet.getReceivedAmount(request.getAddress(),\n+                            request.getCryptoCurrency());\n+\n+                    // Update request state\n+                    updateRequestState(request, received.getTotalAmountReceived(), received.getConfirmations());\n+                } catch (Exception e) {\n+                    log.error(\"Couldn't poll payment with RPC.\", e);\n+                } finally {\n+                    reqContext.releasePollLock();\n+                }\n+            } else {\n+                log.debug(\"Skipping poll call as another is in progress {}\", request);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void setState(PaymentRequest request, int newState) {\n+        int prevState = request.getState();\n+        if (newState == prevState) return;\n+\n+        request.setState(newState);\n+        log.debug(\"Transaction state changed: {} -> {}, {}\", prevState, newState, request);\n+\n+        // Notify listener\n+        IPaymentRequestListener listener = request.getListener();\n+        if (listener != null) {\n+            listener.stateChanged(request, prevState, request.getState());\n+        }\n+\n+        if (!FINAL_STATES.contains(prevState) && newState == PaymentRequest.STATE_TRANSACTION_TIMED_OUT) {\n+            // Payment timed out - process refund\n+            processRefund(request, requests.get(request));\n+        }\n+\n+        // Finalize payment\n+        if (FINAL_STATES.contains(newState)) {\n+            PaymentRequestContext context = requests.get(request);\n+            if (context != null) {\n+                log.debug(\"Stopping payment request for deposit address {}\", request.getAddress());\n+                requests.remove(request);\n+                // End websocket watcher\n+                if (context.wsClient != null) {\n+                    threadPool.submit(() -> context.wsClient.endDepositWatcher(request.getAddress()));\n+                }\n+            }\n+        }\n+    }\n+\n+    /** Updates the current state of the payment request (if applicable) */\n+    private void updateRequestState(PaymentRequest request, BigDecimal totalReceived, int confirmations) {\n+        int initialState = request.getState();\n+        if (request.getTxValue().compareTo(totalReceived) != 0 || confirmations >= 1) {\n+            log.debug(\"Updating request state, total received: {} with {} confs\", totalReceived, confirmations);\n+            request.setTxValue(totalReceived);\n+            PaymentRequestContext context = requests.get(request);\n+            if (!request.wasAlreadyRefunded() && totalReceived.compareTo(BigDecimal.ZERO) >= 0) {\n+                // Change state if new\n+                if (request.getState() == PaymentRequest.STATE_NEW)\n+                    setState(request, PaymentRequest.STATE_SEEN_TRANSACTION);\n+\n+                if (confirmations > 0 && request.getState() == PaymentRequest.STATE_SEEN_TRANSACTION\n+                    && totalReceived.compareTo(request.getAmount()) >= 0) {\n+                    // Transaction confirmed\n+                    if (totalReceived.subtract(request.getTolerance()).compareTo(request.getAmount()) <= 0) {\n+                        // Within tolerance\n+                        log.info(\"Transaction confirmed. Total amount received: {}\", totalReceived);\n+                        request.setRemovalConditionForIncomingTransaction();\n+                        setState(request, PaymentRequest.STATE_SEEN_IN_BLOCK_CHAIN);\n+                        updateNumberOfConfirmations(request, Integer.MAX_VALUE);\n+                        setState(request, PaymentRequest.STATE_REMOVED);\n+                        // Send all funds to hot wallet\n+                        context.wallet.moveFundsToHotWallet(request.getAddress());\n+                    } else {\n+                        // Too many funds sent, refund\n+                        setState(request, PaymentRequest.STATE_TRANSACTION_INVALID);\n+                        processRefund(request, context);\n+                    }\n+                } else {\n+                    // Not enough funds, or no confirmation\n+                    if (initialState != PaymentRequest.STATE_NEW)\n+                        setState(request, PaymentRequest.STATE_SEEN_TRANSACTION); // Re-fire state\n+                    updateNumberOfConfirmations(request, 0);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void processRefund(PaymentRequest request, PaymentRequestContext context) {\n+        if (!request.wasAlreadyRefunded() && context != null) {\n+            log.debug(\"Attempting to process refund for request {}\", request);\n+            try {\n+                // Find suitable refund account\n+                String refundAddr = request.getTimeoutRefundAddress();\n+                if (refundAddr == null) {\n+                    List<NanoRpcClient.Block> blocks =\n+                        context.wallet.getRpcClient().getTransactionHistory(request.getAddress());\n+                    for (NanoRpcClient.Block block : blocks) {\n+                        if (block.type.equals(\"receive\")) {\n+                            refundAddr = block.account;\n+                        }\n+                    }\n+                }\n+                if (refundAddr != null) {\n+                    request.setAsAlreadyRefunded();\n+                    // Process refund\n+                    log.debug(\"Sending refund to {}\", refundAddr);\n+                    BigInteger amount = context.wallet.sendAllFromWallet(request.getAddress(), refundAddr);\n+                    // Notify listener\n+                    IPaymentRequestListener listener = request.getListener();\n+                    if (listener != null) {\n+                        listener.refundSent(request, refundAddr, request.getCryptoCurrency(),\n+                                currencyContext.getUtil().amountFromRaw(amount));\n+                    }\n+                } else {\n+                    log.warn(\"Couldn't process refund as no refund account was found.\");\n+                }\n+            } catch (IOException | NanoRpcClient.RpcException e) {\n+                log.error(\"Failed to process refund transaction\", e);\n+            }\n+        }\n+    }\n+\n+\n+    /** Contains additional state information about an active payment request. */\n+    private static class PaymentRequestContext {\n+        private final INanoRpcWallet wallet;\n+        private final Lock pollLock = new ReentrantLock(); // Only allow one request poll at a time\n+        private final NanoWsClient wsClient;\n+        private volatile int pollCounter = POLL_SKIP_CYCLES; // First attempt should poll\n+        private volatile boolean wsRequestInitialized = false;\n+\n+        public PaymentRequestContext(INanoRpcWallet wallet, NanoWsClient wsClient) {\n+            this.wallet = wallet;\n+            this.wsClient = wsClient;\n+        }\n+\n+\n+        public synchronized boolean shouldPoll(boolean forced) {\n+            if (forced || !hasActiveWebSocket() || pollCounter++ >= POLL_SKIP_CYCLES) {\n+                pollCounter = 0;\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        public boolean acquirePollLock(boolean force) {\n+            if (force) {\n+                pollLock.lock();\n+                return true;\n+            } else {\n+                return pollLock.tryLock();\n+            }\n+        }\n+\n+        public void releasePollLock() {\n+            pollLock.unlock();\n+        }\n+\n+        public boolean hasActiveWebSocket() {\n+            return wsRequestInitialized && wsClient != null && wsClient.isActive();\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "9eb8e06ae9cede7de35b8849a67b388ec06ef4e7",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/NanoRpcClient.java",
    "status": "added",
    "additions": 214,
    "deletions": 0,
    "changes": 214,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/NanoRpcClient.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/NanoRpcClient.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/NanoRpcClient.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,214 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.rpc;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import okhttp3.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * @author Karl Oczadly\n+ */\n+public class NanoRpcClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(NanoRpcClient.class);\n+\n+    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n+    private static final OkHttpClient HTTP_CLIENT = new OkHttpClient.Builder()\n+            .callTimeout(10, TimeUnit.SECONDS).build();\n+    private static final MediaType JSON_TYPE = MediaType.parse(\"application/json\");\n+\n+    private final URL url;\n+\n+    public NanoRpcClient(URL url) {\n+        this.url = url;\n+    }\n+\n+\n+    public List<Block> getTransactionHistory(String account) throws IOException, RpcException {\n+        try {\n+            ArrayNode history = (ArrayNode)query(false,\n+                JSON_MAPPER.createObjectNode()\n+                    .put(\"action\", \"account_history\")\n+                    .put(\"account\", account)\n+                    .put(\"count\", -1))\n+                .get(\"history\");\n+            List<Block> blocks = new ArrayList<>(history.size());\n+            for (JsonNode blockNode : history) {\n+                ObjectNode block = (ObjectNode)blockNode;\n+                blocks.add(new Block(\n+                    block.get(\"type\").asText(),\n+                    block.get(\"account\").asText(),\n+                    new BigInteger(block.get(\"amount\").asText())\n+                ));\n+            }\n+            return blocks;\n+        } catch (RpcException e) {\n+            if (\"Account not found\".equals(e.getMessage())) {\n+                return Collections.emptyList(); // Account hasn't been opened\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    /** Returns true if the account exists and has at least 1 block. */\n+    public boolean doesAccountExist(String account) throws IOException, RpcException {\n+        try {\n+            return query(false,\n+                JSON_MAPPER.createObjectNode()\n+                    .put(\"action\", \"account_block_count\")\n+                    .put(\"account\", account))\n+                .get(\"block_count\").asInt() > 0;\n+        } catch (RpcException e) {\n+            if (\"Account not found\".equals(e.getMessage())) {\n+                return false; // Account hasn't been opened\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    /** Returns the total confirmed pocketed balance (zero if account isn't opened). */\n+    public BalanceResponse getBalance(String account) throws IOException, RpcException {\n+        // Get account info (unconf balance + confirmation frontier)\n+        ObjectNode accountInfo;\n+        try {\n+            accountInfo = query(false,\n+                JSON_MAPPER.createObjectNode()\n+                    .put(\"action\",  \"account_info\")\n+                    .put(\"account\", account)\n+                    .put(\"pending\", true));\n+        } catch (RpcException e) {\n+            if (\"Account not found\".equals(e.getMessage())) {\n+                // Account hasn't been opened\n+                return new BalanceResponse(BigInteger.ZERO, BigInteger.ZERO, BigInteger.ZERO);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        BigInteger unconfBalance = new BigInteger(accountInfo.get(\"balance\").asText());\n+        BigInteger unconfPending = new BigInteger(accountInfo.get(\"pending\").asText());\n+\n+        if (accountInfo.get(\"confirmation_height\").asText().equals(\"0\")) {\n+            // Account has no confirmed blocks\n+            return new BalanceResponse(BigInteger.ZERO, unconfBalance, unconfPending);\n+        }\n+        // Get balance of frontier block (confirmed balance)\n+        BigInteger confBalance = new BigInteger(query(false,\n+            JSON_MAPPER.createObjectNode()\n+                .put(\"action\", \"block_info\")\n+                .put(\"hash\",   accountInfo.get(\"confirmation_height_frontier\").asText()))\n+                .get(\"balance\").asText());\n+        return new BalanceResponse(confBalance, unconfBalance, unconfPending);\n+    }\n+\n+    /** Creates a new account in the given wallet. */\n+    public String newWalletAccount(String walletId) throws IOException, RpcException {\n+        return query(false,\n+            JSON_MAPPER.createObjectNode()\n+                .put(\"action\", \"account_create\")\n+                .put(\"wallet\", walletId))\n+                .get(\"account\").asText();\n+    }\n+\n+    /** Sends the specified funds from the given wallet to the provided destination account. */\n+    public String sendFromWallet(String walletId, String sourceAcc, String destAcc, BigInteger amountRaw, String uid)\n+            throws IOException, RpcException {\n+        return query(false,\n+            JSON_MAPPER.createObjectNode()\n+                .put(\"action\",      \"send\")\n+                .put(\"wallet\",      walletId)\n+                .put(\"source\",      sourceAcc)\n+                .put(\"destination\", destAcc)\n+                .put(\"amount\",      amountRaw)\n+                .put(\"id\",          uid))\n+                .get(\"block\").asText();\n+    }\n+\n+    /** Creates an account from the given seed. */\n+    public String accountFromSeed(String seed, long index) throws IOException, RpcException {\n+        return query(true,\n+            JSON_MAPPER.createObjectNode()\n+                .put(\"action\", \"deterministic_key\")\n+                .put(\"seed\",   seed)\n+                .put(\"index\",  index))\n+                .get(\"account\").asText();\n+    }\n+\n+    /** Returns true if the address string is valid. */\n+    public boolean isAddressValid(String addr) throws IOException, RpcException {\n+        return query(false,\n+            JSON_MAPPER.createObjectNode()\n+                .put(\"action\",  \"validate_account_number\")\n+                .put(\"account\", addr))\n+                .get(\"valid\").asInt() == 1;\n+    }\n+\n+\n+    private ObjectNode query(boolean confidential, JsonNode json) throws IOException, RpcException {\n+        String jsonStr = JSON_MAPPER.writeValueAsString(json);\n+        if (confidential) {\n+            log.debug(\"Sending RPC request [REDACTED]\");\n+        } else {\n+            log.debug(\"Sending RPC request {}\", json);\n+        }\n+        String rawResponse = httpPost(jsonStr);\n+        if (!confidential) log.debug(\"Received RPC response: {}\", rawResponse);\n+        JsonNode response = JSON_MAPPER.readTree(rawResponse);\n+        if (!response.isObject())\n+            throw new RpcException(\"Response is not a JSON object.\");\n+        ObjectNode responseJson = (ObjectNode)response;\n+        if (responseJson.has(\"error\"))\n+            throw new RpcException(responseJson.get(\"error\").asText());\n+        return responseJson;\n+    }\n+\n+    private String httpPost(String jsonBody) throws IOException {\n+        Call call = HTTP_CLIENT.newCall(\n+            new Request.Builder()\n+                .url(url)\n+                .post(RequestBody.create(JSON_TYPE, jsonBody))\n+                .build());\n+        try (Response response = call.execute()){\n+            return response.body().string();\n+        }\n+    }\n+\n+\n+    public static class RpcException extends Exception {\n+        public RpcException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    public static class BalanceResponse {\n+        public final BigInteger confBalance, unconfBalance, unconfPending;\n+\n+        public BalanceResponse(BigInteger confBalance, BigInteger unconfBalance, BigInteger unconfPending) {\n+            this.confBalance = confBalance;\n+            this.unconfBalance = unconfBalance;\n+            this.unconfPending = unconfPending;\n+        }\n+    }\n+\n+    public static class Block {\n+        public final String type, account;\n+        public final BigInteger amount;\n+\n+        private Block(String type, String account, BigInteger amount) {\n+            this.type = type;\n+            this.account = account;\n+            this.amount = amount;\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "286c03199b602d3215f9a92ac30c7f1cc62466d0",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/NanoWsClient.java",
    "status": "added",
    "additions": 205,
    "deletions": 0,
    "changes": 205,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/NanoWsClient.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/NanoWsClient.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/NanoWsClient.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,205 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.rpc;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.channels.NotYetConnectedException;\n+import java.util.Map;\n+import java.util.concurrent.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * @author Karl Oczadly\n+ */\n+public class NanoWsClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(NanoWsClient.class);\n+\n+    private static final int ACK_TIMEOUT_MS = 4000;\n+    private static final String ACTION_SUBSCRIBE = \"subscribe\";\n+    private static final String ACTION_UPDATE = \"update\";\n+    private static final String TOPIC_BLOCK_CONFIRMATIONS = \"confirmation\";\n+\n+    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n+\n+    private final ReconnectingWebSocketClient wsClient;\n+    private final ExecutorService handlerThreadPool = Executors.newFixedThreadPool(50);\n+    private final AtomicLong nextAckId = new AtomicLong();\n+    private final Map<Long, CountDownLatch> activeAckRequests = new ConcurrentHashMap<>();\n+    private final Map<String, DepositListener> activeListeners = new ConcurrentHashMap<>();\n+    private volatile boolean areTopicsRegistered;\n+\n+    public NanoWsClient(URI uri) {\n+        this.wsClient = new ReconnectingWebSocketClient(uri, new WSHandler());\n+        this.wsClient.initConnection();\n+    }\n+\n+\n+    public boolean isActive() {\n+        return isSocketOpen() && areTopicsRegistered;\n+    }\n+\n+    public boolean isSocketOpen() {\n+        return wsClient.isOpen();\n+    }\n+\n+\n+    public boolean addDepositWatcher(String address, DepositListener listener) {\n+        activeListeners.put(address, listener);\n+        // Update WS filter\n+        JsonNode options = JSON_MAPPER.createObjectNode()\n+            .set(\"accounts_add\", JSON_MAPPER.createArrayNode().add(address));\n+        return sendTopicRequest(ACTION_UPDATE, TOPIC_BLOCK_CONFIRMATIONS, options);\n+    }\n+\n+    public boolean endDepositWatcher(String address) {\n+        if (activeListeners.remove(address) != null) {\n+            // Update WS filter\n+            JsonNode options = JSON_MAPPER.createObjectNode()\n+                .set(\"accounts_del\", JSON_MAPPER.createArrayNode().add(address));\n+            return sendTopicRequest(ACTION_UPDATE, TOPIC_BLOCK_CONFIRMATIONS, options);\n+        }\n+        return false;\n+    }\n+\n+\n+    private void handleIncomingDeposit(String depositAccount) {\n+        DepositListener listener = activeListeners.get(depositAccount.toLowerCase());\n+        if (listener != null) {\n+            log.debug(\"Incoming block for deposit account {}, notifying listener...\", depositAccount);\n+            listener.onDeposit();\n+        } else {\n+            log.debug(\"Handled block for account {} despite being inactive.\", depositAccount);\n+        }\n+    }\n+\n+    private void handleTopicMessage(String topic, ObjectNode message) {\n+        if (topic.equalsIgnoreCase(TOPIC_BLOCK_CONFIRMATIONS)) {\n+            ObjectNode block = (ObjectNode)message.get(\"block\");\n+            if (block.has(\"subtype\")) {\n+                String subtype = block.get(\"subtype\").asText();\n+                if (subtype.equalsIgnoreCase(\"send\")) {\n+                    handleIncomingDeposit(block.get(\"link_as_account\").asText()); // Using destination\n+                } else if (subtype.equalsIgnoreCase(\"receive\")) {\n+                    handleIncomingDeposit(block.get(\"account\").asText()); // Using block owner\n+                }\n+            } else {\n+                log.warn(\"Couldn't interpret block data (hash {})\", message.get(\"hash\").asText());\n+            }\n+        }\n+    }\n+\n+    /** Sends a topic request with the given data, and returns true if ack message is received, false if timeout. */\n+    private boolean sendTopicRequest(String action, String topic, JsonNode options) {\n+        // Create tracker\n+        long reqId = nextAckId.getAndIncrement();\n+        CountDownLatch latch = new CountDownLatch(1);\n+        activeAckRequests.put(reqId, latch);\n+\n+        try {\n+            // Create request JSON\n+            ObjectNode request = JSON_MAPPER.createObjectNode()\n+                .put(\"action\", action)\n+                .put(\"topic\", topic)\n+                .put(\"ack\", true)\n+                .put(\"id\", Long.toString(reqId));\n+            if (options != null)\n+                request.set(\"options\", options);\n+            String reqJson;\n+            try {\n+                reqJson = JSON_MAPPER.writeValueAsString(request);\n+            } catch (JsonProcessingException e) {\n+                log.error(\"Couldn't construct request JSON.\", e);\n+                return false;\n+            }\n+            // Send over WS\n+            log.debug(\"Sending WS request {}\", reqJson);\n+            try {\n+                wsClient.send(reqJson);\n+            } catch (NotYetConnectedException e) {\n+                log.debug(\"WS not connected, ignoring topic request.\");\n+                return false;\n+            }\n+            // Await ack response\n+            try {\n+                if (latch.await(ACK_TIMEOUT_MS, TimeUnit.MILLISECONDS)) {\n+                    log.debug(\"Request ack received (action={}, topic={})\", action, topic);\n+                    return true;\n+                } else {\n+                    log.warn(\"Timeout waiting for ack (action={}, topic={})\", action, topic);\n+                    return false;\n+                }\n+            } catch (InterruptedException e) {\n+                log.warn(\"Awaiting request ack interrupted.\", e);\n+                return false;\n+            }\n+        } finally {\n+            activeAckRequests.remove(reqId);\n+        }\n+    }\n+\n+\n+    public interface DepositListener {\n+        void onDeposit();\n+    }\n+\n+    private class WSHandler implements ReconnectingWebSocketClient.Handler {\n+        @Override\n+        public void onOpen(boolean reconnect) {\n+            areTopicsRegistered = false;\n+            handlerThreadPool.submit(() -> {\n+                while (isSocketOpen() && !areTopicsRegistered) {\n+                    // Subscribe to confirmations\n+                    JsonNode options = JSON_MAPPER.createObjectNode()\n+                        .set(\"accounts\", JSON_MAPPER.valueToTree(activeListeners.keySet()));\n+                    if (sendTopicRequest(ACTION_SUBSCRIBE, TOPIC_BLOCK_CONFIRMATIONS, options)) {\n+                        areTopicsRegistered = true;\n+                        log.debug(\"Topics registered to websocket.\");\n+                    } else {\n+                        log.warn(\"Failed to register topic with WebSocket.\");\n+                    }\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onMessage(String message) {\n+            handlerThreadPool.submit(() -> {\n+                ObjectNode json;\n+                try {\n+                    json = (ObjectNode)JSON_MAPPER.readTree(message);\n+                } catch (IOException | ClassCastException e) {\n+                    log.error(\"Couldn't parse WebSocket message as JSON {}\", message, e);\n+                    return;\n+                }\n+\n+                if (json.has(\"ack\")) {\n+                    // Request acknowledgement, notify tracker\n+                    CountDownLatch tracker = activeAckRequests.get(json.get(\"id\").asLong());\n+                    if (tracker != null) tracker.countDown();\n+                } else if (json.has(\"message\")) {\n+                    // Message from subscribed topic\n+                    try {\n+                        handleTopicMessage(json.get(\"topic\").asText(), (ObjectNode)json.get(\"message\"));\n+                    } catch (Exception e) {\n+                        log.error(\"Exception occurred when handling topic message.\", e);\n+                    }\n+                } else {\n+                    log.warn(\"Unrecognized WebSocket JSON message {}\", message);\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onDisconnect() {\n+            areTopicsRegistered = false;\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "7f30842b29e36be31b25c5b87087a40498b7e832",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/ReconnectingWebSocketClient.java",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/ReconnectingWebSocketClient.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/ReconnectingWebSocketClient.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/rpc/ReconnectingWebSocketClient.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,130 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.rpc;\n+\n+import org.java_websocket.client.WebSocketClient;\n+import org.java_websocket.handshake.ServerHandshake;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.URI;\n+import java.nio.channels.NotYetConnectedException;\n+\n+/**\n+ * A WebSocket client which automatically re-connects upon closure.\n+ */\n+public class ReconnectingWebSocketClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ReconnectingWebSocketClient.class);\n+\n+    private static final long RETRY_DELAY_MS = 500;\n+\n+    private final URI uri;\n+    private final Handler handler;\n+    private volatile WebSocketClient wsClient;\n+    private final Object connectMutex = new Object();\n+    private volatile boolean isReconnecting;\n+\n+    public ReconnectingWebSocketClient(URI uri, Handler handler) {\n+        this.uri = uri;\n+        this.handler = handler;\n+    }\n+\n+\n+    public void send(String text) {\n+        if (!isOpen()) throw new NotYetConnectedException();\n+        wsClient.send(text);\n+    }\n+\n+    public boolean isOpen() {\n+        return wsClient != null && wsClient.isOpen();\n+    }\n+\n+    public boolean isReconnecting() {\n+        return !isOpen() && isReconnecting;\n+    }\n+\n+    public void initConnection() {\n+        if (!isOpen() && !isReconnecting) {\n+            synchronized (connectMutex) {\n+                if (!isOpen() && !isReconnecting) {\n+                    isReconnecting = true;\n+                    Thread reconnectThread = new Thread(new ReconnectionTask(), \"WebSocketReconnectThread\");\n+                    reconnectThread.setDaemon(true);\n+                    reconnectThread.start();\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean connect() {\n+        if (!isOpen()) {\n+            synchronized (connectMutex) {\n+                if (!isOpen()) {\n+                    log.debug(\"Attempting to connect to node WebSocket.\");\n+                    wsClient = new WsClientImpl();\n+                    try {\n+                        return wsClient.connectBlocking();\n+                    } catch (InterruptedException e) {\n+                        log.error(\"WebSocket connection attempt interrupted.\", e);\n+                    }\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+\n+    private class ReconnectionTask implements Runnable {\n+        @Override\n+        public void run() {\n+            try {\n+                boolean connected;\n+                do {\n+                    Thread.sleep(RETRY_DELAY_MS);\n+                    connected = connect();\n+                } while (!connected);\n+            } catch (InterruptedException e) {\n+                isReconnecting = false;\n+                log.warn(\"Reconnection thread interrupted. WebSocket will no longer attempt to reconnect!\");\n+            }\n+        }\n+    }\n+\n+    private class WsClientImpl extends WebSocketClient {\n+        public WsClientImpl() {\n+            super(ReconnectingWebSocketClient.this.uri);\n+        }\n+\n+        @Override\n+        public void onOpen(ServerHandshake handshakedata) {\n+            log.debug(\"WebSocket opened, status = {}\", handshakedata.getHttpStatus());\n+            boolean wasReconnect = isReconnecting;\n+            isReconnecting = false;\n+            handler.onOpen(wasReconnect);\n+        }\n+\n+        @Override\n+        public void onMessage(String message) {\n+            log.trace(\"WebSocket message received = {}\", message);\n+            handler.onMessage(message);\n+        }\n+\n+        @Override\n+        public void onClose(int code, String reason, boolean remote) {\n+            log.debug(\"WebSocket closed, code = {}, reason = {}, remote = {}\", code, reason, remote);\n+            handler.onDisconnect();\n+            initConnection(); // Reconnect\n+        }\n+\n+        @Override\n+        public void onError(Exception ex) {\n+            log.error(\"Exception with WebSocket\", ex);\n+        }\n+    }\n+\n+    public interface Handler {\n+        void onOpen(boolean reconnect);\n+        void onMessage(String message);\n+        void onDisconnect();\n+    }\n+\n+}"
  },
  {
    "sha": "21bbec39343f54115ef31a2f4243f79401917f66",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestNodeWallet.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestNodeWallet.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestNodeWallet.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestNodeWallet.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,45 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.test;\n+\n+import com.generalbytes.batm.common.currencies.CryptoCurrency;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoCurrencyUtil;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoExtensionContext;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+import com.generalbytes.batm.server.extensions.extra.nano.wallet.node.NanoNodeWallet;\n+import com.generalbytes.batm.server.extensions.payment.ReceivedAmount;\n+\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+/**\n+ * THIS CLASS MAY BE IGNORED.\n+ * It's only purpose is to test and help during development.\n+ */\n+public class TestNodeWallet {\n+\n+    public static void main(String[] args) throws Exception {\n+        NanoRpcClient rpcClient = new NanoRpcClient(new URL(\"http://[::1]:7076\"));\n+        String walletId = \"C6DFB1E6B2AAA97247BA5A434BB2795F5FC4D68EE0FBEDCD21C72027880596C7\";\n+        String walletAccount = \"nano_3h5r5huudbj3mrmosha84oregs3k9wgi8cwbynbiajjmto1y9sys8yykjg1m\";\n+        String destAccount = \"nano_3zykdut8t1hekoty3nh6fhqnkekdstbd7f15irpobpp8yd36jc38a6ewquwy\";\n+\n+        NanoExtensionContext context = new NanoExtensionContext(CryptoCurrency.NANO, null, NanoCurrencyUtil.NANO);\n+        context.setRpcClient(rpcClient);\n+        NanoNodeWallet wallet = new NanoNodeWallet(context, rpcClient, null, walletId, walletAccount);\n+\n+        ReceivedAmount received = wallet.getReceivedAmount(destAccount, context.getCurrencyCode());\n+        System.out.printf(\"Received amount of %s = %.8f (%d confirmations)%n\",\n+                destAccount, received.getTotalAmountReceived(), received.getConfirmations());\n+\n+        System.out.printf(\"Balance of hot wallet = %.8f%n\", wallet.getCryptoBalance(context.getCurrencyCode()));\n+\n+        String hash = wallet.sendCoins(destAccount, new BigDecimal(\"0.001\"), context.getCurrencyCode(),\n+                UUID.randomUUID().toString());\n+        if (hash == null) {\n+            System.out.println(\"Failed to send funds.\");\n+        } else {\n+            System.out.printf(\"Sent 0.001 Nano to %s, hash = %s%n\", destAccount, hash);\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "1a9d4ccd9c3c357817134b16e9f192c2b298590e",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestPaperWallet.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestPaperWallet.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestPaperWallet.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestPaperWallet.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,47 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.test;\n+\n+import com.generalbytes.batm.common.currencies.CryptoCurrency;\n+import com.generalbytes.batm.server.extensions.IPaperWallet;\n+import com.generalbytes.batm.server.extensions.TestExtensionContext;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoCurrencyUtil;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoExtensionContext;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+import com.generalbytes.batm.server.extensions.extra.nano.wallet.paper.NanoPaperWalletGenerator;\n+\n+import java.awt.*;\n+import java.io.BufferedWriter;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * THIS CLASS MAY BE IGNORED.\n+ * It's only purpose is to test and help during development.\n+ */\n+public class TestPaperWallet {\n+\n+    public static void main(String[] args) throws Exception {\n+        NanoRpcClient rpcClient = new NanoRpcClient(new URL(\"http://[::1]:7076\"));\n+\n+        NanoExtensionContext extContext = new NanoExtensionContext(\n+                CryptoCurrency.NANO, new TestExtensionContext(), NanoCurrencyUtil.NANO);\n+        extContext.setRpcClient(rpcClient);\n+        NanoPaperWalletGenerator walletGen = new NanoPaperWalletGenerator(extContext);\n+\n+        IPaperWallet paperWallet = walletGen.generateWallet(\n+                CryptoCurrency.NANO.getCurrencyName(), \"1234\", \"en\", false);\n+\n+        System.out.println(paperWallet.getAddress());\n+        System.out.println(paperWallet.getPrivateKey());\n+        System.out.println(paperWallet.getMessage());\n+\n+        Path p = Paths.get(\".nano-test-message.html\").toAbsolutePath();\n+        try (BufferedWriter writer = Files.newBufferedWriter(p, StandardCharsets.UTF_8)) {\n+            writer.write(paperWallet.getMessage());\n+        }\n+        Desktop.getDesktop().browse(p.toUri());\n+    }\n+\n+}"
  },
  {
    "sha": "5664f363b11b8fd24168b262891f93a3f8e6b3d5",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestPaymentSupport.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestPaymentSupport.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestPaymentSupport.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestPaymentSupport.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,89 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.test;\n+\n+import com.generalbytes.batm.common.currencies.CryptoCurrency;\n+import com.generalbytes.batm.server.extensions.TestExtensionContext;\n+import com.generalbytes.batm.server.extensions.extra.dash.test.PRS;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoCurrencyUtil;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoExtensionContext;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoPaymentSupport;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoWsClient;\n+import com.generalbytes.batm.server.extensions.extra.nano.wallet.node.NanoNodeWallet;\n+import com.generalbytes.batm.server.extensions.payment.IPaymentRequestListener;\n+import com.generalbytes.batm.server.extensions.payment.PaymentRequest;\n+\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URL;\n+\n+/**\n+ * THIS CLASS MAY BE IGNORED.\n+ * It's only purpose is to test and help during development.\n+ */\n+public class TestPaymentSupport {\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            /*\n+             * You need to have node running: i.e.: nano_node --daemon with rpc enabled\n+             * WebSocket host may be null if using RPC polling only.\n+             * A value totalling paymentValue should be sent to the account printed in console.\n+             */\n+            String rpcHost = \"http://[::1]:7076\", wsHost = \"ws://[::1]:7078\";\n+            String walletId = \"C6DFB1E6B2AAA97247BA5A434BB2795F5FC4D68EE0FBEDCD21C72027880596C7\";\n+            String walletAccount = \"nano_3h5r5huudbj3mrmosha84oregs3k9wgi8cwbynbiajjmto1y9sys8yykjg1m\";\n+            BigDecimal paymentValue = new BigDecimal(\"0.01\");\n+\n+\n+            System.out.println(\"Running TestPaymentSupport\");\n+            NanoRpcClient rpcClient = new NanoRpcClient(new URL(rpcHost));\n+            NanoWsClient wsClient = wsHost == null ? null : new NanoWsClient(URI.create(wsHost));\n+            NanoExtensionContext context = new NanoExtensionContext(\n+                    CryptoCurrency.NANO, new TestExtensionContext(), NanoCurrencyUtil.NANO);\n+            NanoNodeWallet wallet = new NanoNodeWallet(context, rpcClient, wsClient, walletId, walletAccount);\n+            NanoPaymentSupport ps = new NanoPaymentSupport(context);\n+            ps.init(null);\n+            String paymentAccount = wallet.generateNewDepositCryptoAddress(context.getCurrencyCode(), \"label\");\n+\n+            Thread.sleep(2500);\n+\n+            PRS spec = new PRS(context.getCurrencyCode(), \"Test txn\", 60, 1, false, true, BigDecimal.ZERO,\n+                    BigDecimal.ZERO, new BigDecimal(\"0.001\"), wallet);\n+            spec.addOutput(paymentAccount, paymentValue);\n+            PaymentRequest pr = ps.createPaymentRequest(spec);\n+\n+            pr.setListener(new IPaymentRequestListener() {\n+                @Override\n+                public void stateChanged(PaymentRequest request, int previousState, int newState) {\n+                    System.out.printf(\"stateChanged | previousState: %d, newState: %d%n\", previousState, newState);\n+                }\n+\n+                @Override\n+                public void numberOfConfirmationsChanged(PaymentRequest request, int numberOfConfirmations,\n+                                                         IPaymentRequestListener.Direction direction) {\n+                    System.out.printf(\"numberOfConfirmationsChanged | confs: %d | received: %.6f / %.6f%n\",\n+                        numberOfConfirmations, request.getTxValue(), request.getAmount());\n+\n+                    if (numberOfConfirmations >= 1) {\n+                        System.out.println(\"--------------------------------------\");\n+                        System.out.printf(\"TRANSACTION COMPLETED | Received %.6f%n\", request.getTxValue());\n+                        System.out.println(\"--------------------------------------\");\n+                    }\n+                }\n+\n+                @Override\n+                public void refundSent(PaymentRequest request, String toAddress, String cryptoCurrency, BigDecimal amount) {\n+                    System.out.println(\"--------------------------------------\");\n+                    System.out.printf(\"REFUNDED | Sent %.6f to %s%n\", amount, toAddress);\n+                    System.out.println(\"--------------------------------------\");\n+                }\n+            });\n+\n+            System.out.println(\"Waiting for transfer to \" + paymentAccount);\n+            Thread.currentThread().join();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "8232c7b8e8b45ac0e46cdfcf3c26602ac52735ef",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestWebSocket.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestWebSocket.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestWebSocket.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/test/TestWebSocket.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,25 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.test;\n+\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoWsClient;\n+\n+import java.net.URI;\n+\n+/**\n+ * THIS CLASS MAY BE IGNORED.\n+ * It's only purpose is to test and help during development.\n+ */\n+public class TestWebSocket {\n+\n+    public static void main(String[] args) throws Exception {\n+        NanoWsClient wsClient = new NanoWsClient(new URI(\"ws://[::1]:7078\"));\n+\n+        Thread.sleep(2500);\n+\n+        wsClient.addDepositWatcher(\n+                \"nano_3h5r5huudbj3mrmosha84oregs3k9wgi8cwbynbiajjmto1y9sys8yykjg1m\",\n+                () -> System.out.println(\"onDeposit CALLED!!!!!!\"));\n+\n+        Thread.currentThread().join();\n+    }\n+\n+}"
  },
  {
    "sha": "9fb4ad8fc766aef27c4010a7a1de1f23483ce5c0",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/demo/DemoWallet.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/demo/DemoWallet.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/demo/DemoWallet.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/demo/DemoWallet.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,151 @@\n+/*************************************************************************************\n+ * Copyright (C) 2014-2020 GENERAL BYTES s.r.o. All rights reserved.\n+ *\n+ * This software may be distributed and modified under the terms of the GNU\n+ * General Public License version 2 (GPL2) as published by the Free Software\n+ * Foundation and appearing in the file GPL2.TXT included in the packaging of\n+ * this file. Please note that GPL2 Section 2[b] requires that all works based\n+ * on this software must also be made publicly available under the terms of\n+ * the GPL2 (\"Copyleft\").\n+ *\n+ * Contact information\n+ * -------------------\n+ *\n+ * GENERAL BYTES s.r.o.\n+ * Web      :  http://www.generalbytes.com\n+ *\n+ ************************************************************************************/\n+package com.generalbytes.batm.server.extensions.extra.nano.wallet.demo;\n+\n+import com.generalbytes.batm.server.extensions.ICanSendMany;\n+import com.generalbytes.batm.server.extensions.IExchange;\n+import com.generalbytes.batm.server.extensions.IRateSource;\n+import com.generalbytes.batm.server.extensions.IWallet;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.math.BigDecimal;\n+import java.util.*;\n+\n+public class DemoWallet implements IExchange, IWallet, IRateSource, ICanSendMany {\n+\n+    private static final Logger log = LoggerFactory.getLogger(DemoWallet.class);\n+\n+    private static final BigDecimal EXCHANGE_RATE = new BigDecimal(2000);\n+    private static final BigDecimal WALLET_BALANCE = new BigDecimal(10);\n+    private static final BigDecimal EXCHANGE_BALANCE = new BigDecimal(1000);\n+    private final String fiatCurrency, cryptoCurrency, walletAddress;\n+\n+\n+    public DemoWallet(String fiatCurrency, String cryptoCurrency, String walletAddress) throws IllegalArgumentException {\n+        this.fiatCurrency = fiatCurrency;\n+        this.cryptoCurrency = cryptoCurrency;\n+        this.walletAddress = walletAddress;\n+    }\n+\n+    @Override\n+    public Set<String> getCryptoCurrencies() {\n+        return Collections.singleton(cryptoCurrency);\n+    }\n+\n+    @Override\n+    public Set<String> getFiatCurrencies() {\n+        return Collections.singleton(fiatCurrency);\n+    }\n+\n+    @Override\n+    public String getPreferredFiatCurrency() {\n+        return fiatCurrency;\n+    }\n+\n+    @Override\n+    public BigDecimal getCryptoBalance(String cryptoCurrency) {\n+        return WALLET_BALANCE;\n+    }\n+\n+    @Override\n+    public BigDecimal getFiatBalance(String fiatCurrency) {\n+        if (this.fiatCurrency.equalsIgnoreCase(fiatCurrency)) {\n+            return EXCHANGE_BALANCE;\n+        }else{\n+            return BigDecimal.ZERO;\n+        }\n+    }\n+\n+    @Override\n+    public String purchaseCoins(BigDecimal amount, String cryptoCurrency, String fiatCurrencyToUse, String description) {\n+        if (cryptoCurrency.equalsIgnoreCase(this.cryptoCurrency) && fiatCurrencyToUse.equalsIgnoreCase(this.fiatCurrency)) {\n+            String id = UUID.randomUUID().toString();\n+            log.info(\"{}-DummyExchangeWallet: purchasing coins {}, id: {}\", this.cryptoCurrency, amount, id);\n+            return id;\n+        } else {\n+            log.info(\"{}-DummyExchangeWallet: unsupported currency {}\", this.cryptoCurrency, cryptoCurrency);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String sellCoins(BigDecimal cryptoAmount, String cryptoCurrency, String fiatCurrencyToUse, String description) {\n+        if (cryptoCurrency.equalsIgnoreCase(this.cryptoCurrency) && fiatCurrencyToUse.equalsIgnoreCase(this.fiatCurrency)) {\n+            String id = UUID.randomUUID().toString();\n+            log.info(\"{}-DummyExchangeWallet: selling coins {}, id: {}\", this.cryptoCurrency, cryptoAmount, id);\n+            return id;\n+        } else {\n+            log.info(\"{}-DummyExchangeWallet: unsupported currency {}\", this.cryptoCurrency, cryptoCurrency);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String sendCoins(String destinationAddress, BigDecimal amount, String cryptoCurrency, String description) {\n+        if (cryptoCurrency.equalsIgnoreCase(this.cryptoCurrency)) {\n+            String id = UUID.randomUUID().toString();\n+            log.info(\"{}-DummyExchangeWallet: sending coins to {} {}, id: {}\",\n+                    this.cryptoCurrency, destinationAddress, amount, id);\n+            return id;\n+        } else {\n+            log.info(\"{}-DummyExchangeWallet: unsupported currency {}\", this.cryptoCurrency, cryptoCurrency);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String sendMany(Collection<Transfer> transfers, String cryptoCurrency, String description) {\n+        if (cryptoCurrency.equalsIgnoreCase(this.cryptoCurrency)) {\n+            String id = UUID.randomUUID().toString();\n+            log.info(\"{}-DummyExchangeWallet: sendMany: {} {}, id: {}\",\n+                    this.cryptoCurrency, transfers, description, id);\n+            return id;\n+        } else {\n+            log.info(\"{}-DummyExchangeWallet: unsupported currency {}\", this.cryptoCurrency, cryptoCurrency);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String getDepositAddress(String cryptoCurrency) {\n+        return getAddress(cryptoCurrency);\n+    }\n+\n+    private String getAddress(String cryptoCurrency) {\n+        return this.cryptoCurrency.equals(cryptoCurrency) ? walletAddress : null;\n+    }\n+\n+    @Override\n+    public BigDecimal getExchangeRateLast(String cryptoCurrency, String fiatCurrency) {\n+        log.info(\"{}-DummyExchangeWallet: exchange rate is {}\", this.cryptoCurrency, EXCHANGE_RATE);\n+        return EXCHANGE_RATE;\n+    }\n+\n+    @Override\n+    public String getCryptoAddress(String cryptoCurrency) {\n+        return getAddress(cryptoCurrency);\n+\n+    }\n+\n+    @Override\n+    public String getPreferredCryptoCurrency() {\n+        return cryptoCurrency;\n+    }\n+\n+}"
  },
  {
    "sha": "854096ffc5c47db0e34eb26df214fe5e83b0ae5b",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/node/INanoRpcWallet.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/node/INanoRpcWallet.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/node/INanoRpcWallet.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/node/INanoRpcWallet.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,21 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.wallet.node;\n+\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoWsClient;\n+\n+import java.math.BigInteger;\n+\n+/**\n+ * @author Karl Oczadly\n+ */\n+public interface INanoRpcWallet {\n+\n+    NanoRpcClient getRpcClient();\n+\n+    NanoWsClient getWsClient();\n+\n+    BigInteger sendAllFromWallet(String depositAddress, String destination);\n+\n+    BigInteger moveFundsToHotWallet(String depositAddress);\n+\n+}"
  },
  {
    "sha": "b779ad0177e163248cf09af8ffe6ddc23948c942",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/node/NanoNodeWallet.java",
    "status": "added",
    "additions": 212,
    "deletions": 0,
    "changes": 212,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/node/NanoNodeWallet.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/node/NanoNodeWallet.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/node/NanoNodeWallet.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,212 @@\n+package com.generalbytes.batm.server.extensions.extra.nano.wallet.node;\n+\n+import com.generalbytes.batm.server.extensions.IGeneratesNewDepositCryptoAddress;\n+import com.generalbytes.batm.server.extensions.IQueryableWallet;\n+import com.generalbytes.batm.server.extensions.IWallet;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoExtensionContext;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoWsClient;\n+import com.generalbytes.batm.server.extensions.payment.ReceivedAmount;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.net.URI;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.UUID;\n+\n+/**\n+ * @author Karl Oczadly\n+ */\n+public class NanoNodeWallet implements INanoRpcWallet, IGeneratesNewDepositCryptoAddress, IWallet, IQueryableWallet {\n+\n+    private static final Logger log = LoggerFactory.getLogger(NanoNodeWallet.class);\n+\n+    private final NanoExtensionContext context;\n+    private final NanoRpcClient rpcClient;\n+    private final NanoWsClient wsClient;\n+    private final String walletId, hotWalletAccount;\n+\n+    public NanoNodeWallet(NanoExtensionContext context, NanoRpcClient rpcClient, NanoWsClient wsClient,\n+                           String walletId, String hotWalletAccount) {\n+        this.context = context;\n+        this.rpcClient = rpcClient;\n+        this.wsClient = wsClient;\n+        this.walletId = walletId;\n+        this.hotWalletAccount = hotWalletAccount;\n+    }\n+\n+\n+    @Override\n+    public NanoRpcClient getRpcClient() {\n+        return rpcClient;\n+    }\n+\n+    @Override\n+    public NanoWsClient getWsClient() {\n+        return wsClient;\n+    }\n+\n+    @Override\n+    public BigInteger sendAllFromWallet(String depositAddress, String destination) {\n+        try {\n+            BigInteger balance = rpcClient.getBalance(depositAddress).unconfBalance;\n+            if (!balance.equals(BigInteger.ZERO)) {\n+                String hash = rpcClient.sendFromWallet(walletId, depositAddress, destination,\n+                    balance, UUID.randomUUID().toString());\n+                log.info(\"Sent {} to {}, hash: {}\", balance, destination, hash);\n+                return balance;\n+            }\n+        } catch (IOException | NanoRpcClient.RpcException e) {\n+            log.error(\"Couldn't send deposit wallet funds.\", e);\n+        }\n+        return BigInteger.ZERO;\n+    }\n+\n+    @Override\n+    public BigInteger moveFundsToHotWallet(String depositAddress) {\n+        return sendAllFromWallet(depositAddress, hotWalletAccount);\n+    }\n+\n+    @Override\n+    public String generateNewDepositCryptoAddress(String cryptoCurrency, String label) {\n+        if (!context.getCurrencyCode().equalsIgnoreCase(cryptoCurrency)) {\n+            log.warn(\"Unrecognized currency code {}\", cryptoCurrency);\n+            return null;\n+        }\n+        try {\n+            for (int i = 0; i < 5; i++) {\n+                String account = rpcClient.newWalletAccount(walletId);\n+                // Ensure account isn't in a used state\n+                if (!account.equalsIgnoreCase(hotWalletAccount) && !rpcClient.doesAccountExist(account)) {\n+                    return account;\n+                } else {\n+                    log.warn(\"Deposit address {} already in use, trying another...\", account);\n+                }\n+            }\n+            log.error(\"Couldn't find an unused deposit address.\");\n+            return null;\n+        } catch (NanoRpcClient.RpcException | IOException e) {\n+            log.error(\"Couldn't create new deposit address.\", e);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public ReceivedAmount getReceivedAmount(String address, String cryptoCurrency) {\n+        address = context.getUtil().parseAddress(address);\n+        try {\n+            /*\n+             * TODO: Only including pocketed balance for now. This could be changed in the future if fork resolution\n+             *       issues are resolved, and would speed up deposit confirmation times.\n+             */\n+            NanoRpcClient.BalanceResponse balance = rpcClient.getBalance(address);\n+            if (balance.confBalance.compareTo(BigInteger.ZERO) > 0)\n+                return new ReceivedAmount(context.getUtil().amountFromRaw(balance.confBalance), Integer.MAX_VALUE);\n+            // No balance; return unconfirmed and pending blocks with confirmation 0\n+            BigInteger unconfTotal = balance.unconfBalance.add(balance.unconfPending);\n+            return new ReceivedAmount(context.getUtil().amountFromRaw(unconfTotal), 0);\n+        } catch (NanoRpcClient.RpcException | IOException e) {\n+            log.error(\"Couldn't retrieve balance for account {}.\", address, e);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String getCryptoAddress(String cryptoCurrency) {\n+        if (!context.getCurrencyCode().equalsIgnoreCase(cryptoCurrency)) {\n+            log.warn(\"Unrecognized currency code {}\", cryptoCurrency);\n+            return null;\n+        }\n+        return hotWalletAccount;\n+    }\n+\n+    @Override\n+    public Set<String> getCryptoCurrencies() {\n+        return Collections.singleton(context.getCurrencyCode());\n+    }\n+\n+    @Override\n+    public String getPreferredCryptoCurrency() {\n+        return context.getCurrencyCode();\n+    }\n+\n+    @Override\n+    public BigDecimal getCryptoBalance(String cryptoCurrency) {\n+        try {\n+            return context.getUtil().amountFromRaw(\n+                    rpcClient.getBalance(hotWalletAccount).confBalance);\n+        } catch (NanoRpcClient.RpcException | IOException e) {\n+            log.error(\"Couldn't retrieve balance of account {}.\", hotWalletAccount, e);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String sendCoins(String destinationAddress, BigDecimal amount, String cryptoCurrency, String description) {\n+        if (!context.getCurrencyCode().equalsIgnoreCase(cryptoCurrency)) {\n+            log.warn(\"Unrecognized currency code {}\", cryptoCurrency);\n+            return null;\n+        }\n+\n+        destinationAddress = context.getUtil().parseAddress(destinationAddress);\n+        BigInteger amountRaw = context.getUtil().amountToRaw(amount);\n+        log.info(\"Sending {} Nano from hot wallet to {}...\", amount, destinationAddress);\n+        try {\n+            String hash = rpcClient.sendFromWallet(walletId, hotWalletAccount, destinationAddress,\n+                    amountRaw, description);\n+            log.info(\"Sent {} Nano from hot wallet to {}, hash = {}\", amount, destinationAddress, hash);\n+            return hash;\n+        } catch (NanoRpcClient.RpcException | IOException e) {\n+            log.error(\"Failed to send {} Nano from hot wallet {}.\", amount, hotWalletAccount, e);\n+            return null;\n+        }\n+    }\n+\n+\n+    public static NanoNodeWallet create(NanoExtensionContext context, StringTokenizer args) throws Exception {\n+        /*\n+         * ORDER OF CONFIGURATION TOKENS:\n+         *  0  Node IP/host\n+         *  1  RPC protocol (http/https)\n+         *  2  RPC port\n+         *  3  Hot wallet ID\n+         *  4  Hot wallet account\n+         *  5  Websocket protocol (ws/wss)\n+         *  6  Websocket port\n+         */\n+        String nodeHost = args.nextToken();\n+        if (nodeHost.equals(\"[\")) {\n+            // IPv6 local address\n+            nodeHost = \"[::1]\";\n+            args.nextToken(); // Skip\n+        }\n+        String rpcProtocol = args.nextToken().toLowerCase();\n+        int rpcPort = Integer.parseInt(args.nextToken());\n+        URL rpcUrl = new URL(rpcProtocol, nodeHost, rpcPort, \"\");\n+\n+        String walletId = args.nextToken().toUpperCase();\n+        String walletAccount = context.getUtil().parseAddress(args.nextToken());\n+\n+        URI wsUri = null;\n+        if (args.hasMoreElements()) {\n+            String wsProtocol = args.nextToken().toLowerCase();\n+            int wsPort = Integer.parseInt(args.nextToken());\n+            wsUri = new URI(wsProtocol, \"\", nodeHost, wsPort, \"\", \"\", \"\");\n+        }\n+\n+        log.info(\"Using nano_node wallet: RPC: {}, WS: {}, Wallet ID: {}, Hot-wallet: {}\",\n+                rpcUrl, wsUri != null ? wsUri : \"[not used]\", walletId, walletAccount);\n+\n+        return new NanoNodeWallet(context,\n+                new NanoRpcClient(rpcUrl),\n+                wsUri != null ? new NanoWsClient(wsUri) : null,\n+                walletId, walletAccount);\n+    }\n+\n+}"
  },
  {
    "sha": "4c3e75c6f9336991a154f6f5ee610ef18a021026",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/NanoPaperWallet.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/NanoPaperWallet.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/NanoPaperWallet.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/NanoPaperWallet.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,71 @@\n+/*************************************************************************************\n+ * Copyright (C) 2014-2021 GENERAL BYTES s.r.o. All rights reserved.\n+ *\n+ * This software may be distributed and modified under the terms of the GNU\n+ * General Public License version 2 (GPL2) as published by the Free Software\n+ * Foundation and appearing in the file GPL2.TXT included in the packaging of\n+ * this file. Please note that GPL2 Section 2[b] requires that all works based\n+ * on this software must also be made publicly available under the terms of\n+ * the GPL2 (\"Copyleft\").\n+ *\n+ * Contact information\n+ * -------------------\n+ *\n+ * GENERAL BYTES s.r.o.\n+ * Web      :  http://www.generalbytes.com\n+ *\n+ ************************************************************************************/\n+package com.generalbytes.batm.server.extensions.extra.nano.wallet.paper;\n+\n+import com.generalbytes.batm.server.extensions.IPaperWallet;\n+\n+public class NanoPaperWallet implements IPaperWallet {\n+\n+    private final String crypto, address, privateKey, message;\n+    private final byte[] content;\n+\n+    public NanoPaperWallet(String crypto, String address, String privateKey, String message, byte[] zipContent) {\n+        this.crypto = crypto;\n+        this.address = address;\n+        this.privateKey = privateKey;\n+        this.message = message;\n+        this.content = zipContent;\n+    }\n+\n+\n+    @Override\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    @Override\n+    public String getPrivateKey() {\n+        return privateKey;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    @Override\n+    public String getCryptoCurrency() {\n+        return crypto;\n+    }\n+\n+    @Override\n+    public String getFileExtension() {\n+        return \"zip\";\n+    }\n+\n+    @Override\n+    public String getContentType() {\n+        return \"application/zip\";\n+    }\n+\n+    @Override\n+    public byte[] getContent() {\n+        return content;\n+    }\n+\n+}"
  },
  {
    "sha": "8bdad55ba93fab95f5724ababc362a212a6d10b0",
    "filename": "server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/NanoPaperWalletGenerator.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/NanoPaperWalletGenerator.java",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/NanoPaperWalletGenerator.java",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/java/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/NanoPaperWalletGenerator.java?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,123 @@\n+/*************************************************************************************\n+ * Copyright (C) 2014-2021 GENERAL BYTES s.r.o. All rights reserved.\n+ *\n+ * This software may be distributed and modified under the terms of the GNU\n+ * General Public License version 2 (GPL2) as published by the Free Software\n+ * Foundation and appearing in the file GPL2.TXT included in the packaging of\n+ * this file. Please note that GPL2 Section 2[b] requires that all works based\n+ * on this software must also be made publicly available under the terms of\n+ * the GPL2 (\"Copyleft\").\n+ *\n+ * Contact information\n+ * -------------------\n+ *\n+ * GENERAL BYTES s.r.o.\n+ * Web      :  http://www.generalbytes.com\n+ *\n+ ************************************************************************************/\n+package com.generalbytes.batm.server.extensions.extra.nano.wallet.paper;\n+\n+import com.generalbytes.batm.server.extensions.IPaperWallet;\n+import com.generalbytes.batm.server.extensions.IPaperWalletGenerator;\n+import com.generalbytes.batm.server.extensions.extra.nano.NanoExtensionContext;\n+import com.generalbytes.batm.server.extensions.extra.nano.rpc.NanoRpcClient;\n+import com.google.common.io.BaseEncoding;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+\n+public class NanoPaperWalletGenerator implements IPaperWalletGenerator {\n+\n+    private static final Logger log = LoggerFactory.getLogger(NanoPaperWalletGenerator.class);\n+\n+    private final NanoExtensionContext ctx;\n+\n+    public NanoPaperWalletGenerator(NanoExtensionContext ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+\n+    @Override\n+    public IPaperWallet generateWallet(String cryptoCurrency, String oneTimePassword, String userLanguage,\n+            boolean shouldBeVanity) {\n+        NanoRpcClient rpcClient = ctx.getRpcClient();\n+        if (rpcClient == null) {\n+            log.warn(\"Couldn't create paper wallet as no nano_node wallet is configured (required!)\");\n+            return null;\n+        }\n+\n+        /*\n+         * Create a cryptographically random seed. I have decided on using the seed instead of private key, as seeds\n+         * appear to be more widely supported by third-party wallets.\n+         */\n+        byte[] seedBytes = new byte[32];\n+        try {\n+            SecureRandom.getInstanceStrong().nextBytes(seedBytes);\n+        } catch (NoSuchAlgorithmException e) {\n+            log.error(\"Couldn't generate seed securely.\", e);\n+            return null;\n+        }\n+        String seed = BaseEncoding.base16().encode(seedBytes);\n+\n+        // Obtain account\n+        String address;\n+        try {\n+            address = rpcClient.accountFromSeed(seed, 0);\n+        } catch (IOException | NanoRpcClient.RpcException e) {\n+            log.error(\"Couldn't generate paper wallet via RPC.\", e);\n+            return null;\n+        }\n+\n+        // Create email content\n+        byte[] zipContents = ctx.getExtensionContext().createPaperWallet7ZIP(\n+                seed, address, oneTimePassword, cryptoCurrency);\n+        String message = createMessage(userLanguage, address);\n+\n+        return new NanoPaperWallet(ctx.getCurrencyCode(), address, seed, message, zipContents);\n+    }\n+\n+\n+    private static String createMessage(String lang, String address) {\n+        String message = readMessageTemplate(lang);\n+        if (message == null && !lang.equalsIgnoreCase(\"en\")) {\n+            message = readMessageTemplate(\"en\"); // Try english fallback\n+            log.info(\"No paper wallet message for language {}, using EN fallback.\", lang);\n+        }\n+        if (message == null) {\n+            log.warn(\"Couldn't locate a message file for paper wallet.\");\n+            return \"Here is your Nano account: \" + address;\n+        }\n+        return message.replace(\"{address}\", address);\n+    }\n+\n+    private static String readMessageTemplate(String lang) {\n+        String fileName = \"paperwallet_msg_\" + lang.toLowerCase() + \".txt\";\n+        InputStream is = NanoPaperWalletGenerator.class.getResourceAsStream(fileName);\n+        if (is == null)\n+            return null;\n+        // Read file\n+        try {\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            byte[] buf = new byte[512];\n+            int n;\n+            while ((n = is.read(buf)) > 0) {\n+                bos.write(buf, 0, n);\n+            }\n+            return new String(bos.toByteArray(), StandardCharsets.UTF_8);\n+        } catch (IOException e) {\n+            log.warn(\"Couldn't load paper wallet message file.\", e);\n+            return null;\n+        } finally {\n+            try {\n+                is.close();\n+            } catch (IOException ignored) {}\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7a09a508c17b4cafd5c13782617e51c0c07769ab",
    "filename": "server_extensions_extra/src/main/resources/batm-extensions.xml",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/resources/batm-extensions.xml",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/resources/batm-extensions.xml",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/resources/batm-extensions.xml?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -189,6 +189,7 @@\n                 <cryptocurrency>LMY</cryptocurrency>\n                 <cryptocurrency>HT</cryptocurrency>\n                 <cryptocurrency>ZPAE</cryptocurrency>\n+                <cryptocurrency>NANO</cryptocurrency>\n             </ratesource>\n             <ratesource prefix=\"stream365\" name =\"365.stream\" >\n                 <cryptocurrency>HBX</cryptocurrency>\n@@ -237,6 +238,7 @@\n                 <cryptocurrency>MUE</cryptocurrency>\n                 <cryptocurrency>NBT</cryptocurrency>\n                 <cryptocurrency>NLG</cryptocurrency>\n+                <cryptocurrency>NANO</cryptocurrency>\n                 <cryptocurrency>NXT</cryptocurrency>\n                 <cryptocurrency>POT</cryptocurrency>\n                 <cryptocurrency>REP</cryptocurrency>\n@@ -334,6 +336,7 @@\n             <cryptocurrency>XMR</cryptocurrency>\n             <cryptocurrency>DASH</cryptocurrency>\n             <cryptocurrency>NXT</cryptocurrency>\n+            <cryptocurrency>NANO</cryptocurrency>\n         </exchange>\n         <cryptologo cryptocurrency=\"BTC\" file=\"btc.png\"/>\n         <cryptologo cryptocurrency=\"BTC\" file=\"btc.svg\"/>\n@@ -524,6 +527,7 @@\n             <cryptocurrency>MEC</cryptocurrency>\n             <cryptocurrency>MKR</cryptocurrency>\n             <cryptocurrency>MUE</cryptocurrency>\n+            <cryptocurrency>NANO</cryptocurrency>\n             <cryptocurrency>NBT</cryptocurrency>\n             <cryptocurrency>NLG</cryptocurrency>\n             <cryptocurrency>NULS</cryptocurrency>\n@@ -590,6 +594,7 @@\n             <cryptocurrency>MEC</cryptocurrency>\n             <cryptocurrency>MKR</cryptocurrency>\n             <cryptocurrency>MUE</cryptocurrency>\n+            <cryptocurrency>NANO</cryptocurrency>\n             <cryptocurrency>NLG</cryptocurrency>\n             <cryptocurrency>NULS</cryptocurrency>\n             <cryptocurrency>NXT</cryptocurrency>\n@@ -628,6 +633,7 @@\n             <cryptocurrency>KMD</cryptocurrency>\n             <cryptocurrency>LSK</cryptocurrency>\n             <cryptocurrency>LTC</cryptocurrency>\n+            <cryptocurrency>NANO</cryptocurrency>\n             <cryptocurrency>NULS</cryptocurrency>\n             <cryptocurrency>REP</cryptocurrency>\n             <cryptocurrency>SYS</cryptocurrency>\n@@ -653,6 +659,7 @@\n             <cryptocurrency>KMD</cryptocurrency>\n             <cryptocurrency>LSK</cryptocurrency>\n             <cryptocurrency>LTC</cryptocurrency>\n+            <cryptocurrency>NANO</cryptocurrency>\n             <cryptocurrency>NULS</cryptocurrency>\n             <cryptocurrency>REP</cryptocurrency>\n             <cryptocurrency>SYS</cryptocurrency>\n@@ -676,6 +683,7 @@\n             <cryptocurrency>DOGE</cryptocurrency>\n             <cryptocurrency>ETH</cryptocurrency>\n             <cryptocurrency>LTC</cryptocurrency>\n+            <cryptocurrency>NANO</cryptocurrency>\n             <cryptocurrency>USDT</cryptocurrency>\n             <cryptocurrency>XRP</cryptocurrency>\n         </exchange>\n@@ -689,6 +697,7 @@\n             <cryptocurrency>DOGE</cryptocurrency>\n             <cryptocurrency>ETH</cryptocurrency>\n             <cryptocurrency>LTC</cryptocurrency>\n+            <cryptocurrency>NANO</cryptocurrency>\n             <cryptocurrency>USDT</cryptocurrency>\n             <cryptocurrency>XRP</cryptocurrency>\n         </ratesource>\n@@ -1585,6 +1594,29 @@\n         </ratesource>\n         <cryptologo cryptocurrency=\"ECA\" file=\"eca.png\"/>\n     </extension>\n+    <extension class=\"com.generalbytes.batm.server.extensions.extra.nano.NanoExtension\" >\n+        <wallet prefix=\"nano_node\" name=\"nano_node Wallet (RPC)\">\n+            <param name=\"rpc_ip\" />\n+            <param name=\"rpc_protocol\" />\n+            <param name=\"rpc_port\" />\n+            <param name=\"wallet\" />\n+            <param name=\"account\" />\n+            <param name=\"ws_protocol\" />\n+            <param name=\"ws_port\" />\n+            <help>IP is the IP/host of the RPC and WebSocket server. RPC protocol may be either 'http' or 'https',\n+                WebSocket may be 'ws' or 'wss'. WebSocket is optional, and may be ignored. Wallet ID is the 64-character\n+                identifier from the node's built-in wallet provider, and the hot wallet account must be part of the\n+                wallet.</help>\n+            <cryptocurrency>NANO</cryptocurrency>\n+        </wallet>\n+        <wallet prefix=\"nano_demo\" name=\"Nano Demo Wallet\">\n+            <param name=\"fiatCurrency\" />\n+            <param name=\"walletAddress\" />\n+            <cryptocurrency>NANO</cryptocurrency>\n+        </wallet>\n+        <cryptologo cryptocurrency=\"NANO\" file=\"nano.png\"/>\n+        <cryptologo cryptocurrency=\"NANO\" file=\"nano.svg\"/>\n+    </extension>\n     <extension class=\"com.generalbytes.batm.server.extensions.extra.linda.LindaExtension\" >\n         <wallet prefix=\"lindad\" name=\"Lindad\">\n             <param name=\"protocol\" />"
  },
  {
    "sha": "0800b0cf8f55750e63cdc38cacc77abb6964bbe8",
    "filename": "server_extensions_extra/src/main/resources/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/paperwallet_msg_en.txt",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/resources/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/paperwallet_msg_en.txt",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/resources/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/paperwallet_msg_en.txt",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/resources/com/generalbytes/batm/server/extensions/extra/nano/wallet/paper/paperwallet_msg_en.txt?ref=850a625774c88563f10d55cf5d905763ac2c202a",
    "patch": "@@ -0,0 +1,2 @@\n+<p>Your personal <font color=\"#4A90E2\">Nano</font> account is <a href=\"nano:{address}\" style=\"text-decoration:none;color:WindowText;\"><code>{address}</code></a>. You may send funds to this address if you wish to top up your account, and can view your current balance and transaction history on <a href=\"https://nanocrawler.cc/explorer/account/{address}/history\">NanoCrawler</a>.</p>\n+<p>Attached is a ZIP file containing your account and seed, encrypted using your one-time password. <strong>Do not lose or give away your seed</strong>, as you will lose access to your funds.</p>\n\\ No newline at end of file"
  },
  {
    "sha": "463f6b756efc2df780179f56ad5a141794a7701e",
    "filename": "server_extensions_extra/src/main/resources/nano.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GENERALBYTESCOM/batm_public/blob/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/resources/nano.png",
    "raw_url": "https://github.com/GENERALBYTESCOM/batm_public/raw/850a625774c88563f10d55cf5d905763ac2c202a/server_extensions_extra/src/main/resources/nano.png",
    "contents_url": "https://api.github.com/repos/GENERALBYTESCOM/batm_public/contents/server_extensions_extra/src/main/resources/nano.png?ref=850a625774c88563f10d55cf5d905763ac2c202a"
  }
]
