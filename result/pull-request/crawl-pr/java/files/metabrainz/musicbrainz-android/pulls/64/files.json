[
  {
    "sha": "54d58897717e9e3ea651b80593b7b6edeadc34a6",
    "filename": "app/src/main/java/org/metabrainz/mobile/data/di/LookupRepositoryModule.java",
    "status": "removed",
    "additions": 0,
    "deletions": 16,
    "changes": 16,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/data/di/LookupRepositoryModule.java",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/data/di/LookupRepositoryModule.java",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/data/di/LookupRepositoryModule.java?ref=b49b5510f6edafb73079f195efcb1e71cef5cc36",
    "patch": "@@ -1,16 +0,0 @@\n-package org.metabrainz.mobile.data.di;\n-\n-import org.metabrainz.mobile.data.repository.LookupRepository;\n-import org.metabrainz.mobile.data.repository.LookupRepositoryImpl;\n-\n-import dagger.Binds;\n-import dagger.Module;\n-import dagger.hilt.InstallIn;\n-import dagger.hilt.android.components.ActivityRetainedComponent;\n-\n-@Module\n-@InstallIn(ActivityRetainedComponent.class)\n-public abstract class LookupRepositoryModule {\n-    @Binds\n-    public abstract LookupRepository bindsLookupRepository(LookupRepositoryImpl repository);\n-}"
  },
  {
    "sha": "88d80995ad1afbb115b66de08024c08aea6570fc",
    "filename": "app/src/main/java/org/metabrainz/mobile/data/di/LookupRepositoryModule.kt",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/data/di/LookupRepositoryModule.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/data/di/LookupRepositoryModule.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/data/di/LookupRepositoryModule.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -0,0 +1,15 @@\n+package org.metabrainz.mobile.data.di\n+\n+import dagger.hilt.InstallIn\n+import dagger.hilt.android.components.ActivityRetainedComponent\n+import dagger.Binds\n+import dagger.Module\n+import org.metabrainz.mobile.data.repository.LookupRepositoryImpl\n+import org.metabrainz.mobile.data.repository.LookupRepository\n+\n+@Module\n+@InstallIn(ActivityRetainedComponent::class)\n+abstract class LookupRepositoryModule {\n+    @Binds\n+    abstract fun bindsLookupRepository(repository: LookupRepositoryImpl?): LookupRepository?\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4733eccef9bed6e02c819d2214c1ae88cfd763ac",
    "filename": "app/src/main/java/org/metabrainz/mobile/data/repository/LoginRepository.java",
    "status": "removed",
    "additions": 0,
    "deletions": 76,
    "changes": 76,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/data/repository/LoginRepository.java",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/data/repository/LoginRepository.java",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/data/repository/LoginRepository.java?ref=b49b5510f6edafb73079f195efcb1e71cef5cc36",
    "patch": "@@ -1,76 +0,0 @@\n-package org.metabrainz.mobile.data.repository;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.MutableLiveData;\n-\n-import org.metabrainz.mobile.data.sources.api.LoginService;\n-import org.metabrainz.mobile.data.sources.api.MusicBrainzServiceGenerator;\n-import org.metabrainz.mobile.data.sources.api.entities.AccessToken;\n-import org.metabrainz.mobile.data.sources.api.entities.userdata.UserInfo;\n-\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-@Singleton\n-public class LoginRepository {\n-\n-    private final LoginService service;\n-    private final MutableLiveData<AccessToken> accessTokenLiveData;\n-    private final MutableLiveData<UserInfo> userInfoLiveData;\n-\n-    @Inject\n-    public LoginRepository(LoginService service) {\n-        this.service = service;\n-        accessTokenLiveData = new MutableLiveData<>();\n-        userInfoLiveData = new MutableLiveData<>();\n-    }\n-\n-    public MutableLiveData<AccessToken> getAccessTokenLiveData() {\n-        return accessTokenLiveData;\n-    }\n-\n-    public MutableLiveData<UserInfo> getUserInfoLiveData() {\n-        return userInfoLiveData;\n-    }\n-\n-    public void fetchAccessToken(String code) {\n-        service.getAccessToken(MusicBrainzServiceGenerator.AUTH_BASE_URL + \"token\",\n-                code,\n-                \"authorization_code\",\n-                MusicBrainzServiceGenerator.CLIENT_ID,\n-                MusicBrainzServiceGenerator.CLIENT_SECRET,\n-                MusicBrainzServiceGenerator.OAUTH_REDIRECT_URI)\n-                .enqueue(new Callback<AccessToken>() {\n-                    @Override\n-                    public void onResponse(@NonNull Call<AccessToken> call, @NonNull Response<AccessToken> response) {\n-                        AccessToken token = response.body();\n-                        accessTokenLiveData.setValue(token);\n-                    }\n-\n-                    @Override\n-                    public void onFailure(@NonNull Call<AccessToken> call, @NonNull Throwable t) {\n-                        t.printStackTrace();\n-                    }\n-                });\n-    }\n-\n-    public void fetchUserInfo() {\n-        service.getUserInfo().enqueue(new Callback<UserInfo>() {\n-            @Override\n-            public void onResponse(@NonNull Call<UserInfo> call, @NonNull Response<UserInfo> response) {\n-                UserInfo info = response.body();\n-                userInfoLiveData.postValue(info);\n-            }\n-\n-            @Override\n-            public void onFailure(@NonNull Call<UserInfo> call, @NonNull Throwable t) {\n-\n-            }\n-        });\n-    }\n-\n-}"
  },
  {
    "sha": "33076aad1075ea6dbe5e374496b59de68ce35003",
    "filename": "app/src/main/java/org/metabrainz/mobile/data/repository/LoginRepository.kt",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/data/repository/LoginRepository.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/data/repository/LoginRepository.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/data/repository/LoginRepository.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -0,0 +1,48 @@\n+package org.metabrainz.mobile.data.repository\n+\n+import androidx.lifecycle.MutableLiveData\n+import org.metabrainz.mobile.data.sources.api.LoginService\n+import org.metabrainz.mobile.data.sources.api.MusicBrainzServiceGenerator\n+import org.metabrainz.mobile.data.sources.api.entities.AccessToken\n+import org.metabrainz.mobile.data.sources.api.entities.userdata.UserInfo\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+import javax.inject.Singleton\n+\n+@Singleton\n+class LoginRepository @Inject constructor(private val service: LoginService) {\n+    val accessTokenLiveData: MutableLiveData<AccessToken?> = MutableLiveData()\n+    val userInfoLiveData: MutableLiveData<UserInfo?> = MutableLiveData()\n+    fun fetchAccessToken(code: String?) {\n+        service.getAccessToken(MusicBrainzServiceGenerator.AUTH_BASE_URL + \"token\",\n+                code,\n+                \"authorization_code\",\n+                MusicBrainzServiceGenerator.CLIENT_ID,\n+                MusicBrainzServiceGenerator.CLIENT_SECRET,\n+                MusicBrainzServiceGenerator.OAUTH_REDIRECT_URI)\n+                .enqueue(object : Callback<AccessToken?> {\n+                    override fun onResponse(call: Call<AccessToken?>, response: Response<AccessToken?>) {\n+                        val token = response.body()\n+                        accessTokenLiveData.value = token\n+                    }\n+\n+                    override fun onFailure(call: Call<AccessToken?>, t: Throwable) {\n+                        t.printStackTrace()\n+                    }\n+                })\n+    }\n+\n+    fun fetchUserInfo() {\n+        service.userInfo.enqueue(object : Callback<UserInfo?> {\n+            override fun onResponse(call: Call<UserInfo?>, response: Response<UserInfo?>) {\n+                val info = response.body()\n+                userInfoLiveData.postValue(info)\n+            }\n+\n+            override fun onFailure(call: Call<UserInfo?>, t: Throwable) {}\n+        })\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2a8be2c9db90db541747c933a9bf0ea1b80bbc2f",
    "filename": "app/src/main/java/org/metabrainz/mobile/data/repository/TaggerRepository.java",
    "status": "removed",
    "additions": 0,
    "deletions": 96,
    "changes": 96,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/data/repository/TaggerRepository.java",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/data/repository/TaggerRepository.java",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/data/repository/TaggerRepository.java?ref=b49b5510f6edafb73079f195efcb1e71cef5cc36",
    "patch": "@@ -1,96 +0,0 @@\n-package org.metabrainz.mobile.data.repository;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.MutableLiveData;\n-\n-import org.metabrainz.mobile.data.sources.Constants;\n-import org.metabrainz.mobile.data.sources.api.TaggerService;\n-import org.metabrainz.mobile.data.sources.api.entities.acoustid.AcoustIDResponse;\n-import org.metabrainz.mobile.data.sources.api.entities.acoustid.Result;\n-import org.metabrainz.mobile.data.sources.api.entities.mbentity.Recording;\n-import org.metabrainz.mobile.data.sources.api.entities.mbentity.Release;\n-import org.metabrainz.mobile.data.sources.api.entities.response.RecordingSearchResponse;\n-import org.metabrainz.mobile.util.TaggerUtils;\n-\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.metabrainz.mobile.data.sources.api.MusicBrainzServiceGenerator.ACOUST_ID_KEY;\n-\n-@Singleton\n-public class TaggerRepository {\n-\n-    private final TaggerService service;\n-\n-    @Inject\n-    public TaggerRepository(TaggerService service) {\n-        this.service = service;\n-    }\n-\n-    public LiveData<List<Recording>> fetchRecordings(String query) {\n-        MutableLiveData<List<Recording>> recordingResponseData = new MutableLiveData<>();\n-        service.searchRecording(query, Constants.LIMIT).enqueue(new Callback<RecordingSearchResponse>() {\n-            @Override\n-            public void onResponse(@NonNull Call<RecordingSearchResponse> call, @NonNull Response<RecordingSearchResponse> response) {\n-                try {\n-                    RecordingSearchResponse data = response.body();\n-                    recordingResponseData.setValue(data.getRecordings());\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(@NonNull Call<RecordingSearchResponse> call, @NonNull Throwable t) {}\n-        });\n-        return recordingResponseData;\n-    }\n-\n-\n-    public LiveData<Release> fetchMatchedRelease(String MBID) {\n-        MutableLiveData<Release> matchedReleaseData = new MutableLiveData<>();\n-        service.lookupRecording(MBID, Constants.TAGGER_RELEASE_PARAMS).enqueue(new Callback<Release>() {\n-            @Override\n-            public void onResponse(@NonNull Call<Release> call, @NonNull Response<Release> response) {\n-                try {\n-                    Release release = response.body();\n-                    matchedReleaseData.setValue(release);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(@NonNull Call<Release> call, @NonNull Throwable t) {}\n-        });\n-        return matchedReleaseData;\n-    }\n-\n-    public LiveData<List<Recording>> fetchAcoustIDResults(long duration, String fingerprint) {\n-        MutableLiveData<List<Recording>> recordingResponseData = new MutableLiveData<>();\n-        service.lookupFingerprint(ACOUST_ID_KEY, Constants.ACOUST_ID_RESPONSE_PARAMS, duration, fingerprint)\n-            .enqueue(new Callback<AcoustIDResponse>() {\n-                @Override\n-                public void onResponse(@NonNull Call<AcoustIDResponse> call, @NonNull Response<AcoustIDResponse> response) {\n-                    try{\n-                        List<Result> result = response.body().getResults();\n-                        recordingResponseData.setValue(TaggerUtils.parseResults(result));\n-                    }catch(Exception e){\n-                        e.printStackTrace();\n-                    }\n-                }\n-\n-                @Override\n-                public void onFailure(@NonNull Call<AcoustIDResponse> call, @NonNull Throwable t) {}\n-            });\n-        return recordingResponseData;\n-    }\n-\n-}"
  },
  {
    "sha": "ab400feb90ecd9c364442a9e0779b11ac89b1729",
    "filename": "app/src/main/java/org/metabrainz/mobile/data/repository/TaggerRepository.kt",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/data/repository/TaggerRepository.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/data/repository/TaggerRepository.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/data/repository/TaggerRepository.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -0,0 +1,72 @@\n+package org.metabrainz.mobile.data.repository\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import org.metabrainz.mobile.data.sources.Constants\n+import org.metabrainz.mobile.data.sources.api.MusicBrainzServiceGenerator.ACOUST_ID_KEY\n+import org.metabrainz.mobile.data.sources.api.TaggerService\n+import org.metabrainz.mobile.data.sources.api.entities.acoustid.AcoustIDResponse\n+import org.metabrainz.mobile.data.sources.api.entities.mbentity.Recording\n+import org.metabrainz.mobile.data.sources.api.entities.mbentity.Release\n+import org.metabrainz.mobile.data.sources.api.entities.response.RecordingSearchResponse\n+import org.metabrainz.mobile.util.TaggerUtils\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+import javax.inject.Singleton\n+\n+@Singleton\n+class TaggerRepository @Inject constructor(private val service: TaggerService) {\n+    fun fetchRecordings(query: String?): LiveData<List<Recording>> {\n+        val recordingResponseData = MutableLiveData<List<Recording>>()\n+        service.searchRecording(query, Constants.LIMIT).enqueue(object : Callback<RecordingSearchResponse?> {\n+            override fun onResponse(call: Call<RecordingSearchResponse?>, response: Response<RecordingSearchResponse?>) {\n+                try {\n+                    val data = response.body()\n+                    recordingResponseData.setValue(data!!.recordings)\n+                } catch (e: Exception) {\n+                    e.printStackTrace()\n+                }\n+            }\n+\n+            override fun onFailure(call: Call<RecordingSearchResponse?>, t: Throwable) {}\n+        })\n+        return recordingResponseData\n+    }\n+\n+    fun fetchMatchedRelease(MBID: String?): LiveData<Release?> {\n+        val matchedReleaseData = MutableLiveData<Release?>()\n+        service.lookupRecording(MBID, Constants.TAGGER_RELEASE_PARAMS).enqueue(object : Callback<Release?> {\n+            override fun onResponse(call: Call<Release?>, response: Response<Release?>) {\n+                try {\n+                    val release = response.body()\n+                    matchedReleaseData.setValue(release)\n+                } catch (e: Exception) {\n+                    e.printStackTrace()\n+                }\n+            }\n+\n+            override fun onFailure(call: Call<Release?>, t: Throwable) {}\n+        })\n+        return matchedReleaseData\n+    }\n+\n+    fun fetchAcoustIDResults(duration: Long, fingerprint: String?): LiveData<List<Recording>> {\n+        val recordingResponseData = MutableLiveData<List<Recording>>()\n+        service.lookupFingerprint(ACOUST_ID_KEY, Constants.ACOUST_ID_RESPONSE_PARAMS, duration, fingerprint)\n+                .enqueue(object : Callback<AcoustIDResponse> {\n+                    override fun onResponse(call: Call<AcoustIDResponse>, response: Response<AcoustIDResponse>) {\n+                        try {\n+                            val result = response.body()!!.results\n+                            recordingResponseData.setValue(TaggerUtils.parseResults(result))\n+                        } catch (e: Exception) {\n+                            e.printStackTrace()\n+                        }\n+                    }\n+\n+                    override fun onFailure(call: Call<AcoustIDResponse>, t: Throwable) {}\n+                })\n+        return recordingResponseData\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "59406676b8c1367b5bbd5a351a3d12dfc0fd4121",
    "filename": "app/src/main/java/org/metabrainz/mobile/presentation/Configuration.java",
    "status": "removed",
    "additions": 0,
    "deletions": 21,
    "changes": 21,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/presentation/Configuration.java",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/presentation/Configuration.java",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/presentation/Configuration.java?ref=b49b5510f6edafb73079f195efcb1e71cef5cc36",
    "patch": "@@ -1,21 +0,0 @@\n-package org.metabrainz.mobile.presentation;\n-\n-public class Configuration {\n-\n-    public static final boolean LIVE = false;\n-    public static final String TAG = \"MusicBrainz\";\n-\n-    public static final String FEEDBACK_EMAIL = \"support@metabrainz.org\";\n-    public static final String FEEDBACK_SUBJECT = \"[MBAndroid] Feedback\";\n-\n-    public static final String USER_AGENT = \"MusicBrainzAndroid\";\n-    public static final String CLIENT_NAME = \"org.metabrainz.mobile\";\n-\n-    private static final String WEBSITE = \"http://metabrainz.org/\";\n-\n-    public static final String URL_DONATE = \"http://metabrainz.org/donate\";\n-\n-    public static final String ARTIST_SHARE = WEBSITE + \"artist/\";\n-    public static final String RELEASE_SHARE = WEBSITE + \"release/\";\n-\n-}"
  },
  {
    "sha": "232e761410b69407bdfa3af8bc7778dc5d17485e",
    "filename": "app/src/main/java/org/metabrainz/mobile/presentation/Configuration.kt",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/presentation/Configuration.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/presentation/Configuration.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/presentation/Configuration.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -0,0 +1,14 @@\n+package org.metabrainz.mobile.presentation\n+\n+object Configuration {\n+    const val LIVE = false\n+    const val TAG = \"MusicBrainz\"\n+    const val FEEDBACK_EMAIL = \"support@metabrainz.org\"\n+    const val FEEDBACK_SUBJECT = \"[MBAndroid] Feedback\"\n+    const val USER_AGENT = \"MusicBrainzAndroid\"\n+    const val CLIENT_NAME = \"org.metabrainz.mobile\"\n+    private const val WEBSITE = \"http://metabrainz.org/\"\n+    const val URL_DONATE = \"http://metabrainz.org/donate\"\n+    const val ARTIST_SHARE = WEBSITE + \"artist/\"\n+    const val RELEASE_SHARE = WEBSITE + \"release/\"\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "58e450f5ff9a93c7fbe12b7230c254e3fc85ae7c",
    "filename": "app/src/main/java/org/metabrainz/mobile/presentation/features/tagger/TaggerViewModel.kt",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/presentation/features/tagger/TaggerViewModel.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/presentation/features/tagger/TaggerViewModel.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/presentation/features/tagger/TaggerViewModel.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -18,7 +18,6 @@ import org.metabrainz.mobile.data.sources.api.entities.mbentity.Release\n import org.metabrainz.mobile.util.ComparisionResult\n import org.metabrainz.mobile.util.Metadata\n import org.metabrainz.mobile.util.TaggerUtils\n-import java.net.URI\n \n \n class TaggerViewModel @ViewModelInject constructor(\n@@ -60,7 +59,7 @@ class TaggerViewModel @ViewModelInject constructor(\n         //Log.d(recordings.toString())\n \n         if (comparisionResult.releaseMbid != null\n-                && comparisionResult.releaseMbid.isNotEmpty()\n+                && comparisionResult.releaseMbid!!.isNotEmpty()\n                 && comparisionResult.score > TaggerUtils.THRESHOLD)\n             return comparisionResult\n         return null"
  },
  {
    "sha": "c5d625a98c3a8c93335d92672fb634cb4457f981",
    "filename": "app/src/main/java/org/metabrainz/mobile/presentation/view/HtmlAssetTextView.java",
    "status": "removed",
    "additions": 0,
    "deletions": 24,
    "changes": 24,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/presentation/view/HtmlAssetTextView.java",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/presentation/view/HtmlAssetTextView.java",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/presentation/view/HtmlAssetTextView.java?ref=b49b5510f6edafb73079f195efcb1e71cef5cc36",
    "patch": "@@ -1,24 +0,0 @@\n-package org.metabrainz.mobile.presentation.view;\n-\n-import android.content.Context;\n-import android.text.Html;\n-import android.util.AttributeSet;\n-\n-import androidx.appcompat.widget.AppCompatTextView;\n-\n-import org.metabrainz.mobile.util.Utils;\n-\n-public class HtmlAssetTextView extends AppCompatTextView {\n-\n-    private final Context context;\n-\n-    public HtmlAssetTextView(Context context, AttributeSet attrs) {\n-        super(context, attrs);\n-        this.context = context;\n-    }\n-\n-    public void setAsset(String asset) {\n-        setText(Html.fromHtml(Utils.stringFromAsset(context, asset)));\n-    }\n-\n-}"
  },
  {
    "sha": "c8b5e55ab6056a063f9177e5c5cb2face597674d",
    "filename": "app/src/main/java/org/metabrainz/mobile/presentation/view/HtmlAssetTextView.kt",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/presentation/view/HtmlAssetTextView.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/presentation/view/HtmlAssetTextView.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/presentation/view/HtmlAssetTextView.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -0,0 +1,13 @@\n+package org.metabrainz.mobile.presentation.view\n+\n+import android.content.Context\n+import android.text.Html\n+import android.util.AttributeSet\n+import androidx.appcompat.widget.AppCompatTextView\n+import org.metabrainz.mobile.util.Utils\n+\n+class HtmlAssetTextView(context: Context, attrs: AttributeSet?) : AppCompatTextView(context, attrs) {\n+    fun setAsset(asset: String?) {\n+        text = Html.fromHtml(Utils.stringFromAsset(context, asset))\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0019bce07a898e0f759997cb846663e1e7c73c2d",
    "filename": "app/src/main/java/org/metabrainz/mobile/presentation/view/RobotoLightTextView.java",
    "status": "removed",
    "additions": 0,
    "deletions": 34,
    "changes": 34,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/presentation/view/RobotoLightTextView.java",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/presentation/view/RobotoLightTextView.java",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/presentation/view/RobotoLightTextView.java?ref=b49b5510f6edafb73079f195efcb1e71cef5cc36",
    "patch": "@@ -1,34 +0,0 @@\n-package org.metabrainz.mobile.presentation.view;\n-\n-import android.content.Context;\n-import android.graphics.Typeface;\n-import android.util.AttributeSet;\n-\n-import androidx.appcompat.widget.AppCompatTextView;\n-\n-import org.metabrainz.mobile.App;\n-\n-public class RobotoLightTextView extends AppCompatTextView {\n-\n-    public RobotoLightTextView(Context context) {\n-        super(context);\n-    }\n-\n-    public RobotoLightTextView(Context context, AttributeSet attrs) {\n-        super(context, attrs);\n-    }\n-\n-    public RobotoLightTextView(Context context, AttributeSet attrs, int defStyle) {\n-        super(context, attrs, defStyle);\n-    }\n-\n-    @Override\n-    public void setTypeface(Typeface tf) {\n-        if (isInEditMode()) {\n-            super.setTypeface(tf);\n-        } else {\n-            super.setTypeface(App.getRobotoLight());\n-        }\n-    }\n-\n-}"
  },
  {
    "sha": "c767d50c84ec3c48ffce2c9d6555185f631bce3e",
    "filename": "app/src/main/java/org/metabrainz/mobile/presentation/view/RobotoLightTextView.kt",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/presentation/view/RobotoLightTextView.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/presentation/view/RobotoLightTextView.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/presentation/view/RobotoLightTextView.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -0,0 +1,21 @@\n+package org.metabrainz.mobile.presentation.view\n+\n+import android.content.Context\n+import android.graphics.Typeface\n+import android.util.AttributeSet\n+import androidx.appcompat.widget.AppCompatTextView\n+import org.metabrainz.mobile.App\n+\n+class RobotoLightTextView : AppCompatTextView {\n+    constructor(context: Context?) : super(context!!)\n+    constructor(context: Context?, attrs: AttributeSet?) : super(context!!, attrs)\n+    constructor(context: Context?, attrs: AttributeSet?, defStyle: Int) : super(context!!, attrs, defStyle)\n+\n+    override fun setTypeface(tf: Typeface?) {\n+        if (isInEditMode) {\n+            super.setTypeface(tf)\n+        } else {\n+            super.setTypeface(App.getRobotoLight())\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b75a75b37ef8eab2b59e8000fc80b7592502e4bd",
    "filename": "app/src/main/java/org/metabrainz/mobile/util/ComparisionResult.java",
    "status": "removed",
    "additions": 0,
    "deletions": 37,
    "changes": 37,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/util/ComparisionResult.java",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/util/ComparisionResult.java",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/util/ComparisionResult.java?ref=b49b5510f6edafb73079f195efcb1e71cef5cc36",
    "patch": "@@ -1,37 +0,0 @@\n-package org.metabrainz.mobile.util;\n-\n-public class ComparisionResult {\n-    private double score;\n-    private String releaseMbid;\n-    private String trackMbid;\n-\n-    public ComparisionResult(double score, String releaseMbid, String trackMbid) {\n-        this.score = score;\n-        this.releaseMbid = releaseMbid;\n-        this.trackMbid = trackMbid;\n-    }\n-\n-    public double getScore() {\n-        return score;\n-    }\n-\n-    public void setScore(double score) {\n-        this.score = score;\n-    }\n-\n-    public String getReleaseMbid() {\n-        return releaseMbid;\n-    }\n-\n-    public void setReleaseMbid(String releaseMbid) {\n-        this.releaseMbid = releaseMbid;\n-    }\n-\n-    public String getTrackMbid() {\n-        return trackMbid;\n-    }\n-\n-    public void setTrackMbid(String trackMbid) {\n-        this.trackMbid = trackMbid;\n-    }\n-}"
  },
  {
    "sha": "9b00ba5ca0b1ec66bb920eb6d3160238fbd9b8b4",
    "filename": "app/src/main/java/org/metabrainz/mobile/util/ComparisionResult.kt",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/util/ComparisionResult.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/util/ComparisionResult.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/util/ComparisionResult.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -0,0 +1,3 @@\n+package org.metabrainz.mobile.util\n+\n+class ComparisionResult(var score: Double, var releaseMbid: String?, var trackMbid: String?)\n\\ No newline at end of file"
  },
  {
    "sha": "b625d4a1d34abd05910587726debb7d456bc3557",
    "filename": "app/src/main/java/org/metabrainz/mobile/util/Log.java",
    "status": "removed",
    "additions": 0,
    "deletions": 21,
    "changes": 21,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/util/Log.java",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/b49b5510f6edafb73079f195efcb1e71cef5cc36/app/src/main/java/org/metabrainz/mobile/util/Log.java",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/util/Log.java?ref=b49b5510f6edafb73079f195efcb1e71cef5cc36",
    "patch": "@@ -1,21 +0,0 @@\n-package org.metabrainz.mobile.util;\n-\n-import org.metabrainz.mobile.presentation.Configuration;\n-\n-public class Log {\n-\n-    private static final String TAG = Configuration.TAG;\n-\n-    public static void e(String message) {\n-        android.util.Log.e(TAG, message);\n-    }\n-\n-    public static void d(String message) {\n-        android.util.Log.d(TAG, message);\n-    }\n-\n-    public static void v(String message) {\n-        android.util.Log.v(TAG, message);\n-    }\n-\n-}"
  },
  {
    "sha": "89e995d664e7143099262f7200be9c0cb50891c9",
    "filename": "app/src/main/java/org/metabrainz/mobile/util/Log.kt",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/metabrainz/musicbrainz-android/blob/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/util/Log.kt",
    "raw_url": "https://github.com/metabrainz/musicbrainz-android/raw/f10894a66be79fd77fae6e0970a5810c4f591a68/app/src/main/java/org/metabrainz/mobile/util/Log.kt",
    "contents_url": "https://api.github.com/repos/metabrainz/musicbrainz-android/contents/app/src/main/java/org/metabrainz/mobile/util/Log.kt?ref=f10894a66be79fd77fae6e0970a5810c4f591a68",
    "patch": "@@ -0,0 +1,21 @@\n+package org.metabrainz.mobile.util\n+\n+import android.util.Log\n+import org.metabrainz.mobile.presentation.Configuration\n+\n+object Log {\n+    private const val TAG = Configuration.TAG\n+    @JvmStatic\n+    fun e(message: String?) {\n+        Log.e(TAG, message!!)\n+    }\n+\n+    @JvmStatic\n+    fun d(message: String?) {\n+        Log.d(TAG, message!!)\n+    }\n+\n+    fun v(message: String?) {\n+        Log.v(TAG, message!!)\n+    }\n+}\n\\ No newline at end of file"
  }
]
