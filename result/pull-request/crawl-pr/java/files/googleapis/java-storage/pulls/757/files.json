[
  {
    "sha": "2f6a5bc1c12dc6cbb1a6a57e7b46223d8087b83a",
    "filename": "google-cloud-storage/src/test/java/com/google/cloud/storage/RetryConformanceTest.java",
    "status": "added",
    "additions": 241,
    "deletions": 0,
    "changes": 241,
    "blob_url": "https://github.com/googleapis/java-storage/blob/2e905893ab0bc707d24138b4886f401b082ad1ba/google-cloud-storage/src/test/java/com/google/cloud/storage/RetryConformanceTest.java",
    "raw_url": "https://github.com/googleapis/java-storage/raw/2e905893ab0bc707d24138b4886f401b082ad1ba/google-cloud-storage/src/test/java/com/google/cloud/storage/RetryConformanceTest.java",
    "contents_url": "https://api.github.com/repos/googleapis/java-storage/contents/google-cloud-storage/src/test/java/com/google/cloud/storage/RetryConformanceTest.java?ref=2e905893ab0bc707d24138b4886f401b082ad1ba",
    "patch": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.storage;\n+\n+import static com.google.common.collect.Lists.newArrayList;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.gax.retrying.RetrySettings;\n+import com.google.api.gax.rpc.FixedHeaderProvider;\n+import com.google.common.collect.ImmutableMap;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class RetryConformanceTest {\n+\n+  private static final String PROJECT_ID = \"myproj\";\n+  private static final String BUCKET_NAME = \"test-bucket\";\n+  private static final String OBJECT_NAME = \"file.txt\";\n+  private static final Map<String, BiFunc> funcMap = new ImmutableMap.Builder<String, BiFunc>()\n+      .put(\"storage.objects.get\", new BiFunc() {\n+        @Override\n+        public void apply(Storage s, TestCaseConfig c) {\n+          final BlobId blobId;\n+          if (c.preconditionsProvided) {\n+            blobId = BlobId.of(BUCKET_NAME, OBJECT_NAME, 0L);\n+          } else {\n+            blobId = BlobId.of(BUCKET_NAME, OBJECT_NAME);\n+          }\n+          Blob blob = s.get(blobId);\n+          assertNotNull(blob);\n+          Map<String, String> metadata = blob.getMetadata();\n+        }\n+      })\n+      .build();\n+\n+  private final TestCaseConfig testCaseConfig;\n+\n+  /**\n+   * @param description Not used by the test, but used by the parameterized test runner as the name\n+   *     of the test.\n+   */\n+  public RetryConformanceTest(@SuppressWarnings(\"unused\") String description, TestCaseConfig testCaseConfig) {\n+    this.testCaseConfig = testCaseConfig;\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Storage setupStorage = newStorage(false);\n+    Bucket bucket = setupStorage.create(BucketInfo.of(BUCKET_NAME));\n+    bucket.create(OBJECT_NAME, \"abcdef\".getBytes(StandardCharsets.UTF_8));\n+  }\n+\n+  @Test\n+  public void test() {\n+    BiFunc func = funcMap.get(testCaseConfig.method);\n+    assertNotNull(String.format(\"Unable to find func for method '%s'\", testCaseConfig.method), func);\n+    Storage storage = newStorage(true);\n+    if (testCaseConfig.expectSuccess) {\n+      func.apply(storage, testCaseConfig);\n+    } else {\n+      try {\n+        func.apply(storage, testCaseConfig);\n+        fail(\"expected failure, but succeeded\");\n+      } catch (Exception e) {\n+        // pass\n+      }\n+    }\n+  }\n+\n+  private Storage newStorage(boolean forTest) {\n+    StorageOptions.Builder builder = StorageOptions.newBuilder()\n+        .setHost(\"http://localhost:9000\");\n+    if (forTest) {\n+      builder\n+          .setHeaderProvider(new FixedHeaderProvider() {\n+            @Override\n+            public Map<String, String> getHeaders() {\n+              return ImmutableMap.of(\n+                  \"x-goog-testbench-instructions\", testCaseConfig.instruction,\n+                  \"User-Agent\", \"custom-user-agent\"\n+              );\n+            }\n+          })\n+          .setRetrySettings(\n+              RetrySettings.newBuilder()\n+                  .setMaxAttempts(testCaseConfig.forcedRetries + 1)\n+                  .build()\n+          );\n+    } else {\n+      builder\n+          .setHeaderProvider(new FixedHeaderProvider() {\n+            @Override\n+            public Map<String, String> getHeaders() {\n+              return ImmutableMap.of(\n+                  \"User-Agent\", \"java-conformance-tests/\"\n+              );\n+            }\n+          })\n+          .setRetrySettings(\n+              RetrySettings.newBuilder()\n+                  .setMaxAttempts(1)\n+                  .build()\n+          );\n+    }\n+    return builder.build().getService();\n+  }\n+\n+  /**\n+   * Load all of the tests and return a {@code Collection<Object[]>} representing the set of tests.\n+   * Each entry in the returned collection is the set of parameters to the constructor of this test\n+   * class.\n+   *\n+   * <p>The results of this method will then be run by JUnit's Parameterized test runner\n+   */\n+  @Parameters(name = \"{0}\")\n+  public static Collection<Object[]> testCases() throws IOException {\n+\n+    List<RetryCase> tests = newArrayList(\n+        new RetryCase(\n+            \"retry idempotent operations\",\n+            newArrayList(\"return-503\", \"return-504\"),\n+            newArrayList(\"storage.objects.get\"),\n+            4,\n+            false,\n+            true\n+        ),\n+        new RetryCase(\n+            \"retry Non-idempotent operations\",\n+            newArrayList(\"return-503\", \"return-504\"),\n+            newArrayList(\"storage.objects.patch\"),\n+            4,\n+            true,\n+            true\n+        ),\n+        new RetryCase(\n+            \"retry Non-idempotent operations\",\n+            newArrayList(\"return-503\", \"return-504\"),\n+            newArrayList(\"storage.objects.get\"),\n+            1,\n+            false,\n+            false\n+        )\n+    );\n+    List<Object[]> data = new ArrayList<>(tests.size());\n+    for (RetryCase test : tests) {\n+      for (String i : test.instructions) {\n+        for (String m : test.methods) {\n+          String testName = String.format(\"[%s] %s\", test.description, i);\n+          data.add(new Object[] {testName, new TestCaseConfig(\n+              i, m, test.forcedRetries, test.preconditionsProvided, test.expectSuccess\n+          )});\n+        }\n+      }\n+    }\n+    return data;\n+  }\n+\n+  private static final class RetryCase {\n+    private final String description;\n+    private final List<String> instructions;\n+    private final List<String> methods;\n+    private final int forcedRetries;\n+    private final boolean preconditionsProvided;\n+    private final boolean expectSuccess;\n+\n+    public RetryCase(String description, List<String> instructions,\n+        List<String> methods, int forcedRetries, boolean preconditionsProvided,\n+        boolean expectSuccess) {\n+      this.description = description;\n+      this.instructions = instructions;\n+      this.methods = methods;\n+      this.forcedRetries = forcedRetries;\n+      this.preconditionsProvided = preconditionsProvided;\n+      this.expectSuccess = expectSuccess;\n+    }\n+  }\n+\n+  private static final class RetryCase2 {\n+    private String description;\n+    private List<Assertion> asseretions;\n+    private List<Scenario> scenarios;\n+    private int forcedRetries;\n+    private boolean preconditionsProvided;\n+    private boolean expectSuccess;\n+  }\n+\n+  private static final class Scenario {\n+    private String instruction;\n+    private String method;\n+    private List<Assertion> assertions;\n+  }\n+\n+  private static final class Assertion {\n+  }\n+\n+  private static final class TestCaseConfig {\n+    private final String instruction;\n+    private final String method;\n+    private final int forcedRetries;\n+    private final boolean preconditionsProvided;\n+    private final boolean expectSuccess;\n+\n+    public TestCaseConfig(String instruction, String method, int forcedRetries,\n+        boolean preconditionsProvided, boolean expectSuccess) {\n+      this.instruction = instruction;\n+      this.method = method;\n+      this.forcedRetries = forcedRetries;\n+      this.preconditionsProvided = preconditionsProvided;\n+      this.expectSuccess = expectSuccess;\n+    }\n+  }\n+\n+  private interface BiFunc {\n+    void apply(Storage s, TestCaseConfig c);\n+  }\n+}"
  }
]
