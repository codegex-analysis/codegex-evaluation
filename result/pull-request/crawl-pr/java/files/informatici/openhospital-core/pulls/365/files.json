[
  {
    "sha": "3d6c60fc7c7f7d93a15e74bb8c7274851ee4d953",
    "filename": "src/main/java/org/isf/stat/manager/JasperReportsManager.java",
    "status": "modified",
    "additions": 230,
    "deletions": 64,
    "changes": 294,
    "blob_url": "https://github.com/informatici/openhospital-core/blob/0218130bbc0b74330c159ae7887a88e5d5bd19ac/src/main/java/org/isf/stat/manager/JasperReportsManager.java",
    "raw_url": "https://github.com/informatici/openhospital-core/raw/0218130bbc0b74330c159ae7887a88e5d5bd19ac/src/main/java/org/isf/stat/manager/JasperReportsManager.java",
    "contents_url": "https://api.github.com/repos/informatici/openhospital-core/contents/src/main/java/org/isf/stat/manager/JasperReportsManager.java?ref=0218130bbc0b74330c159ae7887a88e5d5bd19ac",
    "patch": "@@ -28,13 +28,17 @@\n import java.text.Format;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.MissingResourceException;\n import java.util.ResourceBundle;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import javax.sql.DataSource;\n \n@@ -43,6 +47,7 @@\n import org.isf.hospital.manager.HospitalBrowsingManager;\n import org.isf.hospital.model.Hospital;\n import org.isf.medicals.model.Medical;\n+import org.isf.patient.model.Patient;\n import org.isf.stat.dto.JasperReportResultDto;\n import org.isf.utils.db.DbQueryLogger;\n import org.isf.utils.db.UTF8Control;\n@@ -59,13 +64,17 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import net.sf.jasperreports.engine.JRBand;\n+import net.sf.jasperreports.engine.JRChild;\n import net.sf.jasperreports.engine.JRException;\n+import net.sf.jasperreports.engine.JRExpressionChunk;\n import net.sf.jasperreports.engine.JRParameter;\n import net.sf.jasperreports.engine.JRQuery;\n import net.sf.jasperreports.engine.JasperExportManager;\n import net.sf.jasperreports.engine.JasperFillManager;\n import net.sf.jasperreports.engine.JasperPrint;\n import net.sf.jasperreports.engine.JasperReport;\n+import net.sf.jasperreports.engine.base.JRBaseSubreport;\n import net.sf.jasperreports.engine.util.JRLoader;\n \n @Component\n@@ -138,6 +147,8 @@ public JasperReportResultDto getGenericReportAdmissionPdf(int admID, int patID,\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n+            addBundleParameter(jasperFileName, parameters);\n+            \n             parameters.put(\"admID\", String.valueOf(admID)); // real param\n             parameters.put(\"patientID\", String.valueOf(patID)); // real param\n \n@@ -157,15 +168,17 @@ public JasperReportResultDto getGenericReportBillZPL(Integer billID, String jasp\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n-            parameters.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);\n             \n+            StringBuilder sbTxtFilename = new StringBuilder(jasperFileName).append(\"Txt\");\n+            addBundleParameter(sbTxtFilename.toString(), parameters);\n+            \n+            parameters.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);\n             parameters.put(\"billID\", String.valueOf(billID)); // real param\n \n             StringBuilder sbFilename = new StringBuilder();\n             sbFilename.append(\"rpt\");\n             sbFilename.append(File.separator);\n-            sbFilename.append(jasperFileName);\n-            sbFilename.append(\"Txt\");\n+            sbFilename.append(sbTxtFilename);\n             sbFilename.append(\".jasper\");\n \n             String txtFilename = \"rpt/PDF/\" + jasperFileName + \"_\" + billID + \".txt\";\n@@ -182,13 +195,15 @@ public JasperReportResultDto getGenericReportBillTxt(Integer billID, String jasp\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n+            StringBuilder sbTxtFilename = new StringBuilder(jasperFileName).append(\"Txt\");\n+            addBundleParameter(sbTxtFilename.toString(), parameters);\n+            \n             parameters.put(\"billID\", String.valueOf(billID)); // real param\n \n             StringBuilder sbFilename = new StringBuilder();\n             sbFilename.append(\"rpt\");\n             sbFilename.append(File.separator);\n-            sbFilename.append(jasperFileName);\n-            sbFilename.append(\"Txt\");\n+            sbFilename.append(sbTxtFilename);\n             sbFilename.append(\".jasper\");\n \n             String txtFilename = \"rpt/PDF/\" + jasperFileName + \"_\" + billID + \".txt\";\n@@ -205,6 +220,8 @@ public JasperReportResultDto getGenericReportBillPdf(Integer billID, String jasp\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n+            addBundleParameter(jasperFileName, parameters);\n+            \n             parameters.put(\"billID\", String.valueOf(billID)); // real param\n \n             String pdfFilename = \"rpt/PDF/\" + jasperFileName + \"_\" + billID + \".pdf\";\n@@ -219,13 +236,63 @@ public JasperReportResultDto getGenericReportBillPdf(Integer billID, String jasp\n         }\n     }\n     \n+    public JasperReportResultDto getGenericReportBillGroupedPdf(Integer billID, String jasperFileName, Patient patient, ArrayList<Integer> billListId, String dateFrom, String dateTo, boolean show, boolean askForPrint) throws OHServiceException {\n+\n+\t\ttry {\n+\t\t\tHashMap<String, Object> parameters = getHospitalParameters();\n+\t\t\taddBundleParameter(jasperFileName, parameters);\n+\n+\t\t\tparameters.put(\"billID\", String.valueOf(billID)); // real param\n+\t\t\tparameters.put(\"collectionbillsId\", billListId); // real param\n+\n+\t\t\tString pdfFilename = \"rpt/PDF/\" + jasperFileName + \"_\" + billID + \".pdf\";\n+\n+\t\t\tJasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n+\t\t\tJasperExportManager.exportReportToPdfFile(result.getJasperPrint(), pdfFilename);\n+\t\t\treturn result;\n+\t\t} catch(Exception e){\n+            //Any exception\n+            throw new OHReportException(e, new OHExceptionMessage(MessageBundle.getMessage(\"angal.hospital\"),\n+                    MessageBundle.getMessage(\"angal.stat.reporterror\"), OHSeverityLevel.ERROR));\n+        }\n+    }\n+    \n+    public JasperReportResultDto getGenericReportBillGroupedTxt(Integer billID, String jasperFileName, Patient patient, ArrayList<Integer> billListId, String dateFrom, String dateTo, boolean show, boolean askForPrint) throws OHServiceException {\n+\n+        try{\n+            HashMap<String, Object> parameters = getHospitalParameters();\n+            \n+            StringBuilder sbTxtFilename = new StringBuilder(jasperFileName).append(\"Txt\");\n+            addBundleParameter(sbTxtFilename.toString(), parameters);\n+            \n+            parameters.put(\"billID\", String.valueOf(billID)); // real param\n+            parameters.put(\"collectionbillsId\", billListId); // real param\n+\n+            StringBuilder sbFilename = new StringBuilder();\n+            sbFilename.append(\"rpt\");\n+            sbFilename.append(File.separator);\n+            sbFilename.append(sbTxtFilename);\n+            sbFilename.append(\".jasper\");\n+\n+            String txtFilename = \"rpt/PDF/\" + jasperFileName + \"_\" + billID + \".txt\";\n+            JasperReportResultDto result = generateJasperReport(sbFilename.toString(), txtFilename, parameters);\n+            return result;\n+        } catch(Exception e){\n+            //Any exception\n+            throw new OHReportException(e, new OHExceptionMessage(MessageBundle.getMessage(\"angal.hospital\"),\n+                    MessageBundle.getMessage(\"angal.stat.reporterror\"), OHSeverityLevel.ERROR));\n+        }\n+    }\n+    \n     \n     \n \n     public JasperReportResultDto getGenericReportOpdPdf(int opdID, int patID, String jasperFileName) throws OHServiceException {\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n+            addBundleParameter(jasperFileName, parameters);\n+            \n             parameters.put(\"opdID\", String.valueOf(opdID)); // real param\n             parameters.put(\"patientID\", String.valueOf(patID)); // real param\n \n@@ -246,6 +313,7 @@ public JasperReportResultDto getGenericReportPatientExaminationPdf(Integer patie\n \n         try{\n         \tHashMap<String, Object> parameters = new HashMap<>();\n+        \taddBundleParameter(jasperFileName, parameters);\n             \n             parameters.put(\"examId\", examId); \n             String pdfFilename = \"rpt/PDF/\"+jasperFileName + \"_\" + patientID +\".pdf\";\n@@ -264,6 +332,8 @@ public JasperReportResultDto getGenericReportPatientPdf(Integer patientID, Strin\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n+            addBundleParameter(jasperFileName, parameters);\n+            \n             parameters.put(\"patientID\", String.valueOf(patientID)); // real param\n \n             String pdfFilename = \"rpt/PDF/\"+jasperFileName + \"_\" + patientID +\".pdf\";\n@@ -281,6 +351,8 @@ public JasperReportResultDto getGenericReportWardVisitPdf(String wardID, Date da\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n+            addBundleParameter(jasperFileName, parameters);\n+            \n             parameters.put(\"wardID\", String.valueOf(wardID)); // real param\n             parameters.put(\"date\", date); // real param\n             String pdfFilename = \"rpt/PDF/\"+jasperFileName + \"_\" + String.valueOf(wardID)+\"_\"+TimeTools.formatDateTime(date, \"yyyyMMdd\")+\".pdf\";\n@@ -304,6 +376,8 @@ public JasperReportResultDto getGenericReportPatientVersion2Pdf(Integer patientI\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n+            addBundleParameter(jasperFileName, parameters);\n+            \n     \t\tFormat formatter;\n \t\t    formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n \t\t    \n@@ -346,22 +420,24 @@ public JasperReportResultDto getGenericReportPatientVersion2Pdf(Integer patientI\n     \n     public JasperReportResultDto getGenericReportPharmaceuticalOrderPdf(String jasperFileName) throws OHServiceException {\n \n-        try{\n-            Date date = new Date();\n-            Format formatter;\n-            formatter = new SimpleDateFormat(\"E d, MMMM yyyy\");\n-            String todayReport = formatter.format(date);\n-            formatter = new SimpleDateFormat(\"yyyyMMdd\");\n-            String todayFile = formatter.format(date);\n-            HashMap<String, Object> parameters = getHospitalParameters();\n-            parameters.put(\"Date\", todayReport);\n+\t\ttry {\n+\t\t\tHashMap<String, Object> parameters = getHospitalParameters();\n+\t\t\taddBundleParameter(jasperFileName, parameters);\n \n-            String pdfFilename = \"rpt/PDF/\"+jasperFileName + \"_\" + todayFile +\".pdf\";\n+\t\t\tDate date = new Date();\n+\t\t\tFormat formatter;\n+\t\t\tformatter = new SimpleDateFormat(\"E d, MMMM yyyy\");\n+\t\t\tString todayReport = formatter.format(date);\n+\t\t\tformatter = new SimpleDateFormat(\"yyyyMMdd\");\n+\t\t\tString todayFile = formatter.format(date);\n+\t\t\tparameters.put(\"Date\", todayReport);\n \n-            JasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n-            JasperExportManager.exportReportToPdfFile(result.getJasperPrint(), pdfFilename);\n-            return result;\n-        } catch(Exception e){\n+\t\t\tString pdfFilename = \"rpt/PDF/\" + jasperFileName + \"_\" + todayFile + \".pdf\";\n+\n+\t\t\tJasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n+\t\t\tJasperExportManager.exportReportToPdfFile(result.getJasperPrint(), pdfFilename);\n+\t\t\treturn result;\n+\t\t} catch(Exception e){\n             //Any exception\n             throw new OHReportException(e, new OHExceptionMessage(MessageBundle.getMessage(\"angal.hospital\"),\n                     MessageBundle.getMessage(\"angal.stat.reporterror\"), OHSeverityLevel.ERROR));\n@@ -371,6 +447,10 @@ public JasperReportResultDto getGenericReportPharmaceuticalOrderPdf(String jaspe\n     public JasperReportResultDto getGenericReportPharmaceuticalStockPdf(Date date, String jasperFileName, String filter, String groupBy, String sortBy) throws OHServiceException {\n     \t\n     \ttry{\n+    \t\tHashMap<String, Object> parameters = getHospitalParameters();\n+            addBundleParameter(jasperFileName, parameters);\n+            \n+    \t\t\n     \t\tif (date == null)\n \t\t\t\tdate = new Date();\n \t\t\tFormat formatter;\n@@ -380,7 +460,7 @@ public JasperReportResultDto getGenericReportPharmaceuticalStockPdf(Date date, S\n \t\t    String dateQuery = formatter.format(date);\n \t\t    formatter = new SimpleDateFormat(\"yyyyMMdd\");\n \t\t    String dateFile = formatter.format(date);\n-            HashMap<String, Object> parameters = getHospitalParameters();\n+            \n             parameters.put(\"Date\", dateReport);\n \t\t\tparameters.put(\"todate\", dateQuery);\n \t\t\tif (groupBy != null) parameters.put(\"groupBy\", groupBy);\n@@ -443,25 +523,12 @@ public JasperReportResultDto getGenericReportPharmaceuticalStockCardPdf(String j\n     \t\t\tdateTo = new Date();\n     \t\t}\n \n-\t\t    String language = GeneralData.LANGUAGE;\n-\t\t    ResourceBundle resourceBundle;\n-\t\t\ttry {\n-\t\t\t\tresourceBundle = ResourceBundle.getBundle(\n-\t\t\t\t\t\tjasperFileName, \n-\t\t\t\t\t\tnew Locale(language), \n-\t\t\t\t\t\tnew UTF8Control());\n-\t\t\t} catch (MissingResourceException e) {\n-\t\t\t\tlogger.error(\">> no resource bundle for language = {} found for this report.\", language);\n-\t\t\t\tlogger.error(e.getMessage());\n-\t\t\t\tresourceBundle = ResourceBundle.getBundle(jasperFileName, new Locale(\"en\"));\n-\t\t\t}\n-\t\t\t\n \t\t\tHashMap<String, Object> parameters = getHospitalParameters();\n+\t\t\taddBundleParameter(jasperFileName, parameters);\n+\t\t\t\n \t\t\tparameters.put(\"fromdate\", dateFrom);\n \t\t\tparameters.put(\"todate\", dateTo);\n \t\t\tif (medical != null) parameters.put(\"productID\", String.valueOf(medical.getCode()));\n-\t\t\tparameters.put(JRParameter.REPORT_LOCALE, new Locale(language));\n-\t\t\tparameters.put(\"REPORT_RESOURCE_BUNDLE\", resourceBundle); //we need to pass our custom resource bundle\n \t\t\tif (ward != null) {\n \t\t\t\tparameters.put(\"WardCode\", String.valueOf(ward.getCode()));\n \t\t\t\tparameters.put(\"WardName\", String.valueOf(ward.getDescription()));\n@@ -478,7 +545,7 @@ public JasperReportResultDto getGenericReportPharmaceuticalStockCardPdf(String j\n                     MessageBundle.getMessage(\"angal.stat.reporterror\"), OHSeverityLevel.ERROR));\n         }\n     }\n-    \n+\n     public void getGenericReportPharmaceuticalStockCardExcel(String jasperFileName, String exportFileName, Date dateFrom, Date dateTo, Medical medical, Ward ward) throws OHServiceException {\n \n         try {\n@@ -521,28 +588,31 @@ public void getGenericReportPharmaceuticalStockCardExcel(String jasperFileName,\n     \n     public JasperReportResultDto getGenericReportPharmaceuticalStockWardPdf(Date date, String jasperFileName, Ward ward) throws OHServiceException {\n     \t\n-    \ttry{\n-    \t\tif (date == null)\n+\t\ttry {\n+\t\t\tHashMap<String, Object> parameters = getHospitalParameters();\n+\t\t\taddBundleParameter(jasperFileName, parameters);\n+\n+\t\t\tif (date == null)\n \t\t\t\tdate = new Date();\n \t\t\tFormat formatter;\n \t\t\tformatter = new SimpleDateFormat(\"E d, MMMM yyyy\");\n-\t\t    String dateReport = formatter.format(date);\n-\t\t    formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\t\t    String dateQuery = formatter.format(date);\n-\t\t    formatter = new SimpleDateFormat(\"yyyyMMdd\");\n-\t\t    String dateFile = formatter.format(date);\n-            HashMap<String, Object> parameters = getHospitalParameters();\n-            parameters.put(\"Date\", dateQuery);\n+\t\t\tString dateReport = formatter.format(date);\n+\t\t\tformatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\t\t\tString dateQuery = formatter.format(date);\n+\t\t\tformatter = new SimpleDateFormat(\"yyyyMMdd\");\n+\t\t\tString dateFile = formatter.format(date);\n+\n+\t\t\tparameters.put(\"Date\", dateQuery);\n \t\t\tparameters.put(\"DateReport\", dateReport);\n \t\t\tparameters.put(\"Ward\", ward.getDescription());\n \t\t\tparameters.put(\"WardCode\", ward.getCode());\n \n-            String pdfFilename = \"rpt/PDF/\"+jasperFileName + \"_\" + dateFile +\".pdf\";\n+\t\t\tString pdfFilename = \"rpt/PDF/\" + jasperFileName + \"_\" + dateFile + \".pdf\";\n \n-            JasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n-            JasperExportManager.exportReportToPdfFile(result.getJasperPrint(), pdfFilename);\n-            return result;\n-    \t} catch(Exception e){\n+\t\t\tJasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n+\t\t\tJasperExportManager.exportReportToPdfFile(result.getJasperPrint(), pdfFilename);\n+\t\t\treturn result;\n+\t\t} catch(Exception e){\n             //Any exception\n             throw new OHReportException(e, new OHExceptionMessage(MessageBundle.getMessage(\"angal.hospital\"),\n                     MessageBundle.getMessage(\"angal.stat.reporterror\"), OHSeverityLevel.ERROR));\n@@ -551,15 +621,17 @@ public JasperReportResultDto getGenericReportPharmaceuticalStockWardPdf(Date dat\n \n     public JasperReportResultDto getGenericReportUserInDatePdf(String fromDate, String toDate, String aUser, String jasperFileName) throws OHServiceException {\n \n-        try{\n-            HashMap<String, Object> parameters = compileGenericReportUserInDateParameters(fromDate, toDate, aUser);\n-            String date = new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\n-            String pdfFilename =  \"rpt/PDF/\" + jasperFileName + \"_\" + aUser + \"_\" + date +\".pdf\";\n+\t\ttry {\n+\t\t\tHashMap<String, Object> parameters = compileGenericReportUserInDateParameters(fromDate, toDate, aUser);\n+\t\t\taddBundleParameter(jasperFileName, parameters);\n \n-            JasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n-            JasperExportManager.exportReportToPdfFile(result.getJasperPrint(), pdfFilename);\n-            return result;\n-        } catch(Exception e){\n+\t\t\tString date = new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\n+\t\t\tString pdfFilename = \"rpt/PDF/\" + jasperFileName + \"_\" + aUser + \"_\" + date + \".pdf\";\n+\n+\t\t\tJasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n+\t\t\tJasperExportManager.exportReportToPdfFile(result.getJasperPrint(), pdfFilename);\n+\t\t\treturn result;\n+\t\t} catch(Exception e){\n             //Any exception\n             throw new OHReportException(e, new OHExceptionMessage(MessageBundle.getMessage(\"angal.hospital\"),\n                     MessageBundle.getMessage(\"angal.stat.reporterror\"), OHSeverityLevel.ERROR));\n@@ -570,12 +642,14 @@ public JasperReportResultDto getGenericReportUserInDateTxt(String fromDate, Stri\n \n         try{\n             HashMap<String, Object> parameters = compileGenericReportUserInDateParameters(fromDate, toDate, aUser);\n+            \n+            StringBuilder sbTxtFilename = new StringBuilder(jasperFileName).append(\"Txt\");\n+            addBundleParameter(sbTxtFilename.toString(), parameters);\n \n             StringBuilder sbFilename = new StringBuilder();\n             sbFilename.append(\"rpt\");\n             sbFilename.append(File.separator);\n-            sbFilename.append(jasperFileName);\n-            sbFilename.append(\"Txt\");\n+            sbFilename.append(sbTxtFilename);\n             sbFilename.append(\".jasper\");\n \n             String date = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n@@ -593,6 +667,8 @@ public JasperReportResultDto getGenericReportDischargePdf(int admID, int patID,\n \n         try{\n             HashMap<String, Object> parameters = getHospitalParameters();\n+            addBundleParameter(jasperFileName, parameters);\n+            \n             parameters.put(\"admID\", String.valueOf(admID)); // real param\n             parameters.put(\"patientID\", String.valueOf(patID)); // real param\n             String pdfFilename = \"rpt/PDF/\"+jasperFileName + \"_\" + admID +\".pdf\";\n@@ -611,6 +687,8 @@ public JasperReportResultDto getGenericReportFromDateToDatePdf(String fromDate,\n \n         try{\n             HashMap<String, Object> parameters = compileGenericReportFromDateToDateParameters(fromDate, toDate);\n+            addBundleParameter(jasperFileName, parameters);\n+            \n             String pdfFilename = \"rpt/PDF/\"+jasperFileName+\".pdf\";\n \n             JasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n@@ -660,7 +738,7 @@ public void getGenericReportFromDateToDateExcel(String fromDate, String toDate,\n     public JasperReportResultDto getGenericReportMYPdf(Integer month, Integer year, String jasperFileName) throws OHServiceException {\n \n         try{\n-            HashMap<String, Object> parameters = compileGenericReportMYParameters(month, year);\n+            HashMap<String, Object> parameters = compileGenericReportMYParameters(month, year, jasperFileName);\n             String pdfFilename = \"rpt/PDF/\"+jasperFileName+\"_\"+year+\"_\"+month+\".pdf\";\n \n             JasperReportResultDto result = generateJasperReport(compileJasperFilename(jasperFileName), pdfFilename, parameters);\n@@ -700,16 +778,18 @@ public void getGenericReportMYExcel(Integer month, Integer year, String jasperFi\n         }\n     }\n \n-    private HashMap<String,Object> compileGenericReportMYParameters(Integer month, Integer year) throws OHServiceException {\n+    private HashMap<String,Object> compileGenericReportMYParameters(Integer month, Integer year, String jasperFileName) throws OHServiceException {\n         HashMap<String, Object> parameters = getHospitalParameters();\n+        addBundleParameter(jasperFileName, parameters);\n+\t\t\n         parameters.put(\"year\", String.valueOf(year)); // real param\n         parameters.put(\"month\", String.valueOf(month)); // real param\n         return  parameters;\n     }\n \n     private HashMap<String,Object> compileGenericReportUserInDateParameters(String fromDate, String toDate, String aUser) throws OHServiceException {\n         HashMap<String, Object> parameters = getHospitalParameters();\n-\n+\t\t\n         Date fromDateQuery;\n \t\tDate toDateQuery;\n         try {\n@@ -737,7 +817,7 @@ public void getGenericReportMYExcel(Integer month, Integer year, String jasperFi\n \n     private HashMap<String,Object> compileGenericReportFromDateToDateParameters(String fromDate, String toDate) throws OHServiceException {\n         HashMap<String, Object> parameters = getHospitalParameters();\n-\n+        \n \t\tDate fromDateQuery;\n \t\tDate toDateQuery;\n \t\ttry {\n@@ -763,6 +843,7 @@ public void getGenericReportMYExcel(Integer month, Integer year, String jasperFi\n \n     private HashMap<String,Object> getHospitalParameters() throws OHServiceException {\n         HashMap<String, Object> parameters = new HashMap<>();\n+        \n         Hospital hosp = hospitalManager.getHospital();\n \n         parameters.put(\"Hospital\", hosp.getDescription());\n@@ -773,6 +854,91 @@ public void getGenericReportMYExcel(Integer month, Integer year, String jasperFi\n         parameters.put(\"Currency\", hosp.getCurrencyCod());\n         return parameters;\n     }\n+    \n+\tprivate void addBundleParameter(String jasperFileName, HashMap<String, Object> parameters) {\n+\t\t/*\n+\t\t * Some reports use pre-formatted dates, that need to be localized as\n+\t\t * well (days, months, etc...) For this reason we pass the same Locale\n+\t\t * used in the application (otherwise it would use the Locale used on\n+\t\t * the user client machine)\n+\t\t */\n+\t\tparameters.put(JRParameter.REPORT_LOCALE, new Locale(GeneralData.LANGUAGE));\n+\t\t/*\n+\t\t * Jasper Report seems failing to decode resource bundles in UTF-8\n+\t\t * encoding. For this reason we pass also the resource for the specific\n+\t\t * report read with UTF8Control()\n+\t\t */\n+\t\tparameters.put(\"REPORT_RESOURCE_BUNDLE\", getReportResourceBundle(jasperFileName, GeneralData.LANGUAGE));\n+\n+\t\t/*\n+\t\t * Jasper Reports may contain subreports and we should pass also those.\n+\t\t * The parent report must contain parameters like:\n+\t\t * \n+\t\t * SUBREPORT_RESOURCE_BUNDLE_1 \n+\t\t * SUBREPORT_RESOURCE_BUNDLE_2\n+\t\t * SUBREPORT_RESOURCE_BUNDLE_...\n+\t\t * \n+\t\t * and pass them as REPORT_RESOURCE_BUNDLE to each related subreport.\n+\t\t * \n+\t\t * If nothing is passed, subreports still work, but REPORT_LOCALE will be used \n+\t\t * (if passed to the subreport) and corresponding bundle (UTF-8 decoding not available) \n+\t\t */\n+\t\ttry {\n+\t\t\taddSubReportsBundleParameters(jasperFileName, parameters);\n+\t\t} catch (JRException e) {\n+\t\t\tlogger.error(\">> error loading subreport bundle, default will be used\");\n+\t\t\tlogger.error(e.getMessage());\n+\t\t}\n+\t}\n+\t\n+\tprivate void addSubReportsBundleParameters(String jasperFileName, HashMap<String, Object> parameters) throws JRException {\n+\t\tlogger.debug(\"Search subreports for {}...\", jasperFileName);\n+\t\tFile jasperFile = new File(compileJasperFilename(jasperFileName));\n+\t\tfinal JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperFile);\n+\t\tJRBand[] bands = jasperReport.getAllBands(); // Get all bands\n+\t\tfor (JRBand band : bands) {\n+\t\t\tList<JRChild> elements = band.getChildren(); // Get all children\n+\t\t\tfor (JRChild child : elements) {\n+\t\t\t\tint index = 1;\n+\t\t\t\tif (child instanceof JRBaseSubreport) { // This is a subreport\n+\t\t\t\t\tJRBaseSubreport subreport = (JRBaseSubreport) child;\n+\t\t\t\t\tString expression = \"\"; // Lets find out the expression used\n+\t\t\t\t\tJRExpressionChunk[] chunks = subreport.getExpression().getChunks();\n+\t\t\t\t\tfor (JRExpressionChunk c : chunks) {\n+\t\t\t\t\t\texpression += c.getText();\n+\t\t\t\t\t}\n+\t\t\t\t\tlogger.debug(\"...found a subreport: {}\", expression);\n+\t\t\t\t\taddSubreportParameter(index, expression, parameters);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void addSubreportParameter(int index, String expression, HashMap<String, Object> parameters) {\n+\t\tPattern pattern = Pattern.compile(\"\\\"(.*)\\\"\");\n+\t\tMatcher matcher = pattern.matcher(expression);\n+\t\tif (matcher.find()) {\n+\t\t\tString subreportName = matcher.group(1).split(\"\\\\.\")[0];\n+\t\t\tparameters.put(\"SUBREPORT_RESOURCE_BUNDLE_\" + index, getReportResourceBundle(subreportName, GeneralData.LANGUAGE));\n+\t\t} else {\n+\t\t\tlogger.debug(\">> unexpected subreport expression {}\", expression);\n+\t\t}\n+\t}\n+\n+\tprivate ResourceBundle getReportResourceBundle(String jasperFileName, String language) {\n+\t\tResourceBundle resourceBundle;\n+\t\ttry {\n+\t\t\tresourceBundle = ResourceBundle.getBundle(\n+\t\t\t\t\tjasperFileName, \n+\t\t\t\t\tnew Locale(language), \n+\t\t\t\t\tnew UTF8Control());\n+\t\t} catch (MissingResourceException e) {\n+\t\t\tlogger.error(\">> no resource bundle for language '{}' found for report {}\", language, jasperFileName);\n+\t\t\tlogger.error(e.getMessage());\n+\t\t\tresourceBundle = ResourceBundle.getBundle(jasperFileName, new Locale(\"en\"));\n+\t\t}\n+\t\treturn resourceBundle;\n+\t}\n \n     private JasperReportResultDto generateJasperReport(String jasperFilename, String filename, Map parameters) throws JRException, SQLException {\n         File jasperFile = new File(jasperFilename);"
  }
]
