[
  {
    "sha": "a368e75ee2b841f8d46c686afee51b27ccf97bd9",
    "filename": "rskj-core/src/main/java/co/rsk/RskContext.java",
    "status": "modified",
    "additions": 19,
    "deletions": 1,
    "changes": 20,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/RskContext.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/RskContext.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/main/java/co/rsk/RskContext.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -242,6 +242,7 @@\n     private ReceivedTxSignatureCache receivedTxSignatureCache;\n     private BlockTxSignatureCache blockTxSignatureCache;\n     private PeerScoringReporterService peerScoringReporterService;\n+    private GasFinderConfiguration gasFinderConfiguration;\n \n     public RskContext(String[] args) {\n         this(new CliArgs.Parser<>(\n@@ -595,13 +596,30 @@ public EthModule getEthModule() {\n                     getRepositoryLocator(),\n                     getEthModuleWallet(),\n                     getEthModuleTransaction(),\n-                    getBridgeSupportFactory()\n+                    getBridgeSupportFactory(),\n+                    getGasFinderConfiguration()\n             );\n         }\n \n         return ethModule;\n     }\n \n+    private GasFinderConfiguration getGasFinderConfiguration() {\n+        if (this.gasFinderConfiguration == null) {\n+            long difference;\n+            long topGas;\n+            long upwardStep;\n+\n+            difference = rskSystemProperties.gasFinderDifference();\n+            topGas = rskSystemProperties.gasFinderTopGas();\n+            upwardStep = rskSystemProperties.gasFinderUpwardStep();\n+\n+            this.gasFinderConfiguration = new GasFinderConfiguration(difference, topGas, upwardStep);\n+        }\n+\n+        return this.gasFinderConfiguration;\n+    }\n+\n     public EvmModule getEvmModule() {\n         if (evmModule == null) {\n             evmModule = new EvmModuleImpl("
  },
  {
    "sha": "8f13f23ac0da413a4eee80645ba34ec6eaf320b6",
    "filename": "rskj-core/src/main/java/co/rsk/config/RskSystemProperties.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/config/RskSystemProperties.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/config/RskSystemProperties.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/main/java/co/rsk/config/RskSystemProperties.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -377,4 +377,16 @@ public long getPeerScoringSummaryTime() {\n     public boolean fastBlockPropagation() {\n         return configFromFiles.getBoolean(\"peer.fastBlockPropagation\");\n     }\n+\n+    public long gasFinderDifference() {\n+        return configFromFiles.getLong(\"gasFinder.difference\");\n+    }\n+\n+    public long gasFinderTopGas() {\n+        return configFromFiles.getLong(\"gasFinder.topGas\");\n+    }\n+\n+    public long gasFinderUpwardStep() {\n+        return configFromFiles.getLong(\"gasFinder.upwardStep\");\n+    }\n }"
  },
  {
    "sha": "16d260b935882d32266c082a2964e826419caad1",
    "filename": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModule.java",
    "status": "modified",
    "additions": 50,
    "deletions": 4,
    "changes": 54,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModule.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModule.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModule.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -30,6 +30,7 @@\n import co.rsk.peg.BridgeSupportFactory;\n import co.rsk.rpc.ExecutionBlockRetriever;\n import co.rsk.trie.TrieStoreImpl;\n+import com.google.common.annotations.VisibleForTesting;\n import org.ethereum.core.*;\n import org.ethereum.datasource.HashMapDB;\n import org.ethereum.db.MutableRepository;\n@@ -43,6 +44,7 @@\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n+import java.math.BigInteger;\n import java.util.Arrays;\n import java.util.Map;\n import java.util.Optional;\n@@ -71,6 +73,7 @@\n     private final BridgeConstants bridgeConstants;\n     private final BridgeSupportFactory bridgeSupportFactory;\n     private final byte chainId;\n+    private final GasFinderConfiguration gasFinderConfiguration;\n \n \n     public EthModule(\n@@ -83,7 +86,8 @@ public EthModule(\n             RepositoryLocator repositoryLocator,\n             EthModuleWallet ethModuleWallet,\n             EthModuleTransaction ethModuleTransaction,\n-            BridgeSupportFactory bridgeSupportFactory) {\n+            BridgeSupportFactory bridgeSupportFactory,\n+            GasFinderConfiguration gasFinderConfiguration) {\n         this.chainId = chainId;\n         this.blockchain = blockchain;\n         this.transactionPool = transactionPool;\n@@ -94,6 +98,7 @@ public EthModule(\n         this.ethModuleTransaction = ethModuleTransaction;\n         this.bridgeConstants = bridgeConstants;\n         this.bridgeSupportFactory = bridgeSupportFactory;\n+        this.gasFinderConfiguration = gasFinderConfiguration;\n     }\n \n     @Override\n@@ -117,9 +122,12 @@ public EthModule(\n \n     public String call(Web3.CallArguments args, String bnOrId) {\n         String hReturn = null;\n+\n         try {\n             BlockResult blockResult = executionBlockRetriever.getExecutionBlock_workaround(bnOrId);\n+\n             ProgramResult res;\n+\n             if (blockResult.getFinalState() != null) {\n                 res = callConstant_workaround(args, blockResult);\n             } else {\n@@ -143,11 +151,48 @@ public String call(Web3.CallArguments args, String bnOrId) {\n         }\n     }\n \n+    @VisibleForTesting\n+    public boolean runWithArgumentsAndBlock(Web3.CallArguments args, Block block) {\n+        ProgramResult res = callConstant(args, blockchain.getBestBlock());\n+\n+        return res.getException() == null;\n+    }\n+\n     public String estimateGas(Web3.CallArguments args) {\n         String s = null;\n+        GasFinder gasFinder = new GasFinder(this.gasFinderConfiguration);\n+\n         try {\n-            ProgramResult res = callConstant(args, blockchain.getBestBlock());\n-            return s = TypeConverter.toQuantityJsonHex(res.getGasUsed());\n+            String initialGasString = args.gas;\n+\n+            if (initialGasString.startsWith(\"0x\")) {\n+                initialGasString = initialGasString.substring(2);\n+            }\n+\n+            ong gasLimitToTry = new BigInteger(initialGasString, 16).longValue();\n+\n+            while (!gasFinder.wasFound()) {\n+                args.gas = Long.toString(gasLimitToTry, 16);\n+\n+                Block block = blockchain.getBestBlock();\n+                ProgramResult res = callConstant(args, block);\n+\n+                if (res.getException() == null) {\n+                    long gasUsed = res.getGasUsed();\n+\n+                    gasFinder.registerSuccess(gasLimitToTry, gasUsed);\n+                } else {\n+                    gasFinder.registerFailure(gasLimitToTry);\n+                }\n+\n+                if (!gasFinder.wasFound()) {\n+                    gasLimitToTry = gasFinder.nextTry();\n+                }\n+            }\n+\n+            long gasFound = gasFinder.getGasFound();\n+\n+            return s = TypeConverter.toQuantityJsonHex(gasFound);\n         } finally {\n             LOGGER.debug(\"eth_estimateGas(): {}\", s);\n         }\n@@ -224,7 +269,8 @@ private AccountInformationProvider getAccountInformationProvider(String id) {\n         }\n     }\n \n-    private ProgramResult callConstant(Web3.CallArguments args, Block executionBlock) {\n+    @VisibleForTesting\n+    public ProgramResult callConstant(Web3.CallArguments args, Block executionBlock) {\n         CallArgumentsToByteArray hexArgs = new CallArgumentsToByteArray(args);\n         return reversibleTransactionExecutor.executeTransaction(\n                 executionBlock,"
  },
  {
    "sha": "b263fc781bf0decd2696d80788395be2cb562d00",
    "filename": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/GasFinder.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/rpc/modules/eth/GasFinder.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/rpc/modules/eth/GasFinder.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/main/java/co/rsk/rpc/modules/eth/GasFinder.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.rpc.modules.eth;\n+\n+import org.ethereum.vm.GasCost;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Created by ajlopez on 24/02/2021.\n+ */\n+public class GasFinder {\n+    private final GasFinderConfiguration config;\n+\n+    private long lastGasUsed;\n+    private Optional<Long> lowerSuccess = Optional.empty();\n+    private Optional<Long> upperFailure = Optional.empty();\n+\n+    public GasFinder(GasFinderConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public long nextTry() {\n+        if (this.upperFailure.isPresent() && this.lowerSuccess.isPresent()) {\n+            return (this.upperFailure.get() + this.lowerSuccess.get()) / 2;\n+        }\n+\n+        if (!this.upperFailure.isPresent() && !this.lowerSuccess.isPresent() && this.lastGasUsed > 0) {\n+            long newGasToTry = GasCost.add(this.lastGasUsed, this.config.getUpwardStep());\n+\n+            if (newGasToTry > this.config.getTopGas()) {\n+                throw new IllegalStateException(\"Too much gas to try\");\n+            }\n+\n+            return newGasToTry;\n+        }\n+\n+        if (this.lastGasUsed > 0) {\n+            return this.lastGasUsed;\n+        }\n+\n+        if (this.upperFailure.isPresent()) {\n+            return GasCost.add(this.upperFailure.get(), this.config.getUpwardStep());\n+        }\n+\n+        throw new IllegalStateException(\"No gas data\");\n+    }\n+\n+    public void registerSuccess(long gasLimit, long gasUsed) {\n+        this.lastGasUsed = gasUsed;\n+\n+        if (!this.lowerSuccess.isPresent() || this.lowerSuccess.get() > gasLimit) {\n+            this.lowerSuccess = Optional.of(gasLimit);\n+        }\n+    }\n+\n+    public void registerFailure(long gasLimit) {\n+        if (!this.upperFailure.isPresent() && !this.lowerSuccess.isPresent()) {\n+            this.lastGasUsed = gasLimit;\n+            return;\n+        }\n+\n+        if (!this.upperFailure.isPresent() || this.upperFailure.get() < gasLimit) {\n+            this.upperFailure = Optional.of(gasLimit);\n+        }\n+    }\n+\n+    public boolean wasFound() {\n+        if (!this.lowerSuccess.isPresent()) {\n+            return false;\n+        }\n+\n+        if (this.lowerSuccess.get() == this.lastGasUsed) {\n+            return true;\n+        }\n+\n+        if (!this.upperFailure.isPresent()) {\n+            return false;\n+        }\n+\n+        long top = this.lowerSuccess.get();\n+        long bottom = this.upperFailure.get();\n+\n+        return Math.abs(top - bottom) <= this.config.getDifference();\n+    }\n+\n+    public long getGasFound() {\n+        if (!this.wasFound()) {\n+            throw new IllegalStateException(\"No gas found yet\");\n+        }\n+\n+        return this.lowerSuccess.get();\n+    }\n+}"
  },
  {
    "sha": "a629f59cf6edda2d3860affd2ea7e3d0c6ce6576",
    "filename": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/GasFinderConfiguration.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/rpc/modules/eth/GasFinderConfiguration.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/co/rsk/rpc/modules/eth/GasFinderConfiguration.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/main/java/co/rsk/rpc/modules/eth/GasFinderConfiguration.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.rpc.modules.eth;\n+\n+/**\n+ * Created by ajlopez on 28/02/2021.\n+ */\n+public class GasFinderConfiguration {\n+    private final long difference;\n+    private final long topGas;\n+    private final long upwardStep;\n+\n+    public GasFinderConfiguration(long difference, long topGas, long upwardStep) {\n+        this.difference = difference;\n+        this.topGas = topGas;\n+        this.upwardStep = upwardStep;\n+    }\n+\n+    public long getDifference() {\n+        return this.difference;\n+    }\n+\n+    public long getTopGas() {\n+        return this.topGas;\n+    }\n+\n+    public long getUpwardStep() {\n+        return this.upwardStep;\n+    }\n+}"
  },
  {
    "sha": "b5958e45f43ce5e9c013a7a645334f400a51af66",
    "filename": "rskj-core/src/main/java/org/ethereum/vm/program/ProgramResult.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/org/ethereum/vm/program/ProgramResult.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/java/org/ethereum/vm/program/ProgramResult.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/main/java/org/ethereum/vm/program/ProgramResult.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -36,6 +36,8 @@\n public class ProgramResult {\n \n     private long gasUsed;\n+    private long gasRefund;\n+\n     private byte[] hReturn = EMPTY_BYTE_ARRAY;\n     private Exception exception;\n     private boolean revert;\n@@ -74,9 +76,14 @@ public boolean isRevert() {\n     }\n \n     public void refundGas(long gas) {\n+        gasRefund = GasCost.add(gasRefund, gas);\n         gasUsed = GasCost.subtract(gasUsed, gas);\n     }\n \n+    public long getGasRefund() {\n+        return gasRefund;\n+    }\n+\n     public void setHReturn(byte[] hReturn) {\n         this.hReturn = hReturn;\n "
  },
  {
    "sha": "eb7fc675573696479085c30ef53da0cb9affc99b",
    "filename": "rskj-core/src/main/resources/expected.conf",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/resources/expected.conf",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/resources/expected.conf",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/main/resources/expected.conf?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -287,3 +287,14 @@ blooms = {\n   service = <bool>\n   confirmations = <noblocks>\n }\n+\n+# Gas finder parameters for gas estimation\n+gasFinder {\n+    # minimal difference btw success and failure\n+    difference = <gas>\n+    # top gas to be used during estimation\n+    topGas = <gas>\n+    # gas to be added to try after one or more failures\n+    upwardStep = <gas>\n+}\n+"
  },
  {
    "sha": "f81b7acc23bcf31a7b16b38ce1a95b1d8f209caa",
    "filename": "rskj-core/src/main/resources/reference.conf",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/resources/reference.conf",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/main/resources/reference.conf",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/main/resources/reference.conf?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -434,3 +434,12 @@ blooms {\n     confirmations = 400\n }\n \n+# Gas finder parameters for gas estimation\n+gasFinder {\n+    # minimal difference btw success and failure\n+    difference = 1000\n+    # top gas to be used during estimation\n+    topGas = 12000000\n+    # gas to be added to try after one or more failures\n+    upwardStep = 1000000\n+}"
  },
  {
    "sha": "2bada585422d32d937b35f12ce7316a89dc6d4c5",
    "filename": "rskj-core/src/test/java/co/rsk/mine/TransactionModuleTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/mine/TransactionModuleTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/mine/TransactionModuleTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/co/rsk/mine/TransactionModuleTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -389,7 +389,8 @@ private Web3Impl createEnvironment(Blockchain blockchain, MiningMainchainView ma\n                 repositoryLocator, new EthModuleWalletEnabled(wallet), transactionModule,\n                 new BridgeSupportFactory(\n                         btcBlockStoreFactory, config.getNetworkConstants().getBridgeConstants(),\n-                        config.getActivationConfig())\n+                        config.getActivationConfig()),\n+                new GasFinderConfiguration(config.gasFinderDifference(), config.gasFinderTopGas(), config.gasFinderUpwardStep())\n         );\n         TxPoolModule txPoolModule = new TxPoolModuleImpl(transactionPool);\n         DebugModule debugModule = new DebugModuleImpl(null, null, Web3Mocks.getMockMessageHandler(), null);"
  },
  {
    "sha": "60a8b8f35911e70fb27f685e4ff847ffad602ce7",
    "filename": "rskj-core/src/test/java/co/rsk/rpc/Web3RskImplTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/rpc/Web3RskImplTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/rpc/Web3RskImplTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/co/rsk/rpc/Web3RskImplTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -28,8 +28,7 @@\n import co.rsk.peg.PegTestUtils;\n import co.rsk.rpc.modules.debug.DebugModule;\n import co.rsk.rpc.modules.debug.DebugModuleImpl;\n-import co.rsk.rpc.modules.eth.EthModule;\n-import co.rsk.rpc.modules.eth.EthModuleWalletEnabled;\n+import co.rsk.rpc.modules.eth.*;\n import co.rsk.rpc.modules.personal.PersonalModule;\n import co.rsk.rpc.modules.personal.PersonalModuleWalletEnabled;\n import co.rsk.rpc.modules.txpool.TxPoolModule;\n@@ -83,7 +82,8 @@ public void web3_ext_dumpState() {\n                 null, new ExecutionBlockRetriever(mainchainView, blockchain, null, null),\n                 null, new EthModuleWalletEnabled(wallet), null,\n                 new BridgeSupportFactory(\n-                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig())\n+                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig()),\n+                new GasFinderConfiguration(config.gasFinderDifference(), config.gasFinderTopGas(), config.gasFinderUpwardStep())\n         );\n         TxPoolModule tpm = new TxPoolModuleImpl(Web3Mocks.getMockTransactionPool());\n         DebugModule dm = new DebugModuleImpl(null, null, Web3Mocks.getMockMessageHandler(), null);"
  },
  {
    "sha": "bb1b1c3774e4e0101e9a3ecb1d6b7aac24e874e6",
    "filename": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleDLSTest.java",
    "status": "modified",
    "additions": 116,
    "deletions": 1,
    "changes": 117,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleDLSTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleDLSTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleDLSTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -27,6 +27,7 @@\n import co.rsk.test.dsl.DslProcessorException;\n import co.rsk.test.dsl.WorldDslProcessor;\n import org.ethereum.config.Constants;\n+import org.ethereum.core.Block;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionReceipt;\n import org.ethereum.rpc.Web3;\n@@ -38,6 +39,7 @@\n import org.junit.Test;\n \n import java.io.FileNotFoundException;\n+import java.math.BigInteger;\n \n import static org.junit.Assert.*;\n import static org.mockito.ArgumentMatchers.anyByte;\n@@ -80,6 +82,117 @@ public void testCall_getRevertReason() throws FileNotFoundException, DslProcesso\n         assertEquals(\"0x\", call);\n     }\n \n+    @Test\n+    public void testEstimateGasUsingUpdateStorage() throws FileNotFoundException, DslProcessorException {\n+        DslParser parser = DslParser.fromResource(\"dsl/eth_module/updateStorage.txt\");\n+        World world = new World();\n+\n+        WorldDslProcessor processor = new WorldDslProcessor(world);\n+        processor.processCommands(parser);\n+\n+        TransactionReceipt deployTransactionReceipt = world.getTransactionReceiptByName(\"tx01\");\n+        byte[] status = deployTransactionReceipt.getStatus();\n+\n+        Assert.assertNotNull(status);\n+        Assert.assertEquals(1, status.length);\n+        Assert.assertEquals(0x01, status[0]);\n+\n+        TransactionReceipt setValueTransactionReceipt = world.getTransactionReceiptByName(\"tx02\");\n+        byte[] status2 = setValueTransactionReceipt.getStatus();\n+\n+        Assert.assertNotNull(status2);\n+        Assert.assertEquals(1, status2.length);\n+        Assert.assertEquals(0x01, status2[0]);\n+\n+        // Estimate gas for setValue(1, 0)\n+        // it should have a refund\n+        EthModule eth = buildEthModule(world);\n+        final Web3.CallArguments args = new Web3.CallArguments();\n+        args.to = deployTransactionReceipt.getTransaction().getContractAddress().toHexString(); //\"6252703f5ba322ec64d3ac45e56241b7d9e481ad\";\n+        args.data = \"7b8d56e300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000\";\n+        args.value = \"0\";\n+        args.nonce = \"1\";\n+        args.gas = \"10000000\";\n+\n+        Block block = world.getBlockChain().getBestBlock();\n+\n+        // Evaluate the gas used\n+        long gasUsed = eth.callConstant(args, block).getGasUsed();\n+\n+        // Estimate the gas to use\n+        String estimation = eth.estimateGas(args);\n+        long estimatedGas = Long.parseLong(estimation.substring(2), 16);\n+\n+        // The estimated gas should be less than the transaction used gas for setValue(0, 42)\n+        Assert.assertTrue(estimatedGas < new BigInteger(1, setValueTransactionReceipt.getGasUsed()).longValue());\n+        // The estimated gas should be equal to the gas used in the call\n+        Assert.assertEquals(gasUsed, estimatedGas);\n+\n+        // Call same transaction with estimated gas\n+        args.gas = \"0x\" + Long.toString(estimatedGas, 16);\n+\n+        Assert.assertTrue(eth.runWithArgumentsAndBlock(args, block));\n+\n+        // Call same transaction with estimated gas minus 1\n+        args.gas = \"0x\" + Long.toString(estimatedGas - 1, 16);\n+\n+        Assert.assertFalse(eth.runWithArgumentsAndBlock(args, block));\n+\n+        // Try estimate gas with too low initial gas limit\n+        args.gas = \"0x6000\";\n+        String newEstimation = eth.estimateGas(args);\n+        long newEstimatedGas = Long.parseLong(newEstimation.substring(2), 16);\n+\n+        Assert.assertEquals(estimatedGas, newEstimatedGas);\n+    }\n+\n+    @Test\n+    public void testEstimateGasUsingCallWithValue() throws FileNotFoundException, DslProcessorException {\n+        DslParser parser = DslParser.fromResource(\"dsl/eth_module/callWithValue.txt\");\n+        World world = new World();\n+\n+        WorldDslProcessor processor = new WorldDslProcessor(world);\n+        processor.processCommands(parser);\n+\n+        TransactionReceipt deployTransactionReceipt = world.getTransactionReceiptByName(\"tx01\");\n+        byte[] status = deployTransactionReceipt.getStatus();\n+\n+        Assert.assertNotNull(status);\n+        Assert.assertEquals(1, status.length);\n+        Assert.assertEquals(0x01, status[0]);\n+\n+        // Estimate gas for callWithValue()\n+        EthModule eth = buildEthModule(world);\n+        final Web3.CallArguments args = new Web3.CallArguments();\n+        args.to = deployTransactionReceipt.getTransaction().getContractAddress().toHexString(); //\"6252703f5ba322ec64d3ac45e56241b7d9e481ad\";\n+        args.data = \"c3cefd36\";\n+        args.value = \"10000\";\n+        args.nonce = \"1\";\n+        args.gas = \"10000000\";\n+\n+        Block block = world.getBlockChain().getBestBlock();\n+\n+        // Evaluate the gas used\n+        long gasUsed = eth.callConstant(args, block).getGasUsed();\n+\n+        // Estimate the gas to use\n+        String estimation = eth.estimateGas(args);\n+        long estimatedGas = Long.parseLong(estimation.substring(2), 16);\n+\n+        // The estimated gas should be greater than the gas used in the call\n+        Assert.assertTrue(gasUsed < estimatedGas);\n+\n+        // Call same transaction with estimated gas\n+        args.gas = \"0x\" + Long.toString(estimatedGas, 16);\n+\n+        Assert.assertTrue(eth.runWithArgumentsAndBlock(args, block));\n+\n+        // Call same transaction with gas used should fail\n+        args.gas = \"0x\" + Long.toString(gasUsed, 16);\n+\n+        Assert.assertFalse(eth.runWithArgumentsAndBlock(args, block));\n+    }\n+\n     private EthModule buildEthModule(World world) {\n         final TestSystemProperties config = new TestSystemProperties();\n         TransactionExecutorFactory executor = new TransactionExecutorFactory(\n@@ -102,6 +215,8 @@ private EthModule buildEthModule(World world) {\n                 null,\n                 null,\n                 null,\n-                world.getBridgeSupportFactory());\n+                world.getBridgeSupportFactory(),\n+                new GasFinderConfiguration(1000L, 12_000_000L, 1_000_000L)\n+            );\n     }\n }"
  },
  {
    "sha": "287b61cd0ff3a93db6dcb60e023e3c1d4e8f3d5d",
    "filename": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 5,
    "changes": 18,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -76,7 +76,9 @@ public void callSmokeTest() {\n                 null,\n                 null,\n                 new BridgeSupportFactory(\n-                        null, null, null));\n+                        null, null, null),\n+                null\n+            );\n \n         String expectedResult = TypeConverter.toUnformattedJsonHex(hReturn);\n         String actualResult = eth.call(args, \"latest\");\n@@ -114,7 +116,9 @@ public void callWithoutReturn() {\n                 null,\n                 null,\n                 new BridgeSupportFactory(\n-                        null, null, null));\n+                        null, null, null),\n+                null\n+            );\n \n         String expectedResult = TypeConverter.toUnformattedJsonHex(hReturn);\n         String actualResult = eth.call(args, \"latest\");\n@@ -157,7 +161,9 @@ public void test_revertedTransaction() {\n                 null,\n                 null,\n                 new BridgeSupportFactory(\n-                        null, null, null));\n+                        null, null, null),\n+                null\n+            );\n \n         try {\n             eth.call(args, \"latest\");\n@@ -190,7 +196,8 @@ public void getCode() {\n                         null,\n                         null,\n                         null\n-                )\n+                ),\n+                null\n         );\n \n         String addr = eth.getCode(TestUtils.randomAddress().toHexString(), \"pending\");\n@@ -209,7 +216,8 @@ public void chainId() {\n                 mock(RepositoryLocator.class),\n                 mock(EthModuleWallet.class),\n                 mock(EthModuleTransaction.class),\n-                mock(BridgeSupportFactory.class)\n+                mock(BridgeSupportFactory.class),\n+                null\n         );\n         assertThat(eth.chainId(), is(\"0x21\"));\n     }"
  },
  {
    "sha": "31da3869b37d4feefbc5059f60e3c50137c79140",
    "filename": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/GasFinderTest.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/rpc/modules/eth/GasFinderTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/co/rsk/rpc/modules/eth/GasFinderTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/co/rsk/rpc/modules/eth/GasFinderTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -0,0 +1,145 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.rpc.modules.eth;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Created by ajlopez on 24/02/2021.\n+ */\n+public class GasFinderTest {\n+    private static final GasFinderConfiguration gasFinderConfiguration = new GasFinderConfiguration(1000L, 12_000_000L, 1_000_000L);\n+\n+    @Test\n+    public void throwsIllegalOperationExceptionOnNextTryWithoutData() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        try {\n+            gasFinder.nextTry();\n+            Assert.fail();\n+        }\n+        catch (IllegalStateException ex) {\n+            Assert.assertEquals(\"No gas data\", ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void registerFirstSuccessfulGasAndGetNextTry() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        gasFinder.registerSuccess(1000000L, 100000L);\n+\n+        Assert.assertEquals(100000L, gasFinder.nextTry());\n+        Assert.assertFalse(gasFinder.wasFound());\n+    }\n+\n+    @Test\n+    public void registerSuccessAndFailure() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        gasFinder.registerSuccess(1000000L, 100000L);\n+        gasFinder.registerFailure(100000L);\n+\n+        Assert.assertEquals((1000000L + 100000L) / 2, gasFinder.nextTry());\n+        Assert.assertFalse(gasFinder.wasFound());\n+    }\n+\n+    @Test\n+    public void registerSuccessAndSuccessWithGasUsedFirstTime() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        gasFinder.registerSuccess(1000000L, 100000L);\n+        gasFinder.registerSuccess(100000L, 100000L);\n+\n+        Assert.assertTrue(gasFinder.wasFound());\n+        Assert.assertEquals(100000L, gasFinder.getGasFound());\n+    }\n+\n+    @Test\n+    public void wasNotFoundAtTheBeginning() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        Assert.assertFalse(gasFinder.wasFound());\n+    }\n+\n+    @Test\n+    public void getGasFoundWithoutData() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        try {\n+            gasFinder.getGasFound();\n+            Assert.fail();\n+        }\n+        catch (IllegalStateException ex) {\n+            Assert.assertEquals(\"No gas found yet\", ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void wasFound() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        gasFinder.registerSuccess(2000, 1000);\n+        gasFinder.registerFailure(1000);\n+\n+        Assert.assertTrue(gasFinder.wasFound());\n+        Assert.assertEquals(2000L, gasFinder.getGasFound());\n+    }\n+\n+    @Test\n+    public void firstFailureNextTry() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        gasFinder.registerFailure(1000L);\n+\n+        Assert.assertFalse(gasFinder.wasFound());\n+        Assert.assertTrue(gasFinder.nextTry() > 1000L);\n+    }\n+\n+    @Test\n+    public void manyFailuresThenTopGas() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        gasFinder.registerFailure(1000L);\n+\n+        for (int k = 0; k < 11; k++) {\n+            gasFinder.registerFailure(gasFinder.nextTry());\n+        }\n+\n+        try {\n+            gasFinder.nextTry();\n+            Assert.fail();\n+        }\n+        catch (IllegalStateException ex) {\n+            Assert.assertEquals(\"Too much gas to try\", ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void firstFailureThenSuccess() {\n+        GasFinder gasFinder = new GasFinder(gasFinderConfiguration);\n+\n+        gasFinder.registerFailure(1000L);\n+        gasFinder.registerSuccess(1001000L, 2000L);\n+\n+        Assert.assertFalse(gasFinder.wasFound());\n+        Assert.assertEquals(2000L, gasFinder.nextTry());\n+    }\n+}"
  },
  {
    "sha": "28d2ac751d3ac4cf2780169509c19759e3b111d0",
    "filename": "rskj-core/src/test/java/org/ethereum/rpc/Web3ImplLogsTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplLogsTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplLogsTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplLogsTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -1004,7 +1004,8 @@ private Web3Impl createWeb3() {\n                 null, new ExecutionBlockRetriever(mainchainView, blockChain, null, null),\n                 null, new EthModuleWalletEnabled(wallet), null,\n                 new BridgeSupportFactory(\n-                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig())\n+                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig()),\n+                null\n         );\n         TxPoolModule txPoolModule = new TxPoolModuleImpl(transactionPool);\n         DebugModule debugModule = new DebugModuleImpl(null, null, Web3Mocks.getMockMessageHandler(), null);"
  },
  {
    "sha": "6227be24b5b4a0de42e12875787d4c503052f116",
    "filename": "rskj-core/src/test/java/org/ethereum/rpc/Web3ImplScoringTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplScoringTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplScoringTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplScoringTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -366,7 +366,8 @@ private static Web3Impl createWeb3(PeerScoringManager peerScoringManager) {\n                 null, new ExecutionBlockRetriever(miningMainchainView, world.getBlockChain(), null, null),\n                 null, new EthModuleWalletEnabled(wallet), null,\n                 new BridgeSupportFactory(\n-                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig())\n+                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig()),\n+                null\n         );\n         TxPoolModule tpm = new TxPoolModuleImpl(Web3Mocks.getMockTransactionPool());\n         DebugModule dm = new DebugModuleImpl(null, null, Web3Mocks.getMockMessageHandler(), null);"
  },
  {
    "sha": "9549d91aabe6b740576893774f9076ae31749fe5",
    "filename": "rskj-core/src/test/java/org/ethereum/rpc/Web3ImplTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/org/ethereum/rpc/Web3ImplTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -1795,7 +1795,8 @@ private Web3Impl createWeb3(SimpleEthereum eth, PeerServer peerServer) {\n                 null, new ExecutionBlockRetriever(mainchainView, blockchain, null, null),\n                 null, new EthModuleWalletEnabled(wallet), null,\n                 new BridgeSupportFactory(\n-                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig())\n+                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig()),\n+                null\n         );\n         TxPoolModule txPoolModule = new TxPoolModuleImpl(Web3Mocks.getMockTransactionPool());\n         DebugModule debugModule = new DebugModuleImpl(null, null, Web3Mocks.getMockMessageHandler(), null);\n@@ -1886,7 +1887,10 @@ private Web3Impl createWeb3(\n                 new ExecutionBlockRetriever(miningMainchainViewMock, blockchain, null, null), repositoryLocator, new EthModuleWalletEnabled(wallet),\n                 new EthModuleTransactionBase(config.getNetworkConstants(), wallet, transactionPool, transactionGateway),\n                 new BridgeSupportFactory(\n-                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig()));\n+                        null, config.getNetworkConstants().getBridgeConstants(), config.getActivationConfig()),\n+                null\n+        );\n+\n         TxPoolModule txPoolModule = new TxPoolModuleImpl(transactionPool);\n         DebugModule debugModule = new DebugModuleImpl(null, null, Web3Mocks.getMockMessageHandler(), null);\n         RskModule rskModule = new RskModuleImpl(blockchain, blockStore, receiptStore, retriever);"
  },
  {
    "sha": "671f0063a48ef7d4ce116fe1c4b4f63bdb663b44",
    "filename": "rskj-core/src/test/java/org/ethereum/vm/program/NestedContractsTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/vm/program/NestedContractsTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/vm/program/NestedContractsTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/org/ethereum/vm/program/NestedContractsTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -210,7 +210,9 @@ private EthModule buildEthModule(World world) {\n                 world.getRepositoryLocator(),\n                 null,\n                 null,\n-                world.getBridgeSupportFactory());\n+                world.getBridgeSupportFactory(),\n+                null\n+        );\n     }\n }\n "
  },
  {
    "sha": "30e6a4cdb76b9050c806a8b08d91be15c2c6e8b0",
    "filename": "rskj-core/src/test/java/org/ethereum/vm/program/ProgramResultTest.java",
    "status": "modified",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/vm/program/ProgramResultTest.java",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/java/org/ethereum/vm/program/ProgramResultTest.java",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/java/org/ethereum/vm/program/ProgramResultTest.java?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -92,6 +92,39 @@ public void add_interenal_tx_many_levels_Ok() {\n         Assert.assertArrayEquals(originTx.getHash().getBytes(), result.getOriginHash());\n     }\n \n+    @Test\n+    public void spendGas() {\n+        ProgramResult programResult = new ProgramResult();\n+\n+        programResult.spendGas(100_000L);\n+\n+        Assert.assertEquals(100_000L, programResult.getGasUsed());\n+        Assert.assertEquals(0L, programResult.getGasRefund());\n+    }\n+\n+    @Test\n+    public void spendGasTwice() {\n+        ProgramResult programResult = new ProgramResult();\n+\n+        programResult.spendGas(100_000L);\n+        programResult.spendGas(100_000L);\n+\n+        Assert.assertEquals(200_000L, programResult.getGasUsed());\n+        Assert.assertEquals(0L, programResult.getGasRefund());\n+    }\n+\n+    @Test\n+    public void spendGasTwiceAndPartialRefund() {\n+        ProgramResult programResult = new ProgramResult();\n+\n+        programResult.spendGas(100_000L);\n+        programResult.spendGas(100_000L);\n+        programResult.refundGas(50_000L);\n+\n+        Assert.assertEquals(150_000L, programResult.getGasUsed());\n+        Assert.assertEquals(50_000L, programResult.getGasRefund());\n+    }\n+\n     private Transaction getOriginTransaction() {\n         return Transaction.builder()\n             .nonce(BigInteger.ONE.toByteArray())"
  },
  {
    "sha": "7747918199a60f9b3851cba0748fac473e3a7353",
    "filename": "rskj-core/src/test/resources/dsl/eth_module/callWithValue.txt",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/resources/dsl/eth_module/callWithValue.txt",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/resources/dsl/eth_module/callWithValue.txt",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/resources/dsl/eth_module/callWithValue.txt?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -0,0 +1,50 @@\n+comment\n+\n+// Contracts compiled using\n+// Truffle v5.1.14 (core: 5.1.14)\n+// Solidity v0.5.16 (solc-js)\n+\n+// the contracts source code\n+\n+pragma solidity >=0.5.0 <0.6.0;\n+\n+contract CallWithValue {\n+    function () external payable { }\n+\n+    function callWithValue() public payable {\n+        address(this).transfer(100);\n+    }\n+}\n+\n+end\n+\n+account_new acc1 20000000\n+\n+# Deploy UpdateStorage\n+\n+transaction_build tx01\n+    sender acc1\n+    receiverAddress 00\n+    value 0\n+    data 6080604052348015600f57600080fd5b5060a48061001e6000396000f3fe608060405260043610601c5760003560e01c8063c3cefd3614601e575b005b60246026565b005b3073ffffffffffffffffffffffffffffffffffffffff166108fc60649081150290604051600060405180830381858888f19350505050158015606c573d6000803e3d6000fd5b5056fea265627a7a723158203bf413e838652e7b24283fcd4ac5d0ca46bfed18271b3fbfbc3a8c18fc8912c964736f6c63430005100032\n+    gas 2000000\n+    build\n+\n+block_build b01\n+    parent g00\n+    transactions tx01\n+    build\n+\n+block_connect b01\n+\n+# Assert best block\n+assert_best b01\n+\n+# Back to code test,\n+# you must estimate the gas needed\n+# to invoke callWithValue()\n+# and it should be greater than the gas used\n+# when executing the transaction\n+# Also, the gas used when executing the transaction\n+# should not be enough to invoke it again\n+"
  },
  {
    "sha": "58dbf8cf5df06b3768184a6c1fbc993694eb3461",
    "filename": "rskj-core/src/test/resources/dsl/eth_module/updateStorage.txt",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/rsksmart/rskj/blob/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/resources/dsl/eth_module/updateStorage.txt",
    "raw_url": "https://github.com/rsksmart/rskj/raw/70648f72eb6d5516774ed598b099c13af68fb8d6/rskj-core/src/test/resources/dsl/eth_module/updateStorage.txt",
    "contents_url": "https://api.github.com/repos/rsksmart/rskj/contents/rskj-core/src/test/resources/dsl/eth_module/updateStorage.txt?ref=70648f72eb6d5516774ed598b099c13af68fb8d6",
    "patch": "@@ -0,0 +1,71 @@\n+comment\n+\n+// Contracts compiled using\n+// Truffle v5.1.14 (core: 5.1.14)\n+// Solidity v0.5.16 (solc-js)\n+\n+// the contracts source code\n+\n+pragma solidity >=0.5.0 <0.6.0;\n+\n+contract UpdateStorage {\n+    uint[100] public values;\n+\n+    function setValue(uint position, uint value) public {\n+        values[position] = value;\n+    }\n+}\n+\n+end\n+\n+account_new acc1 20000000\n+\n+# Deploy UpdateStorage\n+\n+transaction_build tx01\n+    sender acc1\n+    receiverAddress 00\n+    value 0\n+    data 608060405234801561001057600080fd5b5061010d806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80635e383d211460375780637b8d56e3146076575b600080fd5b606060048036036020811015604b57600080fd5b810190808035906020019092919050505060ab565b6040518082815260200191505060405180910390f35b60a960048036036040811015608a57600080fd5b81019080803590602001909291908035906020019092919050505060c2565b005b6000816064811060b757fe5b016000915090505481565b806000836064811060cf57fe5b0181905550505056fea265627a7a72315820481f4c61724afb8677951b5b73da54e3ca80e3c89a3d11ad4d4a59e80e51f21464736f6c63430005100032\n+    gas 2000000\n+    build\n+\n+block_build b01\n+    parent g00\n+    transactions tx01\n+    build\n+\n+block_connect b01\n+\n+# Assert best block\n+assert_best b01\n+\n+# invoke setValue(1, 42) method\n+\n+transaction_build tx02\n+    sender acc1\n+    nonce 1\n+    contract tx01   # created in tx01\n+    value 0\n+    data 7b8d56e30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002a\n+    gas 6400000\n+    build\n+\n+block_build b02\n+    parent b01\n+    transactions tx02\n+    gasLimit 6500000\n+    build\n+\n+block_connect b02\n+\n+# Assert best block\n+assert_best b02\n+\n+# Back to code test,\n+# you must check gas estimation\n+# for different setValue invocations\n+# (set non-zero cell to non-zero)\n+# (set zero cell to non-zero)\n+# (set non-zero cell to zero)\n+"
  }
]
