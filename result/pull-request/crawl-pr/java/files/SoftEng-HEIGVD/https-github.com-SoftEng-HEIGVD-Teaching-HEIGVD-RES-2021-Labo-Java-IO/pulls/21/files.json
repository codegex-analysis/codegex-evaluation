[
  {
    "sha": "aa7a29faf3d8854ede38dfc86774dfdcb4ce2978",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "status": "modified",
    "additions": 143,
    "deletions": 134,
    "changes": 277,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java?ref=0fb7f14a8994119965229510c4aa1cae82898d6a",
    "patch": "@@ -9,155 +9,164 @@\n import ch.heigvd.res.labio.quotes.QuoteClient;\n import org.apache.commons.io.FileUtils;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.io.Writer;\n+import java.io.*;\n import java.net.URISyntaxException;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class Application implements IApplication {\n \n-  /**\n-   * This constant defines where the quotes will be stored. The path is relative\n-   * to where the Java application is invoked.\n-   */\n-  public static String WORKSPACE_DIRECTORY = \"./workspace/quotes\";\n-  \n-  private static final Logger LOG = Logger.getLogger(Application.class.getName());\n-  \n-  public static void main(String[] args) {\n-    \n-    /*\n-     * I prefer to have LOG output on a single line, it's easier to read. Being able\n-     * to change the formatting of console outputs is one of the reasons why it is\n-     * better to use a Logger rather than using System.out.println\n+    /**\n+     * This constant defines where the quotes will be stored. The path is relative\n+     * to where the Java application is invoked.\n      */\n-    System.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%4$s: %5$s%6$s%n\");\n-    \n-       \n-    int numberOfQuotes = 0;\n-    try {\n-      numberOfQuotes = Integer.parseInt(args[0]);\n-    } catch (Exception e) {\n-      System.err.println(\"The command accepts a single numeric argument (number of quotes to fetch)\");\n-      System.exit(-1);\n+    public static String WORKSPACE_DIRECTORY = \"./workspace/quotes\";\n+\n+    private static final Logger LOG = Logger.getLogger(Application.class.getName());\n+\n+    public static void main(String[] args) {\n+\n+        /*\n+         * I prefer to have LOG output on a single line, it's easier to read. Being able\n+         * to change the formatting of console outputs is one of the reasons why it is\n+         * better to use a Logger rather than using System.out.println\n+         */\n+        System.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%4$s: %5$s%6$s%n\");\n+\n+\n+        int numberOfQuotes = 0;\n+        try {\n+            numberOfQuotes = Integer.parseInt(args[0]);\n+        } catch (Exception e) {\n+            System.err.println(\"The command accepts a single numeric argument (number of quotes to fetch)\");\n+            System.exit(-1);\n+        }\n+\n+        Application app = new Application();\n+        try {\n+            /*\n+             * Step 1 : clear the output directory\n+             */\n+            app.clearOutputDirectory();\n+\n+            /*\n+             * Step 2 : use the QuotesClient to fetch quotes; store each quote in a file\n+             */\n+            app.fetchAndStoreQuotes(numberOfQuotes);\n+\n+            /*\n+             * Step 3 : use a file explorer to traverse the file system; print the name of each directory and file\n+             */\n+            Writer writer = new StringWriter(); // we create a special writer that will send characters into a string (memory)\n+            app.printFileNames(writer);         // we hand over this writer to the printFileNames method\n+            LOG.info(writer.toString());       // we dump the whole result on the console\n+\n+            /*\n+             * Step 4 : process the quote files, by applying 2 transformations to their content\n+             *          (convert to uppercase and add line numbers)\n+             */\n+            app.processQuoteFiles();\n+\n+        } catch (IOException ex) {\n+            LOG.log(Level.SEVERE, \"Could not fetch quotes. {0}\", ex.getMessage());\n+            ex.printStackTrace();\n+        }\n     }\n-        \n-    Application app = new Application();\n-    try {\n-      /*\n-       * Step 1 : clear the output directory\n-       */\n-      app.clearOutputDirectory();\n-      \n-      /*\n-       * Step 2 : use the QuotesClient to fetch quotes; store each quote in a file\n-       */\n-      app.fetchAndStoreQuotes(numberOfQuotes);\n-      \n-      /*\n-       * Step 3 : use a file explorer to traverse the file system; print the name of each directory and file\n-       */\n-      Writer writer = new StringWriter(); // we create a special writer that will send characters into a string (memory)\n-      app.printFileNames(writer);         // we hand over this writer to the printFileNames method\n-      LOG.info(writer.toString());       // we dump the whole result on the console\n-      \n-      /*\n-       * Step 4 : process the quote files, by applying 2 transformations to their content\n-       *          (convert to uppercase and add line numbers)\n-       */\n-      app.processQuoteFiles();\n-      \n-    } catch (IOException ex) {\n-      LOG.log(Level.SEVERE, \"Could not fetch quotes. {0}\", ex.getMessage());\n-      ex.printStackTrace();\n+\n+    @Override\n+    public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n+        clearOutputDirectory();\n+        QuoteClient client = new QuoteClient();\n+        for (int i = 0; i < numberOfQuotes; i++) {\n+            Quote quote = null;\n+            try {\n+                quote = client.fetchQuote();\n+            } catch (URISyntaxException | InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            if (quote != null) {\n+                /* There is a missing piece here!\n+                 * As you can see, this method handles the first part of the lab. It uses the web service\n+                 * client to fetch quotes. We have removed a single line from this method. It is a call to\n+                 * one method provided by this class, which is responsible for storing the content of the\n+                 * quote in a text file (and for generating the directories based on the tags).\n+                 */\n+                storeQuote(quote, \"quote-\" + quote.getValue().getId());\n+                LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n+                for (String tag : quote.getTags()) {\n+                    LOG.info(\"> \" + tag);\n+                }\n+            }\n+\n+        }\n     }\n-  }\n-\n-  @Override\n-  public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n-    clearOutputDirectory();\n-    QuoteClient client = new QuoteClient();\n-    for (int i = 0; i < numberOfQuotes; i++) {\n-      Quote quote = null;\n-      try {\n-        quote = client.fetchQuote();\n-      } catch (URISyntaxException | InterruptedException e) {\n-        e.printStackTrace();\n-      }\n-      if (quote != null) {\n-        /* There is a missing piece here!\n-         * As you can see, this method handles the first part of the lab. It uses the web service\n-         * client to fetch quotes. We have removed a single line from this method. It is a call to\n-         * one method provided by this class, which is responsible for storing the content of the\n-         * quote in a text file (and for generating the directories based on the tags).\n-         */\n-        LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n+\n+    /**\n+     * This method deletes the WORKSPACE_DIRECTORY and its content. It uses the\n+     * apache commons-io library. You should call this method in the main method.\n+     *\n+     * @throws IOException\n+     */\n+    void clearOutputDirectory() throws IOException {\n+        FileUtils.deleteDirectory(new File(WORKSPACE_DIRECTORY));\n+    }\n+\n+    /**\n+     * This method stores the content of a quote in the local file system. It has\n+     * 2 responsibilities:\n+     * <p>\n+     * - with quote.getTags(), it gets a list of tags and uses\n+     * it to create sub-folders (for instance, if a quote has three tags \"A\", \"B\" and\n+     * \"C\", it will be stored in /quotes/A/B/C/quotes-n.utf8.\n+     * <p>\n+     * - with quote.getQuote(), it has access to the text of the quote. It stores\n+     * this text in UTF-8 file.\n+     *\n+     * @param quote    the quote object, with tags and text\n+     * @param filename the name of the file to create and where to store the quote text\n+     * @throws IOException\n+     */\n+    void storeQuote(Quote quote, String filename) throws IOException {\n+        StringBuilder path = new StringBuilder();\n+        path.append(WORKSPACE_DIRECTORY).append(\"/\");\n+\n         for (String tag : quote.getTags()) {\n-          LOG.info(\"> \" + tag);\n+            path.append(tag).append(\"/\");\n         }\n-      }\n \n+        path.append(filename).append(\".utf8\");\n+        File file = new File(path.toString());\n+        file.getParentFile().mkdirs();\n+        FileWriter writer = new FileWriter(file);\n+        writer.write(quote.getQuote());\n+        writer.close();\n+    }\n+\n+    /**\n+     * This method uses a IFileExplorer to explore the file system and prints the name of each\n+     * encountered file and directory.\n+     */\n+    void printFileNames(final Writer writer) {\n+        IFileExplorer explorer = new DFSFileExplorer();\n+        explorer.explore(new File(WORKSPACE_DIRECTORY), new IFileVisitor() {\n+            @Override\n+            public void visit(File file) {\n+                try {\n+                    writer.write(file.getPath() + \"\\n\");\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void processQuoteFiles() throws IOException {\n+        IFileExplorer explorer = new DFSFileExplorer();\n+        explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());\n     }\n-  }\n-  \n-  /**\n-   * This method deletes the WORKSPACE_DIRECTORY and its content. It uses the\n-   * apache commons-io library. You should call this method in the main method.\n-   * \n-   * @throws IOException \n-   */\n-  void clearOutputDirectory() throws IOException {\n-    FileUtils.deleteDirectory(new File(WORKSPACE_DIRECTORY));    \n-  }\n-\n-  /**\n-   * This method stores the content of a quote in the local file system. It has\n-   * 2 responsibilities: \n-   * \n-   * - with quote.getTags(), it gets a list of tags and uses\n-   *   it to create sub-folders (for instance, if a quote has three tags \"A\", \"B\" and\n-   *   \"C\", it will be stored in /quotes/A/B/C/quotes-n.utf8.\n-   * \n-   * - with quote.getQuote(), it has access to the text of the quote. It stores\n-   *   this text in UTF-8 file.\n-   * \n-   * @param quote the quote object, with tags and text\n-   * @param filename the name of the file to create and where to store the quote text\n-   * @throws IOException \n-   */\n-  void storeQuote(Quote quote, String filename) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n-  \n-  /**\n-   * This method uses a IFileExplorer to explore the file system and prints the name of each\n-   * encountered file and directory.\n-   */\n-  void printFileNames(final Writer writer) {\n-    IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new IFileVisitor() {\n-      @Override\n-      public void visit(File file) {\n-        /*\n-         * There is a missing piece here. Notice how we use an anonymous class here. We provide the implementation\n-         * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n-         * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n-         */\n-      }\n-    });\n-  }\n-\n-  @Override\n-  public void processQuoteFiles() throws IOException {\n-    IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());    \n-  }\n \n }"
  },
  {
    "sha": "2d8b2b8bf4e6da08fea5b8f7cd2ababb136ebd47",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "status": "modified",
    "additions": 14,
    "deletions": 14,
    "changes": 28,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java?ref=0fb7f14a8994119965229510c4aa1cae82898d6a",
    "patch": "@@ -3,24 +3,24 @@\n import java.util.logging.Logger;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class Utils {\n \n-  private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n+    private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n \n-  /**\n-   * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n-   * the next line in the string passed in arguments. \n-   * \n-   * @param lines a string that may contain 0, 1 or more lines\n-   * @return an array with 2 elements; the first element is the next line with\n-   * the line separator, the second element is the remaining text. If the argument does not\n-   * contain any line separator, then the first element is an empty string.\n-   */\n-  public static String[] getNextLine(String lines) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    /**\n+     * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n+     * the next line in the string passed in arguments.\n+     *\n+     * @param lines a string that may contain 0, 1 or more lines\n+     * @return an array with 2 elements; the first element is the next line with\n+     * the line separator, the second element is the remaining text. If the argument does not\n+     * contain any line separator, then the first element is an empty string.\n+     */\n+    public static String[] getNextLine(String lines) {\n+        String[] a = lines.split(\"(?<=(?>\\\\r\\\\n|\\\\r|\\\\n))\", 2);\n+        return a.length == 1 ? new String[]{\"\", a[0]} : a;\n+    }\n \n }"
  },
  {
    "sha": "558afb4fc2aa4a931aa589648e96ff4e8a949968",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "status": "modified",
    "additions": 14,
    "deletions": 5,
    "changes": 19,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java?ref=0fb7f14a8994119965229510c4aa1cae82898d6a",
    "patch": "@@ -4,20 +4,29 @@\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n \n import java.io.File;\n+import java.util.Arrays;\n+import java.util.Comparator;\n \n /**\n  * This implementation of the IFileExplorer interface performs a depth-first\n  * exploration of the file system and invokes the visitor for every encountered\n  * node (file and directory). When the explorer reaches a directory, it visits all\n  * files in the directory and then moves into the subdirectories.\n- * \n+ *\n  * @author Olivier Liechti\n  */\n public class DFSFileExplorer implements IFileExplorer {\n \n-  @Override\n-  public void explore(File rootDirectory, IFileVisitor vistor) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    @Override\n+    public void explore(File rootDirectory, IFileVisitor vistor) {\n+        vistor.visit(rootDirectory);\n+        if (!rootDirectory.isDirectory()) return;\n+        File[] children = rootDirectory.listFiles();\n+        if(children == null) return;\n+        Arrays.sort(children);\n+        for (File child : children) {\n+            explore(child, vistor);\n+        }\n+    }\n \n }"
  },
  {
    "sha": "7e445e85a411c0f6ec18a53b7b069109e6846e53",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "status": "modified",
    "additions": 30,
    "deletions": 17,
    "changes": 47,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java?ref=0fb7f14a8994119965229510c4aa1cae82898d6a",
    "patch": "@@ -10,32 +10,45 @@\n  * When filter encounters a line separator, it sends it to the decorated writer.\n  * It then sends the line number and a tab character, before resuming the write\n  * process.\n- *\n+ * <p>\n  * Hello\\n\\World -> 1\\Hello\\n2\\tWorld\n  *\n  * @author Olivier Liechti\n  */\n public class FileNumberingFilterWriter extends FilterWriter {\n \n-  private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+    private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+\n+    private int nbLines;\n+    private int lastChar;\n+\n+    public FileNumberingFilterWriter(Writer out) {\n+        super(out);\n+    }\n \n-  public FileNumberingFilterWriter(Writer out) {\n-    super(out);\n-  }\n+    @Override\n+    public void write(String str, int off, int len) throws IOException {\n+        write(str.toCharArray(), off, len);\n+    }\n \n-  @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    @Override\n+    public void write(char[] cbuf, int off, int len) throws IOException {\n+        for (int i = off; i < off + len && i < cbuf.length; ++i) {\n+            write(cbuf[i]);\n+        }\n+    }\n \n-  @Override\n-  public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    @Override\n+    public void write(int c) throws IOException {\n+        if (nbLines == 0 || lastChar == '\\r' && c != '\\n') newLine();\n+        super.write(c);\n+        if (c == '\\n') newLine();\n+        lastChar = c;\n+    }\n \n-  @Override\n-  public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n \n+    private void newLine() throws IOException {\n+        String s = ++nbLines + \"\\t\";\n+        super.write(s, 0, s.length());\n+    }\n }"
  },
  {
    "sha": "9531abb26981f30e945497ac3c0cf19fd2559a1b",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "status": "modified",
    "additions": 18,
    "deletions": 17,
    "changes": 35,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java?ref=0fb7f14a8994119965229510c4aa1cae82898d6a",
    "patch": "@@ -5,28 +5,29 @@\n import java.io.Writer;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class UpperCaseFilterWriter extends FilterWriter {\n-  \n-  public UpperCaseFilterWriter(Writer wrappedWriter) {\n-    super(wrappedWriter);\n-  }\n \n-  @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    public UpperCaseFilterWriter(Writer wrappedWriter) {\n+        super(wrappedWriter);\n+    }\n \n-  @Override\n-  public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    @Override\n+    public void write(String str, int off, int len) throws IOException {\n+        super.write(str.toUpperCase(), off, len);\n+    }\n \n-  @Override\n-  public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    @Override\n+    public void write(char[] cbuf, int off, int len) throws IOException {\n+        for (int i = off; i < off + len && i < cbuf.length; ++i) {\n+            write(cbuf[i]);\n+        }\n+    }\n+\n+    @Override\n+    public void write(int c) throws IOException {\n+        super.write(Character.toUpperCase(c));\n+    }\n \n }"
  },
  {
    "sha": "b8e73fe98d7734de64465690bf4d9ab032502849",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java?ref=0fb7f14a8994119965229510c4aa1cae82898d6a",
    "patch": "@@ -1,5 +1,8 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n+import ch.heigvd.res.labio.impl.filters.FileNumberingFilterWriter;\n+import ch.heigvd.res.labio.impl.filters.UpperCaseFilterWriter;\n+\n import java.io.Writer;\n \n /**\n@@ -15,16 +18,13 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    if (true) {\n-      throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    }\n     /*\n-     * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration \n+     * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration\n      * of the writer (connected to the file. You can see that you first decorate the writer with an UpperCaseFilterWriter, which you then\n      * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the characters read from the\n      * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to the output file.f\n      */\n-    //writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n+    writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n     return writer; \n   }\n "
  },
  {
    "sha": "472d89e54f1d73f52878b5ae45fe27a6a9c4c0c5",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "status": "modified",
    "additions": 39,
    "deletions": 38,
    "changes": 77,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java?ref=0fb7f14a8994119965229510c4aa1cae82898d6a",
    "patch": "@@ -13,52 +13,53 @@\n  * This abstract class implements the IFileVisitor interface and has the responsibility\n  * to open an input text file, to read its content, to apply a number of transformations\n  * (via filters) and to write the result in an output text file.\n- * \n+ * <p>\n  * The subclasses have to implement the decorateWithFilters method, which instantiates\n  * a list of filters and decorates the output writer with them.\n- * \n+ *\n  * @author Olivier Liechti\n  */\n public abstract class FileTransformer implements IFileVisitor {\n+    final int BUFFERSIZE = 255;\n+    private static final Logger LOG = Logger.getLogger(FileTransformer.class.getName());\n+    private final List<FilterWriter> filters = new ArrayList<>();\n \n-  private static final Logger LOG = Logger.getLogger(FileTransformer.class.getName());\n-  private final List<FilterWriter> filters = new ArrayList<>();\n-  \n-  /**\n-   * The subclasses implement this method to define what transformation(s) are\n-   * applied when writing characters to the output writer. The visit(File file)\n-   * method creates an output file and creates a corresponding writer. It then\n-   * calls decorateWithFilters and passes the writer as argument. The method\n-   * wraps 0, 1 or more filter writers around the original writer and returns \n-   * the result.\n-   * \n-   * @param writer the writer connected to the output file\n-   * @return the writer decorated by 0, 1 or more filter writers\n-   */\n-  public abstract Writer decorateWithFilters(Writer writer);\n+    /**\n+     * The subclasses implement this method to define what transformation(s) are\n+     * applied when writing characters to the output writer. The visit(File file)\n+     * method creates an output file and creates a corresponding writer. It then\n+     * calls decorateWithFilters and passes the writer as argument. The method\n+     * wraps 0, 1 or more filter writers around the original writer and returns\n+     * the result.\n+     *\n+     * @param writer the writer connected to the output file\n+     * @return the writer decorated by 0, 1 or more filter writers\n+     */\n+    public abstract Writer decorateWithFilters(Writer writer);\n \n-  @Override\n-  public void visit(File file) {\n-    if (!file.isFile()) {\n-      return;\n-    }\n-    try {\n-      Reader reader = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8);\n-      Writer writer = new OutputStreamWriter(new FileOutputStream(file.getPath()+ \".out\"), StandardCharsets.UTF_8); // the bug fix by teacher\n-      writer = decorateWithFilters(writer);\n+    @Override\n+    public void visit(File file) {\n+        if (!file.isFile()) {\n+            return;\n+        }\n+        try {\n+            Reader reader = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8);\n+            Writer writer = new OutputStreamWriter(new FileOutputStream(file.getPath() + \".out\"), StandardCharsets.UTF_8); // the bug fix by teacher\n+            writer = decorateWithFilters(writer);\n+\n+            char[] buffer = new char[BUFFERSIZE];\n+            int numberOfNewBytes = reader.read(buffer);\n+            while (numberOfNewBytes != -1) {\n+                writer.write(buffer, 0, numberOfNewBytes);\n+                numberOfNewBytes = reader.read(buffer);\n+            }\n \n-      /*\n-       * There is a missing piece here: you have an input reader and an ouput writer (notice how the \n-       * writer has been decorated by the concrete subclass!). You need to write a loop to read the\n-       * characters and write them to the writer.\n-       */\n-      \n-      reader.close();\n-      writer.flush();\n-      writer.close();\n-    } catch (IOException ex) {\n-      LOG.log(Level.SEVERE, null, ex);\n+            reader.close();\n+            writer.flush();\n+            writer.close();\n+        } catch (IOException ex) {\n+            LOG.log(Level.SEVERE, null, ex);\n+        }\n     }\n-  }\n \n }"
  },
  {
    "sha": "b16c8dc740996daf3dc63e93b51b079a5e1e4b6d",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 8,
    "changes": 10,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/0fb7f14a8994119965229510c4aa1cae82898d6a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java?ref=0fb7f14a8994119965229510c4aa1cae82898d6a",
    "patch": "@@ -13,14 +13,8 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    /*\n-     * The NoOpFileTransformer does not apply any transformation of the character stream\n-     * (no uppercase, no line number, etc.). So, we don't need to decorate the writer connected to\n-     * the output file at all. Just uncomment the following line and get rid of the UnsupportedOperationException and\n-     * you will be all set.\n-     */\n-    //return writer;\n+    //todo\n+    return writer;\n   }\n \n }"
  }
]
