[
  {
    "sha": "85ecac7c76ae8cb949716bf5c38bfecd74a1d0fe",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "status": "modified",
    "additions": 28,
    "deletions": 5,
    "changes": 33,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java?ref=79ce364c5ee1721256a19dbeb2f41d78910a11e4",
    "patch": "@@ -9,11 +9,12 @@\n import ch.heigvd.res.labio.quotes.QuoteClient;\n import org.apache.commons.io.FileUtils;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.io.Writer;\n+import java.io.*;\n import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n@@ -98,6 +99,7 @@ public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n          * one method provided by this class, which is responsible for storing the content of the\n          * quote in a text file (and for generating the directories based on the tags).\n          */\n+        storeQuote(quote, \"quote-\" + i + \".utf8\");\n         LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n         for (String tag : quote.getTags()) {\n           LOG.info(\"> \" + tag);\n@@ -133,7 +135,23 @@ void clearOutputDirectory() throws IOException {\n    * @throws IOException \n    */\n   void storeQuote(Quote quote, String filename) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+\n+    /* Create the path for the output file */\n+    StringBuilder path = new StringBuilder(WORKSPACE_DIRECTORY).append(\"/\");\n+    for (String tag : quote.getTags()) {\n+      path.append(tag).append(\"/\");\n+    }\n+\n+    /* Create sub-directories */\n+    File subdirectories = new File(path.toString());\n+    subdirectories.mkdirs();\n+\n+    /* Create and write in output file */\n+    path.append(filename);\n+    Writer writer = new OutputStreamWriter(new FileOutputStream(path.toString()), StandardCharsets.UTF_8);\n+    writer.write(quote.getQuote());\n+    writer.flush();\n+    writer.close();\n   }\n   \n   /**\n@@ -150,6 +168,11 @@ public void visit(File file) {\n          * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n          * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n          */\n+        try {\n+          writer.write(file.toString() + \"\\n\");\n+        }catch (Exception e){\n+          System.err.println(\"An error occurred with I/O file\");\n+        }\n       }\n     });\n   }"
  },
  {
    "sha": "841de39669d5fa8e2aea62175ac47dc070ff538e",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "status": "modified",
    "additions": 33,
    "deletions": 15,
    "changes": 48,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java?ref=79ce364c5ee1721256a19dbeb2f41d78910a11e4",
    "patch": "@@ -3,24 +3,42 @@\n import java.util.logging.Logger;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class Utils {\n \n-  private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n-\n-  /**\n-   * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n-   * the next line in the string passed in arguments. \n-   * \n-   * @param lines a string that may contain 0, 1 or more lines\n-   * @return an array with 2 elements; the first element is the next line with\n-   * the line separator, the second element is the remaining text. If the argument does not\n-   * contain any line separator, then the first element is an empty string.\n-   */\n-  public static String[] getNextLine(String lines) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n+\n+    /**\n+     * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n+     * the next line in the string passed in arguments.\n+     *\n+     * @param lines a string that may contain 0, 1 or more lines\n+     * @return an array with 2 elements; the first element is the next line with\n+     * the line separator, the second element is the remaining text. If the argument does not\n+     * contain any line separator, then the first element is an empty string.\n+     */\n+    public static String[] getNextLine(String lines) {\n+\n+        String[] result = new String[]{\"\", lines};\n+\n+        for(int i = 0; i < lines.length(); ++i) {\n+            char c = lines.charAt(i); /* current char */\n+            switch (c) {\n+                case '\\r':\n+                    if (i < lines.length() - 1 && lines.charAt(i + 1) == '\\n') {\n+                        result[0] = lines.substring(0, i + 2);\n+                        result[1] = lines.substring(i + 2);\n+                        return result;\n+                    }\n+                case '\\n': /* case '\\n' or '\\r\\n' */\n+                    result[0] = lines.substring(0, i + 1);\n+                    result[1] = lines.substring(i + 1);\n+                    return result;\n+            }\n+        }\n+\n+        return result;\n+    }\n \n }"
  },
  {
    "sha": "2cd02008bf776de8d6c232c82a4bc4e1ca115f4b",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "status": "modified",
    "additions": 30,
    "deletions": 5,
    "changes": 35,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java?ref=79ce364c5ee1721256a19dbeb2f41d78910a11e4",
    "patch": "@@ -4,20 +4,45 @@\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n \n import java.io.File;\n+import java.util.Arrays;\n \n /**\n  * This implementation of the IFileExplorer interface performs a depth-first\n  * exploration of the file system and invokes the visitor for every encountered\n  * node (file and directory). When the explorer reaches a directory, it visits all\n  * files in the directory and then moves into the subdirectories.\n- * \n+ *\n  * @author Olivier Liechti\n  */\n public class DFSFileExplorer implements IFileExplorer {\n \n-  @Override\n-  public void explore(File rootDirectory, IFileVisitor vistor) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    @Override\n+    public void explore(File rootDirectory, IFileVisitor visitor) {\n+\n+        /* Visit root directory */\n+        visitor.visit(rootDirectory);\n+\n+        /* List files and sub-directories in root */\n+        File[] listOfFiles = rootDirectory.listFiles();\n+\n+        if (listOfFiles != null) {\n+            /*\n+             * Need to sort files by name because \"There is no guarantee that the name strings in the\n+             * resulting array will appear in any specific order; they are not, in particular, guaranteed\n+             * to appear in alphabetical order.\"\n+             */\n+            Arrays.sort(listOfFiles);\n+\n+            /* Visit each file and explore recursively sub-directories */\n+            for (File file : listOfFiles) {\n+                if (file.isDirectory()) {     /* sub-directory */\n+                    explore(file, visitor);\n+                } else {                      /* file */\n+                    visitor.visit(file);\n+                }\n+            }\n+        }\n+\n+    }\n \n }"
  },
  {
    "sha": "4654e4254f1f17fa338cd4d600ba6a94a541aef3",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "status": "modified",
    "additions": 28,
    "deletions": 3,
    "changes": 31,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java?ref=79ce364c5ee1721256a19dbeb2f41d78910a11e4",
    "patch": "@@ -23,19 +23,44 @@ public FileNumberingFilterWriter(Writer out) {\n     super(out);\n   }\n \n+  private int lineNumber = 1;\n+  private boolean newLineMac = true;\n+\n   @Override\n   public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    for(int i = off; i < off + len; ++i){\n+      write(str.charAt(i));\n+    }\n+\n   }\n \n   @Override\n   public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    for(int i = off; i < off + len; ++i){\n+      write(cbuf[i]);\n+    }\n   }\n \n   @Override\n   public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    if (c == '\\n') {\n+      super.write(c);\n+      out.write( lineNumber++ + \"\\t\");\n+      newLineMac = false;\n+      return;\n+\n+    } else if (c == '\\r') {\n+      newLineMac = true;\n+\n+    } else {\n+      if (newLineMac) { //Allow to print the first tab and, when it's Mac, to print the next line with tab\n+        out.write(lineNumber++ + \"\\t\");\n+      }\n+      newLineMac = false;\n+    }\n+\n+    super.write(c);\n+\n   }\n \n }"
  },
  {
    "sha": "07b883f4aa5f412ca555bfeb0095b7ea4fb8346c",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java?ref=79ce364c5ee1721256a19dbeb2f41d78910a11e4",
    "patch": "@@ -16,17 +16,17 @@ public UpperCaseFilterWriter(Writer wrappedWriter) {\n \n   @Override\n   public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    super.write(str.toUpperCase(),off,len);\n   }\n \n   @Override\n   public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    super.write((new String(cbuf)).toUpperCase(), off, len);\n   }\n \n   @Override\n   public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    super.write(Character.toUpperCase(c));\n   }\n \n }"
  },
  {
    "sha": "319f0ac8be26837ef9228ca1fbdc18bd4bd5bf99",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java?ref=79ce364c5ee1721256a19dbeb2f41d78910a11e4",
    "patch": "@@ -1,5 +1,8 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n+import ch.heigvd.res.labio.impl.filters.FileNumberingFilterWriter;\n+import ch.heigvd.res.labio.impl.filters.UpperCaseFilterWriter;\n+\n import java.io.Writer;\n \n /**\n@@ -15,16 +18,13 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    if (true) {\n-      throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    }\n     /*\n      * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration \n      * of the writer (connected to the file. You can see that you first decorate the writer with an UpperCaseFilterWriter, which you then\n      * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the characters read from the\n      * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to the output file.f\n      */\n-    //writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n+    writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n     return writer; \n   }\n "
  },
  {
    "sha": "477f55ba82d9fe2cf65bbad20675e4e8a1d47d4a",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java?ref=79ce364c5ee1721256a19dbeb2f41d78910a11e4",
    "patch": "@@ -48,10 +48,20 @@ public void visit(File file) {\n       writer = decorateWithFilters(writer);\n \n       /*\n-       * There is a missing piece here: you have an input reader and an ouput writer (notice how the \n+       * There is a missing piece here: you have an input reader and an output writer (notice how the\n        * writer has been decorated by the concrete subclass!). You need to write a loop to read the\n        * characters and write them to the writer.\n        */\n+\n+      /* Decorate I/O streams with buffer */\n+      reader = new BufferedReader(reader);\n+      writer = new BufferedWriter(writer);\n+\n+      int data = reader.read();\n+      while(data != -1){\n+        writer.write((char) data);\n+        data = reader.read();\n+      }\n       \n       reader.close();\n       writer.flush();"
  },
  {
    "sha": "e0651e6aa0bdac1e2b9dfc3a5d0ca443afc72a96",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/79ce364c5ee1721256a19dbeb2f41d78910a11e4/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java?ref=79ce364c5ee1721256a19dbeb2f41d78910a11e4",
    "patch": "@@ -13,14 +13,13 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n     /*\n      * The NoOpFileTransformer does not apply any transformation of the character stream\n      * (no uppercase, no line number, etc.). So, we don't need to decorate the writer connected to\n      * the output file at all. Just uncomment the following line and get rid of the UnsupportedOperationException and\n      * you will be all set.\n      */\n-    //return writer;\n+    return writer;\n   }\n \n }"
  }
]
