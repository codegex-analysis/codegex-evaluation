[
  {
    "sha": "2b10b44ee38e12e2e9bab62dacc42be152878ee8",
    "filename": "LabJavaIO/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/pom.xml",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/pom.xml",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/pom.xml?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -21,6 +21,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-shade-plugin</artifactId>\n+        <version>3.2.4</version>\n         <configuration>\n           <filters>\n             <filter>\n@@ -54,6 +55,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.1</version>\n         <configuration>\n           <source>11</source>\n           <target>11</target>"
  },
  {
    "sha": "3399988d9c6cd3144b2f2761481a46b2585f436c",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "status": "modified",
    "additions": 43,
    "deletions": 7,
    "changes": 50,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -9,17 +9,15 @@\n import ch.heigvd.res.labio.quotes.QuoteClient;\n import org.apache.commons.io.FileUtils;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.io.Writer;\n+import java.io.*;\n import java.net.URISyntaxException;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n /**\n  *\n  * @author Olivier Liechti\n+ * modifié par Loïs Diserens\n  */\n public class Application implements IApplication {\n \n@@ -97,11 +95,16 @@ public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n          * client to fetch quotes. We have removed a single line from this method. It is a call to\n          * one method provided by this class, which is responsible for storing the content of the\n          * quote in a text file (and for generating the directories based on the tags).\n+         *\n+         *  DONE\n+         *\n          */\n         LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n         for (String tag : quote.getTags()) {\n           LOG.info(\"> \" + tag);\n         }\n+\n+        storeQuote(quote, \"quote-\" + i);\n       }\n \n     }\n@@ -133,7 +136,36 @@ void clearOutputDirectory() throws IOException {\n    * @throws IOException \n    */\n   void storeQuote(Quote quote, String filename) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+\n+    String separateurOs = \"/\";\n+    String cheminDeBase = WORKSPACE_DIRECTORY + separateurOs;\n+    String extension = \".utf8\";\n+\n+    // Ajoute les tags au chemin\n+    for(String tag : quote.getTags())\n+    {\n+        cheminDeBase += tag + separateurOs;\n+    }\n+\n+    // Créé l'arborensce pour où va être créé le fichier\n+    File dossier = new File(cheminDeBase);\n+    dossier.mkdirs();\n+\n+    // Création du fichier\n+    File fichier = new File(cheminDeBase + filename + extension);\n+\n+    if (fichier.createNewFile())\n+      System.out.println(\"Fichier créé!\");\n+    else\n+      System.out.println(\"Le fichier existe déjà!\");\n+\n+    if(!fichier.isFile())\n+      throw new RuntimeException(\"Problème à la création du fichier.\");\n+\n+    // Ecriture de la quote dans le fichier\n+    FileWriter ecritureFichier = new FileWriter(cheminDeBase + filename + extension);\n+    ecritureFichier.write(quote.getQuote());\n+    ecritureFichier.close();\n   }\n   \n   /**\n@@ -150,14 +182,18 @@ public void visit(File file) {\n          * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n          * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n          */\n+          try {\n+            writer.write(file.getPath() + \"\\n\");\n+          } catch (IOException e) {\n+            e.printStackTrace();\n+          }\n       }\n     });\n   }\n \n   @Override\n   public void processQuoteFiles() throws IOException {\n     IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());    \n+    explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());\n   }\n-\n }"
  },
  {
    "sha": "7cfcd34967ca763b2c93933fd76107c169a1ab48",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "status": "modified",
    "additions": 25,
    "deletions": 2,
    "changes": 27,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -19,8 +19,31 @@\n    * the line separator, the second element is the remaining text. If the argument does not\n    * contain any line separator, then the first element is an empty string.\n    */\n-  public static String[] getNextLine(String lines) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+  public static String[] getNextLine(String lines)\n+  {\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+      String[] ret = new String[]{\"\",\"\"};\n+\n+      int positionRetourLigneN = lines.indexOf('\\n');\n+      int positionRetourLigneR = lines.indexOf('\\r');\n+      int position;\n+\n+      // Cas spécial\n+      if(positionRetourLigneN == -1 && positionRetourLigneR == -1)\n+      {\n+          ret[1] = lines;\n+          return ret;\n+      }\n+\n+      // Affectation de la position de fin de la premier ligne\n+      position = Math.max(positionRetourLigneN, positionRetourLigneR);\n+\n+      // Met la première ligne dans la première case du tableau\n+      ret[0] = lines.substring(0, ++position);\n+      // Met le reste dans la deuxième case du tableau\n+      ret[1] = lines.substring(position);\n+\n+      return ret;\n   }\n \n }"
  },
  {
    "sha": "4a69e563f6c136fbf25cf26aaac028d7189dc71e",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "status": "modified",
    "additions": 34,
    "deletions": 2,
    "changes": 36,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -4,6 +4,8 @@\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n \n /**\n  * This implementation of the IFileExplorer interface performs a depth-first\n@@ -16,8 +18,38 @@\n public class DFSFileExplorer implements IFileExplorer {\n \n   @Override\n-  public void explore(File rootDirectory, IFileVisitor vistor) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+  public void explore(File rootDirectory, IFileVisitor vistor)\n+  {\n+      vistor.visit(rootDirectory);\n+      exploreRecursive(rootDirectory, vistor);\n   }\n \n+  /*\n+  *     Fonction récursive \"Esclave\" afin de pouvoir noter le premier rootDirectory dans le writer sans qu il y ait\n+  *     de répétition dans les suivants\n+  */\n+  private void exploreRecursive(File rootDirectory, IFileVisitor visitor)\n+  {\n+      // ALGO DE DFS pour explorer : https://www.techiedelight.com/traverse-given-directory-bfs-dfs-java/\n+      // get the list of all files and directories present in the `root`\n+      File[] listOfFilesAndDirectory = rootDirectory.listFiles();\n+\n+      // `listFiles()` returns non-null array if `root` denotes a directory\n+      if (listOfFilesAndDirectory != null)\n+      {\n+          // Tire dans l'ordre alphabetique\n+          Arrays.sort(listOfFilesAndDirectory);\n+\n+          for (File file : listOfFilesAndDirectory)\n+          {\n+              // Action sur le fichier / dossier courant\n+              visitor.visit(file);\n+\n+              // if the file denotes a directory, recur for it\n+              if (file.isDirectory()) {\n+                  exploreRecursive(file, visitor);\n+              }\n+          }\n+      }\n+  }\n }"
  },
  {
    "sha": "266f4dbe0df37aa32fe9d1f7dd6b6881c4c8ac69",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "status": "modified",
    "additions": 131,
    "deletions": 4,
    "changes": 135,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -1,5 +1,7 @@\n package ch.heigvd.res.labio.impl.filters;\n \n+import ch.heigvd.res.labio.impl.Utils;\n+\n import java.io.FilterWriter;\n import java.io.IOException;\n import java.io.Writer;\n@@ -23,19 +25,144 @@ public FileNumberingFilterWriter(Writer out) {\n     super(out);\n   }\n \n+  private int cmptLigne = 1;\n+  private char precendentChar = 0;\n+  //private boolean changementLigne = true; // First Version\n+\n   @Override\n   public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+\n+      /*String strDepart = str.substring(off,len);\n+\n+      String[] lignes = Utils.getNextLine(strDepart);\n+\n+      while (!lignes[0].equals(\"\"))\n+      {\n+          out.write(cmptLigne++ + \"\\t\" + lignes[0]);\n+          lignes = Utils.getNextLine(lignes[1]);\n+          System.out.println(\"/\" + lignes[1] + \"/\");\n+      }*/\n+\n+      for(int position = off; position < len + off; position++ )\n+      {\n+          // Appel la fonction write(char)\n+          this.write(str.charAt(position));\n+      }\n+\n+\n+      /* First Version\n+      for(int position = off; position < len + off; position++ )\n+      {\n+          if(changementLigne && str.charAt(position) != '\\r' && str.charAt(position) != '\\n')\n+          {\n+              out.write(cmptLigne++ + \"\\t\");\n+              changementLigne = false;\n+          }\n+\n+          // Ecrit le char dans le stream\n+          out.write(str.charAt(position));\n+\n+          // Control si il y a un changement de ligne à faire à la prochaine itération de la fonction\n+          if(str.charAt(position) == '\\r' || str.charAt(position) == '\\n')\n+          {\n+              changementLigne = true;\n+          }\n+      }\n+\n+      // Controle si il y a eu un retour à la ligne en dernier char\n+      if(changementLigne)\n+      {\n+          out.write(cmptLigne++ + \"\\t\");\n+          changementLigne = false;\n+      }*/\n   }\n \n   @Override\n   public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+\n+      for(int position = off; position < len + off; position++ )\n+      {\n+          // Appel la fonction write(char)\n+          this.write(cbuf[position]);\n+      }\n+\n+      /* First Version\n+      for(int position = off; position < len + off; position++ )\n+      {\n+          if(changementLigne && cbuf[position] != '\\r' && cbuf[position] != '\\n')\n+          {\n+              out.write(cmptLigne++ + \"\\t\");\n+              changementLigne = false;\n+          }\n+\n+          // Ecrit le char dans le stream\n+          out.write(cbuf[position]);\n+\n+          // Control si il y a un changement de ligne à faire à la prochaine itération de la fonction\n+          if(cbuf[position] == '\\r' || cbuf[position] == '\\n')\n+          {\n+              changementLigne = true;\n+          }\n+      }\n+\n+      // Controle si il y a eu un retour à la ligne en dernier char\n+      if(changementLigne)\n+      {\n+          out.write(cmptLigne++ + \"\\t\");\n+          changementLigne = false;\n+      }*/\n   }\n \n   @Override\n   public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+\n+      if(cmptLigne == 1) {\n+          out.write(cmptLigne++ + \"\\t\");\n+          out.write((char)c);\n+      }\n+      else if(c == '\\n')\n+      {\n+          out.write((char)c);\n+          out.write(cmptLigne++ + \"\\t\");\n+      }\n+      else if(precendentChar == '\\r')\n+      {\n+\n+          out.write(cmptLigne++ + \"\\t\");\n+          out.write((char)c);\n+      }\n+      else\n+      {\n+          // Ecrit le char dans le stream\n+          out.write((char)c);\n+      }\n \n+      // Sauvegarde du char traité\n+      precendentChar = (char) c;\n+\n+      /* First Version\n+      // Fait le changement de ligne s'il y en a un (et pas deux s'il y a des \\r et \\n qui se suivent)\n+      if(changementLigne && (c != '\\r' && c != '\\n'))\n+      {\n+          out.write(cmptLigne++ + \"\\t\");\n+          changementLigne = false;\n+      }\n+\n+      // Ecrit le char dans le stream\n+      out.write((char)c);\n+\n+      // Control si il y a un changement de ligne à faire à la prochaine itération de la fonction\n+      if(c == '\\r' || c == '\\n')\n+      {\n+          changementLigne = true;\n+      }\n+\n+      // Sauvegarde du char traité\n+      precendentChar = (char) c;\n+\n+      */\n+  }\n }"
  },
  {
    "sha": "8fc4c22dd3b1c4cfcb86ed950c047cfcf383ca83",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "status": "modified",
    "additions": 17,
    "deletions": 5,
    "changes": 22,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -9,24 +9,36 @@\n  * @author Olivier Liechti\n  */\n public class UpperCaseFilterWriter extends FilterWriter {\n-  \n+\n   public UpperCaseFilterWriter(Writer wrappedWriter) {\n     super(wrappedWriter);\n   }\n \n   @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+  public void write(String str, int off, int len) throws IOException\n+  {\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+\n+      for(int position = off; position < len + off; position++)\n+      {\n+          out.write(Character.toUpperCase(str.charAt(position)));\n+      }\n   }\n \n   @Override\n   public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+\n+      for(int position = off; position < len + off; position++)\n+      {\n+          out.write(Character.toUpperCase(cbuf[position]));\n+      }\n   }\n \n   @Override\n   public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+        out.write(Character.toUpperCase(c));\n   }\n \n }"
  },
  {
    "sha": "b35c0005bede8f9d02114a2a5658ceae34d2f86b",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -1,5 +1,8 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n+import ch.heigvd.res.labio.impl.filters.FileNumberingFilterWriter;\n+import ch.heigvd.res.labio.impl.filters.UpperCaseFilterWriter;\n+\n import java.io.Writer;\n \n /**\n@@ -15,16 +18,16 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    if (true) {\n+    /*if (true) {\n       throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    }\n+    }*/\n     /*\n      * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration \n      * of the writer (connected to the file. You can see that you first decorate the writer with an UpperCaseFilterWriter, which you then\n      * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the characters read from the\n      * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to the output file.f\n      */\n-    //writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n+    writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n     return writer; \n   }\n "
  },
  {
    "sha": "e536e1a32553e77b9cd7efeb68bb94aa47a64602",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -51,7 +51,14 @@ public void visit(File file) {\n        * There is a missing piece here: you have an input reader and an ouput writer (notice how the \n        * writer has been decorated by the concrete subclass!). You need to write a loop to read the\n        * characters and write them to the writer.\n+       *\n+       * DONE\n        */\n+      int caract;\n+      while((caract = reader.read()) != -1)\n+      {\n+        writer.write(caract);\n+      }\n       \n       reader.close();\n       writer.flush();"
  },
  {
    "sha": "b9513dd42753b45687b2feb533f737e9c1e24e83",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -13,14 +13,14 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n     /*\n      * The NoOpFileTransformer does not apply any transformation of the character stream\n      * (no uppercase, no line number, etc.). So, we don't need to decorate the writer connected to\n      * the output file at all. Just uncomment the following line and get rid of the UnsupportedOperationException and\n      * you will be all set.\n      */\n-    //return writer;\n+    return writer;\n   }\n \n }"
  },
  {
    "sha": "cdd05542b13908e6aa3ecd865349a0d5de17abbe",
    "filename": "LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/ApplicationTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/ApplicationTest.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/093c84c62ac936d755f3b36a3f6bd52193a1173a/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/ApplicationTest.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/ApplicationTest.java?ref=093c84c62ac936d755f3b36a3f6bd52193a1173a",
    "patch": "@@ -141,6 +141,7 @@ public void theApplicationShouldBeAbleToGenerateTheListOfFileNames() throws IOEx\n     String outputWithUnixSeparator = m.replaceAll(\"/\");\n \n     String reference = sb.toString();\n+\n     boolean applicationReturnsValidPlatformSpecificFilePaths = (reference.equals(output));\n     boolean applicationReturnsValidUnixFilePaths = (reference.equals(outputWithUnixSeparator));\n     boolean applicationReturnsValidFilePaths = (applicationReturnsValidPlatformSpecificFilePaths || applicationReturnsValidUnixFilePaths);"
  }
]
