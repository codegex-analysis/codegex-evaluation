[
  {
    "sha": "80c6f145d03358be43d9bcdef1315e258d837fc8",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "status": "modified",
    "additions": 16,
    "deletions": 2,
    "changes": 18,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6",
    "patch": "@@ -20,7 +20,21 @@\n    * contain any line separator, then the first element is an empty string.\n    */\n   public static String[] getNextLine(String lines) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    String[] tab = new String[] {\"\", lines}; // Default case: there is no line separator\n+    int bound;\n \n+    for (int i = 0; i < lines.length(); ++i) {\n+      if (lines.charAt(i) == '\\n' || lines.charAt(i) == '\\r') {\n+        if (lines.charAt(i) == '\\r' && i + 1 < lines.length() && lines.charAt(i + 1) == '\\n') { // Windows case\n+          bound = i + 2;\n+        } else { // Mac and Unix case\n+          bound = i + 1;\n+        }\n+        tab[0] = lines.substring(0, bound);\n+        tab[1] = lines.substring(bound);\n+        break;\n+      }\n+    }\n+    return tab;\n+  }\n }"
  },
  {
    "sha": "1d09042d8d22c626d70bb15801cf4bbf3f243cf4",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "status": "modified",
    "additions": 16,
    "deletions": 2,
    "changes": 18,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6",
    "patch": "@@ -4,6 +4,8 @@\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n \n import java.io.File;\n+import java.util.Arrays;\n+\n \n /**\n  * This implementation of the IFileExplorer interface performs a depth-first\n@@ -15,9 +17,21 @@\n  */\n public class DFSFileExplorer implements IFileExplorer {\n \n+  /*\n+   * We start by visiting the root directory, then we get its files.\n+   * If there is some files, we sort them and loop through them\n+   * to explore them recursively.\n+   */\n   @Override\n-  public void explore(File rootDirectory, IFileVisitor vistor) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+  public void explore(File rootDirectory, IFileVisitor visitor) {\n+    visitor.visit(rootDirectory);\n+    File[] listOfFiles = rootDirectory.listFiles();\n+    if (listOfFiles != null) {\n+      Arrays.sort(listOfFiles);\n+      for (File listOfFile : listOfFiles) {\n+        explore(listOfFile, visitor);\n+      }\n+    }\n   }\n \n }"
  },
  {
    "sha": "21e85f4e4fe56158662e3d10bdc714d17e75d486",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "status": "modified",
    "additions": 28,
    "deletions": 4,
    "changes": 32,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6",
    "patch": "@@ -18,24 +18,48 @@\n public class FileNumberingFilterWriter extends FilterWriter {\n \n   private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+  private static int cnt;\n+  private boolean backslashR = false;\n \n   public FileNumberingFilterWriter(Writer out) {\n     super(out);\n+    cnt = 0;\n   }\n \n   @Override\n   public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    for (int i = off; i < off + len; ++i) {\n+      write(str.charAt(i));\n+    }\n   }\n \n   @Override\n   public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    for (int i = off; i < off + len; ++i) {\n+      write(cbuf[i]);\n+    }\n   }\n \n   @Override\n   public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n \n+    if (cnt == 0) { // First line\n+      out.write(++cnt +  \"\\t\");\n+      super.write(c);\n+      return;\n+    } else if (c == '\\n') { // Unix and Windows case\n+      super.write(c);\n+      out.write(++cnt +  \"\\t\");\n+      backslashR = false;\n+      return;\n+    } else if (backslashR) { // Mac case\n+      out.write(++cnt +  \"\\t\");\n+      backslashR = false;\n+    } else if (c == '\\r') { // Potential Mac or Windows case : we must wait the next char to find out\n+      backslashR = true;\n+    }\n+    super.write(c);\n+\n+  }\n }\n+"
  },
  {
    "sha": "741e7062244474bac8365590577900b2b047914d",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6",
    "patch": "@@ -4,29 +4,33 @@\n import java.io.IOException;\n import java.io.Writer;\n \n+\n /**\n  *\n  * @author Olivier Liechti\n  */\n public class UpperCaseFilterWriter extends FilterWriter {\n-  \n+\n   public UpperCaseFilterWriter(Writer wrappedWriter) {\n     super(wrappedWriter);\n   }\n \n   @Override\n   public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    super.write(str.toUpperCase(), off, len);\n   }\n \n   @Override\n   public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    for (int i = 0; i < cbuf.length; i++) {\n+      cbuf[i] = Character.toUpperCase(cbuf[i]);\n+    }\n+    super.write(cbuf, off, len);\n   }\n \n   @Override\n   public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    super.write(Character.toUpperCase((char)c));\n   }\n \n }"
  },
  {
    "sha": "319f0ac8be26837ef9228ca1fbdc18bd4bd5bf99",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6",
    "patch": "@@ -1,5 +1,8 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n+import ch.heigvd.res.labio.impl.filters.FileNumberingFilterWriter;\n+import ch.heigvd.res.labio.impl.filters.UpperCaseFilterWriter;\n+\n import java.io.Writer;\n \n /**\n@@ -15,16 +18,13 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    if (true) {\n-      throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    }\n     /*\n      * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration \n      * of the writer (connected to the file. You can see that you first decorate the writer with an UpperCaseFilterWriter, which you then\n      * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the characters read from the\n      * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to the output file.f\n      */\n-    //writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n+    writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n     return writer; \n   }\n "
  },
  {
    "sha": "31fae660d7162808c27e995fc388ae24b10bc74c",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6",
    "patch": "@@ -52,6 +52,13 @@ public void visit(File file) {\n        * writer has been decorated by the concrete subclass!). You need to write a loop to read the\n        * characters and write them to the writer.\n        */\n+      reader = new BufferedReader(reader);\n+      writer = new BufferedWriter(writer);\n+      int c = reader.read();\n+      while (c != -1) {\n+        writer.write(c);\n+        c = reader.read();\n+      }\n       \n       reader.close();\n       writer.flush();"
  },
  {
    "sha": "e0651e6aa0bdac1e2b9dfc3a5d0ca443afc72a96",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6",
    "patch": "@@ -13,14 +13,13 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n     /*\n      * The NoOpFileTransformer does not apply any transformation of the character stream\n      * (no uppercase, no line number, etc.). So, we don't need to decorate the writer connected to\n      * the output file at all. Just uncomment the following line and get rid of the UnsupportedOperationException and\n      * you will be all set.\n      */\n-    //return writer;\n+    return writer;\n   }\n \n }"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "test.txt",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/test.txt",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/test.txt",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/test.txt?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6"
  },
  {
    "sha": "3b18e512dba79e4c8300dd08aeb37f8e728b8dad",
    "filename": "test2.txt",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/8986511164e17bd9a4e03603fc5aab83c626a3c6/test2.txt",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/8986511164e17bd9a4e03603fc5aab83c626a3c6/test2.txt",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/test2.txt?ref=8986511164e17bd9a4e03603fc5aab83c626a3c6",
    "patch": "@@ -0,0 +1 @@\n+hello world"
  }
]
