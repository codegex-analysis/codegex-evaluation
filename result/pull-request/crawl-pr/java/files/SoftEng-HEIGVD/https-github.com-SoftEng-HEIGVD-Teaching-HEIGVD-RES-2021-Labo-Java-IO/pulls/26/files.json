[
  {
    "sha": "afa6843acc9792065ddf9bb50139ac0830b57931",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "status": "modified",
    "additions": 28,
    "deletions": 6,
    "changes": 34,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java?ref=fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa",
    "patch": "@@ -5,17 +5,18 @@\n import ch.heigvd.res.labio.interfaces.IApplication;\n import ch.heigvd.res.labio.interfaces.IFileExplorer;\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n-import ch.heigvd.res.labio.quotes.Quote;\n import ch.heigvd.res.labio.quotes.QuoteClient;\n-import org.apache.commons.io.FileUtils;\n-\n+import ch.heigvd.res.labio.quotes.Quote;\n+import java.io.*;\n+import java.util.List;\n import java.io.File;\n import java.io.IOException;\n import java.io.StringWriter;\n import java.io.Writer;\n import java.net.URISyntaxException;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n+import org.apache.commons.io.FileUtils;\n \n /**\n  *\n@@ -92,12 +93,12 @@ public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n         e.printStackTrace();\n       }\n       if (quote != null) {\n-        /* There is a missing piece here!\n-         * As you can see, this method handles the first part of the lab. It uses the web service\n+        /* As you can see, this method handles the first part of the lab. It uses the web service\n          * client to fetch quotes. We have removed a single line from this method. It is a call to\n          * one method provided by this class, which is responsible for storing the content of the\n          * quote in a text file (and for generating the directories based on the tags).\n          */\n+\t    storeQuote(quote,\"quote-\" + i + \".utf8\");\n         LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n         for (String tag : quote.getTags()) {\n           LOG.info(\"> \" + tag);\n@@ -133,7 +134,22 @@ void clearOutputDirectory() throws IOException {\n    * @throws IOException \n    */\n   void storeQuote(Quote quote, String filename) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    // We create the path to where the quote will be stored with its tags\n+    List<String> tags = quote.getTags();\n+    String pathDir = WORKSPACE_DIRECTORY + \"/\";\n+    for(String tag : tags){\n+      pathDir += (tag + '/');\n+    }\n+    // We create the directory\n+    File directory = new File(pathDir);\n+    directory.mkdirs();\n+\n+    String pathFile = pathDir + filename;\n+    // We create the actual file inside recently created directory\n+    // We write the quote inside the new file and close it\n+    FileWriter fileWriter = new FileWriter(pathFile);\n+    fileWriter.write(quote.getQuote());\n+    fileWriter.close();\n   }\n   \n   /**\n@@ -150,6 +166,12 @@ public void visit(File file) {\n          * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n          * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n          */\n+        try{\n+          writer.write(file.getPath()+\"\\n\");\n+        }\n+        catch(IOException e){\n+          e.printStackTrace();\n+        }\n       }\n     });\n   }"
  },
  {
    "sha": "e1fc40bcfaa9159abe1873ce64078e84e66946e3",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "status": "modified",
    "additions": 22,
    "deletions": 1,
    "changes": 23,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java?ref=fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa",
    "patch": "@@ -1,6 +1,7 @@\n package ch.heigvd.res.labio.impl;\n \n import java.util.logging.Logger;\n+import java.lang.String;\n \n /**\n  *\n@@ -20,7 +21,27 @@\n    * contain any line separator, then the first element is an empty string.\n    */\n   public static String[] getNextLine(String lines) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    String[] str = new String[]{\"\",\"\"};\n+    String[] delimiteurs = new String[]{\"\\n\",\"\\r\",\"\\r\\n\"};\n+    int pos1 = 0;\n+    // We look for the spot where the lines are split with the specified characters\n+    if(lines.contains(\"\\n\") || lines.contains(\"\\r\") || lines.contains(\"\\r\\n\")){\n+      for(int i = 0; i < delimiteurs.length; i++){\n+         pos1 = lines.indexOf(delimiteurs[i]);\n+         if(pos1 > -1)\n+           break;\n+      }\n+\n+      // We then divide the string in two lines thanks to the position of the splitting char found above\n+      str[0] = lines.substring(0,pos1+1);\n+      str[1] = lines.substring(pos1+1);\n+    }\n+    else{\n+      str[1] = lines;\n+      return str;\n+    }\n+\n+    return str;\n   }\n \n }"
  },
  {
    "sha": "3f01895038446c4c039f07df983aa8e6ceb17645",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "status": "modified",
    "additions": 16,
    "deletions": 2,
    "changes": 18,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java?ref=fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa",
    "patch": "@@ -4,6 +4,7 @@\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n \n import java.io.File;\n+import java.util.Arrays;\n \n /**\n  * This implementation of the IFileExplorer interface performs a depth-first\n@@ -16,8 +17,21 @@\n public class DFSFileExplorer implements IFileExplorer {\n \n   @Override\n-  public void explore(File rootDirectory, IFileVisitor vistor) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+  public void explore(File rootDirectory, IFileVisitor visitor) {\n+    // we store the first directory in the filename list\n+    visitor.visit(rootDirectory);\n+    // if it is a directory, we list its content in an array\n+    if(rootDirectory.isDirectory()) {\n+      File[] listDirectoryAndFiles = rootDirectory.listFiles();\n+      // if there is content, we sort it alphabetically and explore it recursively\n+      if (listDirectoryAndFiles != null) {\n+        Arrays.sort(listDirectoryAndFiles);\n+        for (File file : listDirectoryAndFiles){\n+          explore(file, visitor);\n+        }\n+      }\n+    }\n+\n   }\n \n }"
  },
  {
    "sha": "67c69d1943993623c8aca84862ea87399783710d",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "status": "modified",
    "additions": 28,
    "deletions": 7,
    "changes": 35,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java?ref=fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa",
    "patch": "@@ -4,38 +4,59 @@\n import java.io.IOException;\n import java.io.Writer;\n import java.util.logging.Logger;\n-\n /**\n  * This class transforms the streams of character sent to the decorated writer.\n  * When filter encounters a line separator, it sends it to the decorated writer.\n  * It then sends the line number and a tab character, before resuming the write\n  * process.\n  *\n- * Hello\\n\\World -> 1\\Hello\\n2\\tWorld\n+ * Hello\\n\\World -> 1\\tHello\\n2\\tWorld\n  *\n  * @author Olivier Liechti\n  */\n public class FileNumberingFilterWriter extends FilterWriter {\n-\n   private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+  private int lineCounter = 0;\n+  private char lastChar = '\\0';\n \n   public FileNumberingFilterWriter(Writer out) {\n     super(out);\n   }\n \n   @Override\n   public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    for(int i = off; i < (off + len); i++){\n+      this.write(str.charAt(i));\n+    }\n   }\n \n   @Override\n   public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    for(char c : cbuf){\n+      this.write(cbuf[c]);\n+    }\n   }\n \n   @Override\n   public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    char letter = (char) c;\n+\n+    // If it is the very first line or if it is a character creating a split in the lines\n+    // We write the line number, the tabulation and the character in the file\n+\n+    // We check for '\\n', '\\r' and '\\r\\n' for the Mac, Linux and Windows OS\n+\n+    if(lineCounter == 0){\n+      out.write((++lineCounter) + \"\\t\" + letter);\n+    } else if (lastChar == '\\r' && letter == '\\n'){\n+      out.write(\"\\r\\n\" + (++lineCounter) + \"\\t\");\n+    }else if (letter == '\\n' && lastChar != '\\r'){\n+      out.write( \"\\n\" + (++lineCounter) + \"\\t\");\n+    }else if (lastChar == '\\r'){\n+      out.write( \"\\r\" + (++lineCounter) + \"\\t\" + letter);\n+    }else if (letter != '\\r'){\n+      out.write (letter);\n+    }\n+    lastChar = letter;\n   }\n-\n }"
  },
  {
    "sha": "03bfd735bb67ceb2c4ad8c579992b23eb2daa3cf",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java?ref=fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa",
    "patch": "@@ -16,17 +16,19 @@ public UpperCaseFilterWriter(Writer wrappedWriter) {\n \n   @Override\n   public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    String strUpper = str.toUpperCase();\n+    super.write(strUpper,off,len);\n   }\n \n   @Override\n   public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    write(new String (cbuf), off, len);\n   }\n \n   @Override\n   public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    int charUpper = Character.toUpperCase(c);\n+    super.write(charUpper);\n   }\n \n }"
  },
  {
    "sha": "7e35a7da3bbbb8575103ad3a6ad044c05c52a5de",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java?ref=fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa",
    "patch": "@@ -1,5 +1,6 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n+import ch.heigvd.res.labio.impl.filters.*;\n import java.io.Writer;\n \n /**\n@@ -15,17 +16,13 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    if (true) {\n-      throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    }\n     /*\n-     * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration \n-     * of the writer (connected to the file. You can see that you first decorate the writer with an UpperCaseFilterWriter, which you then\n+     * You first decorate the writer with an UpperCaseFilterWriter, which you then\n      * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the characters read from the\n      * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to the output file.f\n      */\n-    //writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n-    return writer; \n+    writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n+    return writer;\n   }\n \n }"
  },
  {
    "sha": "281828bf74bc1fbc76cd4e75be03d0f5c9cc7169",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java?ref=fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa",
    "patch": "@@ -48,11 +48,13 @@ public void visit(File file) {\n       writer = decorateWithFilters(writer);\n \n       /*\n-       * There is a missing piece here: you have an input reader and an ouput writer (notice how the \n-       * writer has been decorated by the concrete subclass!). You need to write a loop to read the\n-       * characters and write them to the writer.\n+       * This is a loop to read the characters and write them to the writer.\n        */\n-      \n+      int c;\n+      while( (c = reader.read()) > -1){\n+        writer.write(c);\n+      }\n+\n       reader.close();\n       writer.flush();\n       writer.close();"
  },
  {
    "sha": "83670d4ea851fefe5ff083c5b6e5fe93e1a8fc94",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 8,
    "changes": 10,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java?ref=fbbd852bd5eeeccd3da1a6f446d6e9cf93df77fa",
    "patch": "@@ -13,14 +13,8 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    /*\n-     * The NoOpFileTransformer does not apply any transformation of the character stream\n-     * (no uppercase, no line number, etc.). So, we don't need to decorate the writer connected to\n-     * the output file at all. Just uncomment the following line and get rid of the UnsupportedOperationException and\n-     * you will be all set.\n-     */\n-    //return writer;\n+\n+    return writer;\n   }\n \n }"
  }
]
