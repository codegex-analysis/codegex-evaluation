[
  {
    "sha": "3176efec722157dc6d41961f0ef6c27d5742dbd5",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "status": "modified",
    "additions": 23,
    "deletions": 5,
    "changes": 28,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/b61f43130b4be727b0eadf8354ffbb3d4b327c07/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/b61f43130b4be727b0eadf8354ffbb3d4b327c07/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java?ref=b61f43130b4be727b0eadf8354ffbb3d4b327c07",
    "patch": "@@ -9,11 +9,9 @@\n import ch.heigvd.res.labio.quotes.QuoteClient;\n import org.apache.commons.io.FileUtils;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.io.Writer;\n+import java.io.*;\n import java.net.URISyntaxException;\n+import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n@@ -98,6 +96,7 @@ public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n          * one method provided by this class, which is responsible for storing the content of the\n          * quote in a text file (and for generating the directories based on the tags).\n          */\n+        storeQuote(quote, \"quote-\" + i + \".utf8\");\n         LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n         for (String tag : quote.getTags()) {\n           LOG.info(\"> \" + tag);\n@@ -133,7 +132,21 @@ void clearOutputDirectory() throws IOException {\n    * @throws IOException \n    */\n   void storeQuote(Quote quote, String filename) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+    //throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n+\n+    List<String> tags = quote.getTags();\n+    String quoteText = quote.getQuote();\n+\n+    String pathToRep = WORKSPACE_DIRECTORY + \"/\";\n+    for(String tag : tags){\n+      pathToRep += tag + \"/\";\n+    }\n+    File fileDir = new File(pathToRep);\n+    fileDir.mkdirs();\n+\n+    FileWriter fileWriter = new FileWriter(pathToRep);\n+    fileWriter.write(quoteText);\n+    fileWriter.close();\n   }\n   \n   /**\n@@ -150,6 +163,11 @@ public void visit(File file) {\n          * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n          * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n          */\n+        try{\n+          writer.write(file.getPath());\n+        }\n+        catch(IOException e){\n+        }\n       }\n     });\n   }"
  }
]
