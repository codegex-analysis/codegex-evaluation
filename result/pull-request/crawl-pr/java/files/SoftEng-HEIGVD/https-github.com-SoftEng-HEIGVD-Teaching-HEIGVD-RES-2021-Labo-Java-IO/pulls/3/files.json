[
  {
    "sha": "96f68ab6a21987c9226bf4a261f396fce8713f82",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "status": "modified",
    "additions": 147,
    "deletions": 134,
    "changes": 281,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java?ref=c787e7c92198b852bfe98a43a4a22daf16d47cac",
    "patch": "@@ -9,155 +9,168 @@\n import ch.heigvd.res.labio.quotes.QuoteClient;\n import org.apache.commons.io.FileUtils;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.io.Writer;\n+import java.io.*;\n import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class Application implements IApplication {\n \n-  /**\n-   * This constant defines where the quotes will be stored. The path is relative\n-   * to where the Java application is invoked.\n-   */\n-  public static String WORKSPACE_DIRECTORY = \"./workspace/quotes\";\n-  \n-  private static final Logger LOG = Logger.getLogger(Application.class.getName());\n-  \n-  public static void main(String[] args) {\n-    \n-    /*\n-     * I prefer to have LOG output on a single line, it's easier to read. Being able\n-     * to change the formatting of console outputs is one of the reasons why it is\n-     * better to use a Logger rather than using System.out.println\n-     */\n-    System.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%4$s: %5$s%6$s%n\");\n-    \n-       \n-    int numberOfQuotes = 0;\n-    try {\n-      numberOfQuotes = Integer.parseInt(args[0]);\n-    } catch (Exception e) {\n-      System.err.println(\"The command accepts a single numeric argument (number of quotes to fetch)\");\n-      System.exit(-1);\n-    }\n-        \n-    Application app = new Application();\n-    try {\n-      /*\n-       * Step 1 : clear the output directory\n-       */\n-      app.clearOutputDirectory();\n-      \n-      /*\n-       * Step 2 : use the QuotesClient to fetch quotes; store each quote in a file\n-       */\n-      app.fetchAndStoreQuotes(numberOfQuotes);\n-      \n-      /*\n-       * Step 3 : use a file explorer to traverse the file system; print the name of each directory and file\n-       */\n-      Writer writer = new StringWriter(); // we create a special writer that will send characters into a string (memory)\n-      app.printFileNames(writer);         // we hand over this writer to the printFileNames method\n-      LOG.info(writer.toString());       // we dump the whole result on the console\n-      \n+   /**\n+    * This constant defines where the quotes will be stored. The path is relative to where the Java application is\n+    * invoked.\n+    */\n+   public static String WORKSPACE_DIRECTORY = \"./workspace/quotes\";\n+\n+   private static final Logger LOG = Logger.getLogger(Application.class.getName());\n+\n+   public static void main(String[] args) {\n+\n       /*\n-       * Step 4 : process the quote files, by applying 2 transformations to their content\n-       *          (convert to uppercase and add line numbers)\n+       * I prefer to have LOG output on a single line, it's easier to read. Being able\n+       * to change the formatting of console outputs is one of the reasons why it is\n+       * better to use a Logger rather than using System.out.println\n        */\n-      app.processQuoteFiles();\n-      \n-    } catch (IOException ex) {\n-      LOG.log(Level.SEVERE, \"Could not fetch quotes. {0}\", ex.getMessage());\n-      ex.printStackTrace();\n-    }\n-  }\n-\n-  @Override\n-  public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n-    clearOutputDirectory();\n-    QuoteClient client = new QuoteClient();\n-    for (int i = 0; i < numberOfQuotes; i++) {\n-      Quote quote = null;\n+      System.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%4$s: %5$s%6$s%n\");\n+\n+\n+      int numberOfQuotes = 0;\n+      try {\n+         numberOfQuotes = Integer.parseInt(args[0]);\n+      } catch (Exception e) {\n+         System.err.println(\"The command accepts a single numeric argument (number of quotes to fetch)\");\n+         System.exit(-1);\n+      }\n+\n+      Application app = new Application();\n       try {\n-        quote = client.fetchQuote();\n-      } catch (URISyntaxException | InterruptedException e) {\n-        e.printStackTrace();\n+         /*\n+          * Step 1 : clear the output directory\n+          */\n+         app.clearOutputDirectory();\n+\n+         /*\n+          * Step 2 : use the QuotesClient to fetch quotes; store each quote in a file\n+          */\n+         app.fetchAndStoreQuotes(numberOfQuotes);\n+\n+         /*\n+          * Step 3 : use a file explorer to traverse the file system; print the name of each directory and file\n+          */\n+         Writer writer =\n+                 new StringWriter(); // we create a special writer that will send characters into a string (memory)\n+         app.printFileNames(writer);         // we hand over this writer to the printFileNames method\n+         LOG.info(writer.toString());       // we dump the whole result on the console\n+\n+         /*\n+          * Step 4 : process the quote files, by applying 2 transformations to their content\n+          *          (convert to uppercase and add line numbers)\n+          */\n+         app.processQuoteFiles();\n+\n+      } catch (IOException ex) {\n+         LOG.log(Level.SEVERE, \"Could not fetch quotes. {0}\", ex.getMessage());\n+         ex.printStackTrace();\n       }\n-      if (quote != null) {\n-        /* There is a missing piece here!\n-         * As you can see, this method handles the first part of the lab. It uses the web service\n-         * client to fetch quotes. We have removed a single line from this method. It is a call to\n-         * one method provided by this class, which is responsible for storing the content of the\n-         * quote in a text file (and for generating the directories based on the tags).\n-         */\n-        LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n-        for (String tag : quote.getTags()) {\n-          LOG.info(\"> \" + tag);\n-        }\n+   }\n+\n+   @Override\n+   public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n+      clearOutputDirectory();\n+      QuoteClient client = new QuoteClient();\n+      for (int i = 0; i < numberOfQuotes; i++) {\n+         Quote quote = null;\n+         try {\n+            quote = client.fetchQuote();\n+         } catch (URISyntaxException | InterruptedException e) {\n+            e.printStackTrace();\n+         }\n+         if (quote != null) {\n+            storeQuote(quote, \"quote-\" + (i + 1) + \".utf8\");\n+            /* There is a missing piece here!\n+             * As you can see, this method handles the first part of the lab. It uses the web service\n+             * client to fetch quotes. We have removed a single line from this method. It is a call to\n+             * one method provided by this class, which is responsible for storing the content of the\n+             * quote in a text file (and for generating the directories based on the tags).\n+             */\n+            LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n+            for (String tag : quote.getTags()) {\n+               LOG.info(\"> \" + tag);\n+            }\n+         }\n+\n       }\n+   }\n+\n+   @Override\n+   public void processQuoteFiles() throws IOException {\n+      IFileExplorer explorer = new DFSFileExplorer();\n+      explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());\n+   }\n \n-    }\n-  }\n-  \n-  /**\n-   * This method deletes the WORKSPACE_DIRECTORY and its content. It uses the\n-   * apache commons-io library. You should call this method in the main method.\n-   * \n-   * @throws IOException \n-   */\n-  void clearOutputDirectory() throws IOException {\n-    FileUtils.deleteDirectory(new File(WORKSPACE_DIRECTORY));    \n-  }\n-\n-  /**\n-   * This method stores the content of a quote in the local file system. It has\n-   * 2 responsibilities: \n-   * \n-   * - with quote.getTags(), it gets a list of tags and uses\n-   *   it to create sub-folders (for instance, if a quote has three tags \"A\", \"B\" and\n-   *   \"C\", it will be stored in /quotes/A/B/C/quotes-n.utf8.\n-   * \n-   * - with quote.getQuote(), it has access to the text of the quote. It stores\n-   *   this text in UTF-8 file.\n-   * \n-   * @param quote the quote object, with tags and text\n-   * @param filename the name of the file to create and where to store the quote text\n-   * @throws IOException \n-   */\n-  void storeQuote(Quote quote, String filename) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n-  \n-  /**\n-   * This method uses a IFileExplorer to explore the file system and prints the name of each\n-   * encountered file and directory.\n-   */\n-  void printFileNames(final Writer writer) {\n-    IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new IFileVisitor() {\n-      @Override\n-      public void visit(File file) {\n-        /*\n-         * There is a missing piece here. Notice how we use an anonymous class here. We provide the implementation\n-         * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n-         * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n-         */\n+   /**\n+    * This method deletes the WORKSPACE_DIRECTORY and its content. It uses the apache commons-io library. You should\n+    * call this method in the main method.\n+    *\n+    * @throws IOException\n+    */\n+   void clearOutputDirectory() throws IOException {\n+      FileUtils.deleteDirectory(new File(WORKSPACE_DIRECTORY));\n+   }\n+\n+   /**\n+    * This method stores the content of a quote in the local file system. It has 2 responsibilities:\n+    * <p>\n+    * - with quote.getTags(), it gets a list of tags and uses it to create sub-folders (for instance, if a quote has\n+    * three tags \"A\", \"B\" and \"C\", it will be stored in /quotes/A/B/C/quotes-n.utf8.\n+    * <p>\n+    * - with quote.getQuote(), it has access to the text of the quote. It stores this text in UTF-8 file.\n+    *\n+    * @param quote    the quote object, with tags and text\n+    * @param filename the name of the file to create and where to store the quote text\n+    *\n+    * @throws IOException\n+    */\n+   void storeQuote(Quote quote, String filename) throws IOException {\n+      String path = WORKSPACE_DIRECTORY;\n+      for (String s : quote.getTags()) {\n+         path += '/' + s;\n       }\n-    });\n-  }\n-\n-  @Override\n-  public void processQuoteFiles() throws IOException {\n-    IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());    \n-  }\n+      File file = new File(path + '/', filename);\n+      file.getParentFile().mkdirs();\n+      file.createNewFile();\n+\n+      BufferedWriter writer =\n+              new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));\n+      writer.write(quote.getQuote());\n+      writer.close();\n+   }\n+\n+   /**\n+    * This method uses a IFileExplorer to explore the file system and prints the name of each encountered file and\n+    * directory.\n+    */\n+   void printFileNames(final Writer writer) {\n+      IFileExplorer explorer = new DFSFileExplorer();\n+      explorer.explore(new File(WORKSPACE_DIRECTORY), new IFileVisitor() {\n+         @Override\n+         public void visit(File file) {\n+            try {\n+               writer.write(file.getPath().replace('\\\\', '/') + '\\n');\n+            } catch (IOException e) {\n+               e.printStackTrace();\n+            }\n+            /*\n+             * There is a missing piece here. Notice how we use an anonymous class here. We provide the implementation\n+             * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n+             * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n+             */\n+         }\n+      });\n+   }\n \n }"
  },
  {
    "sha": "3bb53d82cf63a1ec63ee921adc117b331c847796",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "status": "modified",
    "additions": 33,
    "deletions": 14,
    "changes": 47,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java?ref=c787e7c92198b852bfe98a43a4a22daf16d47cac",
    "patch": "@@ -3,24 +3,43 @@\n import java.util.logging.Logger;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class Utils {\n \n-  private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n+   private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n \n-  /**\n-   * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n-   * the next line in the string passed in arguments. \n-   * \n-   * @param lines a string that may contain 0, 1 or more lines\n-   * @return an array with 2 elements; the first element is the next line with\n-   * the line separator, the second element is the remaining text. If the argument does not\n-   * contain any line separator, then the first element is an empty string.\n-   */\n-  public static String[] getNextLine(String lines) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   /**\n+    * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract the next line in the string passed in\n+    * arguments.\n+    *\n+    * @param lines a string that may contain 0, 1 or more lines\n+    *\n+    * @return an array with 2 elements; the first element is the next line with the line separator, the second element\n+    * is the remaining text. If the argument does not contain any line separator, then the first element is an empty\n+    * string.\n+    */\n+   public static String[] getNextLine(String lines) {\n+      String[] result = new String[2];\n+      for (int i = 0; i < lines.length(); ++i) {\n+         boolean isEndOfLine = false;\n+         if (lines.charAt(i) == '\\r') {\n+            if (i + 1 < lines.length() && lines.charAt(i + 1) == '\\n') {\n+               ++i;\n+            }\n+            isEndOfLine = true;\n+         } else if (lines.charAt(i) == '\\n') {\n+            isEndOfLine = true;\n+         }\n+         if (isEndOfLine) {\n+            result[0] = lines.substring(0, i+1);\n+            result[1] = lines.substring(i + 1);\n+            return result;\n+         }\n+      }\n+      result[0] = \"\";\n+      result[1] = lines;\n+      return result;\n+   }\n \n }"
  },
  {
    "sha": "6bc6931894aa50a7382283bb39ff4228f9a4f7b5",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "status": "modified",
    "additions": 21,
    "deletions": 8,
    "changes": 29,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java?ref=c787e7c92198b852bfe98a43a4a22daf16d47cac",
    "patch": "@@ -4,20 +4,33 @@\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n \n import java.io.File;\n+import java.util.Arrays;\n \n /**\n- * This implementation of the IFileExplorer interface performs a depth-first\n- * exploration of the file system and invokes the visitor for every encountered\n- * node (file and directory). When the explorer reaches a directory, it visits all\n+ * This implementation of the IFileExplorer interface performs a depth-first exploration of the file system and invokes\n+ * the visitor for every encountered node (file and directory). When the explorer reaches a directory, it visits all\n  * files in the directory and then moves into the subdirectories.\n- * \n+ *\n  * @author Olivier Liechti\n  */\n public class DFSFileExplorer implements IFileExplorer {\n \n-  @Override\n-  public void explore(File rootDirectory, IFileVisitor vistor) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   @Override\n+   public void explore(File rootDirectory, IFileVisitor vistor) {\n+      dfsRecursive(rootDirectory, vistor);\n+      //Go through the files in depth first, and call visitor.visit() on every node (files or folders) found.\n+   }\n+\n+   private void dfsRecursive(File currentFile, IFileVisitor visitor) {\n+      visitor.visit(currentFile);\n+      File[] files = currentFile.listFiles();\n+\n+      if (files != null) { //is a directory\n+         Arrays.sort(files);\n+         for (File file : files) {\n+            dfsRecursive(file, visitor);\n+         }\n+      }\n+   }\n \n }"
  },
  {
    "sha": "9cb5d8e12ed308f6509c7e933ec5ef70ec1780fb",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "status": "modified",
    "additions": 52,
    "deletions": 20,
    "changes": 72,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java?ref=c787e7c92198b852bfe98a43a4a22daf16d47cac",
    "patch": "@@ -1,41 +1,73 @@\n package ch.heigvd.res.labio.impl.filters;\n \n+import ch.heigvd.res.labio.impl.Utils;\n+\n import java.io.FilterWriter;\n import java.io.IOException;\n import java.io.Writer;\n import java.util.logging.Logger;\n \n /**\n- * This class transforms the streams of character sent to the decorated writer.\n- * When filter encounters a line separator, it sends it to the decorated writer.\n- * It then sends the line number and a tab character, before resuming the write\n+ * This class transforms the streams of character sent to the decorated writer. When filter encounters a line separator,\n+ * it sends it to the decorated writer. It then sends the line number and a tab character, before resuming the write\n  * process.\n- *\n+ * <p>\n  * Hello\\n\\World -> 1\\Hello\\n2\\tWorld\n  *\n  * @author Olivier Liechti\n  */\n public class FileNumberingFilterWriter extends FilterWriter {\n \n-  private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+   private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+   private int lineNumber = 0;\n+\n+   private boolean holdingR = false;\n \n-  public FileNumberingFilterWriter(Writer out) {\n-    super(out);\n-  }\n+   public FileNumberingFilterWriter(Writer out) {\n+      super(out);\n+   }\n \n-  @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   @Override\n+   public void write(int c) throws IOException {\n+      if ((char)c == '\\r'){\n+         holdingR = true;\n+      } else {\n+         String s = String.valueOf((char) c);\n+         if (holdingR) {\n+            s = '\\r' + s;\n+            holdingR = false;\n+         }\n+         write(s, 0, s.length());\n+      }\n+   }\n \n-  @Override\n-  public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   @Override\n+   public void write(char[] cbuf, int off, int len) throws IOException {\n+      write(cbuf.toString(), off, len);\n+   }\n \n-  @Override\n-  public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   @Override\n+   public void write(String str, int off, int len) throws IOException {\n+      String[] lines = Utils.getNextLine(str.substring(off,off+len));\n+      while (true) {\n+         if (lineNumber == 0) {\n+            ++lineNumber;\n+            writeLineNumber();\n+         }\n+         if (lines[0].equals(\"\")) {\n+            super.write(lines[1], 0, lines[1].length());\n+            return;\n+         } else {\n+            super.write(lines[0], 0, lines[0].length());\n+            writeLineNumber();\n+            lines = Utils.getNextLine(lines[1]);\n+         }\n+      }\n+   }\n \n+   private void writeLineNumber() throws IOException {\n+      String number = String.valueOf(lineNumber);\n+      super.write(number + '\\t', 0, number.length()+1);\n+      ++lineNumber;\n+   }\n }"
  },
  {
    "sha": "fc9eb495b3d14dcf7e1b87618d3bc9a658aaf692",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "status": "modified",
    "additions": 20,
    "deletions": 17,
    "changes": 37,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java?ref=c787e7c92198b852bfe98a43a4a22daf16d47cac",
    "patch": "@@ -5,28 +5,31 @@\n import java.io.Writer;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class UpperCaseFilterWriter extends FilterWriter {\n-  \n-  public UpperCaseFilterWriter(Writer wrappedWriter) {\n-    super(wrappedWriter);\n-  }\n \n-  @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   public UpperCaseFilterWriter(Writer wrappedWriter) {\n+      super(wrappedWriter);\n+   }\n \n-  @Override\n-  public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   @Override\n+   public void write(int c) throws IOException {\n+      super.write(Character.toUpperCase(c));\n+   }\n \n-  @Override\n-  public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   @Override\n+   public void write(char[] cbuf, int off, int len) throws IOException {\n+      for (int i = off; i < off + len; ++i) {\n+         cbuf[i] = Character.toUpperCase(cbuf[i]);\n+      }\n+      super.write(cbuf, off, len);\n+   }\n+\n+   @Override\n+   public void write(String str, int off, int len) throws IOException {\n+      char[] cbuf = str.toCharArray();\n+      write(cbuf,off,len);\n+   }\n \n }"
  },
  {
    "sha": "4e791009f59750284f4744c05bf4dedf041e260a",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "status": "modified",
    "additions": 22,
    "deletions": 20,
    "changes": 42,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java?ref=c787e7c92198b852bfe98a43a4a22daf16d47cac",
    "patch": "@@ -1,31 +1,33 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n+import ch.heigvd.res.labio.impl.filters.FileNumberingFilterWriter;\n+import ch.heigvd.res.labio.impl.filters.UpperCaseFilterWriter;\n+\n import java.io.Writer;\n \n /**\n- * This class returns a writer decorated with two filters: an instance of\n- * the UpperCaseFilterWriter and an instance of the FileNumberingFilterWriter.\n- * When an instance of this class is passed to a file system explorer, it will\n- * generate an output file with 1) uppercase letters and 2) line numbers at the\n- * beginning of each line.\n- * \n+ * This class returns a writer decorated with two filters: an instance of the UpperCaseFilterWriter and an instance of\n+ * the FileNumberingFilterWriter. When an instance of this class is passed to a file system explorer, it will generate\n+ * an output file with 1) uppercase letters and 2) line numbers at the beginning of each line.\n+ *\n  * @author Olivier Liechti\n  */\n public class CompleteFileTransformer extends FileTransformer {\n \n-  @Override\n-  public Writer decorateWithFilters(Writer writer) {\n-    if (true) {\n-      throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    }\n-    /*\n-     * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration \n-     * of the writer (connected to the file. You can see that you first decorate the writer with an UpperCaseFilterWriter, which you then\n-     * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the characters read from the\n-     * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to the output file.f\n-     */\n-    //writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n-    return writer; \n-  }\n+   @Override\n+   public Writer decorateWithFilters(Writer writer) {\n+\n+      /*\n+       * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration\n+       * of the writer (connected to the file. You can see that you first decorate the writer with an\n+       * UpperCaseFilterWriter, which you then\n+       * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the\n+       * characters read from the\n+       * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to\n+       * the output file.f\n+       */\n+      writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n+      return writer;\n+   }\n \n }"
  },
  {
    "sha": "e9c26277eccfe5269b782f3dc72e70dc87df7fad",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java?ref=c787e7c92198b852bfe98a43a4a22daf16d47cac",
    "patch": "@@ -46,6 +46,11 @@ public void visit(File file) {\n       Reader reader = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8);\n       Writer writer = new OutputStreamWriter(new FileOutputStream(file.getPath()+ \".out\"), StandardCharsets.UTF_8); // the bug fix by teacher\n       writer = decorateWithFilters(writer);\n+      int c = reader.read();\n+      while (c!=-1){\n+        writer.write(c);\n+        c = reader.read();\n+      }\n \n       /*\n        * There is a missing piece here: you have an input reader and an ouput writer (notice how the "
  },
  {
    "sha": "e0651e6aa0bdac1e2b9dfc3a5d0ca443afc72a96",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/c787e7c92198b852bfe98a43a4a22daf16d47cac/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java?ref=c787e7c92198b852bfe98a43a4a22daf16d47cac",
    "patch": "@@ -13,14 +13,13 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n     /*\n      * The NoOpFileTransformer does not apply any transformation of the character stream\n      * (no uppercase, no line number, etc.). So, we don't need to decorate the writer connected to\n      * the output file at all. Just uncomment the following line and get rid of the UnsupportedOperationException and\n      * you will be all set.\n      */\n-    //return writer;\n+    return writer;\n   }\n \n }"
  }
]
