[
  {
    "sha": "e41fbee79403e1cddccf93d9d67e2ec585b1255e",
    "filename": "LabJavaIO/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/pom.xml",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/pom.xml",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/pom.xml?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -27,6 +27,7 @@\n             <filter>\n               <artifact>*:*</artifact>\n               <excludes>\n+                <exclude>module-info.class</exclude>\n                 <exclude>META-INF/MANIFEST.MF</exclude>\n                 <exclude>META-INF/LICENSE</exclude>\n                 <exclude>META-INF/NOTICE</exclude>\n@@ -55,6 +56,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.8.1</version>\n         <configuration>\n           <source>11</source>\n           <target>11</target>"
  },
  {
    "sha": "27b20ca4f69e386a931dfc0d5ebebfffc64ce31a",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "status": "modified",
    "additions": 169,
    "deletions": 137,
    "changes": 306,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -9,155 +9,187 @@\n import ch.heigvd.res.labio.quotes.QuoteClient;\n import org.apache.commons.io.FileUtils;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.io.Writer;\n+import java.io.*;\n import java.net.URISyntaxException;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n-public class Application implements IApplication {\n-\n-  /**\n-   * This constant defines where the quotes will be stored. The path is relative\n-   * to where the Java application is invoked.\n-   */\n-  public static String WORKSPACE_DIRECTORY = \"./workspace/quotes\";\n-  \n-  private static final Logger LOG = Logger.getLogger(Application.class.getName());\n-  \n-  public static void main(String[] args) {\n-    \n-    /*\n-     * I prefer to have LOG output on a single line, it's easier to read. Being able\n-     * to change the formatting of console outputs is one of the reasons why it is\n-     * better to use a Logger rather than using System.out.println\n-     */\n-    System.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%4$s: %5$s%6$s%n\");\n-    \n-       \n-    int numberOfQuotes = 0;\n-    try {\n-      numberOfQuotes = Integer.parseInt(args[0]);\n-    } catch (Exception e) {\n-      System.err.println(\"The command accepts a single numeric argument (number of quotes to fetch)\");\n-      System.exit(-1);\n-    }\n-        \n-    Application app = new Application();\n-    try {\n-      /*\n-       * Step 1 : clear the output directory\n-       */\n-      app.clearOutputDirectory();\n-      \n-      /*\n-       * Step 2 : use the QuotesClient to fetch quotes; store each quote in a file\n-       */\n-      app.fetchAndStoreQuotes(numberOfQuotes);\n-      \n-      /*\n-       * Step 3 : use a file explorer to traverse the file system; print the name of each directory and file\n-       */\n-      Writer writer = new StringWriter(); // we create a special writer that will send characters into a string (memory)\n-      app.printFileNames(writer);         // we hand over this writer to the printFileNames method\n-      LOG.info(writer.toString());       // we dump the whole result on the console\n-      \n+public class Application implements IApplication\n+{\n+\n+   /**\n+    * This constant defines where the quotes will be stored. The path is relative\n+    * to where the Java application is invoked.\n+    */\n+   public static String WORKSPACE_DIRECTORY = \"./workspace/quotes\";\n+\n+   private static final Logger LOG = Logger.getLogger(Application.class.getName());\n+\n+   public static void main(String[] args)\n+   {\n+\n       /*\n-       * Step 4 : process the quote files, by applying 2 transformations to their content\n-       *          (convert to uppercase and add line numbers)\n+       * I prefer to have LOG output on a single line, it's easier to read. Being able\n+       * to change the formatting of console outputs is one of the reasons why it is\n+       * better to use a Logger rather than using System.out.println\n        */\n-      app.processQuoteFiles();\n-      \n-    } catch (IOException ex) {\n-      LOG.log(Level.SEVERE, \"Could not fetch quotes. {0}\", ex.getMessage());\n-      ex.printStackTrace();\n-    }\n-  }\n-\n-  @Override\n-  public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n-    clearOutputDirectory();\n-    QuoteClient client = new QuoteClient();\n-    for (int i = 0; i < numberOfQuotes; i++) {\n-      Quote quote = null;\n-      try {\n-        quote = client.fetchQuote();\n-      } catch (URISyntaxException | InterruptedException e) {\n-        e.printStackTrace();\n+      System.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%4$s: %5$s%6$s%n\");\n+\n+\n+      int numberOfQuotes = 0;\n+      try\n+      {\n+         numberOfQuotes = Integer.parseInt(args[0]);\n+      } catch (Exception e)\n+      {\n+         System.err.println(\"The command accepts a single numeric argument (number of quotes to fetch)\");\n+         System.exit(-1);\n       }\n-      if (quote != null) {\n-        /* There is a missing piece here!\n-         * As you can see, this method handles the first part of the lab. It uses the web service\n-         * client to fetch quotes. We have removed a single line from this method. It is a call to\n-         * one method provided by this class, which is responsible for storing the content of the\n-         * quote in a text file (and for generating the directories based on the tags).\n-         */\n-        LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n-        for (String tag : quote.getTags()) {\n-          LOG.info(\"> \" + tag);\n-        }\n+\n+      Application app = new Application();\n+      try\n+      {\n+         /*\n+          * Step 1 : clear the output directory\n+          */\n+         app.clearOutputDirectory();\n+\n+         /*\n+          * Step 2 : use the QuotesClient to fetch quotes; store each quote in a file\n+          */\n+         app.fetchAndStoreQuotes(numberOfQuotes);\n+\n+         /*\n+          * Step 3 : use a file explorer to traverse the file system; print the name of each directory and file\n+          */\n+         Writer writer = new StringWriter(); // we create a special writer that will send characters into a string (memory)\n+         app.printFileNames(writer);         // we hand over this writer to the printFileNames method\n+         LOG.info(writer.toString());       // we dump the whole result on the console\n+\n+         /*\n+          * Step 4 : process the quote files, by applying 2 transformations to their content\n+          *          (convert to uppercase and add line numbers)\n+          */\n+         app.processQuoteFiles();\n+\n+      } catch (IOException ex)\n+      {\n+         LOG.log(Level.SEVERE, \"Could not fetch quotes. {0}\", ex.getMessage());\n+         ex.printStackTrace();\n+      }\n+   }\n+\n+   @Override\n+   public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException\n+   {\n+      clearOutputDirectory();\n+      QuoteClient client = new QuoteClient();\n+      for (int i = 0; i < numberOfQuotes; i++)\n+      {\n+         Quote quote = null;\n+         try\n+         {\n+            quote = client.fetchQuote();\n+         } catch (URISyntaxException | InterruptedException e)\n+         {\n+            e.printStackTrace();\n+         }\n+         if (quote != null)\n+         {\n+\n+            storeQuote(quote, \"quote-\" + i);\n+\n+            LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n+            for (String tag : quote.getTags())\n+            {\n+               LOG.info(\"> \" + tag);\n+            }\n+         }\n+\n       }\n+   }\n+\n+   /**\n+    * This method deletes the WORKSPACE_DIRECTORY and its content. It uses the\n+    * apache commons-io library. You should call this method in the main method.\n+    *\n+    * @throws IOException\n+    */\n+   void clearOutputDirectory() throws IOException\n+   {\n+      FileUtils.deleteDirectory(new File(WORKSPACE_DIRECTORY));\n+   }\n+\n+   /**\n+    * This method stores the content of a quote in the local file system. It has\n+    * 2 responsibilities:\n+    * <p>\n+    * - with quote.getTags(), it gets a list of tags and uses\n+    * it to create sub-folders (for instance, if a quote has three tags \"A\", \"B\" and\n+    * \"C\", it will be stored in /quotes/A/B/C/quotes-n.utf8.\n+    * <p>\n+    * - with quote.getQuote(), it has access to the text of the quote. It stores\n+    * this text in UTF-8 file.\n+    *\n+    * @param quote    the quote object, with tags and text\n+    * @param filename the name of the file to create and where to store the quote text\n+    * @throws IOException\n+    */\n+   void storeQuote(Quote quote, String filename) throws IOException\n+   {\n+      StringBuilder path = new StringBuilder();\n+      path.append(WORKSPACE_DIRECTORY).append(\"/\");\n \n-    }\n-  }\n-  \n-  /**\n-   * This method deletes the WORKSPACE_DIRECTORY and its content. It uses the\n-   * apache commons-io library. You should call this method in the main method.\n-   * \n-   * @throws IOException \n-   */\n-  void clearOutputDirectory() throws IOException {\n-    FileUtils.deleteDirectory(new File(WORKSPACE_DIRECTORY));    \n-  }\n-\n-  /**\n-   * This method stores the content of a quote in the local file system. It has\n-   * 2 responsibilities: \n-   * \n-   * - with quote.getTags(), it gets a list of tags and uses\n-   *   it to create sub-folders (for instance, if a quote has three tags \"A\", \"B\" and\n-   *   \"C\", it will be stored in /quotes/A/B/C/quotes-n.utf8.\n-   * \n-   * - with quote.getQuote(), it has access to the text of the quote. It stores\n-   *   this text in UTF-8 file.\n-   * \n-   * @param quote the quote object, with tags and text\n-   * @param filename the name of the file to create and where to store the quote text\n-   * @throws IOException \n-   */\n-  void storeQuote(Quote quote, String filename) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n-  \n-  /**\n-   * This method uses a IFileExplorer to explore the file system and prints the name of each\n-   * encountered file and directory.\n-   */\n-  void printFileNames(final Writer writer) {\n-    IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new IFileVisitor() {\n-      @Override\n-      public void visit(File file) {\n-        /*\n-         * There is a missing piece here. Notice how we use an anonymous class here. We provide the implementation\n-         * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n-         * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n-         */\n+      for (String tag : quote.getTags())\n+      {\n+         path.append(tag).append(\"/\");\n       }\n-    });\n-  }\n-\n-  @Override\n-  public void processQuoteFiles() throws IOException {\n-    IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());    \n-  }\n+\n+      path.append(filename).append(\".utf8\");\n+      File file = new File(path.toString());\n+      file.getParentFile().mkdirs();\n+\n+\n+\n+      Writer writer = new OutputStreamWriter(new FileOutputStream(file), \"UTF-8\");\n+      BufferedWriter bw = new BufferedWriter(writer);\n+      bw.write(quote.getQuote());\n+      bw.close();\n+\n+   }\n+\n+   /**\n+    * This method uses a IFileExplorer to explore the file system and prints the name of each\n+    * encountered file and directory.\n+    */\n+   void printFileNames(final Writer writer)\n+   {\n+      IFileExplorer explorer = new DFSFileExplorer();\n+      explorer.explore(new File(WORKSPACE_DIRECTORY), new IFileVisitor()\n+      {\n+         @Override\n+         public void visit(File file)\n+         {\n+            try\n+            {\n+               writer.write(file.getPath() + \"\\n\");\n+            }\n+            catch (Exception e)\n+            {\n+               e.printStackTrace();\n+            }\n+         }\n+      });\n+   }\n+\n+   @Override\n+   public void processQuoteFiles() throws IOException\n+   {\n+      IFileExplorer explorer = new DFSFileExplorer();\n+      explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());\n+   }\n \n }"
  },
  {
    "sha": "1d695fb07bf530d79e5baf1e16d97bba5074695a",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "status": "modified",
    "additions": 41,
    "deletions": 17,
    "changes": 58,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -1,26 +1,50 @@\n package ch.heigvd.res.labio.impl;\n \n+import java.util.Arrays;\n import java.util.logging.Logger;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n-public class Utils {\n-\n-  private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n-\n-  /**\n-   * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n-   * the next line in the string passed in arguments. \n-   * \n-   * @param lines a string that may contain 0, 1 or more lines\n-   * @return an array with 2 elements; the first element is the next line with\n-   * the line separator, the second element is the remaining text. If the argument does not\n-   * contain any line separator, then the first element is an empty string.\n-   */\n-  public static String[] getNextLine(String lines) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+public class Utils\n+{\n+\n+    private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n+\n+    /**\n+     * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n+     * the next line in the string passed in arguments.\n+     *\n+     * @param lines a string that may contain 0, 1 or more lines\n+     * @return an array with 2 elements; the first element is the next line with\n+     * the line separator, the second element is the remaining text. If the argument does not\n+     * contain any line separator, then the first element is an empty string.\n+     */\n+    public static String[] getNextLine(String lines)\n+    {\n+\n+        String[] result = new String[]{\"\", \"\"};\n+        String[] newLineSeparator = new String[]{\"\\r\", \"\\n\", \"\\r\\n\"};\n+        Arrays.sort(newLineSeparator, (a, b) -> b.length() - a.length());\n+\n+        int index = -1;\n+        int delimSize = 0;\n+\n+        for (String ls : newLineSeparator)\n+        {\n+            int tmp = lines.indexOf(ls);\n+            if (tmp != -1 && (tmp < index - delimSize || index == -1))\n+            {\n+                delimSize = ls.length() - 1;\n+                index = tmp + delimSize;\n+            }\n+        }\n+\n+\n+        result[0] = lines.substring(0, index + 1);\n+        result[1] = lines.substring(index + 1);\n+\n+        return result;\n+    }\n \n }"
  },
  {
    "sha": "93fa81c71440fcc677e9c8df1680d08ef0f210a5",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "status": "modified",
    "additions": 25,
    "deletions": 6,
    "changes": 31,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -4,20 +4,39 @@\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n \n import java.io.File;\n+import java.util.Arrays;\n \n /**\n  * This implementation of the IFileExplorer interface performs a depth-first\n  * exploration of the file system and invokes the visitor for every encountered\n  * node (file and directory). When the explorer reaches a directory, it visits all\n  * files in the directory and then moves into the subdirectories.\n- * \n+ *\n  * @author Olivier Liechti\n  */\n-public class DFSFileExplorer implements IFileExplorer {\n+public class\n+DFSFileExplorer implements IFileExplorer\n+{\n \n-  @Override\n-  public void explore(File rootDirectory, IFileVisitor vistor) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   @Override\n+   public void explore(File rootDirectory, IFileVisitor vistor)\n+   {\n+      vistor.visit(rootDirectory);\n \n+      File[] files;\n+\n+      // Populates the array with names of files and directories\n+      files = rootDirectory.listFiles();\n+\n+      if(files == null) return;\n+\n+      Arrays.sort(files);\n+\n+      File element;\n+      // For each pathname in the pathnames array\n+      for (File file : files)\n+      {\n+         explore(file, vistor);\n+      }\n+   }\n }"
  },
  {
    "sha": "c1e9684b28fe38fed9f90542d96b912538adf6bd",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "status": "modified",
    "additions": 65,
    "deletions": 18,
    "changes": 83,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -1,41 +1,88 @@\n package ch.heigvd.res.labio.impl.filters;\n \n+import ch.heigvd.res.labio.impl.Utils;\n+import jdk.jshell.execution.Util;\n+\n import java.io.FilterWriter;\n import java.io.IOException;\n import java.io.Writer;\n+import java.util.Arrays;\n import java.util.logging.Logger;\n \n /**\n  * This class transforms the streams of character sent to the decorated writer.\n  * When filter encounters a line separator, it sends it to the decorated writer.\n  * It then sends the line number and a tab character, before resuming the write\n  * process.\n- *\n+ * <p>\n  * Hello\\n\\World -> 1\\Hello\\n2\\tWorld\n  *\n  * @author Olivier Liechti\n  */\n-public class FileNumberingFilterWriter extends FilterWriter {\n+public class FileNumberingFilterWriter extends FilterWriter\n+{\n+\n+   private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+   private int lineNumber;\n+   private char lastChar;\n+\n+   public FileNumberingFilterWriter(Writer out)\n+   {\n+      super(out);\n+      lineNumber = 1;\n+   }\n+\n+   private void beginNewLine() throws IOException\n+   {\n+      String str = lineNumber + \"\\t\";\n+      super.write(str, 0, str.length());\n+      ++lineNumber;\n+   }\n+\n+   @Override\n+   public void write(String str, int off, int len) throws IOException\n+   {\n+      if(str == null || str.isEmpty()) return;\n+      String[] result;\n+      String sub = str.substring(off, off+len);\n+      result = Utils.getNextLine(sub);\n+\n+      if(lineNumber == 1) beginNewLine();\n+\n+      while(!result[0].isEmpty())\n+      {\n+         super.write(result[0], 0, result[0].length());\n+         beginNewLine();\n+\n+         result = Utils.getNextLine(result[1]);\n+      }\n+\n+      super.write(result[1], 0, result[1].length());\n+   }\n+\n+   @Override\n+   public void write(char[] cbuf, int off, int len) throws IOException\n+   {\n+      write(new String(cbuf), off, len);\n+   }\n \n-  private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+   @Override\n+   public void write(int c) throws IOException\n+   {\n+      if(lineNumber == 1 || lastChar == '\\r' && c != '\\n')\n+      {\n+         beginNewLine();\n+      }\n \n-  public FileNumberingFilterWriter(Writer out) {\n-    super(out);\n-  }\n+      super.write(c);\n \n-  @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+      if(c == '\\n')\n+      {\n+         beginNewLine();\n+      }\n \n-  @Override\n-  public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+      lastChar = (char)c;\n \n-  @Override\n-  public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+   }\n \n }"
  },
  {
    "sha": "d9e1657c1bcd2349942e7a27312f0077c50a73dd",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "status": "modified",
    "additions": 26,
    "deletions": 18,
    "changes": 44,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -5,28 +5,36 @@\n import java.io.Writer;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n-public class UpperCaseFilterWriter extends FilterWriter {\n-  \n-  public UpperCaseFilterWriter(Writer wrappedWriter) {\n-    super(wrappedWriter);\n-  }\n+public class UpperCaseFilterWriter extends FilterWriter\n+{\n \n-  @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    public UpperCaseFilterWriter(Writer wrappedWriter)\n+    {\n+        super(wrappedWriter);\n+    }\n \n-  @Override\n-  public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    @Override\n+    public void write(String str, int off, int len) throws IOException\n+    {\n+        super.write(str.toUpperCase(), off, len);\n+    }\n \n-  @Override\n-  public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    @Override\n+    public void write(char[] cbuf, int off, int len) throws IOException\n+    {\n+        for(int i = off; i < off+len; ++i)\n+        {\n+            cbuf[i] = Character.toUpperCase(cbuf[i]);\n+        }\n+        super.write(cbuf, off, len);\n+    }\n+\n+    @Override\n+    public void write(int c) throws IOException\n+    {\n+        super.write(Character.toUpperCase(c));\n+    }\n \n }"
  },
  {
    "sha": "5fe526afadbd59977ad7444c8ac3968b2e3d3d13",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "status": "modified",
    "additions": 6,
    "deletions": 11,
    "changes": 17,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -1,5 +1,8 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n+import ch.heigvd.res.labio.impl.filters.FileNumberingFilterWriter;\n+import ch.heigvd.res.labio.impl.filters.UpperCaseFilterWriter;\n+\n import java.io.Writer;\n \n /**\n@@ -14,17 +17,9 @@\n public class CompleteFileTransformer extends FileTransformer {\n \n   @Override\n-  public Writer decorateWithFilters(Writer writer) {\n-    if (true) {\n-      throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    }\n-    /*\n-     * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration \n-     * of the writer (connected to the file. You can see that you first decorate the writer with an UpperCaseFilterWriter, which you then\n-     * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the characters read from the\n-     * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to the output file.f\n-     */\n-    //writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n+  public Writer decorateWithFilters(Writer writer)\n+  {\n+    writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n     return writer; \n   }\n "
  },
  {
    "sha": "cd827ccd9521cba29d9e327546789879212213ae",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "status": "modified",
    "additions": 14,
    "deletions": 9,
    "changes": 23,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -47,15 +47,20 @@ public void visit(File file) {\n       Writer writer = new OutputStreamWriter(new FileOutputStream(file.getPath()+ \".out\"), StandardCharsets.UTF_8); // the bug fix by teacher\n       writer = decorateWithFilters(writer);\n \n-      /*\n-       * There is a missing piece here: you have an input reader and an ouput writer (notice how the \n-       * writer has been decorated by the concrete subclass!). You need to write a loop to read the\n-       * characters and write them to the writer.\n-       */\n-      \n-      reader.close();\n-      writer.flush();\n-      writer.close();\n+      BufferedReader br = new BufferedReader(reader);\n+      BufferedWriter bw = new BufferedWriter(writer);\n+\n+      int c = br.read();\n+\n+      while(c != -1)\n+      {\n+        bw.write(c);\n+        c = br.read();\n+      }\n+\n+      br.close();\n+      bw.flush();\n+      bw.close();\n     } catch (IOException ex) {\n       LOG.log(Level.SEVERE, null, ex);\n     }"
  },
  {
    "sha": "b765a4f6920b38028e0e26ac6dbf81de54c9b19f",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "status": "modified",
    "additions": 9,
    "deletions": 13,
    "changes": 22,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/db7f2529bcbb809e5c385366cf7bca7124487ead/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java?ref=db7f2529bcbb809e5c385366cf7bca7124487ead",
    "patch": "@@ -6,21 +6,17 @@\n  * This class returns a writer without any decorator. When an instance of\n  * this class is passed to a file system explorer, it will simply duplicate\n  * the content of the input file into the output file.\n- * \n+ *\n  * @author Olivier Liechti\n  */\n-public class NoOpFileTransformer extends FileTransformer {\n+public class NoOpFileTransformer extends FileTransformer\n+{\n \n-  @Override\n-  public Writer decorateWithFilters(Writer writer) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    /*\n-     * The NoOpFileTransformer does not apply any transformation of the character stream\n-     * (no uppercase, no line number, etc.). So, we don't need to decorate the writer connected to\n-     * the output file at all. Just uncomment the following line and get rid of the UnsupportedOperationException and\n-     * you will be all set.\n-     */\n-    //return writer;\n-  }\n+   @Override\n+   public Writer decorateWithFilters(Writer writer)\n+   {\n+\n+      return writer;\n+   }\n \n }"
  }
]
