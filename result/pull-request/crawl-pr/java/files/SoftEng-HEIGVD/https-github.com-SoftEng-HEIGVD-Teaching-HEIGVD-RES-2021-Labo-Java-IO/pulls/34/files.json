[
  {
    "sha": "3e8a5b1c02d59f92b329331fa5a102372efb29c7",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "status": "modified",
    "additions": 153,
    "deletions": 135,
    "changes": 288,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Application.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -9,155 +9,173 @@\n import ch.heigvd.res.labio.quotes.QuoteClient;\n import org.apache.commons.io.FileUtils;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.io.Writer;\n+import java.io.*;\n import java.net.URISyntaxException;\n+import java.util.Iterator;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class Application implements IApplication {\n \n-  /**\n-   * This constant defines where the quotes will be stored. The path is relative\n-   * to where the Java application is invoked.\n-   */\n-  public static String WORKSPACE_DIRECTORY = \"./workspace/quotes\";\n-  \n-  private static final Logger LOG = Logger.getLogger(Application.class.getName());\n-  \n-  public static void main(String[] args) {\n-    \n-    /*\n-     * I prefer to have LOG output on a single line, it's easier to read. Being able\n-     * to change the formatting of console outputs is one of the reasons why it is\n-     * better to use a Logger rather than using System.out.println\n+    /**\n+     * This constant defines where the quotes will be stored. The path is relative\n+     * to where the Java application is invoked.\n      */\n-    System.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%4$s: %5$s%6$s%n\");\n-    \n-       \n-    int numberOfQuotes = 0;\n-    try {\n-      numberOfQuotes = Integer.parseInt(args[0]);\n-    } catch (Exception e) {\n-      System.err.println(\"The command accepts a single numeric argument (number of quotes to fetch)\");\n-      System.exit(-1);\n+    public static String WORKSPACE_DIRECTORY = \"./workspace/quotes\";\n+\n+    private static final Logger LOG = Logger.getLogger(Application.class.getName());\n+\n+    public static void main(String[] args) {\n+\n+        /*\n+         * I prefer to have LOG output on a single line, it's easier to read. Being able\n+         * to change the formatting of console outputs is one of the reasons why it is\n+         * better to use a Logger rather than using System.out.println\n+         */\n+        System.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%4$s: %5$s%6$s%n\");\n+\n+\n+        int numberOfQuotes = 0;\n+        try {\n+            numberOfQuotes = Integer.parseInt(args[0]);\n+        } catch (Exception e) {\n+            System.err.println(\"The command accepts a single numeric argument (number of quotes to fetch)\");\n+            System.exit(-1);\n+        }\n+\n+        Application app = new Application();\n+        try {\n+            /*\n+             * Step 1 : clear the output directory\n+             */\n+            app.clearOutputDirectory();\n+\n+            /*\n+             * Step 2 : use the QuotesClient to fetch quotes; store each quote in a file\n+             */\n+            app.fetchAndStoreQuotes(numberOfQuotes);\n+\n+            /*\n+             * Step 3 : use a file explorer to traverse the file system; print the name of each directory and file\n+             */\n+            Writer writer = new StringWriter(); // we create a special writer that will send characters into a string (memory)\n+            app.printFileNames(writer);         // we hand over this writer to the printFileNames method\n+            LOG.info(writer.toString());       // we dump the whole result on the console\n+\n+            /*\n+             * Step 4 : process the quote files, by applying 2 transformations to their content\n+             *          (convert to uppercase and add line numbers)\n+             */\n+            app.processQuoteFiles();\n+\n+        } catch (IOException ex) {\n+            LOG.log(Level.SEVERE, \"Could not fetch quotes. {0}\", ex.getMessage());\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n+        clearOutputDirectory();\n+        QuoteClient client = new QuoteClient();\n+        for (int i = 0; i < numberOfQuotes; i++) {\n+            Quote quote = null;\n+            try {\n+                quote = client.fetchQuote();\n+            } catch (URISyntaxException | InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            if (quote != null) {\n+                /* There is a missing piece here!\n+                 * As you can see, this method handles the first part of the lab. It uses the web service\n+                 * client to fetch quotes. We have removed a single line from this method. It is a call to\n+                 * one method provided by this class, which is responsible for storing the content of the\n+                 * quote in a text file (and for generating the directories based on the tags).\n+                 */\n+                LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n+                for (String tag : quote.getTags()) {\n+                    LOG.info(\"> \" + tag);\n+                }\n+                /* Modified by Nicolas and Ryan */\n+                storeQuote(quote, \"quote-\" + i + \".utf8\");\n+                /* Modified by Nicolas and Ryan */\n+            }\n+\n+        }\n     }\n-        \n-    Application app = new Application();\n-    try {\n-      /*\n-       * Step 1 : clear the output directory\n-       */\n-      app.clearOutputDirectory();\n-      \n-      /*\n-       * Step 2 : use the QuotesClient to fetch quotes; store each quote in a file\n-       */\n-      app.fetchAndStoreQuotes(numberOfQuotes);\n-      \n-      /*\n-       * Step 3 : use a file explorer to traverse the file system; print the name of each directory and file\n-       */\n-      Writer writer = new StringWriter(); // we create a special writer that will send characters into a string (memory)\n-      app.printFileNames(writer);         // we hand over this writer to the printFileNames method\n-      LOG.info(writer.toString());       // we dump the whole result on the console\n-      \n-      /*\n-       * Step 4 : process the quote files, by applying 2 transformations to their content\n-       *          (convert to uppercase and add line numbers)\n-       */\n-      app.processQuoteFiles();\n-      \n-    } catch (IOException ex) {\n-      LOG.log(Level.SEVERE, \"Could not fetch quotes. {0}\", ex.getMessage());\n-      ex.printStackTrace();\n+\n+    /**\n+     * This method deletes the WORKSPACE_DIRECTORY and its content. It uses the\n+     * apache commons-io library. You should call this method in the main method.\n+     *\n+     * @throws IOException\n+     */\n+    void clearOutputDirectory() throws IOException {\n+        FileUtils.deleteDirectory(new File(WORKSPACE_DIRECTORY));\n     }\n-  }\n-\n-  @Override\n-  public void fetchAndStoreQuotes(int numberOfQuotes) throws IOException {\n-    clearOutputDirectory();\n-    QuoteClient client = new QuoteClient();\n-    for (int i = 0; i < numberOfQuotes; i++) {\n-      Quote quote = null;\n-      try {\n-        quote = client.fetchQuote();\n-      } catch (URISyntaxException | InterruptedException e) {\n-        e.printStackTrace();\n-      }\n-      if (quote != null) {\n-        /* There is a missing piece here!\n-         * As you can see, this method handles the first part of the lab. It uses the web service\n-         * client to fetch quotes. We have removed a single line from this method. It is a call to\n-         * one method provided by this class, which is responsible for storing the content of the\n-         * quote in a text file (and for generating the directories based on the tags).\n-         */\n-        LOG.info(\"Received a new joke with \" + quote.getTags().size() + \" tags.\");\n-        for (String tag : quote.getTags()) {\n-          LOG.info(\"> \" + tag);\n+\n+    /**\n+     * This method stores the content of a quote in the local file system. It has\n+     * 2 responsibilities:\n+     * <p>\n+     * - with quote.getTags(), it gets a list of tags and uses\n+     * it to create sub-folders (for instance, if a quote has three tags \"A\", \"B\" and\n+     * \"C\", it will be stored in /quotes/A/B/C/quotes-n.utf8.\n+     * <p>\n+     * - with quote.getQuote(), it has access to the text of the quote. It stores\n+     * this text in UTF-8 file.\n+     *\n+     * @param quote    the quote object, with tags and text\n+     * @param filename the name of the file to create and where to store the quote text\n+     * @throws IOException\n+     * @author Nicolas and Ryan\n+     */\n+    void storeQuote(Quote quote, String filename) throws IOException {\n+        Iterator i = quote.getTags().iterator();\n+        String rep = WORKSPACE_DIRECTORY;\n+        while (i.hasNext()) {\n+            rep += \"/\" + i.next();\n         }\n-      }\n+        File dir = new File(rep);\n+        dir.mkdirs();\n+        rep += \"/\" + filename;\n+        Writer out = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(rep), \"UTF-8\"));\n+        try {\n+            out.write(quote.getQuote());\n+        } finally {\n+            out.close();\n+        }\n+    }\n \n+    /**\n+     * This method uses a IFileExplorer to explore the file system and prints the name of each\n+     * encountered file and directory.\n+     */\n+    void printFileNames(final Writer writer) throws IOException {\n+        IFileExplorer explorer = new DFSFileExplorer();\n+        explorer.explore(new File(WORKSPACE_DIRECTORY), new IFileVisitor() {\n+            @Override\n+            public void visit(File file) throws IOException {\n+                /*\n+                 * There is a missing piece here. Notice how we use an anonymous class here. We provide the implementation\n+                 * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n+                 * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n+                 */\n+                /* Modified by Ryan and Nicolas */\n+                writer.write(file.getPath() + '\\n');\n+                /* Modified by Ryan and Nicolas */\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void processQuoteFiles() throws IOException {\n+        IFileExplorer explorer = new DFSFileExplorer();\n+        explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());\n     }\n-  }\n-  \n-  /**\n-   * This method deletes the WORKSPACE_DIRECTORY and its content. It uses the\n-   * apache commons-io library. You should call this method in the main method.\n-   * \n-   * @throws IOException \n-   */\n-  void clearOutputDirectory() throws IOException {\n-    FileUtils.deleteDirectory(new File(WORKSPACE_DIRECTORY));    \n-  }\n-\n-  /**\n-   * This method stores the content of a quote in the local file system. It has\n-   * 2 responsibilities: \n-   * \n-   * - with quote.getTags(), it gets a list of tags and uses\n-   *   it to create sub-folders (for instance, if a quote has three tags \"A\", \"B\" and\n-   *   \"C\", it will be stored in /quotes/A/B/C/quotes-n.utf8.\n-   * \n-   * - with quote.getQuote(), it has access to the text of the quote. It stores\n-   *   this text in UTF-8 file.\n-   * \n-   * @param quote the quote object, with tags and text\n-   * @param filename the name of the file to create and where to store the quote text\n-   * @throws IOException \n-   */\n-  void storeQuote(Quote quote, String filename) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n-  \n-  /**\n-   * This method uses a IFileExplorer to explore the file system and prints the name of each\n-   * encountered file and directory.\n-   */\n-  void printFileNames(final Writer writer) {\n-    IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new IFileVisitor() {\n-      @Override\n-      public void visit(File file) {\n-        /*\n-         * There is a missing piece here. Notice how we use an anonymous class here. We provide the implementation\n-         * of the the IFileVisitor interface inline. You just have to add the body of the visit method, which should\n-         * be pretty easy (we want to write the filename, including the path, to the writer passed in argument).\n-         */\n-      }\n-    });\n-  }\n-\n-  @Override\n-  public void processQuoteFiles() throws IOException {\n-    IFileExplorer explorer = new DFSFileExplorer();\n-    explorer.explore(new File(WORKSPACE_DIRECTORY), new CompleteFileTransformer());    \n-  }\n \n }"
  },
  {
    "sha": "799a08bd1255a28f23e72b5fb4e6d39deb6786c2",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "status": "modified",
    "additions": 27,
    "deletions": 15,
    "changes": 42,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/Utils.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -1,26 +1,38 @@\n package ch.heigvd.res.labio.impl;\n \n import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class Utils {\n \n-  private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n-\n-  /**\n-   * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n-   * the next line in the string passed in arguments. \n-   * \n-   * @param lines a string that may contain 0, 1 or more lines\n-   * @return an array with 2 elements; the first element is the next line with\n-   * the line separator, the second element is the remaining text. If the argument does not\n-   * contain any line separator, then the first element is an empty string.\n-   */\n-  public static String[] getNextLine(String lines) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n \n+    /**\n+     * This method looks for the next new line separators (\\r, \\n, \\r\\n) to extract\n+     * the next line in the string passed in arguments.\n+     *\n+     * Sources utilisées :  https://www.rgagnon.com/javadetails/java-0454.html\n+     *\n+     * @param lines a string that may contain 0, 1 or more lines\n+     * @return an array with 2 elements; the first element is the next line with\n+     * the line separator, the second element is the remaining text. If the argument does not\n+     * contain any line separator, then the first element is an empty string.\n+     * @author modified by Nicolas and Ryan\n+     */\n+    public static String[] getNextLine(String lines) {\n+        String firstLine = \"\";\n+        int end = 0;\n+        Pattern pattern = Pattern.compile(\"(\\r\\n|\\r|\\n)\");\n+        Matcher matcher = pattern.matcher(lines);\n+        if (matcher.find()) {\n+            end = matcher.end();\n+            firstLine += lines.substring(0, end);\n+        }\n+        return new String[]{firstLine, lines.substring(end)};\n+    }\n }\n+"
  },
  {
    "sha": "eab2f1b6eecbcfc24183c9f0ab0ed6d34002e7e2",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "status": "modified",
    "additions": 21,
    "deletions": 6,
    "changes": 27,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorer.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -4,20 +4,35 @@\n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Objects;\n \n /**\n  * This implementation of the IFileExplorer interface performs a depth-first\n  * exploration of the file system and invokes the visitor for every encountered\n  * node (file and directory). When the explorer reaches a directory, it visits all\n  * files in the directory and then moves into the subdirectories.\n- * \n+ *\n  * @author Olivier Liechti\n+ * @author Modified by Nicolas and Ryan\n  */\n public class DFSFileExplorer implements IFileExplorer {\n \n-  @Override\n-  public void explore(File rootDirectory, IFileVisitor vistor) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n-\n+    @Override\n+    public void explore(File rootDirectory, IFileVisitor vistor) throws IOException {\n+        File[] paths = rootDirectory.listFiles();\n+        vistor.visit(rootDirectory);\n+        if (paths != null) {\n+            //on trie la liste car listFiles ne garantit pas l'ordre\n+            Arrays.sort(paths);\n+            for (File path : paths) {\n+                if (path.isDirectory()) {\n+                    explore(path, vistor);\n+                } else {\n+                    vistor.visit(path);\n+                }\n+            }\n+        }\n+    }\n }"
  },
  {
    "sha": "d7c1647ebd2c990fcca229f2b83973d8f526fb9e",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "status": "modified",
    "additions": 80,
    "deletions": 19,
    "changes": 99,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriter.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -3,39 +3,100 @@\n import java.io.FilterWriter;\n import java.io.IOException;\n import java.io.Writer;\n+import java.util.Objects;\n import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * This class transforms the streams of character sent to the decorated writer.\n  * When filter encounters a line separator, it sends it to the decorated writer.\n  * It then sends the line number and a tab character, before resuming the write\n  * process.\n- *\n+ * <p>\n  * Hello\\n\\World -> 1\\Hello\\n2\\tWorld\n  *\n  * @author Olivier Liechti\n+ * @author Modified by Nicolas et Ryan\n  */\n public class FileNumberingFilterWriter extends FilterWriter {\n+    private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n+    private boolean firstLineForIntFct = true;\n+    private int lineNb = 1;\n \n-  private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriter.class.getName());\n-\n-  public FileNumberingFilterWriter(Writer out) {\n-    super(out);\n-  }\n+    public FileNumberingFilterWriter(Writer out) {\n+        super(out);\n+    }\n \n-  @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    /**\n+     * @param str\n+     * @param off\n+     * @param len\n+     * @throws IOException\n+     * @author Nicolas and Ryan\n+     */\n+    @Override\n+    public void write(String str, int off, int len) throws IOException {\n+        String newStr = \"\";\n+        if (lineNb == 1) {\n+            newStr = lineNb++ + \"\\t\";\n+        }\n+        Pattern pattern = Pattern.compile(\"(\\r\\n|\\r|\\n)\");\n+        Matcher matcher = pattern.matcher(str);\n+        int posSeparateur = 0;\n+        boolean hasSep = false;\n+        if (matcher.find()) {\n+            posSeparateur = matcher.end() - 1;\n+            hasSep = true;\n+        }\n+        for (int i = off; i < off + len; i++) {\n+            newStr += str.charAt(i);\n+            if (hasSep && i == posSeparateur) {\n+                newStr += lineNb++ + \"\\t\";\n+                int offset = i + 1;\n+                matcher = pattern.matcher(str.substring(offset));\n+                if (matcher.find()) {\n+                    posSeparateur = offset + matcher.end() - 1;\n+                } else {\n+                    hasSep = false;\n+                }\n+            }\n+        }\n+        super.write(newStr, 0, newStr.length());\n+    }\n \n-  @Override\n-  public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    /**\n+     * @param cbuf\n+     * @param off\n+     * @param len\n+     * @throws IOException\n+     * @author Nicolas and Ryan\n+     */\n+    @Override\n+    public void write(char[] cbuf, int off, int len) throws IOException {\n+        write(new String(cbuf), off, len);\n+    }\n \n-  @Override\n-  public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    /**\n+     * @param c\n+     * @throws IOException\n+     * @author Nicolas and Ryan\n+     */\n+    @Override\n+    public void write(int c) throws IOException {\n+        final int codeAsciiZero = 48;\n+        if (firstLineForIntFct) {\n+            super.write(lineNb++ + codeAsciiZero);\n+            super.write('\\t');\n+            firstLineForIntFct = false;\n+        }\n \n-}\n+        if ((char) c == '\\n') {\n+            super.write(c);\n+            super.write(lineNb++ + codeAsciiZero);\n+            super.write('\\t');\n+        } else {\n+            super.write(c);\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "dba29a09cc91267f7a4fde130897baaad4749d1c",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "status": "modified",
    "additions": 42,
    "deletions": 17,
    "changes": 59,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/filters/UpperCaseFilterWriter.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -5,28 +5,53 @@\n import java.io.Writer;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class UpperCaseFilterWriter extends FilterWriter {\n-  \n-  public UpperCaseFilterWriter(Writer wrappedWriter) {\n-    super(wrappedWriter);\n-  }\n \n-  @Override\n-  public void write(String str, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    public UpperCaseFilterWriter(Writer wrappedWriter) {\n+        super(wrappedWriter);\n+    }\n \n-  @Override\n-  public void write(char[] cbuf, int off, int len) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    /**\n+     *\n+     * @param str\n+     * @param off\n+     * @param len\n+     * @throws IOException\n+     * @author Nicolas and Ryan\n+     */\n+    @Override\n+    public void write(String str, int off, int len) throws IOException {\n+        super.write(str.toUpperCase(), off, len);\n+    }\n \n-  @Override\n-  public void write(int c) throws IOException {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-  }\n+    /**\n+     * @param cbuf\n+     * @param off\n+     * @param len\n+     * @throws IOException\n+     * @author Nicolas and Ryan\n+     */\n+    @Override\n+    public void write(char[] cbuf, int off, int len) throws IOException {\n+        for (int i = off; i < off + len; i++) {\n+            if (Character.isLetter(cbuf[i])) {\n+                cbuf[i] = Character.toUpperCase(cbuf[i]);\n+            }\n+        }\n+        super.write(cbuf, off, len);\n+    }\n+\n+    /**\n+     *\n+     * @param c\n+     * @throws IOException\n+     * @author Nicolas and Ryan\n+     */\n+    @Override\n+    public void write(int c) throws IOException {\n+        super.write(Character.toUpperCase(c));\n+    }\n \n }"
  },
  {
    "sha": "319f0ac8be26837ef9228ca1fbdc18bd4bd5bf99",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/CompleteFileTransformer.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -1,5 +1,8 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n+import ch.heigvd.res.labio.impl.filters.FileNumberingFilterWriter;\n+import ch.heigvd.res.labio.impl.filters.UpperCaseFilterWriter;\n+\n import java.io.Writer;\n \n /**\n@@ -15,16 +18,13 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    if (true) {\n-      throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    }\n     /*\n      * If you uncomment the following line (and get rid of th 3 previous lines...), you will restore the decoration \n      * of the writer (connected to the file. You can see that you first decorate the writer with an UpperCaseFilterWriter, which you then\n      * decorate with a FileNumberingFilterWriter. The resulting writer is used by the abstract class to write the characters read from the\n      * input files. So, the input is first prefixed with line numbers, then transformed to uppercase, then sent to the output file.f\n      */\n-    //writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n+    writer = new FileNumberingFilterWriter(new UpperCaseFilterWriter(writer));\n     return writer; \n   }\n "
  },
  {
    "sha": "e3666c4874d75af9be824011dea4949ca1e37dad",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/FileTransformer.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -1,6 +1,7 @@\n package ch.heigvd.res.labio.impl.transformers;\n \n import ch.heigvd.res.labio.interfaces.IFileVisitor;\n+import org.apache.commons.io.IOUtils;\n \n import java.io.*;\n import java.nio.charset.StandardCharsets;\n@@ -52,7 +53,10 @@ public void visit(File file) {\n        * writer has been decorated by the concrete subclass!). You need to write a loop to read the\n        * characters and write them to the writer.\n        */\n-      \n+      /* Modified by Nicolas and Ryan */\n+      writer.write(IOUtils.toString(reader));\n+      /* Modified by Nicolas and Ryan */\n+\n       reader.close();\n       writer.flush();\n       writer.close();"
  },
  {
    "sha": "880c065bfcbba2f264810bc1db104c924b197e6e",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 8,
    "changes": 9,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/impl/transformers/NoOpFileTransformer.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -13,14 +13,7 @@\n \n   @Override\n   public Writer decorateWithFilters(Writer writer) {\n-    throw new UnsupportedOperationException(\"The student has not implemented this method yet.\");\n-    /*\n-     * The NoOpFileTransformer does not apply any transformation of the character stream\n-     * (no uppercase, no line number, etc.). So, we don't need to decorate the writer connected to\n-     * the output file at all. Just uncomment the following line and get rid of the UnsupportedOperationException and\n-     * you will be all set.\n-     */\n-    //return writer;\n+    return writer;\n   }\n \n }"
  },
  {
    "sha": "1dc83f392c7b5dfdbcdf02699051c0836e799676",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/interfaces/IFileExplorer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/interfaces/IFileExplorer.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/interfaces/IFileExplorer.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/interfaces/IFileExplorer.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -1,6 +1,7 @@\n package ch.heigvd.res.labio.interfaces;\n \n import java.io.File;\n+import java.io.IOException;\n \n /**\n  * This interface is used to perform one operation on each element (file and\n@@ -23,6 +24,6 @@\n    * @param rootDirectory the directory where to start the traversal\n    * @param vistor defines the operation to be performed on each file\n    */\n-  public void explore(File rootDirectory, IFileVisitor vistor);\n+  public void explore(File rootDirectory, IFileVisitor vistor) throws IOException;\n   \n }"
  },
  {
    "sha": "11ddfb27172e94beb5c23d1486900b6011d475d3",
    "filename": "LabJavaIO/src/main/java/ch/heigvd/res/labio/interfaces/IFileVisitor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/interfaces/IFileVisitor.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/main/java/ch/heigvd/res/labio/interfaces/IFileVisitor.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/main/java/ch/heigvd/res/labio/interfaces/IFileVisitor.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -1,6 +1,7 @@\n package ch.heigvd.res.labio.interfaces;\n \n import java.io.File;\n+import java.io.IOException;\n \n /**\n  * This interface is used together with the IFileExplorer interface. It defines\n@@ -18,6 +19,6 @@\n    * \n    * @param file the current file or directory visited by the IFileExplorer instance\n    */\n-  public void visit(File file);\n+  public void visit(File file) throws IOException;\n   \n }"
  },
  {
    "sha": "efc45e2b95f5a149df4a7cb8b8d96d712932063d",
    "filename": "LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorerTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorerTest.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorerTest.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/explorers/DFSFileExplorerTest.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -23,7 +23,7 @@\n   private static final Logger LOG = Logger.getLogger(DFSFileExplorerTest.class.getName());\n \n   @Test\n-  public void dfsExplorerShouldWork() {\n+  public void dfsExplorerShouldWork() throws IOException {\n     List<String> dfsNodes = generateTestTree(5, 5, 5);\n \n     final List<String> directories = new ArrayList<>();\n@@ -39,7 +39,7 @@ public void visit(File file) {\n   }\n \n   @Test\n-  public void dfsExplorerShouldWorkWhenThereIsNoFile() {\n+  public void dfsExplorerShouldWorkWhenThereIsNoFile() throws IOException {\n     List<String> dfsNodes = generateTestTree(0, 0, 0);\n \n     final List<String> directories = new ArrayList<>();"
  },
  {
    "sha": "941dd89f014f84faefe23c8e8f2da5b55f8dd558",
    "filename": "LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriterTest.java",
    "status": "modified",
    "additions": 114,
    "deletions": 115,
    "changes": 229,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriterTest.java",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriterTest.java",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/LabJavaIO/src/test/java/ch/heigvd/res/labio/impl/filters/FileNumberingFilterWriterTest.java?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -9,126 +9,125 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n /**\n- *\n  * @author Olivier Liechti\n  */\n public class FileNumberingFilterWriterTest {\n \n-  private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriterTest.class.getName());\n-\n-  @Test\n-  public void itShouldPrintANumberForFileWithOneLine() throws IOException {\n-    String line = \"this is a line\\n\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    writer.write(line);\n-    assertEquals(\"1\\t\" + line + \"2\\t\", stringWriter.toString());\n-  }\n-\n-  @Test\n-  public void itShouldPrintANumberForFileWithTwoLines() throws IOException {\n-    String line1 = \"this is a line\\n\";\n-    String line2 = \"this is a second line\\n\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    writer.write(line1);\n-    writer.write(line2);\n-    assertEquals(\"1\\t\" + line1 + \"2\\t\" + line2 + \"3\\t\", stringWriter.toString());\n-  }\n-  \n-  @Test\n-  public void itShouldWorkIfThereIsNoNewLineAtTheEnd() throws IOException {\n-    String line1 = \"this is a line\\n\";\n-    String line2 = \"this is a second line\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    writer.write(line1);\n-    writer.write(line2);  \n-    assertEquals(\"1\\t\" + line1 + \"2\\t\" + line2, stringWriter.toString());\n-  }\n-\n-  @Test\n-  public void itShouldWorkWithPartialLines() throws IOException {\n-    String line1_1 = \"this is\";\n-    String line1_2 = \"a first line\\n\";\n-    String line2 = \"this is a second line\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    writer.write(line1_1);\n-    writer.write(line1_2);\n-    writer.write(line2);  \n-    assertEquals(\"1\\t\" + line1_1 + line1_2 + \"2\\t\" + line2, stringWriter.toString());\n-  }\n-\n-  @Test\n-  public void itShouldHandleWriteWithPartOfAString() throws IOException {\n-    String line = \"I only want part of this line\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    int startIndex = 2;\n-    int len = 4;\n-    writer.write(line, startIndex, len);\n-    assertEquals(\"1\\t\" + \"only\", stringWriter.toString());\n-  }\n-\n-  @Test\n-  public void itShouldHandleWriteWithAnInt() throws IOException {\n-    String line = \"This is line 1\\r\\nThis is line 2\\nThis is line 3\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    for (int i=0; i<line.length(); i++) {\n-      int c = line.charAt(i);\n-      writer.write(c);\n+    private static final Logger LOG = Logger.getLogger(FileNumberingFilterWriterTest.class.getName());\n+\n+    @Test\n+    public void itShouldPrintANumberForFileWithOneLine() throws IOException {\n+        String line = \"this is a line\\n\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        writer.write(line);\n+        assertEquals(\"1\\t\" + line + \"2\\t\", stringWriter.toString());\n+    }\n+\n+    @Test\n+    public void itShouldPrintANumberForFileWithTwoLines() throws IOException {\n+        String line1 = \"this is a line\\n\";\n+        String line2 = \"this is a second line\\n\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        writer.write(line1);\n+        writer.write(line2);\n+        assertEquals(\"1\\t\" + line1 + \"2\\t\" + line2 + \"3\\t\", stringWriter.toString());\n+    }\n+\n+    @Test\n+    public void itShouldWorkIfThereIsNoNewLineAtTheEnd() throws IOException {\n+        String line1 = \"this is a line\\n\";\n+        String line2 = \"this is a second line\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        writer.write(line1);\n+        writer.write(line2);\n+        assertEquals(\"1\\t\" + line1 + \"2\\t\" + line2, stringWriter.toString());\n     }\n-    assertEquals(\"1\\tThis is line 1\\r\\n2\\tThis is line 2\\n3\\tThis is line 3\", stringWriter.toString());\n-  }\n-\n-  @Test\n-  public void itShouldWorkOnUnix() throws IOException {\n-    String line = \"This is line 1\\nThis is line 2\\nThis is line 3\";\n-    String expected = \"1\\tThis is line 1\\n2\\tThis is line 2\\n3\\tThis is line 3\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    writer.write(line);\n-    assertEquals(expected, stringWriter.toString());\n-  }\n-\n-  @Test\n-  public void itShouldWorkOnMacOS9() throws IOException {\n-    String line = \"This is line 1\\rThis is line 2\\rThis is line 3\";\n-    String expected = \"1\\tThis is line 1\\r2\\tThis is line 2\\r3\\tThis is line 3\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    writer.write(line);\n-    assertEquals(expected, stringWriter.toString());\n-  }\n-\n-  @Test\n-  public void itShouldWorkOnWindows() throws IOException {\n-    String line = \"This is line 1\\r\\nThis is line 2\\r\\nThis is line 3\";\n-    String expected = \"1\\tThis is line 1\\r\\n2\\tThis is line 2\\r\\n3\\tThis is line 3\";\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    writer.write(line);\n-    assertEquals(expected, stringWriter.toString());\n-  }\n-\n-  @Test\n-  public void itShouldWorkWhenThereAreOneTwoOrThreeDigitsInTheLineNumber() throws IOException {\n-    StringWriter referenceWriter = new StringWriter();\n-    StringWriter stringWriter = new StringWriter();\n-    FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n-    for (int i=1; i< 120; i++) {\n-      writer.write(\"content\\n\");\n-      referenceWriter.write(i + \"\\tcontent\\n\");\n+\n+    @Test\n+    public void itShouldWorkWithPartialLines() throws IOException {\n+        String line1_1 = \"this is\";\n+        String line1_2 = \"a first line\\n\";\n+        String line2 = \"this is a second line\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        writer.write(line1_1);\n+        writer.write(line1_2);\n+        writer.write(line2);\n+        assertEquals(\"1\\t\" + line1_1 + line1_2 + \"2\\t\" + line2, stringWriter.toString());\n+    }\n+\n+    @Test\n+    public void itShouldHandleWriteWithPartOfAString() throws IOException {\n+        String line = \"I only want part of this line\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        int startIndex = 2;\n+        int len = 4;\n+        writer.write(line, startIndex, len);\n+        assertEquals(\"1\\t\" + \"only\", stringWriter.toString());\n+    }\n+\n+    @Test\n+    public void itShouldHandleWriteWithAnInt() throws IOException {\n+        String line = \"This is line 1\\r\\nThis is line 2\\nThis is line 3\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        for (int i = 0; i < line.length(); i++) {\n+            int c = line.charAt(i);\n+            writer.write(c);\n+        }\n+        assertEquals(\"1\\tThis is line 1\\r\\n2\\tThis is line 2\\n3\\tThis is line 3\", stringWriter.toString());\n+    }\n+\n+    @Test\n+    public void itShouldWorkOnUnix() throws IOException {\n+        String line = \"This is line 1\\nThis is line 2\\nThis is line 3\";\n+        String expected = \"1\\tThis is line 1\\n2\\tThis is line 2\\n3\\tThis is line 3\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        writer.write(line);\n+        assertEquals(expected, stringWriter.toString());\n+    }\n+\n+    @Test\n+    public void itShouldWorkOnMacOS9() throws IOException {\n+        String line = \"This is line 1\\rThis is line 2\\rThis is line 3\";\n+        String expected = \"1\\tThis is line 1\\r2\\tThis is line 2\\r3\\tThis is line 3\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        writer.write(line);\n+        assertEquals(expected, stringWriter.toString());\n+    }\n+\n+    @Test\n+    public void itShouldWorkOnWindows() throws IOException {\n+        String line = \"This is line 1\\r\\nThis is line 2\\r\\nThis is line 3\";\n+        String expected = \"1\\tThis is line 1\\r\\n2\\tThis is line 2\\r\\n3\\tThis is line 3\";\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        writer.write(line);\n+        assertEquals(expected, stringWriter.toString());\n+    }\n+\n+    @Test\n+    public void itShouldWorkWhenThereAreOneTwoOrThreeDigitsInTheLineNumber() throws IOException {\n+        StringWriter referenceWriter = new StringWriter();\n+        StringWriter stringWriter = new StringWriter();\n+        FileNumberingFilterWriter writer = new FileNumberingFilterWriter(stringWriter);\n+        for (int i = 1; i < 120; i++) {\n+            writer.write(\"content\\n\");\n+            referenceWriter.write(i + \"\\tcontent\\n\");\n+        }\n+        writer.write(\"last\");\n+        referenceWriter.write(120 + \"\\tlast\");\n+\n+        stringWriter.close();\n+        String computedValue = stringWriter.toString();\n+        String referenceValue = referenceWriter.toString();\n+        assertEquals(referenceValue, computedValue);\n     }\n-    writer.write(\"last\");\n-    referenceWriter.write(120 + \"\\tlast\");\n-    \n-    stringWriter.close();\n-    String computedValue = stringWriter.toString();\n-    String referenceValue = referenceWriter.toString();\n-    assertEquals(referenceValue, computedValue);\n-  }\n \n }"
  },
  {
    "sha": "28afe1c4bcc46e6469abb7f3301c793f88a804aa",
    "filename": "README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 219,
    "changes": 223,
    "blob_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/blob/e6242acc535135b4bfea6a0ce8656e9c82bb100e/README.md",
    "raw_url": "https://github.com/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/raw/e6242acc535135b4bfea6a0ce8656e9c82bb100e/README.md",
    "contents_url": "https://api.github.com/repos/SoftEng-HEIGVD/https-github.com-SoftEng-HEIGVD-Teaching-HEIGVD-RES-2021-Labo-Java-IO/contents/README.md?ref=e6242acc535135b4bfea6a0ce8656e9c82bb100e",
    "patch": "@@ -1,221 +1,6 @@\n-# Teaching-HEIGVD-RES-2021-Labo-Java-IO\n+Vérifications des arguments:\n \n-### About the 2021 version of this lab\n+Nous n'avons fait aucune vérification des arguments sur les appels des fonctions\n+(NullPointer, String vide) car ce n'était pas demandé pour le laboratoire.\n \n-We did not change the 2019 version. However, read the paragraph below to be aware of some differences between the project structure in the webcasts and what you will see this year in your IDE.\n-\n-### About the 2019 version of this lab\n-\n-We changed the project structure. In previous editions, there was a \"test\" project (with its own pom.xml), a \"production\" project (with its own pom.xml) and a top-level \"build\" project. This is what you will see in the webcasts. This year, we have moved to a single project, with production and test packages.\n-\n-**Warning: do NOT change the code in the test packages**\n-\n-### How many branches should I create? How many PRs? When?\n-\n-For this lab, we will try the following workflow:\n-* create a branch for the entire lab (you call it \"dev\", \"lab\" or whatever you want)\n-* commit code as soon as possible and push the branch to your fork\n-* open a PR. In the name of the PR, start with `[WIP] `. This makes it easy for us to see that you are still working on the lab (Work In Progress) \n-* even if tests are still red, we have a communication space while you work on the lab\n-* whenever you push a new commit, we will be able to see it (and possibly to comment it)\n-* at some point, all your tests will be green: you can then signal that you are done; for that, change the name of your PR. Replace `[WIP] ` with `[TOREVIEW] `.\n-\n-Push commits as often as possible (whenever you make progress, turn a test green, etc.).\n-\n-If you want to use private branches, you can do so. But then, don't create individual PRs.\n-\n-Final note: because you all work in the same packages, we will not merge (more than one) PR at the end of the lab. But we will be able to get your branches and evaluate them.\n-\n-\n-### About previous versions of this lab\n-\n-Before reading this documentation and diving into the code, you should watch [this webcast](https://www.youtube.com/watch?v=qgncWAUqcbY&list=PLfKkysTy70QYVU0wz_n14gA07c3PdYm3_&index=2), which shows a **demo** of the application that you will implement. Later on, you might also watch [this webcast](https://www.youtube.com/watch?v=v_ZpVgf0lGc&list=PLfKkysTy70QYVU0wz_n14gA07c3PdYm3_&index=3), which gives you some hints about the **code structure**.\n-\n-If you watch carefully, you will see that in 2015, we were using a web service called [iheartquotes](http://www.iheartquotes.com/) to fetch dynamic text data. This service is now down, so this year we had to look for [a replacement](http://www.icndb.com/api/). We also had to adapt the code of the starter project a bit. You will see why and how when in the commented source code.\n-\n-We also fixed an issue with previous versions of the lab. In the past, our specification was not correct when talking about **depth-first traversal**. Our unit tests specified a wrong behaviour. We have fixed them. For these reasons, there will be some differences in the console output, but nothing extraordinary.\n-\n-\n-\n-![image](./diagrams/chuck.png)\n-\n-\n-### Introduction\n-\n-The objective of this lab is to get familiar with the Java IO APIs and to interact with the file system. You will implement an application that performs the following tasks:\n-\n-1. The user invokes the application on the **command line** and provides a numeric argument (*n*).\n-2. The application **uses a Web Service client** (which is provided to you) to fetch *n* **quotes** from the [Internet Chuck Norris Database](http://www.icndb.com/api/) online service.\n-3. The application stores the content of each quote in a **text file** (utf-8), on the local filesystem. It uses the *tags* associated to each quote to create a hierarchical structure of directories.\n-4. The application then **traverses the local file system** (depth-first) and applies a processing to each visited quote file.\n-5. The processing consists of 1) converting all characters to their **uppercase** value and 2) adding a **line number** (followed by a tab character) at the beginning of each line. This is achieved by combining sub-classes of the `FilterWriter` class.\n-\n-If your application is fully implemented you should have the following result on your machine:\n-\n-#### A. When building the application\n-\n-\n-```\n-[INFO] Scanning for projects...\n-[INFO] \n-[INFO] --------------------< ch.heigvd.res.io:lab-java-io >--------------------\n-[INFO] Building RES Lab Java IO 1.0-SNAPSHOT\n-[INFO] --------------------------------[ jar ]---------------------------------\n-\n-... (skipping some of the log output)\n-\n-[INFO] Running ch.heigvd.res.labio.impl.explorers.DFSFileExplorerTest\n-[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.15 s - in ch.heigvd.res.labio.impl.explorers.DFSFileExplorerTest\n-[INFO] \n-[INFO] Results:\n-[INFO] \n-[INFO] Tests run: 27, Failures: 0, Errors: 0, Skipped: 0\n-\n-... (skipping some of the log output)\n-\n-[INFO] ------------------------------------------------------------------------\n-[INFO] BUILD SUCCESS\n-[INFO] ------------------------------------------------------------------------\n-[INFO] Total time: 7.497 s\n-[INFO] Finished at: 2019-03-04T08:12:55+01:00\n-[INFO] ------------------------------------------------------------------------\n-```\n-\n-#### B. When running the application\n-\n-```\n-$ java -jar Lab01App-code/target/Lab01App-code-1.0-SNAPSHOT-launcher.jar 10\n-INFO: Received a new joke with 4 tags.\n-INFO: > movie\n-INFO: > internet\n-INFO: > geek\n-INFO: > popular\n-INFO: Received a new joke with 4 tags.\n-INFO: > movie\n-INFO: > funny\n-INFO: > geek\n-INFO: > joke\n-INFO: Received a new joke with 2 tags.\n-INFO: > hilarious\n-INFO: > movie\n-INFO: Received a new joke with 1 tags.\n-INFO: > geek\n-INFO: Received a new joke with 7 tags.\n-INFO: > internet\n-INFO: > geek\n-INFO: > movie\n-INFO: > joke\n-INFO: > funny\n-INFO: > hilarious\n-INFO: > popular\n-INFO: Received a new joke with 0 tags.\n-INFO: Received a new joke with 1 tags.\n-INFO: > popular\n-INFO: Received a new joke with 0 tags.\n-INFO: Received a new joke with 1 tags.\n-INFO: > popular\n-INFO: Received a new joke with 2 tags.\n-INFO: > hilarious\n-INFO: > geek\n-INFO: ./workspace/quotes\n-./workspace/quotes/geek\n-./workspace/quotes/geek/quote-4.utf8\n-./workspace/quotes/hilarious\n-./workspace/quotes/hilarious/geek\n-./workspace/quotes/hilarious/geek/quote-10.utf8\n-./workspace/quotes/hilarious/movie\n-./workspace/quotes/hilarious/movie/quote-3.utf8\n-./workspace/quotes/internet\n-./workspace/quotes/internet/geek\n-./workspace/quotes/internet/geek/movie\n-./workspace/quotes/internet/geek/movie/joke\n-./workspace/quotes/internet/geek/movie/joke/funny\n-./workspace/quotes/internet/geek/movie/joke/funny/hilarious\n-./workspace/quotes/internet/geek/movie/joke/funny/hilarious/popular\n-./workspace/quotes/internet/geek/movie/joke/funny/hilarious/popular/quote-5.utf8\n-./workspace/quotes/movie\n-./workspace/quotes/movie/funny\n-./workspace/quotes/movie/funny/geek\n-./workspace/quotes/movie/funny/geek/joke\n-./workspace/quotes/movie/funny/geek/joke/quote-2.utf8\n-./workspace/quotes/movie/internet\n-./workspace/quotes/movie/internet/geek\n-./workspace/quotes/movie/internet/geek/popular\n-./workspace/quotes/movie/internet/geek/popular/quote-1.utf8\n-./workspace/quotes/popular\n-./workspace/quotes/popular/quote-7.utf8\n-./workspace/quotes/popular/quote-9.utf8\n-./workspace/quotes/quote-6.utf8\n-./workspace/quotes/quote-8.utf8\n-```\n-\n-#### C. After running the application\n-\n-```\n-$ find ./workspace\n-./workspace\n-./workspace/quotes\n-./workspace/quotes/geek\n-./workspace/quotes/geek/quote-4.utf8\n-./workspace/quotes/geek/quote-4.utf8.out\n-./workspace/quotes/hilarious\n-./workspace/quotes/hilarious/geek\n-./workspace/quotes/hilarious/geek/quote-10.utf8\n-./workspace/quotes/hilarious/geek/quote-10.utf8.out\n-./workspace/quotes/hilarious/movie\n-./workspace/quotes/hilarious/movie/quote-3.utf8\n-./workspace/quotes/hilarious/movie/quote-3.utf8.out\n-./workspace/quotes/internet\n-./workspace/quotes/internet/geek\n-./workspace/quotes/internet/geek/movie\n-./workspace/quotes/internet/geek/movie/joke\n-./workspace/quotes/internet/geek/movie/joke/funny\n-./workspace/quotes/internet/geek/movie/joke/funny/hilarious\n-./workspace/quotes/internet/geek/movie/joke/funny/hilarious/popular\n-./workspace/quotes/internet/geek/movie/joke/funny/hilarious/popular/quote-5.utf8\n-./workspace/quotes/internet/geek/movie/joke/funny/hilarious/popular/quote-5.utf8.out\n-./workspace/quotes/movie\n-./workspace/quotes/movie/funny\n-./workspace/quotes/movie/funny/geek\n-./workspace/quotes/movie/funny/geek/joke\n-./workspace/quotes/movie/funny/geek/joke/quote-2.utf8\n-./workspace/quotes/movie/funny/geek/joke/quote-2.utf8.out\n-./workspace/quotes/movie/internet\n-./workspace/quotes/movie/internet/geek\n-./workspace/quotes/movie/internet/geek/popular\n-./workspace/quotes/movie/internet/geek/popular/quote-1.utf8\n-./workspace/quotes/movie/internet/geek/popular/quote-1.utf8.out\n-./workspace/quotes/popular\n-./workspace/quotes/popular/quote-7.utf8\n-./workspace/quotes/popular/quote-7.utf8.out\n-./workspace/quotes/popular/quote-9.utf8\n-./workspace/quotes/popular/quote-9.utf8.out\n-./workspace/quotes/quote-6.utf8\n-./workspace/quotes/quote-6.utf8.out\n-./workspace/quotes/quote-8.utf8\n-./workspace/quotes/quote-8.utf8.out\n-```\n-\n-You can then compare `quote-8.utf8.out` with `quote-8.utf8` to see the text received as input (from the web service) and the text produced as output (by your program).\n-\n-\n-### Tasks\n-\n-Here is the proposed list of tasks to achieve the objectives:\n-\n-1. Start by forking and cloning this repo (**mandatory!!**).\n-2. From the main project, do a `mvn clean install` and notice that the tests fail.\n-3. Spend some time to explore the package structure (and watch [this](https://www.youtube.com/watch?v=v_ZpVgf0lGc&list=PLfKkysTy70Qb_mfkkqa5OUMqsOPNEYZIa&index=5) Youtube video).\n-4. Examine the automated tests in the test project and do a step-by-step implementation, until all tests are green. Here is a proposed order for fixing the broken tests:\n-   - `ApplicationTest.java`\n-   - `UtilsTest.java`\n-   - `UpperCaseFilterWriterTest.java`\n-   - `DFSFileExplorerTest.java`\n-   - `FileTransformerTest.java`\n-   - `FileNumberingFilterWriterTest.java`\n-   - `CompleteFileTransformerTest.java`\n-5. Each time that you fix a failing test, `commit` your work (and use a **meaningful message**)\n-6. When all the tests are green, invoke the application (`java -jar`) from the top-level directory (the directory that contains the `.git` hidden folder). Inspect the content of the `workspace/quotes` directory and check that the output files are correct.\n-7. When you are done, make sure that you have committed all your work and push your commits.\n-8. To make a final validation, move to a fresh directory. Clone your fork. Do a `mvn clean install` and make sure that the tests are still green and that the app still produces the correct output.\n-9. Submit a pull request.\n+Le comportement est indéterminé en cas d'appel des fonctions avec des arguments incohérents/n'ayant pas de sens.\n\\ No newline at end of file"
  }
]
