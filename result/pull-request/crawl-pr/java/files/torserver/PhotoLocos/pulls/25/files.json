[
  {
    "sha": "c8e589ed4061042118585bd86983e4998cbe2261",
    "filename": ".circleci/config.yml",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/.circleci/config.yml",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/.circleci/config.yml",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/.circleci/config.yml?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -0,0 +1,34 @@\n+version: 2 # use CircleCI 2.0\n+jobs: # a collection of steps\n+  build: # runs not using Workflows must have a `build` job as entry point\n+    \n+    working_directory: ~/circleci-demo-java-spring # directory where steps will run\n+\n+    docker: # run the steps with Docker\n+      - image: circleci/openjdk:11-stretch # ...with this image as the primary container; this is where all `steps` will run\n+\n+    steps: # a collection of executable commands\n+\n+      - checkout # check out source code to working directory\n+\n+      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed\n+          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/\n+          key: circleci-demo-java-spring-{{ checksum \"pom.xml\" }}\n+      \n+      - run: mvn dependency:go-offline # gets the project dependencies\n+      \n+      - save_cache: # saves the project dependencies\n+          paths:\n+            - ~/.m2\n+          key: circleci-demo-java-spring-{{ checksum \"pom.xml\" }}\n+      \n+      - run: mvn package # run the actual tests\n+      \n+      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. \n+      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/\n+          path: target/surefire-reports\n+      \n+      - store_artifacts: # store the uberjar as an artifact\n+      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/\n+          path: target/demo-java-spring-0.0.1-SNAPSHOT.jar\n+      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples    "
  },
  {
    "sha": "ca834942197980c836a3bb9b3a99d32c26df0bad",
    "filename": "src/main/java/com/photolocos/enterprise/dao/ILocationDAO.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dao/ILocationDAO.java",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dao/ILocationDAO.java",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/java/com/photolocos/enterprise/dao/ILocationDAO.java?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -1,6 +1,6 @@\n package com.photolocos.enterprise.dao;\n \n-import com.photolocos.enterprise.dto.LocationDTO;\n+import com.photolocos.enterprise.dto.Location;\n \n import java.util.List;\n \n@@ -14,44 +14,44 @@\n     /**\n      * This method is used to create an entry in Database, if there isn't one already\n      *\n-     * @param locationDTO The Location {@link LocationDTO} object to be saved\n+     * @param location The Location {@link Location} object to be saved\n      * @return True if entry was successfully created, false in any other scenario\n      * @throws Exception Any exception that could occur as a result of failure to create a entry\n      * in database or other preferred storage\n      */\n-    boolean createEntry(LocationDTO locationDTO);\n+    boolean createEntry(Location location);\n \n     /**\n      * This method tries to get user's current approximate geographical location\n      * and create an object from it\n      *\n      * @return Location object for the current user location\n      */\n-    LocationDTO fetchUserLocation();\n+    Location fetchUserLocation();\n \n     /**\n-     * This method will return Location Object {@link LocationDTO} based on Co-ordinates\n+     * This method will return Location Object {@link Location} based on Co-ordinates\n      *\n      * @param longitude the longitude of the location that the user wants to get more info about photography locations\n      * @param latitude  the latitude of the location that the user wants to get more info about photography locations\n      * @return the location object matching the co-ordinates, if not found return null\n      */\n-    LocationDTO fetchByCoordinates(String longitude, String latitude);\n+    Location fetchByCoordinates(String longitude, String latitude);\n \n     /**\n-     * This method will return Location Object {@link LocationDTO} based on a State and a City\n+     * This method will return Location Object {@link Location} based on a State and a City\n      *\n      * @param state the State that the user wants to get more info about photography locations\n      * @param city  the City that the user wants to get more info about photography locations\n      * @return the location object found in specific state and city\n      */\n-    LocationDTO fetchByArea(String state, String city);\n+    Location fetchByArea(String state, String city);\n \n     /**\n-     * This method will return Location Objects {@link LocationDTO} based on a description\n+     * This method will return Location Objects {@link Location} based on a description\n      * that users describes of what they are looking for\n      * @param description A string or array of string that explains most components of location e.g. Snow Mountains, Salt Lakes, etc.\n      * @return a list of location objects matching the description of a location\n      */\n-    List<LocationDTO> fetchByDescription(String description);\n+    List<Location> fetchByDescription(String description);\n }"
  },
  {
    "sha": "633c41d73dac198515f5a22944b95078d764c0b9",
    "filename": "src/main/java/com/photolocos/enterprise/dao/IPhotoDAO.java",
    "status": "modified",
    "additions": 19,
    "deletions": 11,
    "changes": 30,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dao/IPhotoDAO.java",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dao/IPhotoDAO.java",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/java/com/photolocos/enterprise/dao/IPhotoDAO.java?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -1,6 +1,6 @@\n package com.photolocos.enterprise.dao;\n \n-import com.photolocos.enterprise.dto.PhotoDTO;\n+import com.photolocos.enterprise.dto.Photo;\n \n import java.util.*;\n \n@@ -14,45 +14,53 @@\n     /**\n      * This method is used to create an entry in Database, if there isn't one already\n      *\n-     * @param photoDTO The photo object to be saved\n+     * @param photo The photo object to be saved\n      * @return True if entry was successfully created, false in any other scenario\n      * @throws Exception Any exception that could occur as a result of failure to create a entry\n      * in database or other preferred storage\n      */\n-    boolean createEntry(PhotoDTO photoDTO) throws Exception;\n+    boolean createEntry(Photo photo) throws Exception;\n \n     /**\n-     * This method will return a Set of photo objects {@link PhotoDTO}, that have similar tag(s)\n+     * This method will return a Set of photo objects {@link Photo}, that have similar tag(s)\n      *\n      * @param tags A array of list of keywords, used to return specific photos\n      * @return A Set of photo objects if photos with similar tags are found, otherwise null\n      */\n-    Set<PhotoDTO> fetchByTag(String[] tags);\n+    Set<Photo> fetchByTag(String[] tags);\n \n     /**\n-     * This method will return a Set of photo objects {@link PhotoDTO}, that have particular ratings\n+     * This method will return a Set of photo objects {@link Photo}, that have particular ratings\n      *\n      * @param rating The rating to match while returning specific photos\n      * @return A Set of photo objects if photos with similar rating are found, otherwise null\n      */\n-    Set<PhotoDTO> fetchByRating(int rating);\n+    Set<Photo> fetchByRating(int rating);\n \n     /**\n-     * This method will return a Set of photo objects {@link PhotoDTO}, that have particular Photography Type.\n+     * This method will return a Set of photo objects {@link Photo}, that have particular Photography Type.\n      * Unlike tags, only one photography type can be attached to photos. e.g. Nature, Wildlife, Downtown, etc.\n      *\n      * @param type The photography type to match while returning specific photos\n      * @return A Set of photo objects if photos with specified type are found, otherwise null\n      */\n-    Set<PhotoDTO> fetchByType(String type);\n+    Set<Photo> fetchByType(String type);\n \n     /**\n-     * This method returns a Map of all photos objects {@link PhotoDTO} in the database with photoID's as keys and photos as value,\n+     * This method returns a Map of all photos objects {@link Photo} in the database with photoID's as keys and photos as value,\n      * to easily get reference to photos with their ID's\n      *\n      * @return A Map consisting of all photos in the database\n      *\n      * TODO: Discuss with team, whether to change this to fetch all by Specific User/Contributor (if accounts are integrated in future)\n      */\n-    Map<Integer, PhotoDTO> fetchAll();\n+    Map<Integer, Photo> fetchAll();\n+\n+    /**\n+     * This method returns all photos whose location matches the given location String\n+     *\n+     * @param location String to query all photo locations against\n+     * @return A set of photo object with location matching the given location String\n+     */\n+    Set<Photo>  fetchByLocation(String location);\n }"
  },
  {
    "sha": "d0ac93eb610907056540639db22acbc13d6b4658",
    "filename": "src/main/java/com/photolocos/enterprise/dao/LocationDAOStub.java",
    "status": "renamed",
    "additions": 20,
    "deletions": 20,
    "changes": 40,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dao/LocationDAOStub.java",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dao/LocationDAOStub.java",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/java/com/photolocos/enterprise/dao/LocationDAOStub.java?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -1,6 +1,6 @@\n package com.photolocos.enterprise.dao;\n \n-import com.photolocos.enterprise.dto.LocationDTO;\n+import com.photolocos.enterprise.dto.Location;\n import org.springframework.stereotype.Component;\n \n import java.util.ArrayList;\n@@ -14,21 +14,21 @@\n  * LocationDAO class to handle Location related operations\n  */\n @Component\n-public class LocationDAO implements ILocationDAO {\n+public class LocationDAOStub implements ILocationDAO {\n \n-    private Map<Integer, LocationDTO> locations = new HashMap<>();\n+    private Map<Integer, Location> locations = new HashMap<>();\n \n     @Override\n-    public boolean createEntry(LocationDTO locationDTO) {\n-        locations.put(locationDTO.getLocationId(), locationDTO);\n-        if (locations.containsKey(locationDTO.getLocationId())) return true;\n+    public boolean createEntry(Location location) {\n+        locations.put(location.getLocationId(), location);\n+        if (locations.containsKey(location.getLocationId())) return true;\n \n         return false;\n     }\n \n     @Override\n-    public LocationDTO fetchUserLocation() {\n-        LocationDTO userLocation = new LocationDTO();\n+    public Location fetchUserLocation() {\n+        Location userLocation = new Location();\n         userLocation.setLongitude(\"84.51\");\n         userLocation.setLatitude(\"39.10\");\n         userLocation.setCountry(\"USA\");\n@@ -43,11 +43,11 @@ public LocationDTO fetchUserLocation() {\n     }\n \n     @Override\n-    public LocationDTO fetchByCoordinates(String longitude, String latitude) {\n-        List<LocationDTO> locationsCollection = new ArrayList<>(locations.values());\n-        LocationDTO neededLocation = new LocationDTO();\n+    public Location fetchByCoordinates(String longitude, String latitude) {\n+        List<Location> locationsCollection = new ArrayList<>(locations.values());\n+        Location neededLocation = new Location();\n \n-        for (LocationDTO loc : locationsCollection) {\n+        for (Location loc : locationsCollection) {\n             if (loc.getLatitude().equals(latitude) && loc.getLongitude().equals(longitude)) {\n                 neededLocation = loc;\n             }\n@@ -56,11 +56,11 @@ public LocationDTO fetchByCoordinates(String longitude, String latitude) {\n     }\n \n     @Override\n-    public LocationDTO fetchByArea(String state, String city) {\n-        List<LocationDTO> locationsCollection = new ArrayList<>(locations.values());\n-        LocationDTO neededLocation = new LocationDTO();\n+    public Location fetchByArea(String state, String city) {\n+        List<Location> locationsCollection = new ArrayList<>(locations.values());\n+        Location neededLocation = new Location();\n \n-        for (LocationDTO loc : locationsCollection) {\n+        for (Location loc : locationsCollection) {\n             if (loc.getState().equals(state) && loc.getCity().equals(city)) {\n                 neededLocation = loc;\n             }\n@@ -70,11 +70,11 @@ public LocationDTO fetchByArea(String state, String city) {\n     }\n \n     @Override\n-    public List<LocationDTO> fetchByDescription(String description) {\n-        List<LocationDTO> locationsCollection = new ArrayList<>(locations.values());\n-        List<LocationDTO> matchingLocations = new ArrayList<>();\n+    public List<Location> fetchByDescription(String description) {\n+        List<Location> locationsCollection = new ArrayList<>(locations.values());\n+        List<Location> matchingLocations = new ArrayList<>();\n \n-        for (LocationDTO loc : locationsCollection) {\n+        for (Location loc : locationsCollection) {\n             if (loc.getDescription().contains(description) ) {\n                 matchingLocations.add(loc);\n             }",
    "previous_filename": "src/main/java/com/photolocos/enterprise/dao/LocationDAO.java"
  },
  {
    "sha": "4421cf85e22a55e8af04af3e917e168e9fba1833",
    "filename": "src/main/java/com/photolocos/enterprise/dao/PhotoDAO.java",
    "status": "removed",
    "additions": 0,
    "deletions": 75,
    "changes": 75,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/0aa108bb0338fd96a25fb2c3e031728a6cd31ed6/src/main/java/com/photolocos/enterprise/dao/PhotoDAO.java",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/0aa108bb0338fd96a25fb2c3e031728a6cd31ed6/src/main/java/com/photolocos/enterprise/dao/PhotoDAO.java",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/java/com/photolocos/enterprise/dao/PhotoDAO.java?ref=0aa108bb0338fd96a25fb2c3e031728a6cd31ed6",
    "patch": "@@ -1,75 +0,0 @@\n-package com.photolocos.enterprise.dao;\n-\n-import com.photolocos.enterprise.dto.PhotoDTO;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.*;\n-\n-/**\n- * @author Paramjyot Sandhu (sandhups@mail.uc.edu)\n- *\n- * PhotoDAO class to handle Photo related operations\n- */\n-@Component\n-public class PhotoDAO implements IPhotoDAO {\n-\n-    Map<Integer, PhotoDTO> photos = new HashMap<>();\n-\n-    @Override\n-    public boolean createEntry(PhotoDTO photoDTO) throws Exception {\n-        photos.put(photoDTO.getPhotoId(), photoDTO);\n-        if (photos.containsKey(photoDTO.getPhotoId())) return true;\n-        return false;\n-    }\n-\n-    @Override\n-    public Set<PhotoDTO> fetchByTag(String[] tags) {\n-        List<PhotoDTO> photosCollection = new ArrayList<>(photos.values());\n-        Set<PhotoDTO> matchedPhotos = new HashSet<>();\n-\n-        for (PhotoDTO photo : photosCollection) {\n-            Set<String> tagsSet = new HashSet<>(Arrays.asList(photo.getTags()));\n-            for (String tag: tags) {\n-                if (tagsSet.contains(tag)) {\n-                    matchedPhotos.add(photo);\n-                    continue;\n-                }\n-            }\n-        }\n-\n-        return matchedPhotos;\n-    }\n-\n-    @Override\n-    public Set<PhotoDTO> fetchByRating(int rating) {\n-        List<PhotoDTO> photosCollection = new ArrayList<>(photos.values());\n-        Set<PhotoDTO> matchedPhotos = new HashSet<>();\n-\n-        for (PhotoDTO photo : photosCollection) {\n-                if (photo.getRating() == rating) {\n-                    matchedPhotos.add(photo);\n-                }\n-        }\n-\n-        return matchedPhotos;\n-    }\n-\n-    @Override\n-    public Set<PhotoDTO> fetchByType(String type) {\n-        List<PhotoDTO> photosCollection = new ArrayList<>(photos.values());\n-        Set<PhotoDTO> matchedPhotos = new HashSet<>();\n-\n-        for (PhotoDTO photo : photosCollection) {\n-            if (photo.getType().equals(type)) {\n-                matchedPhotos.add(photo);\n-            }\n-        }\n-\n-        return matchedPhotos;\n-    }\n-\n-    @Override\n-    public Map<Integer, PhotoDTO> fetchAll() {\n-        return photos;\n-    }\n-}"
  },
  {
    "sha": "05d1b3f1c1833b5a9a9e8af4d66d6b40289c7b5e",
    "filename": "src/main/java/com/photolocos/enterprise/dao/PhotoDAOStub.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dao/PhotoDAOStub.java",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dao/PhotoDAOStub.java",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/java/com/photolocos/enterprise/dao/PhotoDAOStub.java?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -0,0 +1,89 @@\n+package com.photolocos.enterprise.dao;\n+\n+import com.photolocos.enterprise.dto.Photo;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Paramjyot Sandhu (sandhups@mail.uc.edu)\n+ *\n+ * PhotoDAO class to handle Photo related operations\n+ */\n+@Component\n+public class PhotoDAOStub implements IPhotoDAO {\n+\n+    Map<Integer, Photo> photos = new HashMap<>();\n+\n+    @Override\n+    public boolean createEntry(Photo photo) throws Exception {\n+        photos.put(photo.getPhotoId(), photo);\n+        if (photos.containsKey(photo.getPhotoId())) return true;\n+        return false;\n+    }\n+\n+    @Override\n+    public Set<Photo> fetchByTag(String[] tags) {\n+        List<Photo> photosCollection = new ArrayList<>(photos.values());\n+        Set<Photo> matchedPhotos = new HashSet<>();\n+\n+        for (Photo photo : photosCollection) {\n+            Set<String> tagsSet = new HashSet<>(Arrays.asList(photo.getTags()));\n+            for (String tag: tags) {\n+                if (tagsSet.contains(tag)) {\n+                    matchedPhotos.add(photo);\n+                    continue;\n+                }\n+            }\n+        }\n+\n+        return matchedPhotos;\n+    }\n+\n+    @Override\n+    public Set<Photo> fetchByRating(int rating) {\n+        List<Photo> photosCollection = new ArrayList<>(photos.values());\n+        Set<Photo> matchedPhotos = new HashSet<>();\n+\n+        for (Photo photo : photosCollection) {\n+                if (photo.getRating() == rating) {\n+                    matchedPhotos.add(photo);\n+                }\n+        }\n+\n+        return matchedPhotos;\n+    }\n+\n+    @Override\n+    public Set<Photo> fetchByType(String type) {\n+        List<Photo> photosCollection = new ArrayList<>(photos.values());\n+        Set<Photo> matchedPhotos = new HashSet<>();\n+\n+        for (Photo photo : photosCollection) {\n+            if (photo.getType().equals(type)) {\n+                matchedPhotos.add(photo);\n+            }\n+        }\n+\n+        return matchedPhotos;\n+    }\n+\n+    @Override\n+    public Map<Integer, Photo> fetchAll() {\n+        return photos;\n+    }\n+\n+    @Override\n+    public Set<Photo> fetchByLocation(String location) {\n+        List<Photo> photosCollection = new ArrayList<>(photos.values());\n+        Set<Photo> matchedPhotos = new HashSet<>();\n+\n+        for (Photo photo : photosCollection) {\n+            if (photo.getLocation().getState().equals(location)) {\n+                matchedPhotos.add(photo);\n+            }\n+        }\n+\n+        return matchedPhotos;\n+    }\n+}"
  },
  {
    "sha": "8ec9eaa8e4529802cedd7929c611728aec9a6ff0",
    "filename": "src/main/java/com/photolocos/enterprise/dto/Location.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dto/Location.java",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dto/Location.java",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/java/com/photolocos/enterprise/dto/Location.java?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -9,7 +9,7 @@\n  * @author Max Graman (gramanma@mail.uc.edu)\n  * TODO: JavaDoc.\n  */\n-public class LocationDTO implements Serializable {\n+public class Location implements Serializable {\n     /*\n      *\n      *  Fields, the attributes of the photos, if you will",
    "previous_filename": "src/main/java/com/photolocos/enterprise/dto/LocationDTO.java"
  },
  {
    "sha": "e3346f97e24a2594857b4649936683f091c5c27d",
    "filename": "src/main/java/com/photolocos/enterprise/dto/Photo.java",
    "status": "renamed",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dto/Photo.java",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/java/com/photolocos/enterprise/dto/Photo.java",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/java/com/photolocos/enterprise/dto/Photo.java?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -8,7 +8,7 @@\n  * @author Max Graman (gramanma@mail.uc.edu)\n  * TODO: JavaDoc.\n  */\n-public class PhotoDTO implements Serializable {\n+public class Photo implements Serializable {\n \n     /*\n      *\n@@ -18,7 +18,7 @@\n \n     private String type;\n     private String fileType;\n-    private String location;\n+    private Location location;\n     private String tips;\n     private String uri;\n     private String contributor;\n@@ -86,15 +86,15 @@ public void setTags(String[] tags) {\n      * Returns a string for a given photo.\n      * @return location, common name (EX: Cincinnati, OH)\n      */\n-    public String getLocation() {\n+    public Location getLocation() {\n         return location;\n     }\n \n     /**\n      * Sets a location for a given photo.\n      * @param location is NOT a location Object (EX: Cincinnati, OH).\n      */\n-    public void setLocation(String location) {\n+    public void setLocation(Location location) {\n         this.location = location;\n     }\n ",
    "previous_filename": "src/main/java/com/photolocos/enterprise/dto/PhotoDTO.java"
  },
  {
    "sha": "90ea61e1560f0cad9e2ef5e5dae1e39d2d568f7c",
    "filename": "src/main/resources/templates/fragments/topNav.html",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/resources/templates/fragments/topNav.html",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/resources/templates/fragments/topNav.html",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/resources/templates/fragments/topNav.html?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -0,0 +1,33 @@\n+<div th:fragment=\"navBar\">\n+    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n+        <a class=\"navbar-brand\" href=\"start.html\">PhotoLocos</a>\n+        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n+            <span class=\"navbar-toggler-icon\"></span>\n+        </button>\n+        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n+            <ul class=\"navbar-nav mr-auto\">\n+                <li class=\"nav-item\">\n+                    <a class=\"nav-link\" href=\"#\">Link</a>\n+                </li>\n+                <li class=\"nav-item dropdown\">\n+                    <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n+                        Dropdown\n+                    </a>\n+                    <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n+                        <a class=\"dropdown-item\" href=\"#\">Action</a>\n+                        <a class=\"dropdown-item\" href=\"#\">Another action</a>\n+                        <div class=\"dropdown-divider\"></div>\n+                        <a class=\"dropdown-item\" href=\"#\">Something else here</a>\n+                    </div>\n+                </li>\n+                <li>\n+                    <button type=\"button\" class=\"btn btn-outline-success\" data-toggle=\"modal\" data-target=\"#exampleModal\" data-whatever=\"@getbootstrap\">Upload a photo</button>\n+                </li>\n+            </ul>\n+            <form class=\"form-inline my-2 my-lg-0\">\n+                <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n+                <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n+            </form>\n+        </div>\n+    </nav>\n+</div>\n\\ No newline at end of file"
  },
  {
    "sha": "a2d43b0ffb04df7b7961c94e56e4d7e79c21c67c",
    "filename": "src/main/resources/templates/start.html",
    "status": "modified",
    "additions": 2,
    "deletions": 32,
    "changes": 34,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/resources/templates/start.html",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/main/resources/templates/start.html",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/main/resources/templates/start.html?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -1,5 +1,5 @@\n <!DOCTYPE html>\n-<html lang=\"en\">\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n <head>\n     <meta charset=\"UTF-8\">\n     <title>PhotoLocos | Cincinnati</title>\n@@ -12,37 +12,7 @@\n </head>\n <body class=\"bg-light\">\n     <!-- Main Nav Bar -->\n-    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n-        <a class=\"navbar-brand\" href=\"start.html\">PhotoLocos</a>\n-        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n-            <span class=\"navbar-toggler-icon\"></span>\n-        </button>\n-        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n-            <ul class=\"navbar-nav mr-auto\">\n-                <li class=\"nav-item\">\n-                    <a class=\"nav-link\" href=\"#\">Link</a>\n-                </li>\n-                 <li class=\"nav-item dropdown\">\n-                    <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n-                    Dropdown\n-                    </a>\n-                    <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n-                        <a class=\"dropdown-item\" href=\"#\">Action</a>\n-                        <a class=\"dropdown-item\" href=\"#\">Another action</a>\n-                        <div class=\"dropdown-divider\"></div>\n-                        <a class=\"dropdown-item\" href=\"#\">Something else here</a>\n-                    </div>\n-                </li>\n-                <li>\n-                    <button type=\"button\" class=\"btn btn-outline-success\" data-toggle=\"modal\" data-target=\"#exampleModal\" data-whatever=\"@getbootstrap\">Upload a photo</button>\n-                </li>\n-            </ul>\n-            <form class=\"form-inline my-2 my-lg-0\">\n-                <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n-                <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n-            </form>\n-        </div>\n-    </nav>\n+    <div th:replace=\"fragments/topNav :: navBar\"></div>\n     <!-- Main Nav Bar -->\n     <!-- Breadcrumbs Section -->\n     <nav aria-label=\"breadcrumb\"> <!-- This section is merely a placeholder for now, will be expanded and made more responsive -->"
  },
  {
    "sha": "6c045ecbc8150119e1f688d5bf57da1850782fc7",
    "filename": "src/test/java/com/photolocos/enterprise/EnterpriseApplicationTests.java",
    "status": "modified",
    "additions": 60,
    "deletions": 30,
    "changes": 90,
    "blob_url": "https://github.com/torserver/PhotoLocos/blob/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/test/java/com/photolocos/enterprise/EnterpriseApplicationTests.java",
    "raw_url": "https://github.com/torserver/PhotoLocos/raw/fa608e89e0c66b300f3a9fe21761e10e8b8112a4/src/test/java/com/photolocos/enterprise/EnterpriseApplicationTests.java",
    "contents_url": "https://api.github.com/repos/torserver/PhotoLocos/contents/src/test/java/com/photolocos/enterprise/EnterpriseApplicationTests.java?ref=fa608e89e0c66b300f3a9fe21761e10e8b8112a4",
    "patch": "@@ -2,62 +2,92 @@\n \n import com.photolocos.enterprise.dao.ILocationDAO;\n import com.photolocos.enterprise.dao.IPhotoDAO;\n-import com.photolocos.enterprise.dao.PhotoDAO;\n-import com.photolocos.enterprise.dto.PhotoDTO;\n+import com.photolocos.enterprise.dto.Location;\n+import com.photolocos.enterprise.dto.Photo;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.util.Assert;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.Arrays;\n import java.util.Set;\n \n-import static com.photolocos.enterprise.dao.PhotoDAO.*;\n-\n @SpringBootTest\n class EnterpriseApplicationTests {\n \n-    private PhotoDTO photo = new PhotoDTO();\n-\n-    @MockBean\n+    @Autowired\n     private ILocationDAO locationDAO;\n+    @Autowired\n     private IPhotoDAO photoDAO;\n \n \n     @Test\n     void contextLoads() {\n     }\n \n+    @Test\n+    void userSearchesLocation_returnsPhotoResults() throws Exception {\n+        givenPhotoWithStateLocationExists();\n+        returnsPhotoResults(userSearchesLocation());\n+    }\n+\n+    private void givenPhotoWithStateLocationExists() throws Exception {\n+        Photo photo = new Photo();\n+        Location location = new Location();\n+        location.setState(\"Ohio\");\n+\n+        photo.setLocation(location);\n+        photoDAO.createEntry(photo);\n+    }\n+\n+    private Set<Photo> userSearchesLocation() {\n+        return photoDAO.fetchByLocation(\"Ohio\");\n+    }\n+\n+    private void returnsPhotoResults(Set<Photo> results) {\n+        Assert.notNull(results, \"Photo search results returned null\");\n+        Assert.notEmpty(results, \"Photo search results returned empty set.\");\n+\n+        boolean locationMatches = true;\n+        for(Photo photo: results){\n+            if(!photo.getLocation().getState().equals(\"Ohio\")){\n+                locationMatches = false;\n+                break;\n+            }\n+        }\n+\n+        Assert.isTrue(locationMatches, \"Photo search returned an incorrect result set.\");\n+    }\n+\n     @Test\n     void fetchPhotoByTag_returnsRiverForTagRiver() throws Exception {\n-        givenPhotoDataAreAvailable();\n         whenPhotoAddedWithTagRiver();\n-        whenSearchPhotoWithTagRiver();\n-        thenReturnPhotosWithTagRiver();\n+        thenReturnPhotosWithTagRiver(whenSearchPhotoWithTagRiver());\n     }\n \n-    private void whenPhotoAddedWithTagRiver() {\n-        String[] tags = {\"river\"};\n-        photo.setTags(tags);\n-        Mockito.when(photoDAO.fetchByTag(tags)).thenReturn((Set<PhotoDTO>) photo);\n-    }\n+    private void whenPhotoAddedWithTagRiver() throws Exception {\n+        Photo photo = new Photo();\n+        photo.setTags(new String[]{\"river\"});\n \n-    private void givenPhotoDataAreAvailable() {\n-        //Mockito.when(PhotoDAO.save(photo)).thenReturn(photo);\n-        /**\n-         * Save method not yet created in PhotoDAO\n-         * */\n-        photoDAO.save(photo);\n+        photoDAO.createEntry(photo);\n     }\n \n-    private void whenSearchPhotoWithTagRiver() {\n-        String[] tag = {\"river\"};\n-        photo = (PhotoDTO) photoDAO.fetchByTag(tag);\n+    private Set<Photo> whenSearchPhotoWithTagRiver() {\n+        return photoDAO.fetchByTag(new String[]{\"river\"});\n     }\n \n-    private PhotoDTO thenReturnPhotosWithTagRiver() {\n-        return photo;\n+    private void thenReturnPhotosWithTagRiver(Set<Photo> results) {\n+        Assert.notNull(results, \"Photo search results returned null\");\n+        Assert.notEmpty(results, \"Photo search results returned empty set.\");\n+\n+        boolean photosMatch = true;\n+        for(Photo photo: results){\n+            if(!Arrays.asList(photo.getTags()).contains(\"river\")){\n+                photosMatch = false;\n+            }\n+        }\n+\n+        Assert.isTrue(photosMatch, \"Photo search returned an incorrect result set.\");\n     }\n \n "
  }
]
