[
  {
    "sha": "2f58365b8d5ea6ad70b04952fb5591b5fcb02a8d",
    "filename": "MapsWithEnumValuesReplaceWithEnumMap.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/GhatnekarPreeti/testDemo/blob/0b3960ee856e20fec75d408cc3024521c69f4522/MapsWithEnumValuesReplaceWithEnumMap.java",
    "raw_url": "https://github.com/GhatnekarPreeti/testDemo/raw/0b3960ee856e20fec75d408cc3024521c69f4522/MapsWithEnumValuesReplaceWithEnumMap.java",
    "contents_url": "https://api.github.com/repos/GhatnekarPreeti/testDemo/contents/MapsWithEnumValuesReplaceWithEnumMap.java?ref=0b3960ee856e20fec75d408cc3024521c69f4522",
    "patch": "@@ -0,0 +1,12 @@\n+public class MapsWithEnumValuesReplaceWithEnumMap {\n+\n+  public enum COLOR {\n+    RED, GREEN, BLUE, ORANGE;\n+  }\n+\n+  public void mapMood() {\n+\tMap<Integer,String> map=new HashMap<Integer,String>();      \n+\t// EMB-ISSUE: CodeIssueNames.MAPS_WITH_ENUM_VALUES_REPLACE_WITH_ENUMMAP\n+    Map<COLOR, String> moodMap = new HashMap<COLOR, String> ();\n+  }\n+}"
  },
  {
    "sha": "f49b97900204efcbe97e1d3573a54027f7721018",
    "filename": "MismatchRegexBoundariesShouldNotBeUsed.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/GhatnekarPreeti/testDemo/blob/0b3960ee856e20fec75d408cc3024521c69f4522/MismatchRegexBoundariesShouldNotBeUsed.java",
    "raw_url": "https://github.com/GhatnekarPreeti/testDemo/raw/0b3960ee856e20fec75d408cc3024521c69f4522/MismatchRegexBoundariesShouldNotBeUsed.java",
    "contents_url": "https://api.github.com/repos/GhatnekarPreeti/testDemo/contents/MismatchRegexBoundariesShouldNotBeUsed.java?ref=0b3960ee856e20fec75d408cc3024521c69f4522",
    "patch": "@@ -0,0 +1,19 @@\n+package javacodechecker;\n+\n+ \n+\n+import java.util.regex.Pattern;\n+\n+ \n+\n+ \n+\n+ \n+\n+ \n+\n+public class MismatchRegexBoundariesShouldNotBeUsed{\n+    // EMB-ISSUE: CodeIssueNames.MISMATCH_REGEX_BOUNDARIES_SHOULD_NOT_BE_USED\n+    pattern pattern = Pattern.compile(\"$[a-z]+^\");\n+    Matcher matcher = pattern.matcher(\"\");\n+    }"
  },
  {
    "sha": "178a984814b82209e43850456a74f4c1d7c12c9f",
    "filename": "ResourceLeak",
    "status": "modified",
    "additions": 47,
    "deletions": 34,
    "changes": 81,
    "blob_url": "https://github.com/GhatnekarPreeti/testDemo/blob/0b3960ee856e20fec75d408cc3024521c69f4522/ResourceLeak",
    "raw_url": "https://github.com/GhatnekarPreeti/testDemo/raw/0b3960ee856e20fec75d408cc3024521c69f4522/ResourceLeak",
    "contents_url": "https://api.github.com/repos/GhatnekarPreeti/testDemo/contents/ResourceLeak?ref=0b3960ee856e20fec75d408cc3024521c69f4522",
    "patch": "@@ -1,39 +1,52 @@\n-package com.mariten.kanatools;\n-\n-import com.sun.org.slf4j.internal.LoggerFactory;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import java.io.BufferedWriter;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.SecureRandom;\n-\n public class ResourceLeak {\n-    LoggerFactory logger = new LoggerFactory();\n-    public void process() {\n-        SecureRandom secureRandom = new SecureRandom();\n-        try {\n-            PrintWriter out = new PrintWriter(\"\");\n-            out.println(\"the text\");\n-            out.close();\n-            Cipher c1 = Cipher.getInstance(\"DES\");\n-        } catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException e) {\n-            System.err.println();\n+private int x ,y ,z;\n+\t\n+\tprivate boolean active;\n+\t\n+\t// EMB-ISSUE: CodeIssueNames.GETTERS_AND_SETTERS_SHOULD_ACCESS_THE_EXPECTED_FIELDS \n+\tpublic void setX(int val) {\n+\t\t//this is for test\n+\t\tthis.y = val;\n+\t}\n+\n+\t// EMB-ISSUE: CodeIssueNames.GETTERS_AND_SETTERS_SHOULD_ACCESS_THE_EXPECTED_FIELDS \n+\tpublic int getY() {\n+\t\treturn this.x;\n+\t}\n \n-       \n+\t// EMB-ISSUE: CodeIssueNames.GETTERS_AND_SETTERS_SHOULD_ACCESS_THE_EXPECTED_FIELDS\n+\t  public boolean isActive()\n+\t\t  {\n+\t\t    return x;\n+\t\t  }\n \n-        }\n+\t  \t\t// EMB-ISSUE: CodeIssueNames.GETTERS_AND_SETTERS_SHOULD_ACCESS_THE_EXPECTED_FIELDS\n+\t\t  public void setActive(boolean b)\n+\t\t  {\n+\t\t    this.y = b;\n+\t\t  }\n+\t\t  \n+\t\t  // EMB-ISSUE: CodeIssueNames.GETTERS_AND_SETTERS_SHOULD_ACCESS_THE_EXPECTED_FIELDS/no-detect\n+\t\t  public int getName() {\t\n+\t\t\t  System.out.println(\" \");\n+\t\t\t  return this.x;\n+\t\t\t}\n+\t\t  \n+\t\t\t// EMB-ISSUE: CodeIssueNames.GETTERS_AND_SETTERS_SHOULD_ACCESS_THE_EXPECTED_FIELDS/no-detect\n+\t\t  \tpublic void setName(int val) {\n+\t\t\t    System.out.println(\" \");\n+\t\t\t\tthis.y = val;\n+\t\t\t}\n+\t\t  \t\n+\t\t // EMB-ISSUE: CodeIssueNames.GETTERS_AND_SETTERS_SHOULD_ACCESS_THE_EXPECTED_FIELDS/no-detect \n+\t\t\tpublic void setZ(int val) {\n+\t\t\t\tthis.z = val;\n+\t\t\t}\n+\t\t\t\n+\t\t\tpublic int getZ(int val) {\n+\t\t\t\t // EMB-ISSUE: CodeIssueNames.GETTERS_AND_SETTERS_SHOULD_ACCESS_THE_EXPECTED_FIELDS/no-detect \n \n-    }\n-    public void process2() {\n-        try {\n-            PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"out.txt\", true)));\n-            out.println(\"the text\");\n-        } catch (IOException e) {\n-            /* logger.error(\"Resource is not closed anywhere.\",e);*/\n-        }\n-    }\n+\t\t\t\treturn x;\n+\t\t\t}\n+\t\t\t\n }"
  },
  {
    "sha": "0b9dfc5bdc86d8fb06db16dd1162971c0f5a11ae",
    "filename": "ResourceLeak.java",
    "status": "modified",
    "additions": 60,
    "deletions": 56,
    "changes": 116,
    "blob_url": "https://github.com/GhatnekarPreeti/testDemo/blob/0b3960ee856e20fec75d408cc3024521c69f4522/ResourceLeak.java",
    "raw_url": "https://github.com/GhatnekarPreeti/testDemo/raw/0b3960ee856e20fec75d408cc3024521c69f4522/ResourceLeak.java",
    "contents_url": "https://api.github.com/repos/GhatnekarPreeti/testDemo/contents/ResourceLeak.java?ref=0b3960ee856e20fec75d408cc3024521c69f4522",
    "patch": "@@ -1,63 +1,67 @@\n-package com.mariten.kanatools;\n-\n-import com.sun.org.slf4j.internal.LoggerFactory;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import java.io.BufferedWriter;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.SecureRandom;\n-\n+import org.springframework.boot.SpringApplication;\n+@ComponentScan(exclude=Book.class,scanBasePackages={\"net.javabeat\"})\n+@SpringBootApplication\n public class ResourceLeak {\n+private int x ,y ,z,apiCount;\n+\t\t\n+\t public static void main(String args[]) {  \n+\t     SpringApplication.run(SpringBootApplicationAndComponentScanNotBeUsedInDefaultPackage.class, args);\n+\t     System.out.println(\"Hello\");  \n+\t    }  \n \tprivate boolean active;\n-    public void setActive(boolean b)\n-          {\n-            this.active = b;\n-          }\n-\n-    LoggerFactory logger = new LoggerFactory();\n-\tString count;\n-    public void process() {\n-        SecureRandom secureRandom = new SecureRandom();\n-\t     System.runFinalizersOnExit(true);\n-        try {\n-            PrintWriter out = new PrintWriter(\"\");\n-            out.println(\"the text\");\n-            out.close();\n-            Cipher c1 = Cipher.getInstance(\"DES\");\n-        } catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException e) {\n-            System.err.println();\n-\n-       \n-\n-        }\n+\t\n+\t \n+\tpublic void setX(int val) {\n+\t\t//this is for test\n+\t\tthis.y = val;\n+\t}\n+\t\n+\tpublic int getAPISize()\n+\t{\n+\treturn apiCount;\n+\t\n+\t}\n \n-    }\n-    public void process2() {\n-        try {\n-            PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"out.txt\", true)));\n-            out.println(\"the text\");\n-        } catch (IOException e) {\n-            logger.error(\"Resource is not closed anywhere.\",e);\n-        }\n-    }\n+\t\n+\tpublic int getY() {\n+\t\treturn this.x;\n+\t}\n \n+\t\n+\t  public boolean isActive()\n+\t\t  {\n+\t\t    return x;\n+\t\t  }\n \n-\t  public void demo(String name, String surName,String count,String preeti) {\n-\t\tString surName = surName;\n-\t\tname = name;\n-\t\tthis.count = count;\n-\t        preeti += preeti;\n-\t\tpreeti = preeti;\n-\t\t r += r;\n-\t   }\n-public void method() {\n-\t\tThread myThread = new Thread();\n-\t\t// EMB-ISSUE: CodeIssueNames.RUN_SHOULD_NOT_BE_CALLED_DIRECTLY\n-\t\tmyThread.run();\n-\t}\n+\t  \t\t\n+\t\t  public void setActive(boolean b)\n+\t\t  {\n+\t\t    this.y = b;\n+\t\t  }\n+\t\t  \n+\t\t  \n+\t\t  public int getName() {\t\n+\t\t\t  System.out.println(\" \");\n+\t\t\t  return this.x;\n+\t\t\t}\n+\t\n \n+  \n+\t\t  \n+\t\t\t\n+\t\t  \tpublic void setName(int val) {\n+\t\t\t    System.out.println(\" \");\n+\t\t\t\tthis.y = val;\n+\t\t\t}\n+\t\t  \t\n+\t\t\n+\t\t\tpublic void setZ(int val) {\n+\t\t\t\tthis.z = val;\n+\t\t\t}\n+\t\t\t\n+\t\t\tpublic int getZ(int val) {\n+\t\t\t\t\n+\t\t\t\treturn x;\n+\t\t\t}\n+\t\t\t\n }"
  },
  {
    "sha": "8c5e1736c1c3776334dc715e92ed64ad66e96431",
    "filename": "newChecks.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/GhatnekarPreeti/testDemo/blob/0b3960ee856e20fec75d408cc3024521c69f4522/newChecks.java",
    "raw_url": "https://github.com/GhatnekarPreeti/testDemo/raw/0b3960ee856e20fec75d408cc3024521c69f4522/newChecks.java",
    "contents_url": "https://api.github.com/repos/GhatnekarPreeti/testDemo/contents/newChecks.java?ref=0b3960ee856e20fec75d408cc3024521c69f4522",
    "patch": "@@ -0,0 +1,74 @@\n+import java.io.*;\n+class Car implements Externalizable {\n+    static int age;\n+    String name;\n+    int year;\n+ \n+    Car(String n, int y)\n+    {\n+        this.name = n;\n+        this.year = y;\n+        age = 10;\n+    }\n+ \n+    @Override\n+    public void writeExternal(ObjectOutput out)\n+        throws IOException\n+    {\n+        out.writeObject(name);\n+        out.writeInt(age);\n+        out.writeInt(year);\n+    }\n+ \n+    @Override\n+    public void readExternal(ObjectInput in)\n+        throws IOException, ClassNotFoundException\n+    {\n+        name = (String)in.readObject();\n+        year = in.readInt();\n+        age = in.readInt();\n+    }\n+ \n+    @Override public String toString()\n+    {\n+        return (\"Name: \" + name + \"\\n\"\n+                + \"Year: \" + year + \"\\n\"\n+                + \"Age: \" + age);\n+    }\n+}\n+ \n+public class ExternExample {\n+    public static void main(String[] args)\n+    {\n+        Car car = new Car(\"Shubham\", 1995);\n+        Car newcar = null;\n+ \n+        // Serialize the car\n+        try {\n+            FileOutputStream fo\n+                = new FileOutputStream(\"gfg.txt\");\n+            ObjectOutputStream so\n+                = new ObjectOutputStream(fo);\n+            so.writeObject(car);\n+            so.flush();\n+        }\n+        catch (Exception e) {\n+            System.out.println(e);\n+        }\n+ \n+        // Deserializa the car\n+        try {\n+            FileInputStream fi\n+                = new FileInputStream(\"gfg.txt\");\n+            ObjectInputStream si\n+                = new ObjectInputStream(fi);\n+            newcar = (Car)si.readObject();\n+        }\n+        catch (Exception e) {\n+            System.out.println(e);\n+        }\n+ \n+        System.out.println(\"The original car is:\\n\" + car);\n+        System.out.println(\"The new car is:\\n\" + newcar);\n+    }\n+}"
  }
]
